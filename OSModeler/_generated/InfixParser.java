/* Generated By:JavaCC: Do not edit this line. InfixParser.java */
public class InfixParser implements InfixParserConstants {
        static java.util.HashMap variableHash = new java.util.HashMap(2741);
        /** variableNames holds the names of the variables that are not declared 
	by the user to in the <variables> elements 
	*/
        static java.util.Vector variableNames = new java.util.Vector() ;
        public java.util.Vector tokenVector = new java.util.Vector();
        public int[] rel_op_array = new int[2] ;
        public int rel_op_array_idx = 0;
        public int testidx = -1;
        public String newXpathString ="";
        public String variableName;
        /**
	* m_iKountTerms holds the number of terms in a function with 
	* more than one argument
	*/
        private int m_iKountTerms;
        /**
	* m_iMarkIndex holds the index in the tokenVector of
	* function with more than one argument
	*/
        private int m_iMarkIndex;

/* We use the following method if we just want to get the tokens
and don't care about parsing */
  final public java.util.Vector gettokenVector() throws ParseException {
Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case elem_fun:
      case trig_fun:
      case plus:
      case minus:
      case times:
      case power:
      case divide:
      case variable:
      case number:
      case leftparen:
      case rightparen:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case variable:
        t = jj_consume_token(variable);
              tokenVector.add(t.image);
        break;
      case plus:
        t = jj_consume_token(plus);
          tokenVector.add(t.image);
        break;
      case minus:
        t = jj_consume_token(minus);
           tokenVector.add(t.image);
        break;
      case times:
        t = jj_consume_token(times);
           tokenVector.add(t.image);
        break;
      case power:
        t = jj_consume_token(power);
           tokenVector.add(t.image);
        break;
      case divide:
        t = jj_consume_token(divide);
            tokenVector.add(t.image);
        break;
      case number:
        t = jj_consume_token(number);
            tokenVector.add(t.image);
        break;
      case elem_fun:
        t = jj_consume_token(elem_fun);
              tokenVector.add(t.image);
        break;
      case trig_fun:
        t = jj_consume_token(trig_fun);
              tokenVector.add(t.image);
        break;
      case leftparen:
        t = jj_consume_token(leftparen);
               tokenVector.add(t.image);
        break;
      case rightparen:
        t = jj_consume_token(rightparen);
                tokenVector.add(t.image);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

  // end of gettokenVector()

//objective or no relational op
  final public java.util.Vector start() throws ParseException {
 java.util.Vector returnVec;
    returnVec = infixNode();
    jj_consume_token(0);
                                {if (true) return returnVec;}
    throw new Error("Missing return statement in function");
  }

//
  final public java.util.Vector terminalNode() throws ParseException {
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case variable:
      variableNode();
      break;
    case number:
      numberNode();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

  // end of terminalNode()
  final public java.util.Vector numberNodeMod() throws ParseException {
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case number:
      t = jj_consume_token(number);
             tokenVector.add(t.image);
      break;
    case minus:
      t = jj_consume_token(minus);
            tokenVector.add("negate");
      t = jj_consume_token(number);
                                                      tokenVector.add(t.image);
      break;
    case plus:
      t = jj_consume_token(plus);
      t = jj_consume_token(number);
                        tokenVector.add(t.image);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

  // end of numberNodeMod()
  final public java.util.Vector stringNode() throws ParseException {
Token t;
String s;
    t = jj_consume_token(string);
            s = (String)t.image;  tokenVector.add("number:"+s.substring(1, s.length() - 1)+":string:");
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

  // end of stringNode()
  final public java.util.Vector variableNode() throws ParseException {
 Token t;
    t = jj_consume_token(variable);
// in this case variable has a coefficient of one
// has this variable been defined yet -- see if it got hashed
variableName = ( String)variableHash.get( t.image);
if(variableName == null){
        // we are using 0 based indexing on our variable index
        variableName = "variable:" + Integer.toString( variableHash.size() );
        // hash the variable
        variableNames.add( t.image);
        variableHash.put( t.image, variableName);
        tokenVector.add( variableName+":1[0]");
}
else tokenVector.add( variableName+":1[0]");
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

  final public java.util.Vector operatorNode() throws ParseException {
//System.out.println("operator node called");
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case plus:
      t = jj_consume_token(plus);
          tokenVector.add("plus");
      break;
    case minus:
      t = jj_consume_token(minus);
           tokenVector.add("minus");
      break;
    case times:
      t = jj_consume_token(times);
           tokenVector.add("times");
      break;
    case power:
      t = jj_consume_token(power);
           tokenVector.add("power");
      break;
    case divide:
      t = jj_consume_token(divide);
            tokenVector.add("divide");
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

  // end of OperatorNode()
  final public java.util.Vector relationalOperatorNode() throws ParseException {
//System.out.println("operator node called");
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case eq:
      t = jj_consume_token(eq);
        tokenVector.add("eq");
      break;
    case lt:
      t = jj_consume_token(lt);
        tokenVector.add("lt");
      break;
    case gt:
      t = jj_consume_token(gt);
        tokenVector.add("gt");
      break;
    case leq:
      t = jj_consume_token(leq);
         tokenVector.add("leq");
      break;
    case geq:
      t = jj_consume_token(geq);
         tokenVector.add("geq");
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

  // end of relationalOperatorNode()
  final public java.util.Vector xPathIndexNode() throws ParseException {
Token t;
    t = jj_consume_token(xPathIndex);
                tokenVector.add(t.image);
    t = jj_consume_token(leftparen);
               tokenVector.add(t.image);
    infixNode();
    t = jj_consume_token(rightparen);
                tokenVector.add(t.image);
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

  // end xPathIndexNode()
  final public java.util.Vector xpathNode() throws ParseException {
Token t;
    t = jj_consume_token(xpathNode);
newXpathString  = t.image.replaceAll("(leftParen)", "(");
newXpathString  = newXpathString.replaceAll("(rightParen)", ")");
tokenVector.add(newXpathString);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case leftparen:
      t = jj_consume_token(leftparen);
               tokenVector.add(t.image);
      xPathIndexNode();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
        jj_consume_token(32);
        xPathIndexNode();
      }
      t = jj_consume_token(rightparen);
                tokenVector.add(t.image);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

  // end xpathNode()
  final public java.util.Vector userF_functionNode() throws ParseException {
Token t;
    t = jj_consume_token(userF_function);
                    tokenVector.add(t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case leftparen:
      t = jj_consume_token(leftparen);
               tokenVector.add(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case elem_fun:
      case trig_fun:
      case if_function:
      case userF_function:
      case sum_function:
      case max_function:
      case userFunctionarg:
      case plus:
      case minus:
      case variable:
      case number:
      case leftparen:
      case xpathNode:
        infixNode();
        break;
      case string:
        stringNode();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        jj_consume_token(32);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case elem_fun:
        case trig_fun:
        case if_function:
        case userF_function:
        case sum_function:
        case max_function:
        case userFunctionarg:
        case plus:
        case minus:
        case variable:
        case number:
        case leftparen:
        case xpathNode:
          infixNode();
          break;
        case string:
          stringNode();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      t = jj_consume_token(rightparen);
                tokenVector.add(t.image);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

  // end userF_functionNode()

/* Parse the functions */
  final public java.util.Vector functionNode() throws ParseException {
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case elem_fun:
      t = jj_consume_token(elem_fun);
               tokenVector.add(t.image);
      break;
    case trig_fun:
      t = jj_consume_token(trig_fun);
                                                             tokenVector.add(t.image);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(leftparen);
               tokenVector.add(t.image);
    infixNode();
    t = jj_consume_token(rightparen);
tokenVector.add(t.image);
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

   // end functionNode()
  final public java.util.Vector sumfunctionNode() throws ParseException {
Token t;
m_iKountTerms = 1;
    t = jj_consume_token(sum_function);
                   tokenVector.add(t.image); m_iMarkIndex = tokenVector.size();
    t = jj_consume_token(leftparen);
               tokenVector.add(t.image);
    infixNode();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
 ++m_iKountTerms;
      jj_consume_token(32);
      infixNode();
    }
    t = jj_consume_token(rightparen);
                tokenVector.add(t.image); tokenVector.set(m_iMarkIndex - 1, "sum[" + m_iKountTerms + "]");
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

   // end sumfunctionNode()
  final public java.util.Vector maxfunctionNode() throws ParseException {
Token t;
m_iKountTerms = 1;
    t = jj_consume_token(max_function);
                   tokenVector.add(t.image); m_iMarkIndex = tokenVector.size();
    t = jj_consume_token(leftparen);
               tokenVector.add(t.image);
    infixNode();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
 ++m_iKountTerms;
      jj_consume_token(32);
      infixNode();
    }
    t = jj_consume_token(rightparen);
                tokenVector.add(t.image); tokenVector.set(m_iMarkIndex - 1, "max[" + m_iKountTerms + "]");
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

   // end maxfunctionNode()


/* Parse the logic if function */
  final public java.util.Vector if_functionNode() throws ParseException {
Token t;
    t = jj_consume_token(if_function);
                 tokenVector.add(t.image);
    t = jj_consume_token(leftparen);
               tokenVector.add(t.image);
    infixNode();
    if_functionNodeComponent();
    jj_consume_token(32);
    infixNode();
    jj_consume_token(32);
    infixNode();
    t = jj_consume_token(rightparen);
                tokenVector.add(t.image);
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

   // end if_functionNode()



/* The followin is used so we can LL(1) parse the if_function */
  final public java.util.Vector if_functionNodeComponent() throws ParseException {
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case eq:
    case geq:
    case leq:
    case gt:
    case lt:
      relationalOperatorNode();
      infixNode();
      break;
    default:
      jj_la1[15] = jj_gen;
      emptyProduction();
    }
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

   // end if_functionNodeComponent()
  final public java.util.Vector parseConstraint() throws ParseException {
    infixNode();
    relationalOperatorNode();
    infixNode();
    jj_consume_token(0);
  {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

                         /* end parseConstraint() */
  final public java.util.Vector lookAhead() throws ParseException {
    numberNodeMod();
    relationalOperatorNode();
 rel_op_array[rel_op_array_idx] = tokenVector.size() -1; rel_op_array_idx += 1;
  {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

                         /* end lookAhead() */
  final public java.util.Vector parseConstraint1() throws ParseException {
    infixNode();
    X();
    jj_consume_token(0);
  {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

                         /* end parseConstraint1() */
  final public java.util.Vector parseConstraint2() throws ParseException {
    infixNode();
    relationalOperatorNode();
 rel_op_array[rel_op_array_idx] = tokenVector.size() -1; rel_op_array_idx += 1;
    infixNode();
    jj_consume_token(0);
  {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

                         /* end parseConstraint2() */


/* the emptyProduction */
  final public void emptyProduction() throws ParseException {

  }

     // end emptyProduction()
  final public java.util.Vector X() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case eq:
    case geq:
    case leq:
    case gt:
    case lt:
      relationalOperatorNode();
                           rel_op_array[rel_op_array_idx] = tokenVector.size() -1; rel_op_array_idx += 1;
      numberNodeMod();
      break;
    default:
      jj_la1[16] = jj_gen;
      emptyProduction();
    }
    jj_consume_token(0);
  {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

                         /* end X() */
  final public java.util.Vector infixNode() throws ParseException {
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case elem_fun:
    case trig_fun:
    case if_function:
    case userF_function:
    case sum_function:
    case max_function:
    case userFunctionarg:
    case variable:
    case number:
    case leftparen:
    case xpathNode:
      nlNode();
      break;
    case minus:
      t = jj_consume_token(minus);
            tokenVector.add("negate");
      nlNode();
      break;
    case plus:
      t = jj_consume_token(plus);
      nlNode();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case plus:
      case minus:
      case times:
      case power:
      case divide:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_6;
      }
      operatorNode();
      nlNode();
    }
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

  // end infixNode() 
  final public void nlNode() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case number:
      numberNode();
      break;
    case variable:
      variableNode();
      break;
    case elem_fun:
    case trig_fun:
    case if_function:
    case userF_function:
    case sum_function:
    case max_function:
    case userFunctionarg:
    case leftparen:
    case xpathNode:
      otherNodes();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  //end nlNode
  final public java.util.Vector numberNode() throws ParseException {
Token t = new Token();
    t = jj_consume_token(number);
    multTermNode(t.image);
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

  // end of numberNode()
  final public java.util.Vector multTermNode(String s) throws ParseException {
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case times:
      jj_consume_token(times);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case variable:
        t = jj_consume_token(variable);
// has this variable been defined yet -- see if it got hashed
variableName = ( String)variableHash.get( t.image);
if(variableName == null){
        // we are using 0 based indexing on our variable index
        variableName = "variable:" + Integer.toString( variableHash.size() );
        // hash the variable 
        variableNames.add( t.image);
        variableHash.put( t.image, variableName);
        tokenVector.add( variableName+":"+s+"[0]");
}
else tokenVector.add( variableName+":"+s+"[0]");
        break;
      case number:
 tokenVector.add(s); tokenVector.add("times");
        t = jj_consume_token(number);
            tokenVector.add(t.image);
        break;
      case elem_fun:
      case trig_fun:
      case if_function:
      case userF_function:
      case sum_function:
      case max_function:
      case userFunctionarg:
      case leftparen:
      case xpathNode:
 tokenVector.add(s); tokenVector.add("times");
        otherNodes();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      emptyProduction();
                   tokenVector.add( s);
    }
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

  // end multTermNode() 
  final public java.util.Vector otherNodes() throws ParseException {
Token t = new Token();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case elem_fun:
    case trig_fun:
      functionNode();
      break;
    case max_function:
      maxfunctionNode();
      break;
    case sum_function:
      sumfunctionNode();
      break;
    case if_function:
      if_functionNode();
      break;
    case userF_function:
      userF_functionNode();
      break;
    case xpathNode:
      xpathNode();
      break;
    case userFunctionarg:
      t = jj_consume_token(userFunctionarg);
                     tokenVector.add(t.image);
      break;
    case leftparen:
      t = jj_consume_token(leftparen);
               tokenVector.add(t.image);
      infixNode();
      t = jj_consume_token(rightparen);
                                                                        tokenVector.add(t.image);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 {if (true) return tokenVector;}
    throw new Error("Missing return statement in function");
  }

  public InfixParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x7803e060,0x7803e060,0x18000000,0x10006000,0x3e000,0x7c0000,0x0,0x20000000,0xbc006fe0,0x0,0xbc006fe0,0x20000000,0x60,0x0,0x0,0x7c0000,0x7c0000,0xb8006fe0,0x3e000,0xb8000fe0,0xb8000fe0,0x8000,0xa0000fe0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  public InfixParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new InfixParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  public InfixParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new InfixParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  public InfixParser(InfixParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  public void ReInit(InfixParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[33];
    for (int i = 0; i < 33; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
