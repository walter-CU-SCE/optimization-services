= OSjava =

This is a work in progress.  Please report any missing steps or
problems.  Please note that Eclipse does not recognize changes done to
the projects (including copying files) until the project has been
"refreshed" (right click the project and select refresh).  The order
is important here otherwise additional steps (refresh and select
additional options) will need to be performed.  Please ensure the
scripts complete successfully before proceeding to the next step.

== Install Without a Web Server==

If you wish to use Java to build model instances, interface with the OS APIs, 
and solve problems locally do the following ( if you wish to incorporate an OS Web Service
inside Tomcat skip to the section  "Install with a Web Server):


* Download/Build ThirdParty
    * In OSThirdParty run `bash scripts/get-third-party.sh` to download and unpack third party jars. -- if the script runs successfully you should see "scripts/get-third-party.sh successful"
	(note: the get-third-party.sh requires a version of tar that supports the option --strip-components)
    * Copy the OSSolverService executable that is appropriate for your platform to OSThirdParty/lib/coin-or/OSSolverService. You can
	download OSSolverService for various  platforms at:
		http://www.coin-or.org/download/binary/OS/OSSolverService/
    * Alternatively, if you wish to build your own OSSolverService, in OSThirdParty run `bash scripts/build-coin-os.sh`
     
 * Use an Eclipse with WTP (Web Tools Platform)
   * if you are in Unix platform run sudo eclipse, on Windows simply start Eclipse
   * select help > install new software
   * in the "work with: " text box select, "Eclipse Galileo Repository" if available.  
     * If it is not available added by pasting http://download.eclipse.org/releases/galileo/ into text box and click add.
   * Select 
     * "Web, XML, and Java EE Development"
   * click Next, Accept, Finish.
   * Exit Eclipse

 * Start Eclipse
   * Import the projects OSThirdParty, OSCommon, and OSJavaExamples into eclipse
   * file > import > general > existing projects into workspace > next
   * for "select root directory" use browse to select the OSjava directory
   * select OSThirdParty, OSCommon, and OSJavaExamples and click finish.

 * Configure the OSCommon and OSThirdParty projects.  In the 'package' window right click each project 
   and do the following for each project:
     * project > properties > Project Facets > select: Java; Utility Module > Apply > OK 
 
* Test the example in OSJavaExamples
   * Right-click on OSJavaExamples and select "Run As Java Application"
   * The example, OSJavaInstanceDemo.java will build a simple linear program,
     call the OSSolverService in OSThirdParty/lib/coin-or/OSSolverService, and write the
     answer to the file result.osrl in OSJavaExamples





== Install An OS Web Server==

 * Use an Eclipse with WTP (Web Tools Platform)
   * if you are in Unix platform run sudo eclipse, on Windows simply start Eclipse
   * select help > install new software
   * in the "work with: " text box select, "Eclipse Galileo Repository" if available.  
     * If it is not available added by pasting http://download.eclipse.org/releases/galileo/ into text box and click add.
   * Select 
     * "Web, XML, and Java EE Development"
   * click Next, Accept, Finish.
   * Exit Eclipse

 * Download/Build ThirdParty
    * In OSThirdParty run `bash scripts/get-third-party.sh` to download and unpack third party jars. -- if the script runs successfully you should see "scripts/get-third-party.sh successful"
	(note: the get-third-party.sh requires a version of tar that supports the option --strip-components)
    * Copy the OSSolverService executable that is appropriate for your platform to OSThirdParty/lib/coin-or/OSSolverService. You can
	download OSSolverService for various  platforms at:
		http://www.coin-or.org/download/binary/OS/OSSolverService/
    * Alternatively, if you wish to build your own OSSolverService, in OSThirdParty run `bash scripts/build-coin-os.sh`

 * Install a local version of Tomcat
    * Download and install Apache Tomcat (see http://tomcat.apache.org/). If you wish to use a script to install on Ubuntu see
	the next bullet point. 
    * for Ubuntu, in OSThirdParty run `bash scripts/tomcat6-user.sh`
 * Start Eclipse
 * Add a Tomcat 6 "Server" to Eclipse
    * File > New > Other > 'Server' > 'select server type:' > Apache > Tomcat v6.0 Server > Next 
    * Select the Tomcat6 installation
      * Select `download or install` or select a local install of tomcat6 (for Ubuntu tomcat6-user.sh select Browse > Servers/local tomcat6)
      
 * Import the projects OSThirdParty OSCommon and OSServer into eclipse
   * file > import > general > existing projects into workspace > next
   * for "select root directory" use browse to select the OSjava directory
   * select OSThirdParty, OSCommon, OSJavaExamples,  and OSServer and click finish.

 * Configure the OSThirParty, OSCommon, and OSServer projects.  In the 'package' window right click each 
     project and do the following for each project:
   *OSThirdParty
     * project > properties > Project Facets > select: Java; Utility Module > Apply > OK 

   *OSCommon
     * project > properties > Project Facets > select: Java; Utility Module > Apply > OK
    
   *OSServer
     * project > properties > Project Facets > select: Java; Dynamic Web Module > OK (do not skip OK)
     * project > properties > Java EE Module Dependency > select OSThirdParty and OSCommon
 * To remove "WTP metadata" errors, if they exist, right click on projects and select "validate"

 * Start Server
   * Right click server and select `add or remove` and add `OSServer`
   * Right click server and select start.
   * Errors will be directed to the `console` view

 * Test server inside Tomcat
   * in OSServer/test run `bash test.sh` or `test.cmd` for Windows.


 * Deploy to the server outside of Tomcat 
   * Right click on the OSServer package and select export
   * Under Web select "WAR file"
   * Select "Next" and then save the WAR file in the webapps directory in the Tomcat root directory
   * Copy the OSSolverService executable to webapps/OSServer/WEB-INF/classes
   * start the server
   * IMPORTANT -- if your Java virtual machine is 1.5 you may have to add the saaj.jar file that is in
   * OSjava/OSThirdParty/lib/axis to webapps/OSServer/WEB-INF/lib
   * in OSServer/test run `bash test.sh` or `test.cmd` for Windows. (Note: you may get an error like Permission Denied. If so 
	it is necessary to make the OSSolverService installed by Tomcat executable. This file will have a path like:

/Users/kmartin/Documents/workspaceOSjava/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/OSServer/WEB-INF/classes/OSSolverService

	Try chmod u+x on the file OSSolverService. If this does not work see the next bullet point.
   * (if necessary) add grant tomcat6 policies in OSServer/doc/tomcat6-policy.txt


=======================================================
Additional Notes:

If you wish to use svn inside Eclipse do the following
   * in Ubuntu run sudo eclipse
   * select help > install new software
   * in the "work with: " text box select, "Eclipse Galileo Repository" if available.  
     * If it is not available added by pasting http://download.eclipse.org/releases/galileo/ into text box and click add.
   * Select 
     * "Collaboration"
     * "Programming Languages"
   * For Ubuntu find and unselect
     * Eclipse CVS Client
     * Eclipse Java Development Tools
   * click Next, Accept, Finish.
   * Wait and restart Eclipse
   * If asked on restart select "SVN Kit 1.3.0" and install, restart Eclipse when prompted.
   * Exit Eclipse

In Ubuntu the following may be necessary:

    * In OSThirdParty run `sudo bash scripts/install-packages-ubuntu-karmic.sh` or install similar packages for your distribution.

* Granting permisssions


Tomcat has an extensive security framework and ubuntu has it severely limited by default.install OSServer/doc/tomcat6-policy.txt /etc/tomcat6/policy.d/50coinos.policyThe following line also needs to be added to the first grant block  permission java.net.SocketPermission "www.coin-or.org:80", "connect, resolve";to allow remote fetches (your example hosted on coin-or.org)
