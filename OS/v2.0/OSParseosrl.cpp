#line 2 "OSParseosrl.cpp"

#line 4 "OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osrllex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 107
#define YY_END_OF_BUFFER 108
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[967] =
    {   0,
        1,    1,  105,  105,  103,  103,  104,  104,    0,    0,
        0,    0,    0,    0,    0,    0,  108,  106,    1,    1,
        2,   94,  106,    5,  106,    4,  106,    3,   94,  105,
      107,  103,  104,   96,   97,   96,  100,  101,  100,    1,
        0,    0,    3,    0,    0,    0,    0,    0,    0,    0,
        1,   94,   94,   94,   94,   94,   94,   94,   94,    5,
        4,    0,    5,   94,    6,    5,    4,    0,    0,   99,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       94,  105,  103,  104,    0,  102,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       94,   94,   94,   94,   94,   94,   94,   94,   94,    5,
        0,    0,    0,    5,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    5,   98,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   94,   94,   94,
       94,   94,   94,   94,   94,   94,    5,    5,   95,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   82,    0,    0,    0,    0,
        0,   78,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   74,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   94,   94,   94,
       94,   94,   94,   94,   94,   94,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   41,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   57,
        0,    0,    0,    0,    0,    0,    0,   57,    0,    0,
        0,   18,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   94,   94,   94,   94,   94,   94,   94,   94,    0,
       83,    0,    0,    0,    0,    0,   42,    0,    0,    0,

       79,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   75,    0,    0,    0,    0,    0,   41,
        0,    0,    0,    0,   33,   32,   86,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   18,    0,   20,   21,    0,    0,    0,
       22,   23,    0,   26,   27,    0,    0,   94,   94,   94,
       94,   94,   83,    0,    0,    0,    0,   42,    0,    0,
       79,    0,    0,    0,   34,    0,    0,    0,    0,    0,
        0,   58,    0,    0,   75,    0,    0,    0,    0,    0,
        0,    0,   52,    0,    0,    0,    0,    0,   68,    0,

       92,    0,   70,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   28,   29,   94,   94,
       94,   94,    0,    0,    0,    0,    0,   54,    0,    0,
        0,   34,    0,   87,    0,    0,    0,    0,   58,    0,
        0,    0,    0,    0,    0,    0,   91,   52,   53,    0,
        0,    0,    0,    0,    0,   37,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   94,   94,   94,   94,
        0,    0,    0,    0,   54,    0,    0,    0,   87,    0,
        0,    0,   69,    0,   38,    0,    0,   71,    0,    0,
        0,    0,   35,    0,    0,    0,    0,   59,    0,    0,

        0,   39,    0,    0,   66,   37,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   94,   94,   94,   94,   94,   94,   94,   94,    0,
        0,    0,   36,    0,    0,    0,   61,    0,    0,    0,
       40,    0,    0,    0,   69,   38,    0,   71,    0,    0,
        0,   35,    0,    0,   93,   59,   60,    0,    0,   39,
        0,    0,    0,   76,    0,    0,    0,    0,   24,   25,
        0,    0,    0,    0,    0,    0,    0,    0,   94,   94,
       94,   94,   94,   94,   94,   94,    0,    0,   36,    0,
        0,   61,    0,    0,   40,    0,    0,    0,   67,    0,

        0,    0,   72,    0,    0,   80,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   94,   94,   94,   94,   94,   94,   94,   94,
        0,    0,    0,    0,    0,    0,    0,    0,   67,    0,
        0,   77,   84,    0,    0,    0,    0,    0,    0,   43,
        0,    0,    0,    0,    0,    0,    0,   17,    0,    0,
       16,    0,    0,    0,    0,    0,   15,    0,    0,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
        0,    0,   73,    0,    0,    0,   81,    0,    0,    0,
       45,    0,   77,    0,    0,   64,    0,    0,   46,   88,

       43,   44,    0,    0,    0,    0,   30,   31,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   94,   94,
       94,   94,   94,   94,   94,    0,   85,   73,    0,    0,
       81,    0,    0,   48,   45,    0,   62,    0,    0,   49,
       89,   46,   47,    0,    0,    0,   17,    0,   16,    0,
        0,    0,    0,    0,    0,    7,   15,    0,    0,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   85,    0,
        0,   51,    0,   65,   48,    0,   90,   49,   50,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   94,
       94,   94,   94,   94,   94,   94,   94,    0,   63,   51,

       65,    0,    0,    0,    0,    0,    0,    0,    0,    7,
        0,    0,   94,   94,   94,   94,   94,   94,   94,   94,
       63,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   94,   94,   94,   94,   94,   94,   94,   94,    0,
       55,    0,    0,    0,    0,    0,    0,    8,    0,    9,
        0,   94,   94,   94,   94,   94,   94,   94,   94,    0,
        0,    0,   10,    0,    0,    0,    0,    0,    0,   19,
       94,   94,   94,   94,   94,   94,    0,   56,    0,   11,
        0,    0,    0,    0,    8,    9,    0,   94,   94,   94,
       94,   56,    0,   10,    0,    0,    0,   19,   94,   94,

       94,   11,    0,    0,    0,   94,   94,   94,    0,    0,
        0,   94,   94,   94,    0,    0,    0,   94,   94,   94,
        0,    0,    0,   94,   94,   94,    0,    0,    0,   94,
       94,   94,    0,    0,    0,   94,   94,   94,    0,    0,
        0,   94,   94,   94,    0,    0,    0,   12,   94,   94,
       94,    0,    0,   13,    0,   94,   94,    0,   14,    0,
       12,   94,    0,   13,   14,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    8,    1,    1,    9,    1,
        1,    8,   10,    1,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    8,    1,   15,
       16,   17,   18,    8,    8,    8,   19,   20,   21,   22,
        8,    8,   23,    8,    8,    8,    8,   24,   25,    8,
        8,   26,   27,   28,   29,   30,    8,    8,    8,    8,
        1,    1,    1,    1,    8,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   40,    8,   41,   42,   43,
       44,   45,    8,   46,   47,   48,   49,   50,    8,   51,
       52,   53,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    2,    2,    2,    2,    1,    3,    2,    4,    1,
        1,    2,    2,    2,    2,    1,    5,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[978] =
    {   0,
        0,   23, 2489, 2488, 2496, 2495, 2492, 2490,    0,    0,
        0,    0,   39,   40,   41,   42, 2498, 2639,   59,  108,
     2639,   52,    8,  157, 2466,    7,  187, 2639,   54,    0,
     2639,    0,    0, 2639, 2639, 2471, 2639, 2639, 2464,    0,
     2462,  225, 2639, 2447, 2442, 2441,   17,   18, 2431, 2441,
      274,   59,   65,   69,   85,  101,  103,  119,   70,  114,
      125, 2447,    0,  154, 2639,    0,   41, 2459,  292, 2639,
     2416, 2409, 2421, 2412, 2410, 2416,   82,  132, 2411, 2417,
      131,    0,    0,    0, 2430, 2639, 2403, 2399, 2402,  138,
     2397, 2386, 2385, 2380, 2384, 2382, 2374, 2361, 2363, 2360,

      167,  183,  177,  211,  219,  173,  235,  260,  182,  222,
       71, 2369, 2376,  231, 2378, 2342, 2328, 2339, 2330, 2321,
     2329,  253,  258, 2323, 2330, 2317, 2318, 2302, 2292, 2304,
     2288, 2293, 2275, 2275, 2281, 2272, 2266, 2275, 2245, 2249,
        6,  269, 2639, 2243, 2256, 2240, 2230, 2233, 2237, 2238,
      341, 2235, 2236, 2230, 2222, 2208, 2205,  295,  300,  356,
      306,  333,  334,  352,  353,  361, 2228, 2639, 2639, 2195,
     2206, 2190, 2180, 2189, 2171, 2171, 2162, 2163, 2169, 2160,
     2164, 2172, 2155, 2146,   85, 2140, 2144, 2149, 2134,  376,
     2133, 2144, 2126, 2123, 2127, 2106, 2088, 2087, 2074,  109,

     2067, 2076, 2066,  381, 2064, 2058,  144, 2070, 2057,  347,
      204,  403, 2062, 2060,  409,  413, 2031,  406,  388,  442,
      476,  407,  416,  510,  544,  417,  457, 2023, 2028, 2014,
      465, 2011,  481, 2011, 2008, 2013, 1970, 1970, 1970, 1968,
      160, 1966,  491, 1966, 1974, 1956, 1968,  515,  497, 1978,
     1963, 1959, 1944,  533, 1938, 1943, 1933, 1931, 1943,  538,
     1929, 1917, 1906, 1905, 1914, 1901, 1876, 2639, 1868, 1864,
     1898,  550,  559,  520, 1854, 1850,  564,  569,  579,  583,
      594,  556,  418,  609,  419,  573,  643,  677,  711,  599,
      615, 1849, 1862, 1843, 1857,  624,  629, 1867, 1852,  633,

      649, 1844, 1833,  658, 1810, 1816, 1806, 1803, 1815,  666,
     1793, 1800,  682,  692, 1803, 1786, 1800, 1799, 1768,  698,
      704, 1773, 1761, 1768,  726, 2639, 2639, 1773, 1752, 1743,
     1745,  731, 1769, 1748, 1736, 1750, 1734,  735, 1721, 1723,
     1683, 1683,  717,  745, 1721, 2639, 2639, 1699, 1696, 1716,
     2639, 2639, 1711, 2639, 2639,  751,  755,  745,  747,  749,
      751,  791,  785, 1659, 1673, 1672, 1654,  795,  799, 1659,
      806, 1647, 1650,  815,  819,  825, 1655, 1648, 1622, 1626,
      831,  835, 1622, 1602,  841, 1616, 1616, 1604, 1602, 1608,
      847, 1612,  851, 1593, 1585, 1568, 1579, 1566, 2639,  865,

     2639, 1586, 2639, 1561, 1558,  869, 1552, 1551, 1533, 1520,
      776, 1528, 1527,  856,  874, 1540, 2639, 2639,  653,  864,
      866,  874, 1510, 1499, 1498, 1504,  887,  911, 1481, 1476,
     1438,  915,  919,  923, 1450, 1440,  927,  935,  943, 1458,
      951, 1434, 1427, 1414,  955, 1422, 2639,  959, 2639,  971,
     1396, 1412,  975, 1399,  991,  998, 1387, 1392, 1391, 1007,
     1011, 1015, 1385, 1002, 1380,  891, 1039,  452, 1061, 1012,
     1380, 1356, 1034, 1369, 1054, 1060, 1336, 1354, 1064, 1068,
     1338, 1096, 1100, 1104, 1112, 1333, 1120, 1124, 1335, 1326,
     1333, 1128, 1136, 1292, 1313, 1144, 1295, 1148, 1276, 1236,

     1162, 1166, 1252, 1250, 2639, 1170, 1239, 1212, 1228, 1178,
     1220, 1218, 1182, 1153, 1199, 1198,   39, 1183, 1178, 1173,
     1168, 1197, 1175, 1191, 1193, 1194, 1195, 1219, 1210, 1154,
     1155, 1189, 1218, 1140, 1154, 1244, 1253, 1142, 1128, 1260,
     1264, 1128, 1128, 1268, 1276, 1284, 1108, 1288, 1096, 1094,
     1089, 1292, 1104, 1103, 2639, 1296, 2639, 1073, 1080, 1300,
     1076, 1089, 1067, 2639, 1079, 1053, 1071, 1089, 2639, 2639,
     1047, 1044, 1044, 1045, 1035, 1012, 1004, 1016, 1239, 1292,
     1293, 1294, 1295, 1296, 1304, 1320,  986,  960, 1317,  975,
      974, 1340,  951,  958, 1344,  949,  967, 1354, 1358,  941,

     1362,  936, 2639,  933,  929, 2639,  926,  930, 1370,  905,
      908,  914, 1386, 1375, 1390, 1394, 1409,  908,  893,  906,
     1413,  887, 1451, 1485, 1429, 1386, 1387, 1388, 1435, 1414,
      887, 1456,  885,  869, 1466,  861,  868, 1475, 1491,  851,
     1500, 1505, 2639,  835,  840,  819, 1509, 1525,  840, 1531,
      805,  806, 1545, 1549, 1553, 1516, 1568,  239,  783, 1572,
      245,  792,  769,  766,  766, 1576,  387,  775,  738, 1591,
      728, 1568, 1595, 1510, 1569, 1587, 1592, 1615, 1609, 1611,
     1649, 1653, 1669,  724,  736, 1673, 1677,  726, 1681, 1689,
     1697,  709, 1705,  698, 1709, 2639, 1714,  725, 1730, 2639,

     1734, 2639,  710, 1738, 1744,  719, 2639, 2639,  714,  665,
      706,  656,  267,  638, 1748,  672,  641,  622, 1591, 1709,
     1735, 1745, 1765, 1757, 1758, 1771, 1792, 1796,  619, 1800,
     1811, 1816, 1820, 1824, 1836,  634, 2639, 1840,  632, 1844,
     2639, 1858, 2639,  595, 1862, 1558,  392,  593,  504,  583,
      571,  573,  562,  545, 1866,  554,  604,  532,  509, 1859,
     1837, 1860, 1864, 1870, 1872, 1906, 1892, 1900, 1915, 1921,
     1926, 1937, 1942, 1946, 1952,  491, 2639, 1958, 2639,  495,
      494,  478,  478,  470,  459,  460,  485,  441,  452, 1944,
     1950, 1952, 1953, 1955, 1954, 1956, 1982, 2004, 2008, 2020,

     2024,  433,  427,  421,  420,  403,  414,  409,  389,  637,
      388,  392, 2016, 2017, 2018, 2019, 2021, 2020, 2022, 2047,
     2042,  380,  379,  355,  353,  328,  331,  331, 2068, 2072,
      305, 2064, 2066, 2069, 2065, 2075, 2089, 2116, 2088,  310,
     2639,  291, 2122,  291,  280,  287, 2126,  653, 2141,  687,
     2145, 2119, 2165, 2137, 2138, 2139, 2173, 2188, 2192, 2196,
     2212, 2220,  905,  287,  276,  271,  307,  301, 2227,  964,
     2242, 2246, 2238, 2239, 2220, 2261, 2277, 2281, 2293,  984,
      299,  257,  244,  253, 1020, 1043,  280, 2297, 2289, 2290,
     2120, 2312,  278, 1076,  228,  233,  237, 1234, 2291, 2205,

     2306, 1321,  212,  229,  216, 2308, 2316, 2317,  213,  187,
      169, 2332, 2333, 2334,  179,  163,  152, 2336, 2345, 2349,
      138,  128,  128, 2358, 2361, 2362,  114,  102,   70, 2364,
     2373, 2374,   75,   55,   50, 2386, 2390, 2398,   47,   41,
     2413, 2409, 2414, 2437,   30, 2460, 2464, 1349, 2438, 2484,
     2488, 2492, 2507, 1445,   54, 2511, 2516, 2534, 1495,   53,
     1631, 2538,    4, 1658, 1662, 2639, 2585, 2590, 2595, 2600,
     2605, 2610, 2615, 2619, 2624, 2628, 2633
    } ;

static yyconst flex_int16_t yy_def[978] =
    {   0,
      967,  967,  968,  968,  969,  969,  970,  970,  971,  971,
      971,  971,  972,  972,  973,  973,  966,  966,  966,  974,
      966,  974,  966,  974,  966,   24,  966,  966,   24,  975,
      966,  976,  977,  966,  966,  966,  966,  966,  966,   19,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      974,   24,   24,   24,   24,   24,   24,   24,   24,  966,
      966,  966,   24,   24,  966,   24,   24,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
       24,  975,  976,  977,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,

       24,   24,   24,   24,   24,   24,   24,   24,   24,  966,
      966,  966,  966,   24,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,   24,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,

      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,   24,   24,   24,   24,   24,   24,   24,   24,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,

      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,   24,   24,   24,
       24,   24,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,

      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,   24,   24,
       24,   24,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,   24,   24,   24,   24,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,

      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,   24,   24,   24,   24,   24,   24,   24,   24,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,   24,   24,
       24,   24,   24,   24,   24,   24,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,

      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,   24,   24,  624,   24,   24,   24,  624,   24,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  624,
      624,   24,  624,   24,   24,   24,   24,  624,   24,   24,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,

      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,   24,   24,
      469,   24,  624,   24,   24,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,   24,
       24,   24,   24,   24,   24,  624,   24,   24,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,   24,
       24,   24,   24,   24,   24,   24,   24,  966,  966,  966,

      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,   24,   24,   24,   24,   24,   24,   24,   24,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,   24,   24,   24,   24,   24,  624,  624,   24,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,   24,  624,   24,   24,   24,  624,  624,  624,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      624,  624,   24,   24,   24,  624,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  624,   24,   24,
       24,  966,  966,  966,  966,  966,  966,  966,   24,   24,

       24,  966,  966,  966,  966,   24,   24,   24,  966,  966,
      966,   24,   24,   24,  966,  966,  966,   24,   24,   24,
      966,  966,  966,   24,   24,   24,  966,  966,  966,   24,
       24,   24,  966,  966,  966,   24,   24,   24,  966,  966,
      966,   24,   24,  624,  966,  966,  966,  966,   24,  624,
      624,  966,  966,  966,  966,  624,  624,  966,  966,  966,
      966,  624,  966,  966,  966,    0,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966
    } ;

static yyconst flex_int16_t yy_nxt[2693] =
    {   0,
       18,   19,   20,   19,   20,   18,   21,  965,   21,   18,
       23,   24,   25,   26,   27,   18,   28,   18,   66,   60,
       67,   61,   29,   18,   19,   20,   19,   20,   18,   21,
       62,   21,   18,   23,   24,   25,   26,   27,   18,   28,
       18,   35,   35,   38,   38,   29,  201,   95,   97,   36,
       36,  202,   66,  966,   67,  966,  964,  961,   39,   39,
       40,   40,   40,   40,  966,   96,  966,   52,  966,   98,
      573,   41,   52,   42,   52,   43,  952,   81,   52,   52,
      113,  113,   52,   52,  167,   52,  574,  946,   52,   52,
       52,   44,   45,   52,  945,  101,  941,   46,   52,   52,

      109,   47,  940,  102,   52,   52,   48,   49,   50,   40,
       51,   40,   51,  132,   52,  939,   52,  935,  103,   52,
       41,   52,   42,   52,   43,  242,  133,  110,  134,  135,
      243,  104,   52,  106,  111,   52,   60,   52,   61,   52,
       53,   54,  934,  260,   52,  111,   55,  261,  111,  105,
       56,   52,  142,   52,  107,   57,   58,   59,  966,  111,
      966,  108,  933,  113,  113,   52,  136,  114,  929,  966,
       63,  966,  147,  966,   52,  137,  928,   64,  268,  138,
       52,  137,  261,  139,  927,  138,   52,   52,   52,  139,
       52,   64,   68,   52,  310,   52,   52,   52,  311,   69,

      923,   52,   52,   52,   70,  271,  271,   52,  271,  922,
      272,   52,  272,  921,  158,  917,   52,   52,  163,   71,
       72,  916,  166,   73,   52,   74,   75,  160,   76,  159,
       77,   52,   52,   78,   79,  110,   80,   69,  915,   52,
      709,  709,  111,  709,  114,   52,  711,  711,   52,  711,
      911,   52,  161,   52,  910,   52,  111,   71,   72,  909,
      162,   73,  905,   87,   88,   52,   89,  904,   77,   52,
      903,   90,   91,   52,   80,   40,   51,   40,   51,  164,
       52,  902,   52,  898,  176,  751,   41,  897,   42,   52,
       43,  752,  180,  896,   52,  895,  753,  177,  165,  178,

      179,  181,  894,   52,  886,  182,   53,   54,   52,  183,
      885,  884,   55,   52,  883,   52,   56,  882,  866,   52,
       52,   57,   58,   59,  116,  117,   52,  865,  118,  218,
      119,  120,  219,  121,   52,  122,  864,  861,  123,  124,
      221,  125,  210,  210,  210,  210,   52,   52,  210,  210,
      210,  210,  860,   52,   52,  851,  211,  210,  220,  210,
      220,  846,  211,  845,  222,   52,   52,   52,   52,   52,
      223,  211,   52,   52,   52,  844,   52,  248,  248,  248,
      248,   52,  248,  248,  248,  248,  224,   52,  716,  716,
       52,  716,  249,  709,  709,   52,  709,  249,  250,  843,

      225,   52,  842,  265,  273,  273,  273,  273,   52,  226,
      277,  277,  277,  277,  279,  279,  279,  279,  274,   52,
       52,  841,   52,  840,  278,  831,   52,   52,  280,   52,
       52,   52,   52,  283,  830,  829,   52,   52,   52,   52,
       52,  285,  282,  210,  220,  210,  220,  828,  827,  826,
      286,  289,   52,   52,  825,   52,  359,  211,  290,  290,
      290,  290,   52,  824,  360,   52,  296,  296,  296,  296,
      823,  822,   52,  291,  812,  811,   52,  273,  284,  273,
      284,  297,  300,  300,  300,  300,   52,  298,  810,   52,
      523,  274,  313,  313,  313,  313,   52,  301,  320,  320,

      320,  320,  809,  292,  808,  711,  711,  314,  711,  807,
       52,  277,  287,  277,  287,  302,  248,  248,  248,  248,
      806,  345,  345,   52,  345,  278,  346,  805,  347,  315,
       52,  249,  804,  803,  325,  325,  325,  325,  802,  332,
      332,  332,  332,  789,   52,  279,  288,  279,  288,  326,
      333,  344,  344,  344,  344,  787,  787,   52,  787,  280,
      273,  273,  273,  273,   52,  277,  277,  277,  277,   52,
      350,  350,  788,  350,  274,  351,   52,  352,   52,  278,
      279,  279,  279,  279,  353,  353,   52,  353,  786,  354,
       52,  355,  785,   52,  280,  356,  356,  356,  356,  358,

      290,  290,  290,  290,  784,  716,  716,   52,  716,  357,
      273,  284,  273,  284,  783,  291,  363,  363,  363,  363,
      361,  782,   52,  781,  274,  296,  296,  296,  296,   52,
      368,  368,  368,  368,  300,  300,  300,  300,  787,  787,
      297,  787,  780,   52,  277,  287,  277,  287,  777,  301,
      371,  371,  371,  371,  867,  867,   52,  867,  278,  374,
      374,  374,  374,   52,  776,  770,   52,  381,  381,  381,
      381,  759,  758,   52,  375,  757,  754,   52,  279,  288,
      279,  288,  382,  313,  313,  313,  313,   52,  868,  868,
       52,  868,  280,  385,  385,  385,  385,   52,  314,  320,

      320,  320,  320,  750,  467,  391,  391,  391,  391,  749,
      748,   52,  356,  362,  356,  362,  392,  747,  271,  271,
      393,  271,  746,  272,   52,  272,  357,  325,  325,  325,
      325,   52,  332,  332,  332,  332,  406,  406,  406,  406,
      744,  741,  326,  333,  737,   52,  344,  344,  344,  344,
      736,  393,  356,  356,  356,  356,  416,  416,   52,  416,
       52,  417,   52,  418,   52,   52,  357,   52,  732,   52,
      730,   52,  729,  421,   52,  422,  718,  345,  345,   52,
      345,   52,  346,   52,  347,   52,  363,  363,  363,  363,
      419,  420,  356,  362,  356,  362,  368,  368,  368,  368,

      427,  427,  427,  427,   52,  717,  357,  371,  371,  371,
      371,   52,  715,  714,  713,  428,  374,  374,  374,  374,
      432,  432,  432,  432,  712,   52,  433,  433,  433,  433,
      710,  375,  381,  381,  381,  381,  439,  439,  439,  439,
      704,  434,  385,  385,  385,  385,  703,  382,  391,  391,
      391,  391,  448,  448,  448,  448,  700,  350,  350,  392,
      350,  696,  351,  393,  352,  449,  455,  455,  455,  455,
      406,  406,  406,  406,  695,  353,  353,   52,  353,   52,
      354,  456,  355,  694,   52,  393,   52,   52,  427,  427,
      427,  427,  416,  416,   52,  416,  692,  417,   52,  418,

       52,  469,  689,  428,  688,  470,  881,  881,   52,  881,
      685,  468,  475,  475,  475,  475,  432,  432,  432,  432,
      433,  433,  433,  433,  479,  479,  479,  479,  482,  482,
      482,  482,  684,  681,  669,  434,  484,  484,  484,  484,
      665,  664,  663,  483,  439,  439,  439,  439,  653,  652,
      651,  485,  487,  487,  487,  487,  492,  492,  492,  492,
      448,  448,  448,  448,  647,  887,  887,  488,  887,  646,
      645,  493,  496,  496,  496,  496,  501,  501,  501,  501,
      644,  494,  643,  497,  640,  893,  893,  498,  893,  638,
      637,  502,  455,  455,  455,  455,  636,  635,  503,  506,

      506,  506,  506,  504,  634,  633,  632,  456,  510,  510,
      510,  510,  501,  501,  501,  501,  513,  513,  513,  513,
      516,  867,  867,  498,  867,   52,  517,  502,  518,  519,
      514,  520,   52,  631,  511,  532,  532,  532,  532,  512,
      513,  522,  513,  522,  868,  868,   52,  868,  622,  621,
      533,  529,   52,  620,  514,  475,  475,  475,  475,   52,
      534,  536,  536,  536,  536,  479,  479,  479,  479,  540,
      540,  540,  540,   52,   52,  619,  537,  881,  881,  524,
      881,   52,  618,  617,  541,  525,  616,  526,  527,  615,
      528,  542,  614,  613,  612,   52,  543,  482,  482,  482,

      482,  545,  545,  545,  545,  484,  484,  484,  484,  611,
      610,  609,  483,  546,  546,  546,  546,  608,  607,  606,
      485,  487,  487,  487,  487,  548,  548,  548,  548,  492,
      492,  492,  492,  605,  604,  603,  488,  552,  552,  552,
      552,  602,  601,  600,  493,  496,  496,  496,  496,  556,
      556,  556,  556,  597,  568,  568,  497,  568,  596,  569,
      498,  570,  557,  501,  501,  501,  501,  560,  560,  560,
      560,  506,  506,  506,  506,  594,  593,  591,  502,  510,
      510,  510,  510,  513,  513,  513,  513,  590,   52,  588,
      532,  532,  532,  532,  498,   52,  587,  514,  513,  522,

      513,  522,  578,  577,   52,  533,   52,   52,   52,   52,
       52,   52,  514,   52,   52,   52,  576,   52,  579,  589,
      589,  589,  589,   52,  581,   52,  575,   52,   52,   52,
       52,   52,   52,  584,  580,  887,  887,  583,  887,   52,
      582,  572,  571,  567,  586,  536,  536,  536,  536,  585,
      566,  565,   52,   52,  592,  592,  592,  592,  564,   52,
      537,  540,  540,  540,  540,  595,  595,  595,  595,  598,
      598,  598,  598,   52,  563,  562,  541,  545,  545,  545,
      545,  623,  561,  559,  599,  546,  546,  546,  546,  548,
      548,  548,  548,  552,  552,  552,  552,  556,  556,  556,

      556,  560,  560,  560,  560,   52,   52,   52,   52,   52,
      558,  555,   52,   52,   52,   52,   52,   52,  589,  589,
      589,  589,  893,  893,   52,  893,   52,   52,   52,   52,
       52,  626,  625,   52,  624,  627,  554,  628,   52,  553,
       52,  592,  592,  592,  592,  595,  595,  595,  595,  629,
      955,  955,  630,  955,   52,  598,  598,  598,  598,  639,
      639,  639,  639,  641,  641,  641,  641,  551,  550,  549,
      599,  648,  648,  648,  648,  547,  568,  568,  642,  568,
      544,  569,  649,  570,  539,  538,  650,  654,  654,  654,
      654,  655,  655,  655,  655,  657,  657,  657,  657,   52,

       52,   52,  650,  535,  531,  656,   52,   52,   52,  658,
      660,  660,  660,  660,  666,  666,  666,  666,  530,  521,
      675,   52,  677,  515,  661,  509,  508,   52,  667,  507,
      660,  673,  660,  673,   52,  676,  666,  678,  666,  678,
      659,  505,  500,  662,  661,  499,  960,  960,   52,  960,
      667,  668,  655,  670,  655,  670,  495,  682,  682,  682,
      682,  680,  491,  674,   52,  490,  656,  686,  686,  686,
      686,   52,  683,  679,  489,   52,  690,  690,  690,  690,
      486,   52,  687,  481,  480,   52,  657,  671,  657,  671,
      478,  691,  639,  639,  639,  639,  963,  963,   52,  963,

      658,  641,  641,  641,  641,   52,  693,  693,  693,  693,
      697,  697,  697,  697,  477,  476,  642,  706,  706,   52,
      706,  698,  707,   52,  708,  699,  648,  648,  648,  648,
       52,  672,  701,  701,  701,  701,  474,  649,  473,  472,
      471,  650,  720,  466,   52,  702,  705,  705,  705,  705,
      654,  654,  654,  654,  655,  655,  655,  655,  465,  706,
      706,  699,  706,  464,  707,  650,  708,  463,  656,  657,
      657,  657,  657,  660,  660,  660,  660,  666,  666,  666,
      666,   52,   52,  658,  462,  461,  460,  661,   52,   52,
      459,  667,  655,  670,  655,  670,  660,  673,  660,  673,

       52,  458,   52,   52,   52,   52,  656,   52,  457,  454,
      661,   52,   52,  453,  721,  719,  666,  678,  666,  678,
      452,   52,   52,  451,   52,   52,   52,  450,  447,   52,
      667,   52,  955,  955,  722,  955,  760,   52,  723,  724,
      446,   52,  445,   52,  444,   52,  443,  442,  441,  725,
      726,  726,  726,  726,  682,  682,  682,  682,  440,  960,
      960,   52,  960,  963,  963,  727,  963,  438,  437,  683,
      728,  728,  728,  728,  686,  686,  686,  686,  731,  731,
      731,  731,  733,  733,  733,  733,  436,  435,  431,  687,
      690,  690,  690,  690,  430,  429,  426,  734,  735,  735,

      735,  735,  425,  424,  423,  691,  693,  693,  693,  693,
      738,  738,  738,  738,  415,  697,  697,  697,  697,  414,
      413,  739,   52,  412,  411,  740,  698,  410,  409,   52,
      699,  742,  742,  742,  742,  701,  701,  701,  701,  745,
      745,  745,  745,   52,  743,  705,  705,  705,  705,  755,
      755,  755,  755,  762,  740,  408,  761,  407,   52,  763,
      699,   52,   52,  756,  764,   52,  755,  766,  755,  766,
       52,   52,  726,  726,  726,  726,  405,   52,   52,   52,
      756,  404,  403,  765,  402,  401,  400,  727,  767,  399,
      398,   52,   52,  769,  769,  769,  769,  728,  728,  728,

      728,  771,  771,  771,  771,  397,  396,  768,  395,  394,
      390,   52,  731,  731,  731,  731,  772,  773,  773,  773,
      773,  733,  733,  733,  733,  775,  775,  775,  775,  389,
      388,  387,  774,  386,  384,  383,  734,  735,  735,  735,
      735,  738,  738,  738,  738,  778,  778,  778,  778,  380,
       52,  379,  739,  378,  377,  376,  740,   52,  779,  742,
      742,  742,  742,  745,  745,  745,  745,  755,  755,  755,
      755,   52,   52,   52,  373,  791,  372,   52,  740,   52,
       52,  756,  370,   52,   52,   52,  369,  367,  366,  790,
       52,  365,   52,   52,   52,  793,  364,  349,   52,  348,

      794,  343,  342,  792,   52,   52,   52,  755,  766,  755,
      766,  341,   52,   52,  340,  795,  769,  769,  769,  769,
       52,  756,  798,  798,  798,  798,   52,  771,  771,  771,
      771,  339,  796,  338,  797,  337,  336,  799,  800,  800,
      800,  800,  772,  773,  773,  773,  773,  801,  801,  801,
      801,  335,   52,  775,  775,  775,  775,   52,  774,  778,
      778,  778,  778,   52,   52,   52,   52,   52,   52,   52,
       52,  334,   52,   52,   52,   52,   52,  331,   52,  330,
      329,  328,  813,  327,   52,  324,   52,   52,   52,   52,
      819,  323,  816,  322,  815,   52,  818,  321,  319,  814,

      817,  318,   52,  317,  820,  798,  798,  798,  798,  821,
      821,  821,  821,  316,  312,  309,   52,  308,  307,  306,
      799,  800,  800,  800,  800,  801,  801,  801,  801,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,  821,  821,  821,  821,  305,  304,  303,
       52,  833,   52,  835,   52,   52,   52,  299,  832,  836,
       52,  295,  294,  293,  834,  281,  837,   52,  838,  847,
      847,  847,  847,  849,  849,  849,  849,   52,   52,   52,
      839,   52,   52,  848,   52,   52,   52,  850,   52,   52,
      847,  857,  847,  857,  276,   52,  275,  855,   52,   52,

       52,   52,  270,   52,  848,  856,  269,  267,   52,   52,
      266,  852,  853,  264,  263,  262,  854,  849,  858,  849,
      858,  259,   52,  862,  862,  862,  862,  847,  847,  847,
      847,  850,   52,   52,  258,   52,  257,  863,  859,   52,
       52,  848,  849,  849,  849,  849,  869,  869,  869,  869,
       52,   52,   52,   52,  901,  256,  850,   52,   52,   52,
      870,  255,   52,  254,  253,  871,  862,  872,  862,  872,
      875,   52,   52,   52,  847,  857,  847,  857,  252,  251,
      863,  247,  873,  246,  245,  874,  244,  241,  848,  849,
      858,  849,  858,  869,  876,  869,  876,  877,  877,  877,

      877,  240,  239,  850,  238,  237,  236,  870,  235,  234,
      233,   52,  878,  879,  879,  879,  879,  232,   52,   52,
      231,  862,  862,  862,  862,   52,  230,  880,  869,  869,
      869,  869,  229,   52,   52,  863,  228,  227,   52,  907,
       52,  167,  870,  879,  888,  879,  888,  862,  872,  862,
      872,   52,   52,  217,   52,  216,  215,  880,   52,   52,
      891,  863,  869,  876,  869,  876,  214,  213,  889,  212,
      209,  208,   52,   52,  207,  206,  870,  890,  877,  877,
      877,  877,  892,  892,  892,  892,  205,  204,   52,  203,
      200,  199,   52,  878,  879,  879,  879,  879,  879,  888,

      879,  888,   52,   52,   52,  198,  197,   52,  880,   52,
       52,   52,  880,  892,  892,  892,  892,  196,  195,   52,
      194,   52,  193,   52,   52,   52,   52,  899,   52,   52,
       52,  908,  192,  906,  191,  190,   52,   52,  189,  900,
       52,  913,   52,   52,  188,   52,   52,   52,  187,   52,
       52,  914,   52,   52,   52,  912,   52,  918,   52,  186,
      185,  184,   52,  175,  174,   52,   52,  919,   52,   52,
      924,   52,  173,  172,   52,   52,  171,   52,   52,   52,
      920,   52,   52,   52,   52,  170,   52,   52,  169,  167,
      168,  925,   52,   52,   52,   52,   52,  926,   52,   52,

      157,  156,  932,   52,  930,  155,   52,   52,   52,  931,
       52,   52,  936,  937,  947,  947,  947,  947,   52,  154,
       52,  938,   52,  153,   52,  152,  942,   52,  948,   52,
      151,  150,   52,  149,   52,  148,  146,  943,  947,  951,
      947,  951,  145,   52,  944,  144,  143,  141,   52,  140,
      131,   52,  948,  130,  129,  128,  949,  127,   52,  126,
      950,  953,  953,  953,  953,  947,  947,  947,  947,  115,
      112,  100,   52,   99,   94,  954,   93,   92,   65,  948,
       86,   85,   65,   52,  956,  953,  957,  953,  957,  947,
      951,  947,  951,  958,  958,  958,  958,  966,   31,  954,

       31,   31,   31,  948,   31,   31,  966,  959,  953,  953,
      953,  953,  958,  962,  958,  962,  966,  953,  957,  953,
      957,  966,  954,  966,  966,  966,  959,  966,  966,  966,
       52,  954,  966,  966,   52,  958,  958,  958,  958,  958,
      962,  958,  962,  966,  966,  966,  966,  966,  966,  959,
      966,  966,  966,  959,  966,  966,  966,   52,  966,  966,
      966,  966,   52,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,   52,   22,   22,   22,   22,   22,
       30,   30,   30,   30,   30,   32,   32,   32,   32,   32,

       33,   33,   33,   33,   33,   31,   31,   31,   31,   31,
       34,   34,   34,   34,   34,   37,   37,   37,   37,   37,
       52,  966,  966,   52,   82,   82,   82,   82,   83,   83,
      966,   83,   83,   84,   84,   84,  966,   84,   17,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966

    } ;

static yyconst flex_int16_t yy_chk[2693] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,  963,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   26,   23,
       26,   23,    1,    2,    2,    2,    2,    2,    2,    2,
       23,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   13,   14,   15,   16,    2,  141,   47,   48,   13,
       14,  141,   67,   22,   67,   22,  960,  955,   15,   16,
       19,   19,   19,   19,   22,   47,   22,   29,   22,   48,
      517,   19,   52,   19,   29,   19,  945,   29,   53,   52,
      111,  111,   54,   59,  111,   53,  517,  940,   29,   54,
       59,   19,   19,   52,  939,   53,  935,   19,   55,   53,

       59,   19,  934,   54,   59,   55,   19,   19,   19,   20,
       20,   20,   20,   77,   56,  933,   57,  929,   55,   55,
       20,   56,   20,   57,   20,  185,   77,   60,   77,   77,
      185,   56,   58,   57,   60,   56,   61,   57,   61,   58,
       20,   20,  928,  200,   81,   61,   20,  200,   60,   56,
       20,   81,   81,   58,   57,   20,   20,   20,   24,   61,
       24,   58,  927,   64,   64,   81,   78,   64,  923,   24,
       24,   24,   90,   24,   64,   78,  922,   24,  207,   78,
      101,   90,  207,   78,  921,   90,  106,  101,   64,   90,
      103,   24,   27,  106,  241,  109,  102,  103,  241,   27,

      917,  101,  109,  102,   27,  211,  211,  106,  211,  916,
      211,  103,  211,  915,  101,  911,  109,  102,  106,   27,
       27,  910,  109,   27,  104,   27,   27,  103,   27,  102,
       27,  104,  105,   27,   27,  110,   27,   42,  909,  105,
      658,  658,  110,  658,  114,  104,  661,  661,  107,  661,
      905,  114,  104,  105,  904,  107,  110,   42,   42,  903,
      105,   42,  897,   42,   42,  114,   42,  896,   42,  107,
      895,   42,   42,  108,   42,   51,   51,   51,   51,  107,
      108,  893,  142,  887,  122,  713,   51,  884,   51,  142,
       51,  713,  123,  883,  108,  882,  713,  122,  108,  122,

      122,  123,  881,  142,  868,  123,   51,   51,  158,  123,
      867,  866,   51,  159,  865,  158,   51,  864,  846,  161,
      159,   51,   51,   51,   69,   69,  161,  845,   69,  158,
       69,   69,  159,   69,  159,   69,  844,  842,   69,   69,
      161,   69,  151,  151,  151,  151,  162,  163,  210,  210,
      210,  210,  840,  162,  163,  831,  151,  160,  160,  160,
      160,  828,  210,  827,  162,  164,  165,  162,  163,  160,
      163,  160,  164,  165,  166,  826,  160,  190,  190,  190,
      190,  166,  204,  204,  204,  204,  164,  165,  667,  667,
      160,  667,  190,  747,  747,  166,  747,  204,  190,  825,

      165,  219,  824,  204,  212,  212,  212,  212,  219,  166,
      215,  215,  215,  215,  216,  216,  216,  216,  212,  218,
      222,  823,  219,  822,  215,  812,  218,  222,  216,  223,
      226,  283,  285,  219,  811,  809,  223,  226,  283,  285,
      218,  222,  218,  220,  220,  220,  220,  808,  807,  806,
      223,  226,  283,  285,  805,  220,  283,  220,  227,  227,
      227,  227,  220,  804,  285,  468,  231,  231,  231,  231,
      803,  802,  468,  227,  789,  788,  220,  221,  221,  221,
      221,  231,  233,  233,  233,  233,  468,  231,  787,  221,
      468,  221,  243,  243,  243,  243,  221,  233,  249,  249,

      249,  249,  786,  227,  785,  749,  749,  243,  749,  784,
      221,  224,  224,  224,  224,  233,  248,  248,  248,  248,
      783,  274,  274,  224,  274,  224,  274,  782,  274,  243,
      224,  248,  781,  780,  254,  254,  254,  254,  776,  260,
      260,  260,  260,  759,  224,  225,  225,  225,  225,  254,
      260,  272,  272,  272,  272,  756,  756,  225,  756,  225,
      273,  273,  273,  273,  225,  277,  277,  277,  277,  282,
      278,  278,  758,  278,  273,  278,  282,  278,  225,  277,
      279,  279,  279,  279,  280,  280,  286,  280,  754,  280,
      282,  280,  753,  286,  279,  281,  281,  281,  281,  282,

      290,  290,  290,  290,  752,  757,  757,  286,  757,  281,
      284,  284,  284,  284,  751,  290,  291,  291,  291,  291,
      286,  750,  284,  748,  284,  296,  296,  296,  296,  284,
      297,  297,  297,  297,  300,  300,  300,  300,  810,  810,
      296,  810,  744,  284,  287,  287,  287,  287,  739,  300,
      301,  301,  301,  301,  848,  848,  287,  848,  287,  304,
      304,  304,  304,  287,  736,  729,  419,  310,  310,  310,
      310,  718,  717,  419,  304,  716,  714,  287,  288,  288,
      288,  288,  310,  313,  313,  313,  313,  419,  850,  850,
      288,  850,  288,  314,  314,  314,  314,  288,  313,  320,

      320,  320,  320,  712,  419,  321,  321,  321,  321,  711,
      710,  288,  289,  289,  289,  289,  321,  709,  343,  343,
      321,  343,  706,  343,  289,  343,  289,  325,  325,  325,
      325,  289,  332,  332,  332,  332,  338,  338,  338,  338,
      703,  698,  325,  332,  694,  289,  344,  344,  344,  344,
      692,  338,  356,  356,  356,  356,  357,  357,  358,  357,
      359,  357,  360,  357,  361,  358,  356,  359,  688,  360,
      685,  361,  684,  360,  671,  361,  669,  411,  411,  358,
      411,  359,  411,  360,  411,  361,  363,  363,  363,  363,
      358,  359,  362,  362,  362,  362,  368,  368,  368,  368,

      369,  369,  369,  369,  362,  668,  362,  371,  371,  371,
      371,  362,  665,  664,  663,  369,  374,  374,  374,  374,
      375,  375,  375,  375,  662,  362,  376,  376,  376,  376,
      659,  374,  381,  381,  381,  381,  382,  382,  382,  382,
      652,  376,  385,  385,  385,  385,  651,  381,  391,  391,
      391,  391,  393,  393,  393,  393,  649,  414,  414,  391,
      414,  646,  414,  391,  414,  393,  400,  400,  400,  400,
      406,  406,  406,  406,  645,  415,  415,  420,  415,  421,
      415,  400,  415,  644,  420,  406,  421,  422,  427,  427,
      427,  427,  466,  466,  422,  466,  640,  466,  420,  466,

      421,  421,  637,  427,  636,  422,  863,  863,  422,  863,
      634,  420,  428,  428,  428,  428,  432,  432,  432,  432,
      433,  433,  433,  433,  434,  434,  434,  434,  437,  437,
      437,  437,  633,  631,  622,  433,  438,  438,  438,  438,
      620,  619,  618,  437,  439,  439,  439,  439,  612,  611,
      610,  438,  441,  441,  441,  441,  445,  445,  445,  445,
      448,  448,  448,  448,  608,  870,  870,  441,  870,  607,
      605,  445,  450,  450,  450,  450,  453,  453,  453,  453,
      604,  445,  602,  450,  600,  880,  880,  450,  880,  597,
      596,  453,  455,  455,  455,  455,  594,  593,  453,  456,

      456,  456,  456,  453,  591,  590,  588,  455,  460,  460,
      460,  460,  461,  461,  461,  461,  462,  462,  462,  462,
      464,  885,  885,  460,  885,  470,  464,  461,  464,  464,
      462,  464,  470,  587,  461,  473,  473,  473,  473,  461,
      467,  467,  467,  467,  886,  886,  470,  886,  578,  577,
      473,  470,  467,  576,  467,  475,  475,  475,  475,  467,
      473,  476,  476,  476,  476,  479,  479,  479,  479,  480,
      480,  480,  480,  467,  469,  575,  476,  894,  894,  469,
      894,  469,  574,  573,  480,  469,  572,  469,  469,  571,
      469,  480,  568,  567,  566,  469,  480,  482,  482,  482,

      482,  483,  483,  483,  483,  484,  484,  484,  484,  565,
      563,  562,  482,  485,  485,  485,  485,  561,  559,  558,
      484,  487,  487,  487,  487,  488,  488,  488,  488,  492,
      492,  492,  492,  554,  553,  551,  487,  493,  493,  493,
      493,  550,  549,  547,  492,  496,  496,  496,  496,  498,
      498,  498,  498,  543,  514,  514,  496,  514,  542,  514,
      496,  514,  498,  501,  501,  501,  501,  502,  502,  502,
      502,  506,  506,  506,  506,  539,  538,  535,  501,  510,
      510,  510,  510,  513,  513,  513,  513,  534,  523,  531,
      532,  532,  532,  532,  510,  523,  530,  513,  522,  522,

      522,  522,  521,  520,  524,  532,  525,  526,  527,  523,
      522,  524,  522,  525,  526,  527,  519,  522,  523,  533,
      533,  533,  533,  529,  525,  524,  518,  525,  526,  527,
      529,  522,  528,  527,  524,  898,  898,  526,  898,  528,
      525,  516,  515,  512,  529,  536,  536,  536,  536,  528,
      511,  509,  579,  528,  537,  537,  537,  537,  508,  579,
      536,  540,  540,  540,  540,  541,  541,  541,  541,  544,
      544,  544,  544,  579,  507,  504,  540,  545,  545,  545,
      545,  579,  503,  500,  544,  546,  546,  546,  546,  548,
      548,  548,  548,  552,  552,  552,  552,  556,  556,  556,

      556,  560,  560,  560,  560,  580,  581,  582,  583,  584,
      499,  497,  580,  581,  582,  583,  584,  585,  589,  589,
      589,  589,  902,  902,  585,  902,  580,  581,  582,  583,
      584,  582,  581,  586,  580,  583,  495,  584,  585,  494,
      586,  592,  592,  592,  592,  595,  595,  595,  595,  585,
      948,  948,  586,  948,  586,  598,  598,  598,  598,  599,
      599,  599,  599,  601,  601,  601,  601,  491,  490,  489,
      598,  609,  609,  609,  609,  486,  614,  614,  601,  614,
      481,  614,  609,  614,  478,  477,  609,  613,  613,  613,
      613,  615,  615,  615,  615,  616,  616,  616,  616,  626,

      627,  628,  613,  474,  472,  615,  626,  627,  628,  616,
      617,  617,  617,  617,  621,  621,  621,  621,  471,  465,
      626,  627,  628,  463,  617,  459,  458,  630,  621,  457,
      625,  625,  625,  625,  630,  627,  629,  629,  629,  629,
      616,  454,  452,  617,  625,  451,  954,  954,  630,  954,
      629,  621,  623,  623,  623,  623,  446,  632,  632,  632,
      632,  630,  444,  625,  623,  443,  623,  635,  635,  635,
      635,  623,  632,  629,  442,  625,  638,  638,  638,  638,
      440,  629,  635,  436,  435,  623,  624,  624,  624,  624,
      431,  638,  639,  639,  639,  639,  959,  959,  624,  959,

      624,  641,  641,  641,  641,  624,  642,  642,  642,  642,
      647,  647,  647,  647,  430,  429,  641,  656,  656,  624,
      656,  647,  656,  674,  656,  647,  648,  648,  648,  648,
      674,  624,  650,  650,  650,  650,  426,  648,  425,  424,
      423,  648,  674,  416,  674,  650,  653,  653,  653,  653,
      654,  654,  654,  654,  655,  655,  655,  655,  413,  746,
      746,  653,  746,  412,  746,  654,  746,  410,  655,  657,
      657,  657,  657,  660,  660,  660,  660,  666,  666,  666,
      666,  672,  675,  657,  409,  408,  407,  660,  672,  675,
      405,  666,  670,  670,  670,  670,  673,  673,  673,  673,

      676,  404,  672,  675,  719,  677,  670,  676,  402,  398,
      673,  719,  677,  397,  675,  672,  678,  678,  678,  678,
      396,  676,  679,  395,  680,  719,  677,  394,  392,  679,
      678,  680,  961,  961,  676,  961,  719,  670,  677,  679,
      390,  673,  389,  679,  388,  680,  387,  386,  384,  680,
      681,  681,  681,  681,  682,  682,  682,  682,  383,  964,
      964,  678,  964,  965,  965,  681,  965,  380,  379,  682,
      683,  683,  683,  683,  686,  686,  686,  686,  687,  687,
      687,  687,  689,  689,  689,  689,  378,  377,  373,  686,
      690,  690,  690,  690,  372,  370,  367,  689,  691,  691,

      691,  691,  366,  365,  364,  690,  693,  693,  693,  693,
      695,  695,  695,  695,  353,  697,  697,  697,  697,  350,
      349,  695,  720,  348,  345,  695,  697,  342,  341,  720,
      697,  699,  699,  699,  699,  701,  701,  701,  701,  704,
      704,  704,  704,  720,  699,  705,  705,  705,  705,  715,
      715,  715,  715,  721,  704,  340,  720,  339,  722,  721,
      705,  721,  721,  715,  721,  722,  723,  723,  723,  723,
      724,  725,  726,  726,  726,  726,  337,  724,  725,  722,
      723,  336,  335,  722,  334,  333,  331,  726,  724,  330,
      329,  724,  725,  727,  727,  727,  727,  728,  728,  728,

      728,  730,  730,  730,  730,  328,  324,  725,  323,  322,
      319,  723,  731,  731,  731,  731,  730,  732,  732,  732,
      732,  733,  733,  733,  733,  734,  734,  734,  734,  318,
      317,  316,  732,  315,  312,  311,  733,  735,  735,  735,
      735,  738,  738,  738,  738,  740,  740,  740,  740,  309,
      761,  308,  738,  307,  306,  305,  738,  761,  740,  742,
      742,  742,  742,  745,  745,  745,  745,  755,  755,  755,
      755,  761,  760,  762,  303,  761,  302,  763,  745,  760,
      762,  755,  299,  764,  763,  765,  298,  295,  294,  760,
      764,  293,  765,  760,  762,  763,  292,  276,  763,  275,

      764,  271,  270,  762,  764,  767,  765,  766,  766,  766,
      766,  269,  767,  768,  267,  765,  769,  769,  769,  769,
      768,  766,  770,  770,  770,  770,  767,  771,  771,  771,
      771,  266,  767,  265,  768,  264,  263,  770,  772,  772,
      772,  772,  771,  773,  773,  773,  773,  774,  774,  774,
      774,  262,  766,  775,  775,  775,  775,  790,  773,  778,
      778,  778,  778,  791,  790,  792,  793,  795,  794,  796,
      791,  261,  792,  793,  795,  794,  796,  259,  790,  258,
      257,  256,  790,  255,  791,  253,  792,  793,  795,  794,
      796,  252,  793,  251,  792,  797,  795,  250,  247,  791,

      794,  246,  797,  245,  797,  798,  798,  798,  798,  799,
      799,  799,  799,  244,  242,  240,  797,  239,  238,  237,
      798,  800,  800,  800,  800,  801,  801,  801,  801,  813,
      814,  815,  816,  818,  817,  819,  813,  814,  815,  816,
      818,  817,  819,  821,  821,  821,  821,  236,  235,  234,
      813,  814,  815,  816,  818,  817,  819,  232,  813,  817,
      820,  230,  229,  228,  815,  217,  818,  820,  819,  829,
      829,  829,  829,  830,  830,  830,  830,  832,  835,  833,
      820,  820,  834,  829,  832,  835,  833,  830,  836,  834,
      837,  837,  837,  837,  214,  836,  213,  835,  832,  835,

      833,  839,  209,  834,  837,  836,  208,  206,  839,  836,
      205,  832,  833,  203,  202,  201,  834,  838,  838,  838,
      838,  199,  839,  843,  843,  843,  843,  847,  847,  847,
      847,  838,  852,  891,  198,  837,  197,  843,  839,  852,
      891,  847,  849,  849,  849,  849,  851,  851,  851,  851,
      854,  855,  856,  852,  891,  196,  849,  854,  855,  856,
      851,  195,  838,  194,  193,  852,  853,  853,  853,  853,
      856,  854,  855,  856,  857,  857,  857,  857,  192,  191,
      853,  189,  854,  188,  187,  855,  186,  184,  857,  858,
      858,  858,  858,  859,  859,  859,  859,  860,  860,  860,

      860,  183,  182,  858,  181,  180,  179,  859,  178,  177,
      176,  853,  860,  861,  861,  861,  861,  175,  900,  857,
      174,  862,  862,  862,  862,  900,  173,  861,  869,  869,
      869,  869,  172,  875,  858,  862,  171,  170,  859,  900,
      875,  167,  869,  871,  871,  871,  871,  872,  872,  872,
      872,  873,  874,  157,  875,  156,  155,  871,  873,  874,
      875,  872,  876,  876,  876,  876,  154,  153,  873,  152,
      150,  149,  873,  874,  148,  147,  876,  874,  877,  877,
      877,  877,  878,  878,  878,  878,  146,  145,  871,  144,
      140,  139,  872,  877,  879,  879,  879,  879,  888,  888,

      888,  888,  889,  890,  899,  138,  137,  876,  879,  889,
      890,  899,  888,  892,  892,  892,  892,  136,  135,  901,
      134,  906,  133,  889,  890,  899,  901,  889,  906,  907,
      908,  901,  132,  899,  131,  130,  907,  908,  129,  890,
      901,  907,  906,  888,  128,  912,  913,  914,  127,  918,
      907,  908,  912,  913,  914,  906,  918,  912,  919,  126,
      125,  124,  920,  121,  120,  919,  912,  913,  914,  920,
      918,  924,  119,  118,  925,  926,  117,  930,  924,  919,
      914,  925,  926,  920,  930,  116,  931,  932,  115,  113,
      112,  919,  924,  931,  932,  925,  926,  920,  930,  936,

      100,   99,  926,  937,  924,   98,  936,  931,  932,  925,
      937,  938,  930,  931,  941,  941,  941,  941,  938,   97,
      936,  932,  942,   96,  937,   95,  936,  943,  941,  942,
       94,   93,  938,   92,  943,   91,   89,  937,  944,  944,
      944,  944,   88,  942,  938,   87,   85,   80,  943,   79,
       76,  949,  944,   75,   74,   73,  942,   72,  949,   71,
      943,  946,  946,  946,  946,  947,  947,  947,  947,   68,
       62,   50,  949,   49,   46,  946,   45,   44,   41,  947,
       39,   36,   25,  944,  949,  950,  950,  950,  950,  951,
      951,  951,  951,  952,  952,  952,  952,   17,    8,  950,

        7,    6,    5,  951,    4,    3,    0,  952,  953,  953,
      953,  953,  956,  956,  956,  956,    0,  957,  957,  957,
      957,    0,  953,    0,    0,    0,  956,    0,    0,    0,
      950,  957,    0,    0,  951,  958,  958,  958,  958,  962,
      962,  962,  962,    0,    0,    0,    0,    0,    0,  958,
        0,    0,    0,  962,    0,    0,    0,  956,    0,    0,
        0,    0,  957,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  962,  967,  967,  967,  967,  967,
      968,  968,  968,  968,  968,  969,  969,  969,  969,  969,

      970,  970,  970,  970,  970,  971,  971,  971,  971,  971,
      972,  972,  972,  972,  972,  973,  973,  973,  973,  973,
      974,    0,    0,  974,  975,  975,  975,  975,  976,  976,
        0,  976,  976,  977,  977,  977,    0,  977,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[108] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 
    0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "OSParseosrl.l"
/** @file parseosrl.l
 * 
 * @author  Robert Fourer,  Jun Ma, Kipp Martin, 
 * @version 2.0, 02/04/2009
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005-2009, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "OSParseosrl.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSrLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"


#define PARSERDEBUG
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;
     







#line 98 "OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 1463 "OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 107 "OSParseosrl.l"



#line 1709 "OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 967 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2639 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 110 "OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 114 "OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 115 "OSParseosrl.l"
{YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 116 "OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 118 "OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 132 "OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 134 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 135 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 136 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 137 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 138 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 139 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 140 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 141 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 142 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 143 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 144 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 145 "OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 146 "OSParseosrl.l"
{YY_PRINT;  return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 148 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 149 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 150 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 151 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 152 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 153 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 154 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 155 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 156 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 157 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 158 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 159 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 162 "OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 163 "OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 164 "OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 165 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 166 "OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 167 "OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 168 "OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 169 "OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 170 "OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 171 "OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 172 "OSParseosrl.l"
{YY_PRINT;  return(JOBEND);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 174 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 175 "OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICEURISTART);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 176 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 177 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 178 "OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICENAMESTART);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 179 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 180 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 181 "OSParseosrl.l"
{YY_PRINT; unput('<'); return(INSTANCENAMESTART);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 182 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 183 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 184 "OSParseosrl.l"
{YY_PRINT; unput('<'); return(JOBIDSTART);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 185 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 187 "OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 188 "OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 190 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 191 "OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 193 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 194 "OSParseosrl.l"
{YY_PRINT; unput('<'); return(MESSAGESTART);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 195 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 197 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 198 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 200 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 201 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 203 "OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 204 "OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 206 "OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 207 "OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 209 "OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 210 "OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 212 "OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 213 "OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 215 "OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 216 "OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 217 "OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 218 "OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 220 "OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 221 "OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 222 "OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 223 "OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 225 "OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 226 "OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 227 "OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 228 "OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 231 "OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 232 "OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 234 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTARTANDEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 235 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTARTANDEND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 236 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTARTANDEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 237 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTARTANDEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 238 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTARTANDEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 239 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTARTANDEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 244 "OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext);   yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 246 "OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 96:
#line 248 "OSParseosrl.l"
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 248 "OSParseosrl.l"
;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 249 "OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 251 "OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 100:
#line 253 "OSParseosrl.l"
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 253 "OSParseosrl.l"
;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 254 "OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 257 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /* yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 258 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 259 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 262 "OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 277 "OSParseosrl.l"
ECHO;
	YY_BREAK
#line 2457 "OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 967 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 967 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 966);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 277 "OSParseosrl.l"





