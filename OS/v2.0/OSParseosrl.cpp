#line 2 "OSParseosrl.cpp"

#line 4 "OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osrllex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 98
#define YY_END_OF_BUFFER 99
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[783] =
    {   0,
        1,    1,   96,   96,   94,   94,   95,   95,    0,    0,
        0,    0,    0,    0,    0,    0,   99,   97,    1,    1,
        2,   85,   97,    5,   97,    4,   97,    3,   85,   96,
       98,   94,   95,   87,   88,   87,   91,   92,   91,    1,
        0,    0,    3,    0,    0,    0,    0,    1,   85,   85,
       85,   85,   85,    5,    4,    0,    5,   85,    6,    5,
        4,    0,    0,   90,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   85,   96,   94,   95,    0,   93,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   85,   85,   85,   85,   85,   85,    5,    0,    0,

        0,    5,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    5,
       89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   85,   85,   85,   85,   85,   85,    5,    5,
       86,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   73,    0,    0,
        0,    0,    0,   69,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   65,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   85,   85,   85,   85,

       85,   85,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   32,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   48,    0,    0,    0,    0,
        0,    0,    0,   48,    0,    0,   15,    0,    0,    0,
        0,    0,    0,   85,   85,   85,   85,   85,    0,   75,
        0,    0,    0,    0,    0,   33,    0,    0,    0,   71,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   67,    0,    0,    0,    0,    0,   32,    0,
        0,    0,    0,   24,   77,    0,    0,    0,    0,   48,

        0,    0,    0,    0,    0,    0,    0,    0,   48,    0,
       15,    0,   18,   19,    0,    0,    0,   20,   21,   85,
       85,   85,   75,    0,    0,    0,    0,   33,    0,    0,
       71,    0,    0,    0,   25,    0,    0,    0,    0,    0,
        0,   49,    0,    0,   67,    0,    0,    0,    0,    0,
        0,    0,   43,    0,    0,    0,    0,    0,   59,    0,
       83,    0,   61,    0,    0,    0,    0,    0,    0,    0,
        0,   85,   85,   85,    0,    0,    0,    0,    0,   45,
        0,    0,    0,   25,    0,   78,    0,    0,    0,    0,
       49,    0,    0,    0,    0,    0,    0,    0,   82,   43,

       44,    0,    0,    0,    0,    0,    0,   28,    0,    0,
        0,    0,    0,    0,    0,    0,   85,   85,   85,    0,
        0,    0,    0,   45,    0,    0,    0,   78,    0,    0,
        0,   60,    0,   29,    0,    0,   62,    0,    0,    0,
        0,   26,    0,    0,    0,    0,   50,    0,    0,    0,
       30,    0,    0,   57,   28,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   85,   85,
       85,   85,   85,   85,   85,    0,    0,    0,   27,    0,
        0,    0,   52,    0,    0,    0,   31,    0,    0,    0,
       60,   29,    0,   62,    0,    0,    0,   26,    0,    0,

       84,   50,   51,    0,    0,   30,    0,    0,    0,   66,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       85,   85,   85,   85,   85,   85,   85,    0,    0,   27,
        0,    0,   52,    0,    0,   31,    0,    0,    0,   58,
        0,    0,    0,   63,    0,    0,   70,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   85,   85,   85,   85,   85,   85,   85,    0,    0,
        0,    0,    0,    0,    0,    0,   58,    0,    0,   68,
       74,    0,    0,    0,    0,    0,    0,   34,    0,    0,
        0,    0,    0,    0,    0,   14,    0,    0,   13,    0,

        0,    0,    0,   12,    0,    0,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,    0,    0,   64,    0,
        0,    0,   72,    0,    0,    0,   36,    0,   68,    0,
        0,   55,    0,    0,   37,   79,   34,   35,    0,    0,
        0,    0,   22,   23,   14,    0,   13,    0,    0,    0,
       12,    0,    0,   85,   85,   85,   85,   85,   85,    0,
       76,   64,    0,    0,   72,    0,    0,   39,   36,    0,
       53,    0,    0,   40,   80,   37,   38,    0,    0,    0,
        0,    0,    0,    7,    0,    0,   85,   85,   85,   85,
       85,   85,   76,    0,    0,   42,    0,   56,   39,    0,

       81,   40,   41,    0,    0,    0,    0,    7,    0,    0,
       85,   85,   85,   85,   85,    0,   54,   42,   56,    0,
        0,    0,    0,    0,    0,    0,   85,   85,   85,   85,
       85,   54,    0,    0,    0,    0,    0,    0,    0,   85,
       85,   85,   85,   85,    0,   46,    0,    0,    0,    8,
        0,    9,    0,   85,   85,   85,   85,   85,    0,   46,
        0,    0,   10,    8,    9,    0,    0,   85,   85,   85,
        0,   47,    0,   11,   10,    0,   16,   17,   85,   47,
       11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    7,    1,    1,    8,    1,
        1,    7,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    7,    1,   14,
       15,   16,   17,    7,    7,    7,   18,   19,   20,   21,
        7,    7,   22,    7,    7,    7,    7,   23,   24,    7,
        7,   25,   26,   27,   28,   29,    7,    7,    7,    7,
        1,    1,    1,    1,    7,    1,   30,   31,   32,   33,

       34,   35,   36,   37,   38,   39,    7,   40,   41,   42,
       43,   44,    7,   45,   46,   47,   48,   49,    7,   50,
       51,   52,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    2,    2,    2,    1,    3,    2,    4,    1,    1,
        2,    2,    2,    2,    1,    5,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2
    } ;

static yyconst flex_int16_t yy_base[794] =
    {   0,
        0,   22, 1895, 1891, 1899, 1886, 1879, 1877,    0,    0,
        0,    0,   37,   38,    4,   26, 1884, 1999,   47,   93,
     1999,   40,   42,   56, 1864,  139,  169, 1999,   63,    0,
     1999,    0,    0, 1999, 1999, 1864, 1999, 1999, 1856,    0,
     1845,  207, 1999, 1819, 1819,   30,   15,  255,   86,   88,
       99,  100,  126,  104,  134, 1822,    7,  156, 1999,   60,
        0, 1820,  271, 1999, 1785, 1779, 1788, 1773, 1767, 1774,
      141,   40, 1769, 1773,  150,    0,    0,    0, 1786, 1999,
     1755, 1752, 1759,  146, 1753, 1744, 1738, 1742, 1736, 1731,
     1730,  183,  210,  193,  250,  253,  261,  108,  105, 1733,

     1739,  213, 1740, 1702, 1696, 1708, 1695, 1688, 1696,  191,
      148, 1679, 1684, 1664, 1672, 1659, 1651, 1664, 1648, 1649,
     1640, 1639, 1631, 1622, 1625, 1626, 1609, 1610,   17,  265,
     1999, 1603, 1611, 1588, 1573, 1571, 1562,  319, 1553, 1554,
     1548, 1548,  281,  323,  266,  320,  330,  333, 1567, 1999,
     1999, 1537, 1544, 1530, 1518, 1532, 1514, 1520, 1510, 1497,
     1494, 1480, 1484, 1486, 1469, 1466,  104, 1460, 1458, 1463,
     1438,  326, 1432, 1443, 1434, 1422, 1427, 1406, 1391, 1391,
     1389,   89, 1386, 1394, 1370,  353, 1370, 1364,   91, 1367,
      356,  370,  377, 1376, 1365,  380,  357,  384,  401,  398,

      399,  422,  404, 1358, 1356, 1342,  419, 1338,  426, 1344,
     1341, 1341, 1320, 1310, 1294, 1293,  124, 1286,  441, 1285,
     1298, 1278, 1289,  445,  359, 1293, 1267, 1260, 1237,  449,
     1232, 1237, 1227, 1221, 1227,  452, 1218, 1224, 1226, 1215,
     1223, 1211, 1178,  463, 1174,  466,  473,  478,  481, 1165,
     1158,  488,  492,  495,  502,  508,  511,  526,  532,  541,
     1157, 1161, 1144, 1157,  547,  552, 1153, 1141,  557,  562,
     1135, 1123,  565, 1117, 1122, 1106, 1101, 1113,  568, 1101,
     1108,  572,  575, 1108, 1091, 1105, 1103, 1089,  583,  587,
     1094, 1078, 1086,  590, 1999, 1090, 1080, 1070, 1067,  593,

     1091, 1066, 1055, 1067, 1051,  598, 1056, 1043,  604, 1030,
      607,  613, 1999, 1999, 1039, 1038,  620, 1999, 1999,  618,
      623,  629,  646, 1011, 1023, 1018, 1005,  652,  655, 1002,
      661,  983,  971,  664,  670,  673,  976,  965,  955,  959,
      679,  682,  951,  939,  688,  949,  949,  909,  906,  908,
      694,  907,  697,  884,  879,  860,  877,  854, 1999,  700,
     1999,  874, 1999,  854,  856,  705,  853,  851,  837,  832,
      833,  703,  710,  711,  832,  821,  816,  822,  727,  730,
      818,  811,  796,  733,  736,  744,  805,  789,  751,  754,
      757,  808,  760,  787,  786,  772,  769,  785, 1999,  775,

     1999,  778,  764,  781,  784,  764,  789,  794,  757,  750,
      749,  799,  806,  736,  799,  730,  802,  839,  819,  727,
      703,  834,  715,  840,  843,  695,  711,  867,  870,  686,
      873,  876,  879,  888,  678,  897,  900,  684,  672,  660,
      903,  906,  646,  665,  912,  671,  918,  645,  631,  923,
      927,  640,  644, 1999,  931,  626,  614,  629,  934,  621,
      621,  601,  599,  609,  595,  598,  603,  595,  939,  940,
      945,  946,  961,  972,  755,  585,  584,  962,  941,  566,
      589,  965,  968,  570,  551,  988,  991,  553,  557,  994,
     1003, 1009,  545, 1012,  516,  510,  506, 1015,  517,  516,

     1999, 1018, 1999,  493,  499, 1021,  491,  509,  483, 1999,
      491,  478,  493,  470,  466,  463,  461,  458,  443,  454,
     1015, 1016, 1020, 1021, 1026, 1031, 1032,  431,  427, 1066,
      441,  433, 1069,  416,  421, 1075,  417,  424, 1078, 1081,
      397, 1084,  393, 1999,  384,  386, 1999,  371,  367, 1087,
      352,  353,  359, 1093, 1102, 1108, 1111,  342,  355, 1117,
      338, 1125, 1154, 1199, 1132, 1139, 1232, 1149,  319, 1172,
      305,  308, 1175,  304,  311, 1179, 1182,  291, 1190, 1195,
     1999,  284,  290,  277, 1205, 1216,  300, 1223,  270,  274,
     1227, 1236, 1247, 1251, 1261, 1220,  259, 1264, 1269,  264,

      243,  243, 1278, 1281,  253,  244, 1284, 1299, 1292, 1314,
     1293, 1308, 1319, 1334, 1340, 1345, 1360, 1364, 1287,  232,
      241, 1369, 1341,  226, 1375, 1384, 1390,  224, 1393,  216,
     1399, 1999, 1402,  239, 1405, 1999, 1418, 1999,  222, 1421,
     1424, 1427, 1999, 1999, 1439,  206, 1442,  202,  204, 1445,
     1448,  210,  187, 1451, 1452, 1457, 1472, 1477, 1478, 1454,
     1479, 1498,  186, 1501, 1507, 1510, 1516, 1519, 1526,  201,
     1999, 1531,  212, 1534, 1999, 1537, 1999,  178, 1542,  190,
      176,  168, 1547, 1550,  169,  166, 1553, 1554, 1559, 1574,
     1579, 1340, 1594, 1597, 1601, 1604, 1607, 1612, 1618,  151,

     1999, 1622, 1999,  154,  145,  130,  136, 1625,  141,  142,
     1619, 1620, 1624, 1625, 1630, 1644, 1659, 1668, 1671,  119,
      100,   94,   82,   60,   58,   70, 1665, 1666, 1669, 1670,
     1685, 1689,   50,   50,   37,   36, 1706, 1709,   31, 1709,
     1712, 1724, 1745, 1739,   25, 1731,    0, 1760, 1763, 1766,
     1769, 1777, 1783, 1780, 1797, 1802, 1817, 1832, 1821, 1836,
     1839, 1847, 1853, 1856, 1861, 1864, 1867, 1874, 1879, 1894,
     1897, 1900, 1912, 1915, 1918, 1922, 1999, 1999, 1929, 1932,
     1935, 1999, 1945, 1950, 1955, 1960, 1965, 1970, 1975, 1979,
     1984, 1988, 1993

    } ;

static yyconst flex_int16_t yy_def[794] =
    {   0,
      783,  783,  784,  784,  785,  785,  786,  786,  787,  787,
      787,  787,  788,  788,  789,  789,  782,  782,  782,  790,
      782,  790,  782,  790,  782,  790,  782,  782,  790,  791,
      782,  792,  793,  782,  782,  782,  782,  782,  782,   19,
      782,  782,  782,  782,  782,  782,  782,  790,  790,   26,
       26,   26,   26,  782,  782,  782,   26,   26,  782,   26,
       26,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,   26,  791,  792,  793,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,   26,   26,   26,   26,   26,   26,  782,  782,  782,

      782,   26,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,   26,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,   26,  790,   26,   26,   26,   26,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,   26,  790,  790,   26,

       26,  790,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  790,  790,  790,  790,  790,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,

      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  790,
      790,  790,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  790,  790,  790,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,

      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  790,  790,  790,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  790,  790,
      790,  790,  790,  790,   26,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,

      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
       26,   26,   26,   26,   26,   26,   26,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  790,  790,  790,  790,   26,  790,  790,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,

      782,  782,  782,  782,  782,  782,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  790,  790,  790,  790,  790,  790,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  790,  790,  790,  790,
      790,   26,  782,  782,  782,  782,  782,  782,  782,  782,

      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
       26,   26,   26,   26,   26,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,   26,   26,   26,   26,
       26,  782,  782,  782,  782,  782,  782,  782,  782,   26,
       26,  790,  790,  790,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  790,  790,  790,  790,  790,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  790,  790,  790,
      782,  782,  782,  782,  782,  782,  782,  782,  790,  782,
      782,    0,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782

    } ;

static yyconst flex_int16_t yy_nxt[2052] =
    {   0,
       18,   19,   20,   20,   18,   21,   38,   21,   18,   23,
       24,   25,   26,   27,   18,   28,   18,   49,  782,   57,
       39,   29,   18,   19,   20,   20,   18,   21,   38,   21,
       18,   23,   24,   25,   26,   27,   18,   28,   18,   35,
       35,  782,   39,   29,   90,  761,   36,   36,   40,   40,
       40,  782,   54,  782,   55,  782,  183,  782,   41,   88,
       42,  184,   43,   56,  782,   91,  759,  782,   57,  782,
       49,  782,   57,  124,  782,   58,  782,   89,  782,   44,
      753,  748,  125,  747,   45,   75,  126,  782,   46,   58,
      127,  746,  745,   47,   40,   48,   48,  782,   49,  782,

       49,  782,  739,  738,   41,  737,   42,   49,   43,   49,
       49,   49,   49,  101,  101,  736,   98,  149,   49,   49,
       98,   92,  236,   99,  244,   50,  237,   99,  237,   94,
       51,   93,   49,   49,   52,  735,   49,   99,   49,   53,
      782,   99,  734,  218,   54,   49,   55,   95,  219,   60,
      782,   61,  782,   99,  782,   96,  733,  279,   58,   49,
       49,  280,   49,  726,  101,  101,   49,   99,  102,   49,
      130,  120,   58,   62,  725,   49,   97,  724,  723,  135,
       63,  162,  722,   49,  121,   64,  122,  123,  125,   49,
      163,  721,  126,   49,  164,   49,  127,  720,  165,  710,

       65,   66,   49,   49,   67,   49,   68,   69,  709,   70,
      707,   71,   49,  706,   72,   73,   49,   74,   63,  705,
       49,  158,   49,   49,  704,  102,   49,  701,  143,   49,
      700,  694,   49,  145,  159,  686,  160,  161,   65,   66,
      685,  682,   67,   49,   81,   82,   49,   83,  681,   71,
      680,  678,   84,   85,  675,   74,   40,   48,   48,  144,
       49,  671,   49,   49,  670,   49,   41,  666,   42,   49,
       43,   49,   49,   49,  664,   49,   49,   49,   49,  663,
       49,  653,  652,   49,   49,   49,   49,   50,  650,  649,
      146,   49,   51,   49,   49,  648,   52,  147,   49,  199,

       49,   53,  104,  105,  148,  646,  106,  640,  107,  108,
      639,  109,  197,  110,   49,  636,  111,  112,  632,  113,
      191,  191,  191,  631,  191,  198,  198,  224,  224,  224,
       49,  630,   49,  192,  782,  628,  782,  192,  782,   49,
       49,  225,   49,   49,  625,   49,  624,  226,  621,   49,
      200,  620,   49,   49,  224,  224,  224,  191,  191,  191,
      289,  289,  289,   49,  617,  201,  202,   49,  225,   49,
      192,  246,  246,  246,  241,  247,   49,  247,  248,  248,
      248,  252,  252,  252,  606,  191,  198,  198,  602,  601,
       49,  249,  591,  590,  253,  782,  589,  782,  192,  782,

      585,  254,  248,  255,  255,  259,  259,  259,   49,   49,
       49,   49,  782,  584,  782,  249,  782,   49,   49,  260,
      265,  265,  265,  252,  258,  258,  583,  269,  269,  269,
      582,  256,  257,  782,  266,  782,  253,  782,  581,  578,
      267,  270,  282,  282,  282,  576,  224,  224,  224,  261,
      294,  294,  294,  300,  300,  300,  283,  575,  574,  271,
      225,  573,  572,  301,  309,  309,  309,  246,  246,  246,
      571,  247,  570,  247,  311,  311,  311,  569,  284,  248,
      248,  248,  312,  312,  312,  561,  313,  560,  314,  252,
      252,  252,  249,  317,  317,  317,  782,  318,  559,  319,

      558,  557,  253,  248,  255,  255,  782,  556,  782,  782,
      782,  555,  782,  782,  554,  782,  249,  782,  553,  782,
      552,  782,  782,  782,  782,  551,  782,  252,  258,  258,
      550,  549,  320,  259,  259,  259,  548,  782,  547,  782,
      253,  782,  323,  323,  323,  546,  545,  260,  265,  265,
      265,  544,  321,  328,  328,  328,  543,  322,  269,  269,
      269,  542,  266,  331,  331,  331,  334,  334,  334,  341,
      341,  341,  270,  282,  282,  282,  345,  345,  345,  541,
      335,  538,  537,  342,  289,  289,  289,  283,  351,  351,
      351,  294,  294,  294,  300,  300,  300,  535,  352,  366,

      366,  366,  353,  534,  301,  309,  309,  309,  311,  311,
      311,  532,  531,  353,  312,  312,  312,  529,  313,  782,
      314,  317,  317,  317,  782,  318,  528,  319,  520,  782,
      782,  782,  519,  782,  782,  518,  782,  517,  782,  516,
      782,  515,  782,  514,  782,  513,  373,  323,  323,  323,
      512,  511,  374,  328,  328,  328,  379,  379,  379,  510,
      509,  372,  331,  331,  331,  334,  334,  334,  508,  507,
      380,  384,  384,  384,  385,  385,  385,  505,  504,  335,
      341,  341,  341,  391,  391,  391,  501,  500,  386,  345,
      345,  345,  499,  497,  342,  351,  351,  351,  400,  400,

      400,  407,  407,  407,  782,  352,  366,  366,  366,  353,
      401,  782,  782,  496,  782,  408,  782,  495,  782,  493,
      353,  782,  782,  782,  782,  782,  782,  490,  379,  379,
      379,  424,  424,  424,  384,  384,  384,  385,  385,  385,
      485,  419,  380,  484,  418,  428,  428,  428,  481,  417,
      477,  386,  431,  431,  431,  433,  433,  433,  391,  391,
      391,  436,  436,  436,  476,   49,  432,   49,  468,  434,
      441,  441,  441,  462,   49,  437,  400,  400,  400,  445,
      445,  445,  458,  457,  442,  450,  450,  450,  527,  446,
      407,  407,  407,  447,  443,  455,  455,  455,  456,  451,

      459,  459,  459,  782,  408,  454,  452,  450,  450,  450,
      449,  453,  448,  782,  447,  782,  463,  782,  444,  440,
      782,  451,  464,  439,  465,  466,  438,  467,  460,  435,
      782,  430,  782,  461,  782,  478,  478,  478,  429,  469,
      782,  424,  424,  424,  482,  482,  482,  427,  426,  479,
      782,  425,  782,  423,  782,  422,  470,  475,  483,  480,
      421,  420,  471,  416,  472,  473,  415,  474,  428,  428,
      428,  486,  486,  486,  431,  431,  431,  491,  491,  491,
      433,  433,  433,  414,  413,  487,  412,  411,  432,  492,
      492,  492,  488,  410,  434,  409,  406,  489,  436,  436,

      436,  494,  494,  494,  441,  441,  441,  498,  498,  498,
      405,  404,  437,  445,  445,  445,  403,  402,  442,  502,
      502,  502,  399,  446,  450,  450,  450,  447,  506,  506,
      506,  503,  455,  455,  455,  459,  459,  459,  451,  398,
      782,  782,  530,  530,  530,  397,  782,  782,  396,  447,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  478,  478,  478,  482,  482,  482,  533,
      533,  533,  782,  782,  782,  523,  782,  479,  395,  394,
      483,  521,  522,  782,  393,  782,  392,  782,  524,  486,
      486,  486,  536,  536,  536,  539,  539,  539,  525,  390,

      389,  526,  388,  487,  491,  491,  491,  387,  383,  540,
      492,  492,  492,  494,  494,  494,  498,  498,  498,  502,
      502,  502,  506,  506,  506,   49,   49,   49,   49,  382,
       49,   49,   49,   49,   49,   49,   49,  381,   49,   49,
       49,   49,   49,   49,   49,   49,  378,  377,   49,   49,
       49,   49,  376,   49,   49,  375,  562,  563,  564,   49,
      565,  371,  370,  568,   49,   49,  566,  530,  530,  530,
      533,  533,  533,  369,  368,  567,  536,  536,  536,  539,
      539,  539,  577,  577,  577,  579,  579,  579,  586,  586,
      586,  367,  365,  540,  592,  592,  592,  364,  587,  580,

      363,  362,  588,  593,  593,  593,  361,  360,  588,  595,
      595,  595,  598,  598,  598,  359,  594,  358,  603,  603,
      603,  357,  596,  356,  355,  599,  593,  607,  607,  354,
      350,  604,  349,  782,  348,  347,  782,  346,  782,  594,
      782,  344,  343,  782,  600,  782,  340,  782,  339,   49,
      782,   49,  338,  597,  605,  595,  608,  608,   49,  337,
      782,  336,  782,  333,  782,  782,  332,  782,  596,  782,
      330,  329,  613,  618,  618,  618,  622,  622,  622,  612,
      626,  626,  626,  577,  577,  577,  327,  619,  326,  325,
      623,  579,  579,  579,  627,  616,  629,  629,  629,  609,

      598,  610,  610,  324,  316,  580,  633,  633,  633,  315,
      782,  310,  782,  599,  782,  308,  634,  586,  586,  586,
      635,  645,  645,  645,  637,  637,  637,  587,  641,  641,
      641,  588,  611,  603,  614,  614,  638,  592,  592,  592,
      307,  306,  635,  782,  305,  782,  604,  782,  593,  593,
      593,  588,  642,  642,  642,  304,  643,  303,  644,  302,
      299,  594,  595,  595,  595,  598,  598,  598,  298,  615,
      647,  647,  647,  297,  296,  596,  295,  293,  599,  603,
      603,  603,  651,  651,  651,  593,  607,  607,  662,  662,
      662,  292,  604,  782,  782,  782,  291,  782,  594,  782,

      595,  608,  608,  782,  782,  782,  782,  782,  782,  782,
      782,  290,  782,  596,  782,  598,  610,  610,  288,  782,
      782,  782,  287,  782,  655,  782,  286,  782,  599,  782,
      782,  285,  782,  281,  782,  603,  614,  614,  654,  278,
      277,  782,  665,  665,  665,  782,  782,  782,  604,  782,
       49,  782,   49,  782,  656,  782,  782,  276,  782,   49,
      782,  660,  660,  660,  657,  618,  618,  618,  275,  658,
      622,  622,  622,  715,  274,  661,  667,  667,  667,  619,
      273,  272,  659,  268,  623,  626,  626,  626,  264,  263,
      668,  669,  669,  669,  629,  629,  629,  262,  251,  627,

      672,  672,  672,  633,  633,  633,  676,  676,  676,  250,
      673,  245,  243,  634,  674,  242,  240,  635,  677,  637,
      637,  637,  679,  679,  679,  641,  641,  641,  642,  642,
      642,  239,  643,  238,  644,  235,  674,  234,  233,  635,
      645,  645,  645,  647,  647,  647,  683,  683,  683,  651,
      651,  651,  782,  782,  232,  660,  660,  660,  782,  684,
      231,  230,  782,  782,  782,  782,  782,  782,  782,  661,
      782,  229,  782,  683,  690,  690,  228,  227,  782,  782,
      693,  693,  693,  782,  223,  782,  684,  782,  782,  782,
      782,  782,  782,  782,  689,  687,  222,  221,  688,  662,

      662,  662,  695,  695,  695,  220,  217,  691,  665,  665,
      665,  697,  697,  697,  216,  215,  696,  667,  667,  667,
      699,  699,  699,  214,  213,  698,  692,  669,  669,  669,
      212,  668,  672,  672,  672,  702,  702,  702,  676,  676,
      676,  211,  673,  679,  679,  679,  674,  703,  683,  683,
      683,  708,  708,  708,  782,  782,  210,  674,  209,  208,
      782,  684,  207,  206,  782,  782,  782,  782,  782,  782,
      782,  205,  782,  204,  782,  683,  690,  690,  203,  149,
      782,  196,  711,  195,  194,  782,  193,  782,  684,  782,
      782,  712,  782,  190,  782,  693,  693,  693,  716,  716,

      716,  713,  695,  695,  695,  718,  718,  718,  697,  697,
      697,  189,  717,  719,  719,  719,  696,  188,  714,  699,
      699,  699,  698,  702,  702,  702,  708,  708,  708,   49,
       49,   49,   49,  187,   49,   49,   49,   49,   49,   49,
       49,  186,   49,   49,   49,  716,  716,  716,  185,   49,
      182,  731,   49,   49,  181,  180,  727,   49,  730,  717,
      732,  732,  732,   49,  179,  729,  178,  177,  728,  718,
      718,  718,  719,  719,  719,   49,   49,   49,   49,   49,
       49,   49,   49,  176,   49,   49,  175,  174,   49,   49,
      732,  732,  732,  173,  172,   49,  171,   49,   49,  741,

      170,  169,   49,   49,   49,  168,  740,  749,  749,  749,
      751,  751,  751,  167,  742,  743,  166,  744,   49,   49,
      750,   49,   49,  752,   49,  749,  756,  756,   49,  157,
      156,   49,  760,  760,  760,  782,  155,  782,  750,  782,
      782,  154,   49,  153,  152,   49,  751,  757,  757,  151,
      782,  149,  782,  150,  782,  754,  782,  755,  782,  752,
      782,  762,  762,  762,  749,  749,  749,  764,  764,  764,
      751,  751,  751,  142,  763,  141,  140,  750,  765,  765,
      765,  782,  139,  752,  766,  766,  766,  138,  758,  137,
      136,  782,  134,  782,  133,  782,  132,  767,  762,  769,

      769,  131,  129,  749,  756,  756,  128,  119,  782,  118,
      782,  763,  782,  782,  117,  782,  750,  782,  751,  757,
      757,  116,  771,  771,  771,  768,  115,  114,  782,  103,
      782,  752,  782,  766,  770,  770,  772,  760,  760,  760,
      773,  773,  773,  782,  100,  782,  767,  782,  762,  762,
      762,   87,   86,  774,  775,  775,  775,  764,  764,  764,
       59,  763,  765,  765,  765,  766,  766,  766,  776,  776,
      776,   80,  777,   79,  778,  773,  779,  779,  767,   59,
      762,  769,  769,  782,   31,  782,   31,  782,  774,  782,
      782,   31,  782,  763,  782,  766,  770,  770,  771,  771,

      771,  780,  780,  780,   31,  782,   31,  782,  767,  782,
       31,  782,  772,  773,  773,  773,  781,  781,  781,  775,
      775,  775,  782,  776,  776,  776,  774,  777,  782,  778,
      773,  779,  779,  780,  780,  780,  781,  781,  781,  782,
      782,  782,  782,  774,  782,   22,   22,   22,   22,   22,
       30,   30,   30,   30,   30,   32,   32,   32,   32,   32,
       33,   33,   33,   33,   33,   31,   31,   31,   31,   31,
       34,   34,   34,   34,   34,   37,   37,   37,   37,   37,
       49,  782,  782,   49,   76,   76,   76,   76,   77,   77,
      782,   77,   77,   78,   78,   78,  782,   78,   17,  782,

      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782
    } ;

static yyconst flex_int16_t yy_chk[2052] =
    {   0,
        1,    1,    1,    1,    1,    1,   15,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   57,    0,   57,
       15,    1,    2,    2,    2,    2,    2,    2,   16,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,   13,
       14,   22,   16,    2,   47,  747,   13,   14,   19,   19,
       19,   22,   23,   22,   23,   22,  129,   24,   19,   46,
       19,  129,   19,   23,   29,   47,  745,   24,   24,   24,
       60,   24,   60,   72,   29,   24,   29,   46,   29,   19,
      739,  736,   72,  735,   19,   29,   72,   49,   19,   24,
       72,  734,  733,   19,   20,   20,   20,   49,   50,   49,

       50,   49,  726,  725,   20,  724,   20,   50,   20,   51,
       52,   51,   52,   99,   99,  723,   54,   99,   51,   52,
       98,   50,  182,   54,  189,   20,  182,   98,  189,   52,
       20,   51,   51,   52,   20,  722,   53,   54,   53,   20,
       26,   98,  721,  167,   55,   53,   55,   52,  167,   26,
       26,   26,   26,   55,   26,   53,  720,  217,   26,   53,
       75,  217,   75,  710,   58,   58,   58,   55,   58,   75,
       75,   71,   26,   27,  709,   58,   53,  707,  706,   84,
       27,  111,  705,   75,   71,   27,   71,   71,   84,   58,
      111,  704,   84,   92,  111,   92,   84,  700,  111,  686,

       27,   27,   92,   94,   27,   94,   27,   27,  685,   27,
      682,   27,   94,  681,   27,   27,   92,   27,   42,  680,
       93,  110,   93,  102,  678,  102,   94,  673,   92,   93,
      670,  663,  102,   94,  110,  653,  110,  110,   42,   42,
      652,  649,   42,   93,   42,   42,  102,   42,  648,   42,
      646,  639,   42,   42,  634,   42,   48,   48,   48,   93,
       95,  630,   95,   96,  628,   96,   48,  624,   48,   95,
       48,   97,   96,   97,  621,  130,  145,  130,  145,  620,
       97,  606,  605,   95,  130,  145,   96,   48,  602,  601,
       95,  143,   48,  143,   97,  600,   48,   96,  130,  145,

      143,   48,   63,   63,   97,  597,   63,  590,   63,   63,
      589,   63,  143,   63,  143,  587,   63,   63,  584,   63,
      138,  138,  138,  583,  144,  144,  144,  172,  172,  172,
      146,  582,  146,  138,  144,  578,  144,  144,  144,  146,
      147,  172,  147,  148,  575,  148,  574,  172,  572,  147,
      146,  571,  148,  146,  186,  186,  186,  191,  191,  191,
      225,  225,  225,  147,  569,  147,  148,  197,  186,  197,
      191,  192,  192,  192,  186,  192,  197,  192,  193,  193,
      193,  196,  196,  196,  561,  198,  198,  198,  559,  558,
      197,  193,  553,  552,  196,  198,  551,  198,  198,  198,

      549,  197,  199,  199,  199,  203,  203,  203,  200,  201,
      200,  201,  199,  548,  199,  199,  199,  200,  201,  203,
      207,  207,  207,  202,  202,  202,  546,  209,  209,  209,
      545,  200,  201,  202,  207,  202,  202,  202,  543,  541,
      207,  209,  219,  219,  219,  538,  224,  224,  224,  203,
      230,  230,  230,  236,  236,  236,  219,  537,  535,  209,
      224,  534,  532,  236,  244,  244,  244,  246,  246,  246,
      531,  246,  529,  246,  247,  247,  247,  528,  219,  248,
      248,  248,  249,  249,  249,  520,  249,  519,  249,  252,
      252,  252,  248,  253,  253,  253,  254,  253,  518,  253,

      517,  516,  252,  255,  255,  255,  254,  515,  254,  256,
      254,  514,  257,  255,  513,  255,  255,  255,  512,  256,
      511,  256,  257,  256,  257,  509,  257,  258,  258,  258,
      508,  507,  254,  259,  259,  259,  505,  258,  504,  258,
      258,  258,  260,  260,  260,  500,  499,  259,  265,  265,
      265,  497,  256,  266,  266,  266,  496,  257,  269,  269,
      269,  495,  265,  270,  270,  270,  273,  273,  273,  279,
      279,  279,  269,  282,  282,  282,  283,  283,  283,  493,
      273,  489,  488,  279,  289,  289,  289,  282,  290,  290,
      290,  294,  294,  294,  300,  300,  300,  485,  290,  306,

      306,  306,  290,  484,  300,  309,  309,  309,  311,  311,
      311,  481,  480,  306,  312,  312,  312,  477,  312,  320,
      312,  317,  317,  317,  321,  317,  476,  317,  468,  320,
      322,  320,  467,  320,  321,  466,  321,  465,  321,  464,
      322,  463,  322,  462,  322,  461,  321,  323,  323,  323,
      460,  458,  322,  328,  328,  328,  329,  329,  329,  457,
      456,  320,  331,  331,  331,  334,  334,  334,  453,  452,
      329,  335,  335,  335,  336,  336,  336,  449,  448,  334,
      341,  341,  341,  342,  342,  342,  446,  444,  336,  345,
      345,  345,  443,  440,  341,  351,  351,  351,  353,  353,

      353,  360,  360,  360,  372,  351,  366,  366,  366,  351,
      353,  373,  374,  439,  372,  360,  372,  438,  372,  435,
      366,  373,  374,  373,  374,  373,  374,  430,  379,  379,
      379,  380,  380,  380,  384,  384,  384,  385,  385,  385,
      427,  374,  379,  426,  373,  386,  386,  386,  423,  372,
      421,  385,  389,  389,  389,  390,  390,  390,  391,  391,
      391,  393,  393,  393,  420,  475,  389,  475,  416,  390,
      397,  397,  397,  414,  475,  393,  400,  400,  400,  402,
      402,  402,  411,  410,  397,  405,  405,  405,  475,  402,
      407,  407,  407,  402,  397,  408,  408,  408,  409,  405,

      412,  412,  412,  417,  407,  406,  405,  413,  413,  413,
      404,  405,  403,  417,  412,  417,  415,  417,  398,  396,
      419,  413,  415,  395,  415,  415,  394,  415,  413,  392,
      419,  388,  419,  413,  419,  422,  422,  422,  387,  417,
      418,  424,  424,  424,  425,  425,  425,  383,  382,  422,
      418,  381,  418,  378,  418,  377,  418,  419,  425,  422,
      376,  375,  418,  371,  418,  418,  370,  418,  428,  428,
      428,  429,  429,  429,  431,  431,  431,  432,  432,  432,
      433,  433,  433,  369,  368,  429,  367,  365,  431,  434,
      434,  434,  429,  364,  433,  362,  358,  429,  436,  436,

      436,  437,  437,  437,  441,  441,  441,  442,  442,  442,
      357,  356,  436,  445,  445,  445,  355,  354,  441,  447,
      447,  447,  352,  445,  450,  450,  450,  445,  451,  451,
      451,  447,  455,  455,  455,  459,  459,  459,  450,  350,
      469,  470,  479,  479,  479,  349,  471,  472,  348,  459,
      469,  470,  469,  470,  469,  470,  471,  472,  471,  472,
      471,  472,  473,  478,  478,  478,  482,  482,  482,  483,
      483,  483,  473,  474,  473,  471,  473,  478,  347,  346,
      482,  469,  470,  474,  344,  474,  343,  474,  472,  486,
      486,  486,  487,  487,  487,  490,  490,  490,  473,  340,

      339,  474,  338,  486,  491,  491,  491,  337,  333,  490,
      492,  492,  492,  494,  494,  494,  498,  498,  498,  502,
      502,  502,  506,  506,  506,  521,  522,  521,  522,  332,
      523,  524,  523,  524,  521,  522,  525,  330,  525,  523,
      524,  526,  527,  526,  527,  525,  327,  326,  521,  522,
      526,  527,  325,  523,  524,  324,  521,  522,  523,  525,
      524,  316,  315,  527,  526,  527,  525,  530,  530,  530,
      533,  533,  533,  310,  308,  526,  536,  536,  536,  539,
      539,  539,  540,  540,  540,  542,  542,  542,  550,  550,
      550,  307,  305,  539,  554,  554,  554,  304,  550,  542,

      303,  302,  550,  555,  555,  555,  301,  299,  554,  556,
      556,  556,  557,  557,  557,  298,  555,  297,  560,  560,
      560,  296,  556,  293,  292,  557,  562,  562,  562,  291,
      288,  560,  287,  565,  286,  285,  562,  284,  562,  562,
      562,  281,  280,  565,  557,  565,  278,  565,  277,  566,
      568,  566,  276,  556,  560,  563,  563,  563,  566,  275,
      568,  274,  568,  272,  568,  563,  271,  563,  563,  563,
      268,  267,  566,  570,  570,  570,  573,  573,  573,  565,
      576,  576,  576,  577,  577,  577,  264,  570,  263,  262,
      573,  579,  579,  579,  576,  568,  580,  580,  580,  563,

      564,  564,  564,  261,  251,  579,  585,  585,  585,  250,
      564,  245,  564,  564,  564,  243,  585,  586,  586,  586,
      585,  596,  596,  596,  588,  588,  588,  586,  591,  591,
      591,  586,  564,  567,  567,  567,  588,  592,  592,  592,
      242,  241,  591,  567,  240,  567,  567,  567,  593,  593,
      593,  592,  594,  594,  594,  239,  594,  238,  594,  237,
      235,  593,  595,  595,  595,  598,  598,  598,  234,  567,
      599,  599,  599,  233,  232,  595,  231,  229,  598,  603,
      603,  603,  604,  604,  604,  607,  607,  607,  619,  619,
      619,  228,  603,  609,  611,  607,  227,  607,  607,  607,

      608,  608,  608,  609,  611,  609,  611,  609,  611,  612,
      608,  226,  608,  608,  608,  610,  610,  610,  223,  612,
      613,  612,  222,  612,  611,  610,  221,  610,  610,  610,
      613,  220,  613,  218,  613,  614,  614,  614,  609,  216,
      215,  615,  623,  623,  623,  614,  616,  614,  614,  614,
      692,  615,  692,  615,  612,  615,  616,  214,  616,  692,
      616,  617,  617,  617,  613,  618,  618,  618,  213,  615,
      622,  622,  622,  692,  212,  617,  625,  625,  625,  618,
      211,  210,  616,  208,  622,  626,  626,  626,  206,  205,
      625,  627,  627,  627,  629,  629,  629,  204,  195,  626,

      631,  631,  631,  633,  633,  633,  635,  635,  635,  194,
      631,  190,  188,  633,  631,  187,  185,  633,  635,  637,
      637,  637,  640,  640,  640,  641,  641,  641,  642,  642,
      642,  184,  642,  183,  642,  181,  640,  180,  179,  641,
      645,  645,  645,  647,  647,  647,  650,  650,  650,  651,
      651,  651,  654,  655,  178,  660,  660,  660,  656,  650,
      177,  176,  654,  655,  654,  655,  654,  655,  656,  660,
      656,  175,  656,  657,  657,  657,  174,  173,  658,  659,
      661,  661,  661,  657,  171,  657,  657,  657,  658,  659,
      658,  659,  658,  659,  656,  654,  170,  169,  655,  662,

      662,  662,  664,  664,  664,  168,  166,  658,  665,  665,
      665,  666,  666,  666,  165,  164,  664,  667,  667,  667,
      668,  668,  668,  163,  162,  666,  659,  669,  669,  669,
      161,  667,  672,  672,  672,  674,  674,  674,  676,  676,
      676,  160,  672,  679,  679,  679,  672,  674,  683,  683,
      683,  684,  684,  684,  687,  688,  159,  679,  158,  157,
      689,  683,  156,  155,  687,  688,  687,  688,  687,  688,
      689,  154,  689,  153,  689,  690,  690,  690,  152,  149,
      691,  142,  687,  141,  140,  690,  139,  690,  690,  690,
      691,  688,  691,  137,  691,  693,  693,  693,  694,  694,

      694,  689,  695,  695,  695,  696,  696,  696,  697,  697,
      697,  136,  694,  698,  698,  698,  695,  135,  691,  699,
      699,  699,  697,  702,  702,  702,  708,  708,  708,  711,
      712,  711,  712,  134,  713,  714,  713,  714,  711,  712,
      715,  133,  715,  713,  714,  716,  716,  716,  132,  715,
      128,  715,  711,  712,  127,  126,  711,  713,  714,  716,
      717,  717,  717,  715,  125,  713,  124,  123,  712,  718,
      718,  718,  719,  719,  719,  727,  728,  727,  728,  729,
      730,  729,  730,  122,  727,  728,  121,  120,  729,  730,
      732,  732,  732,  119,  118,  731,  117,  731,  727,  728,

      116,  115,  729,  730,  731,  114,  727,  737,  737,  737,
      738,  738,  738,  113,  729,  730,  112,  731,  731,  740,
      737,  740,  741,  738,  741,  742,  742,  742,  740,  109,
      108,  741,  746,  746,  746,  742,  107,  742,  742,  742,
      744,  106,  740,  105,  104,  741,  743,  743,  743,  103,
      744,  101,  744,  100,  744,  740,  743,  741,  743,  743,
      743,  748,  748,  748,  749,  749,  749,  750,  750,  750,
      751,  751,  751,   91,  748,   90,   89,  749,  752,  752,
      752,  754,   88,  751,  753,  753,  753,   87,  744,   86,
       85,  754,   83,  754,   82,  754,   81,  753,  755,  755,

      755,   79,   74,  756,  756,  756,   73,   70,  755,   69,
      755,  755,  755,  756,   68,  756,  756,  756,  757,  757,
      757,   67,  759,  759,  759,  754,   66,   65,  757,   62,
      757,  757,  757,  758,  758,  758,  759,  760,  760,  760,
      761,  761,  761,  758,   56,  758,  758,  758,  762,  762,
      762,   45,   44,  761,  763,  763,  763,  764,  764,  764,
       41,  762,  765,  765,  765,  766,  766,  766,  767,  767,
      767,   39,  767,   36,  767,  768,  768,  768,  766,   25,
      769,  769,  769,   17,    8,  768,    7,  768,  768,  768,
      769,    6,  769,  769,  769,  770,  770,  770,  771,  771,

      771,  772,  772,  772,    5,  770,    4,  770,  770,  770,
        3,    0,  771,  773,  773,  773,  774,  774,  774,  775,
      775,  775,    0,  776,  776,  776,  773,  776,    0,  776,
      779,  779,  779,  780,  780,  780,  781,  781,  781,    0,
      779,    0,  779,  779,  779,  783,  783,  783,  783,  783,
      784,  784,  784,  784,  784,  785,  785,  785,  785,  785,
      786,  786,  786,  786,  786,  787,  787,  787,  787,  787,
      788,  788,  788,  788,  788,  789,  789,  789,  789,  789,
      790,    0,    0,  790,  791,  791,  791,  791,  792,  792,
        0,  792,  792,  793,  793,  793,    0,  793,  782,  782,

      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[99] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "OSParseosrl.l"
/** @file parseosrl.l
 * 
 * @author  Robert Fourer,  Jun Ma, Kipp Martin, 
 * @version 2.0, 02/04/2009
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005-2009, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "OSParseosrl.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif




#include <sstream>  
#include "OSErrorClass.h"
#include "OSrLParserData.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"

#define PARSERDEBUG
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif

#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;
     







#line 89 "OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 1253 "OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 101 "OSParseosrl.l"



#line 1499 "OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 783 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1999 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 104 "OSParseosrl.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 106 "OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 107 "OSParseosrl.l"
{YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 108 "OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 110 "OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 124 "OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 126 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 127 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 128 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 129 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 130 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 131 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 132 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 133 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 134 "OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 136 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 137 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 138 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 139 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 140 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 141 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 142 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 143 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 146 "OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 147 "OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 148 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 149 "OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 150 "OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 151 "OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 152 "OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 153 "OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 154 "OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 155 "OSParseosrl.l"
{YY_PRINT;  return(JOBEND);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 157 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 158 "OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICEURISTART);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 159 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 160 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 161 "OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICENAMESTART);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 162 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 163 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 164 "OSParseosrl.l"
{YY_PRINT; unput('<'); return(INSTANCENAMESTART);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 165 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 166 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 167 "OSParseosrl.l"
{YY_PRINT; unput('<'); return(JOBIDSTART);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 168 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 170 "OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 171 "OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 173 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 174 "OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 176 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 177 "OSParseosrl.l"
{YY_PRINT; unput('<'); return(MESSAGESTART);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 178 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 180 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 181 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 183 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 184 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 186 "OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 187 "OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 189 "OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 190 "OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 192 "OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 193 "OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 195 "OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 196 "OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 198 "OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 199 "OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 200 "OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 201 "OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 203 "OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 204 "OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 205 "OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 206 "OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 208 "OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 209 "OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 210 "OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 211 "OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 214 "OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 215 "OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 217 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTARTANDEND);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 218 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTARTANDEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 219 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTARTANDEND);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 220 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTARTANDEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 221 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTARTANDEND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 222 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTARTANDEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 227 "OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext);   yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 229 "OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 87:
#line 231 "OSParseosrl.l"
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 231 "OSParseosrl.l"
;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 232 "OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 234 "OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 91:
#line 236 "OSParseosrl.l"
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 236 "OSParseosrl.l"
;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 238 "OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 244 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 245 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;  return(ATTRIBUTETEXT);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 247 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 250 "OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 265 "OSParseosrl.l"
ECHO;
	YY_BREAK
#line 2192 "OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 783 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 783 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 782);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 265 "OSParseosrl.l"





