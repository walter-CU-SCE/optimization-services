#line 2 "OSParseosrl.cpp"

#line 4 "OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osrllex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 110
#define YY_END_OF_BUFFER 111
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[971] =
    {   0,
        1,    1,  108,  108,  106,  106,  107,  107,    0,    0,
        0,    0,    0,    0,    0,    0,  111,  109,    1,    1,
        2,   97,    2,  109,    6,  109,    5,  109,    4,   97,
      108,  110,  106,  107,   99,  100,   99,  103,  104,  103,
        1,    0,    0,    4,    0,    0,    0,    0,    0,    0,
        0,    1,   97,   97,   97,   97,   97,   97,   97,   97,
        3,    6,    5,    0,    6,   97,    7,    6,    5,    0,
        0,  102,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   97,  108,  106,  107,    0,  105,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   97,   97,   97,   97,   97,   97,   97,   97,
       97,    6,    0,    0,    0,    6,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    6,  101,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   97,
       97,   97,   97,   97,   97,   97,   97,   97,    6,    6,
       98,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   85,    0,    0,
        0,    0,    0,   81,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   77,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   97,
       97,   97,   97,   97,   97,   97,   97,   97,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       44,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   60,    0,    0,    0,    0,    0,    0,    0,   60,
        0,    0,    0,   19,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   97,   97,   97,   97,   97,   97,   97,
       97,    0,   86,    0,    0,    0,    0,    0,   45,    0,

        0,    0,   82,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   78,    0,    0,    0,    0,
        0,   44,    0,    0,    0,    0,   36,   35,   89,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   19,    0,   21,   22,    0,
        0,    0,   23,   24,    0,   27,   28,    0,    0,   97,
       97,   97,   97,   97,   86,    0,    0,    0,    0,   45,
        0,    0,   82,    0,    0,    0,   37,    0,    0,    0,
        0,    0,    0,   61,    0,    0,   78,    0,    0,    0,
        0,    0,    0,    0,   55,    0,    0,    0,    0,    0,

       71,    0,   95,    0,   73,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   31,   32,
       97,   97,   97,   97,    0,    0,    0,    0,    0,   57,
        0,    0,    0,   37,    0,   90,    0,    0,    0,    0,
       61,    0,    0,    0,    0,    0,    0,    0,   94,   55,
       56,    0,    0,    0,    0,    0,    0,   40,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   29,   30,
       97,   97,   97,   97,    0,    0,    0,    0,   57,    0,
        0,    0,   90,    0,    0,    0,   72,    0,   41,    0,
        0,   74,    0,    0,    0,    0,   38,    0,    0,    0,

        0,   62,    0,    0,    0,   42,    0,    0,   69,   40,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   97,   97,   97,   97,   97,
       97,   97,   97,    0,    0,    0,   39,    0,    0,    0,
       64,    0,    0,    0,   43,    0,    0,    0,   72,   41,
        0,   74,    0,    0,    0,   38,    0,    0,   96,   62,
       63,    0,    0,   42,    0,    0,    0,   79,    0,    0,
        0,    0,   25,   26,    0,    0,    0,    0,    0,    0,
        0,    0,   97,   97,   97,   97,   97,   97,   97,   97,
        0,    0,   39,    0,    0,   64,    0,    0,   43,    0,

        0,    0,   70,    0,    0,    0,   75,    0,    0,   83,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   97,   97,   97,   97,
       97,   97,   97,   97,    0,    0,    0,    0,    0,    0,
        0,    0,   70,    0,    0,   80,   87,    0,    0,    0,
        0,    0,    0,   46,    0,    0,    0,    0,    0,    0,
        0,   18,    0,    0,   17,    0,    0,    0,    0,    0,
       16,    0,    0,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,    0,    0,   76,    0,    0,    0,
       84,    0,    0,    0,   48,    0,   80,    0,    0,   67,

        0,    0,   49,   91,   46,   47,    0,    0,    0,    0,
       33,   34,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   97,   97,   97,   97,   97,   97,   97,    0,
       88,   76,    0,    0,   84,    0,    0,   51,   48,    0,
       65,    0,    0,   52,   92,   49,   50,    0,    0,    0,
       18,    0,   17,    0,    0,    0,    0,    0,    0,    8,
       16,    0,    0,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   88,    0,    0,   54,    0,   68,   51,    0,
       93,   52,   53,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   97,   97,   97,   97,   97,   97,   97,

       97,    0,   66,   54,   68,    0,    0,    0,    0,    0,
        0,    0,    0,    8,    0,    0,   97,   97,   97,   97,
       97,   97,   97,   97,   66,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   97,   97,   97,   97,   97,
       97,   97,   97,    0,   58,    0,    0,    0,    0,    0,
        0,    9,    0,   10,    0,   97,   97,   97,   97,   97,
       97,   97,   97,    0,    0,    0,   11,    0,    0,    0,
        0,    0,    0,   20,   97,   97,   97,   97,   97,   97,
        0,   59,    0,   12,    0,    0,    0,    0,    9,   10,
        0,   97,   97,   97,   97,   59,    0,   11,    0,    0,

        0,   20,   97,   97,   97,   12,    0,    0,    0,   97,
       97,   97,    0,    0,    0,   97,   97,   97,    0,    0,
        0,   97,   97,   97,    0,    0,    0,   97,   97,   97,
        0,    0,    0,   97,   97,   97,    0,    0,    0,   97,
       97,   97,    0,    0,    0,   97,   97,   97,    0,    0,
        0,   13,   97,   97,   97,    0,    0,   14,    0,   97,
       97,    0,   15,    0,   13,   97,    0,   14,   15,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    8,    1,    1,    9,    1,
        1,    8,   10,    1,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    8,    1,   15,
       16,   17,   18,    8,    8,    8,   19,   20,   21,   22,
        8,    8,   23,    8,    8,    8,    8,   24,   25,    8,
        8,   26,   27,   28,   29,   30,    8,    8,    8,    8,
        1,    1,    1,    1,    8,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   40,    8,   41,   42,   43,
       44,   45,    8,   46,   47,   48,   49,   50,    8,   51,
       52,   53,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    2,    2,    2,    2,    1,    3,    2,    4,    1,
        1,    2,    2,    2,    2,    1,    5,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[982] =
    {   0,
        0,   23, 2507, 2505, 2510, 2500, 2497, 2496,    0,    0,
        0,    0,   39,   40,   41,   42, 2503, 2639,   59,  108,
     2495,   52, 2492,    8,  157, 2482,    7,  187, 2639,   54,
        0, 2639,    0,    0, 2639, 2639, 2487, 2639, 2639, 2466,
        0, 2465,  225, 2639, 2450, 2444, 2444,   17,   18, 2434,
     2444,  274,   59,   65,   69,   85,  101,  103,  119,   70,
     2639,  114,  125, 2450,    0,  154, 2639,    0,   41, 2461,
      292, 2639, 2427, 2421, 2425, 2415, 2412, 2420,   82,  132,
     2415, 2420,  131,    0,    0,    0, 2433, 2639, 2405, 2403,
     2411,  138, 2404, 2389, 2389, 2383, 2390, 2389, 2380, 2379,

     2381, 2365,  167,  183,  177,  211,  219,  173,  235,  260,
      182,  222,   71, 2380, 2387,  231, 2380, 2346, 2340, 2351,
     2334, 2330, 2338,  253,  258, 2326, 2333, 2319, 2330, 2317,
     2302, 2313, 2292, 2296, 2287, 2287, 2285, 2275, 2278, 2287,
     2260, 2264,    6,  269, 2639, 2245, 2259, 2243, 2242, 2245,
     2241, 2242,  341, 2237, 2239, 2233, 2233, 2219, 2208,  295,
      300,  356,  306,  333,  334,  352,  353,  361, 2242, 2639,
     2639, 2211, 2211, 2195, 2190, 2201, 2180, 2181, 2170, 2165,
     2172, 2163, 2166, 2175, 2158, 2161,   85, 2155, 2147, 2152,
     2137,  376, 2137, 2147, 2141, 2138, 2130, 2114, 2113, 2108,

     2089,  109, 2086, 2083, 2068,  381, 2068, 2064,  144, 2074,
     2062,  347,  204,  403, 2072, 2068,  409,  413, 2062,  406,
      388,  442,  476,  407,  416,  510,  544,  417,  457, 2054,
     2031, 2016,  465, 2016,  481, 2023, 2017, 2015, 1999, 1999,
     1972, 1971,  160, 1969,  491, 1968, 1985, 1968, 1973,  515,
      497, 1982, 1968, 1965, 1952,  533, 1946, 1947, 1936, 1933,
     1946,  538, 1937, 1943, 1941, 1921, 1917, 1905, 1895, 2639,
     1888, 1876, 1908,  550,  559,  520, 1857, 1854,  564,  569,
      579,  583,  594,  556,  418,  609,  419,  573,  643,  677,
      711,  599,  615, 1852, 1868, 1851, 1861,  624,  629, 1869,

     1857,  633,  649, 1854, 1841,  658, 1831, 1836, 1808, 1806,
     1819,  666, 1809, 1815,  682,  692, 1805, 1789, 1803, 1801,
     1788,  698,  704, 1793, 1763, 1771,  726, 2639, 2639, 1776,
     1768, 1759, 1749,  731, 1773, 1750, 1739, 1753, 1740,  735,
     1745, 1744, 1712, 1711,  717,  745, 1725, 2639, 2639, 1703,
     1700, 1720, 2639, 2639, 1717, 2639, 2639,  751,  755,  745,
      747,  749,  751,  791,  785, 1674, 1684, 1674, 1661,  795,
      799, 1666,  806, 1649, 1657,  815,  819,  825, 1662, 1650,
     1641, 1645,  831,  835, 1632, 1621,  841, 1627, 1618, 1607,
     1606, 1612,  847, 1626,  851, 1606, 1590, 1575, 1589, 1577,

     2639,  865, 2639, 1591, 2639, 1569, 1576,  869, 1567, 1556,
     1535, 1538,  776, 1549, 1536,  856,  874, 1560, 1552, 1535,
      653,  864,  866,  874, 1510, 1499, 1498, 1504,  887,  911,
     1481, 1476, 1438,  915,  919,  923, 1450, 1440,  927,  935,
      943, 1458,  951, 1434, 1427, 1414,  955, 1422, 2639,  959,
     2639,  971, 1396, 1412,  975, 1399,  991,  998, 1387, 1392,
     1391, 1007, 1011, 1015, 1385, 1002, 1380,  891, 2639, 2639,
     1039,  452, 1061, 1012, 1380, 1356, 1034, 1369, 1054, 1060,
     1336, 1354, 1064, 1068, 1338, 1096, 1100, 1104, 1112, 1333,
     1120, 1124, 1335, 1326, 1333, 1128, 1136, 1292, 1313, 1144,

     1295, 1148, 1276, 1236, 1162, 1166, 1252, 1250, 2639, 1170,
     1239, 1212, 1228, 1178, 1220, 1218, 1182, 1153, 1199, 1198,
       39, 1183, 1178, 1173, 1168, 1197, 1175, 1191, 1193, 1194,
     1195, 1219, 1210, 1154, 1155, 1189, 1218, 1140, 1154, 1244,
     1253, 1142, 1128, 1260, 1264, 1128, 1128, 1268, 1276, 1284,
     1108, 1288, 1096, 1094, 1089, 1292, 1104, 1103, 2639, 1296,
     2639, 1073, 1080, 1300, 1076, 1089, 1067, 2639, 1079, 1053,
     1071, 1089, 2639, 2639, 1047, 1044, 1044, 1045, 1035, 1012,
     1004, 1016, 1239, 1292, 1293, 1294, 1295, 1296, 1304, 1320,
      986,  960, 1317,  975,  974, 1340,  951,  958, 1344,  949,

      967, 1354, 1358,  941, 1362,  936, 2639,  933,  929, 2639,
      926,  930, 1370,  905,  908,  914, 1386, 1375, 1390, 1394,
     1409,  908,  893,  906, 1413,  887, 1451, 1485, 1429, 1386,
     1387, 1388, 1435, 1414,  887, 1456,  885,  869, 1466,  861,
      868, 1475, 1491,  851, 1500, 1505, 2639,  835,  840,  819,
     1509, 1525,  840, 1531,  805,  806, 1545, 1549, 1553, 1516,
     1568,  239,  783, 1572,  245,  792,  769,  766,  766, 1576,
      387,  775,  738, 1591,  728, 1568, 1595, 1510, 1569, 1587,
     1592, 1615, 1609, 1611, 1649, 1653, 1669,  724,  736, 1673,
     1677,  726, 1681, 1689, 1697,  709, 1705,  698, 1709, 2639,

     1714,  725, 1730, 2639, 1734, 2639,  710, 1738, 1744,  719,
     2639, 2639,  714,  665,  706,  656,  267,  638, 1748,  672,
      641,  622, 1591, 1709, 1735, 1745, 1765, 1757, 1758, 1771,
     1792, 1796,  619, 1800, 1811, 1816, 1820, 1824, 1836,  634,
     2639, 1840,  632, 1844, 2639, 1858, 2639,  595, 1862, 1558,
      392,  593,  504,  583,  571,  573,  562,  545, 1866,  554,
      604,  532,  509, 1859, 1837, 1860, 1864, 1870, 1872, 1906,
     1892, 1900, 1915, 1921, 1926, 1937, 1942, 1946, 1952,  491,
     2639, 1958, 2639,  495,  494,  478,  478,  470,  459,  460,
      485,  441,  452, 1944, 1950, 1952, 1953, 1955, 1954, 1956,

     1982, 2004, 2008, 2020, 2024,  433,  427,  421,  420,  403,
      414,  409,  389,  637,  388,  392, 2016, 2017, 2018, 2019,
     2021, 2020, 2022, 2047, 2042,  380,  379,  355,  353,  328,
      331,  331, 2068, 2072,  305, 2064, 2066, 2069, 2065, 2075,
     2089, 2116, 2088,  310, 2639,  291, 2122,  291,  280,  287,
     2126,  653, 2141,  687, 2145, 2119, 2165, 2137, 2138, 2139,
     2173, 2188, 2192, 2196, 2212, 2220,  905,  287,  276,  271,
      307,  301, 2227,  964, 2242, 2246, 2238, 2239, 2220, 2261,
     2277, 2281, 2293,  984,  299,  257,  244,  253, 1020, 1043,
      280, 2297, 2289, 2290, 2120, 2312,  278, 1076,  228,  233,

      237, 1234, 2291, 2205, 2306, 1321,  212,  229,  216, 2308,
     2316, 2317,  213,  187,  169, 2332, 2333, 2334,  179,  163,
      152, 2336, 2345, 2349,  138,  128,  128, 2358, 2361, 2362,
      114,  102,   70, 2364, 2373, 2374,   75,   55,   50, 2386,
     2390, 2398,   47,   41, 2413, 2409, 2414, 2437,   30, 2460,
     2464, 1349, 2438, 2484, 2488, 2492, 2507, 1445,   54, 2511,
     2516, 2534, 1495,   53, 1631, 2538,    4, 1658, 1662, 2639,
     2585, 2590, 2595, 2600, 2605, 2610, 2615, 2619, 2624, 2628,
     2633
    } ;

static yyconst flex_int16_t yy_def[982] =
    {   0,
      971,  971,  972,  972,  973,  973,  974,  974,  975,  975,
      975,  975,  976,  976,  977,  977,  970,  970,  970,  978,
      970,  978,  970,  970,  978,  970,   25,  970,  970,   25,
      979,  970,  980,  981,  970,  970,  970,  970,  970,  970,
       19,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  978,   25,   25,   25,   25,   25,   25,   25,   25,
      970,  970,  970,  970,   25,   25,  970,   25,   25,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,   25,  979,  980,  981,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,

      970,  970,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  970,  970,  970,  970,   25,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,   25,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,   25,
       25,   25,   25,   25,   25,   25,   25,   25,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,

      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,   25,
       25,   25,   25,   25,   25,   25,   25,   25,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,   25,   25,   25,   25,   25,   25,   25,
       25,  970,  970,  970,  970,  970,  970,  970,  970,  970,

      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,   25,
       25,   25,   25,   25,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,

      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
       25,   25,   25,   25,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
       25,   25,   25,   25,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,

      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,   25,   25,   25,   25,   25,
       25,   25,   25,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,   25,   25,   25,   25,   25,   25,   25,   25,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,

      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,   25,   25,  628,   25,
       25,   25,  628,   25,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  628,  628,   25,  628,   25,   25,   25,
       25,  628,   25,   25,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,

      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,   25,   25,  473,   25,  628,   25,   25,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,   25,   25,   25,   25,   25,   25,  628,
       25,   25,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,   25,   25,   25,   25,   25,   25,   25,

       25,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,   25,   25,   25,   25,
       25,   25,   25,   25,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,   25,   25,   25,   25,   25,
      628,  628,   25,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,   25,  628,   25,   25,   25,
      628,  628,  628,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  628,  628,   25,   25,   25,  628,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  628,   25,   25,   25,  970,  970,  970,  970,  970,

      970,  970,   25,   25,   25,  970,  970,  970,  970,   25,
       25,   25,  970,  970,  970,   25,   25,   25,  970,  970,
      970,   25,   25,   25,  970,  970,  970,   25,   25,   25,
      970,  970,  970,   25,   25,   25,  970,  970,  970,   25,
       25,   25,  970,  970,  970,   25,   25,  628,  970,  970,
      970,  970,   25,  628,  628,  970,  970,  970,  970,  628,
      628,  970,  970,  970,  970,  628,  970,  970,  970,    0,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970
    } ;

static yyconst flex_int16_t yy_nxt[2693] =
    {   0,
       18,   19,   20,   19,   20,   18,   21,  969,   23,   18,
       24,   25,   26,   27,   28,   18,   29,   18,   68,   62,
       69,   63,   30,   18,   19,   20,   19,   20,   18,   21,
       64,   23,   18,   24,   25,   26,   27,   28,   18,   29,
       18,   36,   36,   39,   39,   30,  203,   97,   99,   37,
       37,  204,   68,  970,   69,  970,  968,  965,   40,   40,
       41,   41,   41,   41,  970,   98,  970,   53,  970,  100,
      577,   42,   53,   43,   53,   44,  956,   83,   53,   53,
      115,  115,   53,   53,  169,   53,  578,  950,   53,   53,
       53,   45,   46,   53,  949,  103,  945,   47,   53,   53,

      111,   48,  944,  104,   53,   53,   49,   50,   51,   41,
       52,   41,   52,  134,   53,  943,   53,  939,  105,   53,
       42,   53,   43,   53,   44,  244,  135,  112,  136,  137,
      245,  106,   53,  108,  113,   53,   62,   53,   63,   53,
       54,   55,  938,  262,   53,  113,   56,  263,  113,  107,
       57,   53,  144,   53,  109,   58,   59,   60,  970,  113,
      970,  110,  937,  115,  115,   53,  138,  116,  933,  970,
       65,  970,  149,  970,   53,  139,  932,   66,  270,  140,
       53,  139,  263,  141,  931,  140,   53,   53,   53,  141,
       53,   66,   70,   53,  312,   53,   53,   53,  313,   71,

      927,   53,   53,   53,   72,  273,  273,   53,  273,  926,
      274,   53,  274,  925,  160,  921,   53,   53,  165,   73,
       74,  920,  168,   75,   53,   76,   77,  162,   78,  161,
       79,   53,   53,   80,   81,  112,   82,   71,  919,   53,
      713,  713,  113,  713,  116,   53,  715,  715,   53,  715,
      915,   53,  163,   53,  914,   53,  113,   73,   74,  913,
      164,   75,  909,   89,   90,   53,   91,  908,   79,   53,
      907,   92,   93,   53,   82,   41,   52,   41,   52,  166,
       53,  906,   53,  902,  178,  755,   42,  901,   43,   53,
       44,  756,  182,  900,   53,  899,  757,  179,  167,  180,

      181,  183,  898,   53,  890,  184,   54,   55,   53,  185,
      889,  888,   56,   53,  887,   53,   57,  886,  870,   53,
       53,   58,   59,   60,  118,  119,   53,  869,  120,  220,
      121,  122,  221,  123,   53,  124,  868,  865,  125,  126,
      223,  127,  212,  212,  212,  212,   53,   53,  212,  212,
      212,  212,  864,   53,   53,  855,  213,  212,  222,  212,
      222,  850,  213,  849,  224,   53,   53,   53,   53,   53,
      225,  213,   53,   53,   53,  848,   53,  250,  250,  250,
      250,   53,  250,  250,  250,  250,  226,   53,  720,  720,
       53,  720,  251,  713,  713,   53,  713,  251,  252,  847,

      227,   53,  846,  267,  275,  275,  275,  275,   53,  228,
      279,  279,  279,  279,  281,  281,  281,  281,  276,   53,
       53,  845,   53,  844,  280,  835,   53,   53,  282,   53,
       53,   53,   53,  285,  834,  833,   53,   53,   53,   53,
       53,  287,  284,  212,  222,  212,  222,  832,  831,  830,
      288,  291,   53,   53,  829,   53,  361,  213,  292,  292,
      292,  292,   53,  828,  362,   53,  298,  298,  298,  298,
      827,  826,   53,  293,  816,  815,   53,  275,  286,  275,
      286,  299,  302,  302,  302,  302,   53,  300,  814,   53,
      527,  276,  315,  315,  315,  315,   53,  303,  322,  322,

      322,  322,  813,  294,  812,  715,  715,  316,  715,  811,
       53,  279,  289,  279,  289,  304,  250,  250,  250,  250,
      810,  347,  347,   53,  347,  280,  348,  809,  349,  317,
       53,  251,  808,  807,  327,  327,  327,  327,  806,  334,
      334,  334,  334,  793,   53,  281,  290,  281,  290,  328,
      335,  346,  346,  346,  346,  791,  791,   53,  791,  282,
      275,  275,  275,  275,   53,  279,  279,  279,  279,   53,
      352,  352,  792,  352,  276,  353,   53,  354,   53,  280,
      281,  281,  281,  281,  355,  355,   53,  355,  790,  356,
       53,  357,  789,   53,  282,  358,  358,  358,  358,  360,

      292,  292,  292,  292,  788,  720,  720,   53,  720,  359,
      275,  286,  275,  286,  787,  293,  365,  365,  365,  365,
      363,  786,   53,  785,  276,  298,  298,  298,  298,   53,
      370,  370,  370,  370,  302,  302,  302,  302,  791,  791,
      299,  791,  784,   53,  279,  289,  279,  289,  781,  303,
      373,  373,  373,  373,  871,  871,   53,  871,  280,  376,
      376,  376,  376,   53,  780,  774,   53,  383,  383,  383,
      383,  763,  762,   53,  377,  761,  758,   53,  281,  290,
      281,  290,  384,  315,  315,  315,  315,   53,  872,  872,
       53,  872,  282,  387,  387,  387,  387,   53,  316,  322,

      322,  322,  322,  754,  471,  393,  393,  393,  393,  753,
      752,   53,  358,  364,  358,  364,  394,  751,  273,  273,
      395,  273,  750,  274,   53,  274,  359,  327,  327,  327,
      327,   53,  334,  334,  334,  334,  408,  408,  408,  408,
      748,  745,  328,  335,  741,   53,  346,  346,  346,  346,
      740,  395,  358,  358,  358,  358,  418,  418,   53,  418,
       53,  419,   53,  420,   53,   53,  359,   53,  736,   53,
      734,   53,  733,  423,   53,  424,  722,  347,  347,   53,
      347,   53,  348,   53,  349,   53,  365,  365,  365,  365,
      421,  422,  358,  364,  358,  364,  370,  370,  370,  370,

      429,  429,  429,  429,   53,  721,  359,  373,  373,  373,
      373,   53,  719,  718,  717,  430,  376,  376,  376,  376,
      434,  434,  434,  434,  716,   53,  435,  435,  435,  435,
      714,  377,  383,  383,  383,  383,  441,  441,  441,  441,
      708,  436,  387,  387,  387,  387,  707,  384,  393,  393,
      393,  393,  450,  450,  450,  450,  704,  352,  352,  394,
      352,  700,  353,  395,  354,  451,  457,  457,  457,  457,
      408,  408,  408,  408,  699,  355,  355,   53,  355,   53,
      356,  458,  357,  698,   53,  395,   53,   53,  429,  429,
      429,  429,  418,  418,   53,  418,  696,  419,   53,  420,

       53,  473,  693,  430,  692,  474,  885,  885,   53,  885,
      689,  472,  479,  479,  479,  479,  434,  434,  434,  434,
      435,  435,  435,  435,  483,  483,  483,  483,  486,  486,
      486,  486,  688,  685,  673,  436,  488,  488,  488,  488,
      669,  668,  667,  487,  441,  441,  441,  441,  657,  656,
      655,  489,  491,  491,  491,  491,  496,  496,  496,  496,
      450,  450,  450,  450,  651,  891,  891,  492,  891,  650,
      649,  497,  500,  500,  500,  500,  505,  505,  505,  505,
      648,  498,  647,  501,  644,  897,  897,  502,  897,  642,
      641,  506,  457,  457,  457,  457,  640,  639,  507,  510,

      510,  510,  510,  508,  638,  637,  636,  458,  514,  514,
      514,  514,  505,  505,  505,  505,  517,  517,  517,  517,
      520,  871,  871,  502,  871,   53,  521,  506,  522,  523,
      518,  524,   53,  635,  515,  536,  536,  536,  536,  516,
      517,  526,  517,  526,  872,  872,   53,  872,  626,  625,
      537,  533,   53,  624,  518,  479,  479,  479,  479,   53,
      538,  540,  540,  540,  540,  483,  483,  483,  483,  544,
      544,  544,  544,   53,   53,  623,  541,  885,  885,  528,
      885,   53,  622,  621,  545,  529,  620,  530,  531,  619,
      532,  546,  618,  617,  616,   53,  547,  486,  486,  486,

      486,  549,  549,  549,  549,  488,  488,  488,  488,  615,
      614,  613,  487,  550,  550,  550,  550,  612,  611,  610,
      489,  491,  491,  491,  491,  552,  552,  552,  552,  496,
      496,  496,  496,  609,  608,  607,  492,  556,  556,  556,
      556,  606,  605,  604,  497,  500,  500,  500,  500,  560,
      560,  560,  560,  601,  572,  572,  501,  572,  600,  573,
      502,  574,  561,  505,  505,  505,  505,  564,  564,  564,
      564,  510,  510,  510,  510,  598,  597,  595,  506,  514,
      514,  514,  514,  517,  517,  517,  517,  594,   53,  592,
      536,  536,  536,  536,  502,   53,  591,  518,  517,  526,

      517,  526,  582,  581,   53,  537,   53,   53,   53,   53,
       53,   53,  518,   53,   53,   53,  580,   53,  583,  593,
      593,  593,  593,   53,  585,   53,  579,   53,   53,   53,
       53,   53,   53,  588,  584,  891,  891,  587,  891,   53,
      586,  576,  575,  571,  590,  540,  540,  540,  540,  589,
      570,  569,   53,   53,  596,  596,  596,  596,  568,   53,
      541,  544,  544,  544,  544,  599,  599,  599,  599,  602,
      602,  602,  602,   53,  567,  566,  545,  549,  549,  549,
      549,  627,  565,  563,  603,  550,  550,  550,  550,  552,
      552,  552,  552,  556,  556,  556,  556,  560,  560,  560,

      560,  564,  564,  564,  564,   53,   53,   53,   53,   53,
      562,  559,   53,   53,   53,   53,   53,   53,  593,  593,
      593,  593,  897,  897,   53,  897,   53,   53,   53,   53,
       53,  630,  629,   53,  628,  631,  558,  632,   53,  557,
       53,  596,  596,  596,  596,  599,  599,  599,  599,  633,
      959,  959,  634,  959,   53,  602,  602,  602,  602,  643,
      643,  643,  643,  645,  645,  645,  645,  555,  554,  553,
      603,  652,  652,  652,  652,  551,  572,  572,  646,  572,
      548,  573,  653,  574,  543,  542,  654,  658,  658,  658,
      658,  659,  659,  659,  659,  661,  661,  661,  661,   53,

       53,   53,  654,  539,  535,  660,   53,   53,   53,  662,
      664,  664,  664,  664,  670,  670,  670,  670,  534,  525,
      679,   53,  681,  519,  665,  513,  512,   53,  671,  511,
      664,  677,  664,  677,   53,  680,  670,  682,  670,  682,
      663,  509,  504,  666,  665,  503,  964,  964,   53,  964,
      671,  672,  659,  674,  659,  674,  499,  686,  686,  686,
      686,  684,  495,  678,   53,  494,  660,  690,  690,  690,
      690,   53,  687,  683,  493,   53,  694,  694,  694,  694,
      490,   53,  691,  485,  484,   53,  661,  675,  661,  675,
      482,  695,  643,  643,  643,  643,  967,  967,   53,  967,

      662,  645,  645,  645,  645,   53,  697,  697,  697,  697,
      701,  701,  701,  701,  481,  480,  646,  710,  710,   53,
      710,  702,  711,   53,  712,  703,  652,  652,  652,  652,
       53,  676,  705,  705,  705,  705,  478,  653,  477,  476,
      475,  654,  724,  470,   53,  706,  709,  709,  709,  709,
      658,  658,  658,  658,  659,  659,  659,  659,  469,  710,
      710,  703,  710,  468,  711,  654,  712,  467,  660,  661,
      661,  661,  661,  664,  664,  664,  664,  670,  670,  670,
      670,   53,   53,  662,  466,  465,  464,  665,   53,   53,
      463,  671,  659,  674,  659,  674,  664,  677,  664,  677,

       53,  462,   53,   53,   53,   53,  660,   53,  461,  460,
      665,   53,   53,  459,  725,  723,  670,  682,  670,  682,
      456,   53,   53,  455,   53,   53,   53,  454,  453,   53,
      671,   53,  959,  959,  726,  959,  764,   53,  727,  728,
      452,   53,  449,   53,  448,   53,  447,  446,  445,  729,
      730,  730,  730,  730,  686,  686,  686,  686,  444,  964,
      964,   53,  964,  967,  967,  731,  967,  443,  442,  687,
      732,  732,  732,  732,  690,  690,  690,  690,  735,  735,
      735,  735,  737,  737,  737,  737,  440,  439,  438,  691,
      694,  694,  694,  694,  437,  433,  432,  738,  739,  739,

      739,  739,  431,  428,  427,  695,  697,  697,  697,  697,
      742,  742,  742,  742,  426,  701,  701,  701,  701,  425,
      417,  743,   53,  416,  415,  744,  702,  414,  413,   53,
      703,  746,  746,  746,  746,  705,  705,  705,  705,  749,
      749,  749,  749,   53,  747,  709,  709,  709,  709,  759,
      759,  759,  759,  766,  744,  412,  765,  411,   53,  767,
      703,   53,   53,  760,  768,   53,  759,  770,  759,  770,
       53,   53,  730,  730,  730,  730,  410,   53,   53,   53,
      760,  409,  407,  769,  406,  405,  404,  731,  771,  403,
      402,   53,   53,  773,  773,  773,  773,  732,  732,  732,

      732,  775,  775,  775,  775,  401,  400,  772,  399,  398,
      397,   53,  735,  735,  735,  735,  776,  777,  777,  777,
      777,  737,  737,  737,  737,  779,  779,  779,  779,  396,
      392,  391,  778,  390,  389,  388,  738,  739,  739,  739,
      739,  742,  742,  742,  742,  782,  782,  782,  782,  386,
       53,  385,  743,  382,  381,  380,  744,   53,  783,  746,
      746,  746,  746,  749,  749,  749,  749,  759,  759,  759,
      759,   53,   53,   53,  379,  795,  378,   53,  744,   53,
       53,  760,  375,   53,   53,   53,  374,  372,  371,  794,
       53,  369,   53,   53,   53,  797,  368,  367,   53,  366,

      798,  351,  350,  796,   53,   53,   53,  759,  770,  759,
      770,  345,   53,   53,  344,  799,  773,  773,  773,  773,
       53,  760,  802,  802,  802,  802,   53,  775,  775,  775,
      775,  343,  800,  342,  801,  341,  340,  803,  804,  804,
      804,  804,  776,  777,  777,  777,  777,  805,  805,  805,
      805,  339,   53,  779,  779,  779,  779,   53,  778,  782,
      782,  782,  782,   53,   53,   53,   53,   53,   53,   53,
       53,  338,   53,   53,   53,   53,   53,  337,   53,  336,
      333,  332,  817,  331,   53,  330,   53,   53,   53,   53,
      823,  329,  820,  326,  819,   53,  822,  325,  324,  818,

      821,  323,   53,  321,  824,  802,  802,  802,  802,  825,
      825,  825,  825,  320,  319,  318,   53,  314,  311,  310,
      803,  804,  804,  804,  804,  805,  805,  805,  805,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,  825,  825,  825,  825,  309,  308,  307,
       53,  837,   53,  839,   53,   53,   53,  306,  836,  840,
       53,  305,  301,  297,  838,  296,  841,   53,  842,  851,
      851,  851,  851,  853,  853,  853,  853,   53,   53,   53,
      843,   53,   53,  852,   53,   53,   53,  854,   53,   53,
      851,  861,  851,  861,  295,   53,  283,  859,   53,   53,

       53,   53,  278,   53,  852,  860,  277,  272,   53,   53,
      271,  856,  857,  269,  268,  266,  858,  853,  862,  853,
      862,  265,   53,  866,  866,  866,  866,  851,  851,  851,
      851,  854,   53,   53,  264,   53,  261,  867,  863,   53,
       53,  852,  853,  853,  853,  853,  873,  873,  873,  873,
       53,   53,   53,   53,  905,  260,  854,   53,   53,   53,
      874,  259,   53,  258,  257,  875,  866,  876,  866,  876,
      879,   53,   53,   53,  851,  861,  851,  861,  256,  255,
      867,  254,  877,  253,  249,  878,  248,  247,  852,  853,
      862,  853,  862,  873,  880,  873,  880,  881,  881,  881,

      881,  246,  243,  854,  242,  241,  240,  874,  239,  238,
      237,   53,  882,  883,  883,  883,  883,  236,   53,   53,
      235,  866,  866,  866,  866,   53,  234,  884,  873,  873,
      873,  873,  233,   53,   53,  867,  232,  231,   53,  911,
       53,  230,  874,  883,  892,  883,  892,  866,  876,  866,
      876,   53,   53,  229,   53,  169,  219,  884,   53,   53,
      895,  867,  873,  880,  873,  880,  218,  217,  893,  216,
      215,  214,   53,   53,  211,  210,  874,  894,  881,  881,
      881,  881,  896,  896,  896,  896,  209,  208,   53,  207,
      206,  205,   53,  882,  883,  883,  883,  883,  883,  892,

      883,  892,   53,   53,   53,  202,  201,   53,  884,   53,
       53,   53,  884,  896,  896,  896,  896,  200,  199,   53,
      198,   53,  197,   53,   53,   53,   53,  903,   53,   53,
       53,  912,  196,  910,  195,  194,   53,   53,  193,  904,
       53,  917,   53,   53,  192,   53,   53,   53,  191,   53,
       53,  918,   53,   53,   53,  916,   53,  922,   53,  190,
      189,  188,   53,  187,  186,   53,   53,  923,   53,   53,
      928,   53,  177,  176,   53,   53,  175,   53,   53,   53,
      924,   53,   53,   53,   53,  174,   53,   53,  173,  172,
      171,  929,   53,   53,   53,   53,   53,  930,   53,   53,

      169,  170,  936,   53,  934,  159,   53,   53,   53,  935,
       53,   53,  940,  941,  951,  951,  951,  951,   53,  158,
       53,  942,   53,  157,   53,  156,  946,   53,  952,   53,
      155,  154,   53,  153,   53,  152,  151,  947,  951,  955,
      951,  955,  150,   53,  948,  148,  147,  146,   53,  145,
      143,   53,  952,  142,  133,  132,  953,  131,   53,  130,
      954,  957,  957,  957,  957,  951,  951,  951,  951,  129,
      128,  117,   53,  114,  102,  958,  101,   96,   95,  952,
       94,   67,   88,   53,  960,  957,  961,  957,  961,  951,
      955,  951,  955,  962,  962,  962,  962,   87,   67,  958,

       61,   61,  970,  952,   32,   32,   32,  963,  957,  957,
      957,  957,  962,  966,  962,  966,   32,  957,  961,  957,
      961,   32,  958,   32,  970,  970,  963,  970,  970,  970,
       53,  958,  970,  970,   53,  962,  962,  962,  962,  962,
      966,  962,  966,  970,  970,  970,  970,  970,  970,  963,
      970,  970,  970,  963,  970,  970,  970,   53,  970,  970,
      970,  970,   53,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,   53,   22,   22,   22,   22,   22,
       31,   31,   31,   31,   31,   33,   33,   33,   33,   33,

       34,   34,   34,   34,   34,   32,   32,   32,   32,   32,
       35,   35,   35,   35,   35,   38,   38,   38,   38,   38,
       53,  970,  970,   53,   84,   84,   84,   84,   85,   85,
      970,   85,   85,   86,   86,   86,  970,   86,   17,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970

    } ;

static yyconst flex_int16_t yy_chk[2693] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,  967,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   27,   24,
       27,   24,    1,    2,    2,    2,    2,    2,    2,    2,
       24,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   13,   14,   15,   16,    2,  143,   48,   49,   13,
       14,  143,   69,   22,   69,   22,  964,  959,   15,   16,
       19,   19,   19,   19,   22,   48,   22,   30,   22,   49,
      521,   19,   53,   19,   30,   19,  949,   30,   54,   53,
      113,  113,   55,   60,  113,   54,  521,  944,   30,   55,
       60,   19,   19,   53,  943,   54,  939,   19,   56,   54,

       60,   19,  938,   55,   60,   56,   19,   19,   19,   20,
       20,   20,   20,   79,   57,  937,   58,  933,   56,   56,
       20,   57,   20,   58,   20,  187,   79,   62,   79,   79,
      187,   57,   59,   58,   62,   57,   63,   58,   63,   59,
       20,   20,  932,  202,   83,   63,   20,  202,   62,   57,
       20,   83,   83,   59,   58,   20,   20,   20,   25,   63,
       25,   59,  931,   66,   66,   83,   80,   66,  927,   25,
       25,   25,   92,   25,   66,   80,  926,   25,  209,   80,
      103,   92,  209,   80,  925,   92,  108,  103,   66,   92,
      105,   25,   28,  108,  243,  111,  104,  105,  243,   28,

      921,  103,  111,  104,   28,  213,  213,  108,  213,  920,
      213,  105,  213,  919,  103,  915,  111,  104,  108,   28,
       28,  914,  111,   28,  106,   28,   28,  105,   28,  104,
       28,  106,  107,   28,   28,  112,   28,   43,  913,  107,
      662,  662,  112,  662,  116,  106,  665,  665,  109,  665,
      909,  116,  106,  107,  908,  109,  112,   43,   43,  907,
      107,   43,  901,   43,   43,  116,   43,  900,   43,  109,
      899,   43,   43,  110,   43,   52,   52,   52,   52,  109,
      110,  897,  144,  891,  124,  717,   52,  888,   52,  144,
       52,  717,  125,  887,  110,  886,  717,  124,  110,  124,

      124,  125,  885,  144,  872,  125,   52,   52,  160,  125,
      871,  870,   52,  161,  869,  160,   52,  868,  850,  163,
      161,   52,   52,   52,   71,   71,  163,  849,   71,  160,
       71,   71,  161,   71,  161,   71,  848,  846,   71,   71,
      163,   71,  153,  153,  153,  153,  164,  165,  212,  212,
      212,  212,  844,  164,  165,  835,  153,  162,  162,  162,
      162,  832,  212,  831,  164,  166,  167,  164,  165,  162,
      165,  162,  166,  167,  168,  830,  162,  192,  192,  192,
      192,  168,  206,  206,  206,  206,  166,  167,  671,  671,
      162,  671,  192,  751,  751,  168,  751,  206,  192,  829,

      167,  221,  828,  206,  214,  214,  214,  214,  221,  168,
      217,  217,  217,  217,  218,  218,  218,  218,  214,  220,
      224,  827,  221,  826,  217,  816,  220,  224,  218,  225,
      228,  285,  287,  221,  815,  813,  225,  228,  285,  287,
      220,  224,  220,  222,  222,  222,  222,  812,  811,  810,
      225,  228,  285,  287,  809,  222,  285,  222,  229,  229,
      229,  229,  222,  808,  287,  472,  233,  233,  233,  233,
      807,  806,  472,  229,  793,  792,  222,  223,  223,  223,
      223,  233,  235,  235,  235,  235,  472,  233,  791,  223,
      472,  223,  245,  245,  245,  245,  223,  235,  251,  251,

      251,  251,  790,  229,  789,  753,  753,  245,  753,  788,
      223,  226,  226,  226,  226,  235,  250,  250,  250,  250,
      787,  276,  276,  226,  276,  226,  276,  786,  276,  245,
      226,  250,  785,  784,  256,  256,  256,  256,  780,  262,
      262,  262,  262,  763,  226,  227,  227,  227,  227,  256,
      262,  274,  274,  274,  274,  760,  760,  227,  760,  227,
      275,  275,  275,  275,  227,  279,  279,  279,  279,  284,
      280,  280,  762,  280,  275,  280,  284,  280,  227,  279,
      281,  281,  281,  281,  282,  282,  288,  282,  758,  282,
      284,  282,  757,  288,  281,  283,  283,  283,  283,  284,

      292,  292,  292,  292,  756,  761,  761,  288,  761,  283,
      286,  286,  286,  286,  755,  292,  293,  293,  293,  293,
      288,  754,  286,  752,  286,  298,  298,  298,  298,  286,
      299,  299,  299,  299,  302,  302,  302,  302,  814,  814,
      298,  814,  748,  286,  289,  289,  289,  289,  743,  302,
      303,  303,  303,  303,  852,  852,  289,  852,  289,  306,
      306,  306,  306,  289,  740,  733,  421,  312,  312,  312,
      312,  722,  721,  421,  306,  720,  718,  289,  290,  290,
      290,  290,  312,  315,  315,  315,  315,  421,  854,  854,
      290,  854,  290,  316,  316,  316,  316,  290,  315,  322,

      322,  322,  322,  716,  421,  323,  323,  323,  323,  715,
      714,  290,  291,  291,  291,  291,  323,  713,  345,  345,
      323,  345,  710,  345,  291,  345,  291,  327,  327,  327,
      327,  291,  334,  334,  334,  334,  340,  340,  340,  340,
      707,  702,  327,  334,  698,  291,  346,  346,  346,  346,
      696,  340,  358,  358,  358,  358,  359,  359,  360,  359,
      361,  359,  362,  359,  363,  360,  358,  361,  692,  362,
      689,  363,  688,  362,  675,  363,  673,  413,  413,  360,
      413,  361,  413,  362,  413,  363,  365,  365,  365,  365,
      360,  361,  364,  364,  364,  364,  370,  370,  370,  370,

      371,  371,  371,  371,  364,  672,  364,  373,  373,  373,
      373,  364,  669,  668,  667,  371,  376,  376,  376,  376,
      377,  377,  377,  377,  666,  364,  378,  378,  378,  378,
      663,  376,  383,  383,  383,  383,  384,  384,  384,  384,
      656,  378,  387,  387,  387,  387,  655,  383,  393,  393,
      393,  393,  395,  395,  395,  395,  653,  416,  416,  393,
      416,  650,  416,  393,  416,  395,  402,  402,  402,  402,
      408,  408,  408,  408,  649,  417,  417,  422,  417,  423,
      417,  402,  417,  648,  422,  408,  423,  424,  429,  429,
      429,  429,  468,  468,  424,  468,  644,  468,  422,  468,

      423,  423,  641,  429,  640,  424,  867,  867,  424,  867,
      638,  422,  430,  430,  430,  430,  434,  434,  434,  434,
      435,  435,  435,  435,  436,  436,  436,  436,  439,  439,
      439,  439,  637,  635,  626,  435,  440,  440,  440,  440,
      624,  623,  622,  439,  441,  441,  441,  441,  616,  615,
      614,  440,  443,  443,  443,  443,  447,  447,  447,  447,
      450,  450,  450,  450,  612,  874,  874,  443,  874,  611,
      609,  447,  452,  452,  452,  452,  455,  455,  455,  455,
      608,  447,  606,  452,  604,  884,  884,  452,  884,  601,
      600,  455,  457,  457,  457,  457,  598,  597,  455,  458,

      458,  458,  458,  455,  595,  594,  592,  457,  462,  462,
      462,  462,  463,  463,  463,  463,  464,  464,  464,  464,
      466,  889,  889,  462,  889,  474,  466,  463,  466,  466,
      464,  466,  474,  591,  463,  477,  477,  477,  477,  463,
      471,  471,  471,  471,  890,  890,  474,  890,  582,  581,
      477,  474,  471,  580,  471,  479,  479,  479,  479,  471,
      477,  480,  480,  480,  480,  483,  483,  483,  483,  484,
      484,  484,  484,  471,  473,  579,  480,  898,  898,  473,
      898,  473,  578,  577,  484,  473,  576,  473,  473,  575,
      473,  484,  572,  571,  570,  473,  484,  486,  486,  486,

      486,  487,  487,  487,  487,  488,  488,  488,  488,  569,
      567,  566,  486,  489,  489,  489,  489,  565,  563,  562,
      488,  491,  491,  491,  491,  492,  492,  492,  492,  496,
      496,  496,  496,  558,  557,  555,  491,  497,  497,  497,
      497,  554,  553,  551,  496,  500,  500,  500,  500,  502,
      502,  502,  502,  547,  518,  518,  500,  518,  546,  518,
      500,  518,  502,  505,  505,  505,  505,  506,  506,  506,
      506,  510,  510,  510,  510,  543,  542,  539,  505,  514,
      514,  514,  514,  517,  517,  517,  517,  538,  527,  535,
      536,  536,  536,  536,  514,  527,  534,  517,  526,  526,

      526,  526,  525,  524,  528,  536,  529,  530,  531,  527,
      526,  528,  526,  529,  530,  531,  523,  526,  527,  537,
      537,  537,  537,  533,  529,  528,  522,  529,  530,  531,
      533,  526,  532,  531,  528,  902,  902,  530,  902,  532,
      529,  520,  519,  516,  533,  540,  540,  540,  540,  532,
      515,  513,  583,  532,  541,  541,  541,  541,  512,  583,
      540,  544,  544,  544,  544,  545,  545,  545,  545,  548,
      548,  548,  548,  583,  511,  508,  544,  549,  549,  549,
      549,  583,  507,  504,  548,  550,  550,  550,  550,  552,
      552,  552,  552,  556,  556,  556,  556,  560,  560,  560,

      560,  564,  564,  564,  564,  584,  585,  586,  587,  588,
      503,  501,  584,  585,  586,  587,  588,  589,  593,  593,
      593,  593,  906,  906,  589,  906,  584,  585,  586,  587,
      588,  586,  585,  590,  584,  587,  499,  588,  589,  498,
      590,  596,  596,  596,  596,  599,  599,  599,  599,  589,
      952,  952,  590,  952,  590,  602,  602,  602,  602,  603,
      603,  603,  603,  605,  605,  605,  605,  495,  494,  493,
      602,  613,  613,  613,  613,  490,  618,  618,  605,  618,
      485,  618,  613,  618,  482,  481,  613,  617,  617,  617,
      617,  619,  619,  619,  619,  620,  620,  620,  620,  630,

      631,  632,  617,  478,  476,  619,  630,  631,  632,  620,
      621,  621,  621,  621,  625,  625,  625,  625,  475,  467,
      630,  631,  632,  465,  621,  461,  460,  634,  625,  459,
      629,  629,  629,  629,  634,  631,  633,  633,  633,  633,
      620,  456,  454,  621,  629,  453,  958,  958,  634,  958,
      633,  625,  627,  627,  627,  627,  448,  636,  636,  636,
      636,  634,  446,  629,  627,  445,  627,  639,  639,  639,
      639,  627,  636,  633,  444,  629,  642,  642,  642,  642,
      442,  633,  639,  438,  437,  627,  628,  628,  628,  628,
      433,  642,  643,  643,  643,  643,  963,  963,  628,  963,

      628,  645,  645,  645,  645,  628,  646,  646,  646,  646,
      651,  651,  651,  651,  432,  431,  645,  660,  660,  628,
      660,  651,  660,  678,  660,  651,  652,  652,  652,  652,
      678,  628,  654,  654,  654,  654,  428,  652,  427,  426,
      425,  652,  678,  420,  678,  654,  657,  657,  657,  657,
      658,  658,  658,  658,  659,  659,  659,  659,  419,  750,
      750,  657,  750,  418,  750,  658,  750,  415,  659,  661,
      661,  661,  661,  664,  664,  664,  664,  670,  670,  670,
      670,  676,  679,  661,  414,  412,  411,  664,  676,  679,
      410,  670,  674,  674,  674,  674,  677,  677,  677,  677,

      680,  409,  676,  679,  723,  681,  674,  680,  407,  406,
      677,  723,  681,  404,  679,  676,  682,  682,  682,  682,
      400,  680,  683,  399,  684,  723,  681,  398,  397,  683,
      682,  684,  965,  965,  680,  965,  723,  674,  681,  683,
      396,  677,  394,  683,  392,  684,  391,  390,  389,  684,
      685,  685,  685,  685,  686,  686,  686,  686,  388,  968,
      968,  682,  968,  969,  969,  685,  969,  386,  385,  686,
      687,  687,  687,  687,  690,  690,  690,  690,  691,  691,
      691,  691,  693,  693,  693,  693,  382,  381,  380,  690,
      694,  694,  694,  694,  379,  375,  374,  693,  695,  695,

      695,  695,  372,  369,  368,  694,  697,  697,  697,  697,
      699,  699,  699,  699,  367,  701,  701,  701,  701,  366,
      355,  699,  724,  352,  351,  699,  701,  350,  347,  724,
      701,  703,  703,  703,  703,  705,  705,  705,  705,  708,
      708,  708,  708,  724,  703,  709,  709,  709,  709,  719,
      719,  719,  719,  725,  708,  344,  724,  343,  726,  725,
      709,  725,  725,  719,  725,  726,  727,  727,  727,  727,
      728,  729,  730,  730,  730,  730,  342,  728,  729,  726,
      727,  341,  339,  726,  338,  337,  336,  730,  728,  335,
      333,  728,  729,  731,  731,  731,  731,  732,  732,  732,

      732,  734,  734,  734,  734,  332,  331,  729,  330,  326,
      325,  727,  735,  735,  735,  735,  734,  736,  736,  736,
      736,  737,  737,  737,  737,  738,  738,  738,  738,  324,
      321,  320,  736,  319,  318,  317,  737,  739,  739,  739,
      739,  742,  742,  742,  742,  744,  744,  744,  744,  314,
      765,  313,  742,  311,  310,  309,  742,  765,  744,  746,
      746,  746,  746,  749,  749,  749,  749,  759,  759,  759,
      759,  765,  764,  766,  308,  765,  307,  767,  749,  764,
      766,  759,  305,  768,  767,  769,  304,  301,  300,  764,
      768,  297,  769,  764,  766,  767,  296,  295,  767,  294,

      768,  278,  277,  766,  768,  771,  769,  770,  770,  770,
      770,  273,  771,  772,  272,  769,  773,  773,  773,  773,
      772,  770,  774,  774,  774,  774,  771,  775,  775,  775,
      775,  271,  771,  269,  772,  268,  267,  774,  776,  776,
      776,  776,  775,  777,  777,  777,  777,  778,  778,  778,
      778,  266,  770,  779,  779,  779,  779,  794,  777,  782,
      782,  782,  782,  795,  794,  796,  797,  799,  798,  800,
      795,  265,  796,  797,  799,  798,  800,  264,  794,  263,
      261,  260,  794,  259,  795,  258,  796,  797,  799,  798,
      800,  257,  797,  255,  796,  801,  799,  254,  253,  795,

      798,  252,  801,  249,  801,  802,  802,  802,  802,  803,
      803,  803,  803,  248,  247,  246,  801,  244,  242,  241,
      802,  804,  804,  804,  804,  805,  805,  805,  805,  817,
      818,  819,  820,  822,  821,  823,  817,  818,  819,  820,
      822,  821,  823,  825,  825,  825,  825,  240,  239,  238,
      817,  818,  819,  820,  822,  821,  823,  237,  817,  821,
      824,  236,  234,  232,  819,  231,  822,  824,  823,  833,
      833,  833,  833,  834,  834,  834,  834,  836,  839,  837,
      824,  824,  838,  833,  836,  839,  837,  834,  840,  838,
      841,  841,  841,  841,  230,  840,  219,  839,  836,  839,

      837,  843,  216,  838,  841,  840,  215,  211,  843,  840,
      210,  836,  837,  208,  207,  205,  838,  842,  842,  842,
      842,  204,  843,  847,  847,  847,  847,  851,  851,  851,
      851,  842,  856,  895,  203,  841,  201,  847,  843,  856,
      895,  851,  853,  853,  853,  853,  855,  855,  855,  855,
      858,  859,  860,  856,  895,  200,  853,  858,  859,  860,
      855,  199,  842,  198,  197,  856,  857,  857,  857,  857,
      860,  858,  859,  860,  861,  861,  861,  861,  196,  195,
      857,  194,  858,  193,  191,  859,  190,  189,  861,  862,
      862,  862,  862,  863,  863,  863,  863,  864,  864,  864,

      864,  188,  186,  862,  185,  184,  183,  863,  182,  181,
      180,  857,  864,  865,  865,  865,  865,  179,  904,  861,
      178,  866,  866,  866,  866,  904,  177,  865,  873,  873,
      873,  873,  176,  879,  862,  866,  175,  174,  863,  904,
      879,  173,  873,  875,  875,  875,  875,  876,  876,  876,
      876,  877,  878,  172,  879,  169,  159,  875,  877,  878,
      879,  876,  880,  880,  880,  880,  158,  157,  877,  156,
      155,  154,  877,  878,  152,  151,  880,  878,  881,  881,
      881,  881,  882,  882,  882,  882,  150,  149,  875,  148,
      147,  146,  876,  881,  883,  883,  883,  883,  892,  892,

      892,  892,  893,  894,  903,  142,  141,  880,  883,  893,
      894,  903,  892,  896,  896,  896,  896,  140,  139,  905,
      138,  910,  137,  893,  894,  903,  905,  893,  910,  911,
      912,  905,  136,  903,  135,  134,  911,  912,  133,  894,
      905,  911,  910,  892,  132,  916,  917,  918,  131,  922,
      911,  912,  916,  917,  918,  910,  922,  916,  923,  130,
      129,  128,  924,  127,  126,  923,  916,  917,  918,  924,
      922,  928,  123,  122,  929,  930,  121,  934,  928,  923,
      918,  929,  930,  924,  934,  120,  935,  936,  119,  118,
      117,  923,  928,  935,  936,  929,  930,  924,  934,  940,

      115,  114,  930,  941,  928,  102,  940,  935,  936,  929,
      941,  942,  934,  935,  945,  945,  945,  945,  942,  101,
      940,  936,  946,  100,  941,   99,  940,  947,  945,  946,
       98,   97,  942,   96,  947,   95,   94,  941,  948,  948,
      948,  948,   93,  946,  942,   91,   90,   89,  947,   87,
       82,  953,  948,   81,   78,   77,  946,   76,  953,   75,
      947,  950,  950,  950,  950,  951,  951,  951,  951,   74,
       73,   70,  953,   64,   51,  950,   50,   47,   46,  951,
       45,   42,   40,  948,  953,  954,  954,  954,  954,  955,
      955,  955,  955,  956,  956,  956,  956,   37,   26,  954,

       23,   21,   17,  955,    8,    7,    6,  956,  957,  957,
      957,  957,  960,  960,  960,  960,    5,  961,  961,  961,
      961,    4,  957,    3,    0,    0,  960,    0,    0,    0,
      954,  961,    0,    0,  955,  962,  962,  962,  962,  966,
      966,  966,  966,    0,    0,    0,    0,    0,    0,  962,
        0,    0,    0,  966,    0,    0,    0,  960,    0,    0,
        0,    0,  961,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  966,  971,  971,  971,  971,  971,
      972,  972,  972,  972,  972,  973,  973,  973,  973,  973,

      974,  974,  974,  974,  974,  975,  975,  975,  975,  975,
      976,  976,  976,  976,  976,  977,  977,  977,  977,  977,
      978,    0,    0,  978,  979,  979,  979,  979,  980,  980,
        0,  980,  980,  981,  981,  981,    0,  981,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[111] =
    {   0,
1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
    1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "OSParseosrl.l"
/** @file parseosrl.l
 * 
 * @author  Robert Fourer,  Jun Ma, Kipp Martin, 
 * @version 2.0, 02/04/2009
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005-2009, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "OSParseosrl.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSrLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"


#define PARSERDEBUG
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;
     







#line 100 "OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 1465 "OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 110 "OSParseosrl.l"



#line 1711 "OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 971 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2639 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 113 "OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 117 "OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 118 "OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 119 "OSParseosrl.l"
{YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 120 "OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 122 "OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 136 "OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 138 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 139 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 140 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 141 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 142 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 143 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 144 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 145 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 146 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 147 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 148 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 149 "OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 150 "OSParseosrl.l"
{YY_PRINT;  return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 152 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 153 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 154 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 155 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 156 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 157 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 158 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 159 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 160 "OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 161 "OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 162 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 163 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 166 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 167 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 170 "OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 171 "OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 172 "OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 173 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 174 "OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 175 "OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 176 "OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 177 "OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 178 "OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 179 "OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 180 "OSParseosrl.l"
{YY_PRINT;  return(JOBEND);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 182 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 183 "OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICEURISTART);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 184 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 185 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 186 "OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICENAMESTART);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 187 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 188 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 189 "OSParseosrl.l"
{YY_PRINT; unput('<'); return(INSTANCENAMESTART);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 190 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 191 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 192 "OSParseosrl.l"
{YY_PRINT; unput('<'); return(JOBIDSTART);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 193 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 195 "OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 196 "OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 198 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 199 "OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 201 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 202 "OSParseosrl.l"
{YY_PRINT; unput('<'); return(MESSAGESTART);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 203 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 205 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 206 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 208 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 209 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 211 "OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 212 "OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 214 "OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 215 "OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 217 "OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 218 "OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 220 "OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 221 "OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 223 "OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 224 "OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 225 "OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 226 "OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 228 "OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 229 "OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 230 "OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 231 "OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 233 "OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 234 "OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 235 "OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 236 "OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 239 "OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 240 "OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 242 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTARTANDEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 243 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTARTANDEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 244 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTARTANDEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 245 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTARTANDEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 246 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTARTANDEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 247 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTARTANDEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 252 "OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext);   yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 254 "OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 99:
#line 256 "OSParseosrl.l"
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 256 "OSParseosrl.l"
;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 257 "OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 259 "OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 103:
#line 261 "OSParseosrl.l"
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 261 "OSParseosrl.l"
;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 262 "OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 265 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /* yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 266 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 267 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 270 "OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 285 "OSParseosrl.l"
ECHO;
	YY_BREAK
#line 2476 "OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 971 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 971 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 970);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 285 "OSParseosrl.l"





