#line 2 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.cpp"

#line 4 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 34
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 * Given that the standard has decreed that size_t exists since 1989,
 * I guess we can afford to depend on it. Manoj.
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 120
#define YY_END_OF_BUFFER 121
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[984] =
    {   0,
        1,    1,  118,  118,  116,  116,  117,  117,    0,    0,
        0,    0,    0,    0,    0,    0,  121,  119,    1,    1,
        2,  107,    2,  119,    6,  119,    5,  119,    4,  107,
      118,  120,  116,  117,  109,  110,  109,  113,  114,  113,
        1,    0,    6,    0,    5,    0,    4,    0,    0,    0,
        0,    0,    0,    0,    0,    1,  107,    6,    5,  107,
      107,  107,  107,  107,  107,  107,  107,    3,    6,  107,
        7,    0,    0,  112,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    4,  107,  118,  116,  117,    0,
      115,    6,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  107,  107,
      107,  107,  107,  107,  107,  107,  107,    0,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    6,  111,    6,    0,
        0,    0,    0,    0,    6,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  108,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       95,    0,    0,    0,    0,    0,   91,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   87,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  107,  107,  107,  107,  107,  107,  107,  107,
      107,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   54,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   70,    0,    0,    0,    0,    0,
        0,    0,   70,    0,    0,    0,   19,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  107,  107,  107,  107,
      107,  107,  107,  107,    0,   96,    0,    0,    0,    0,

        0,   55,    0,    0,    0,   92,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   88,    0,
        0,    0,    0,    0,   54,    0,    0,    0,    0,   46,
       45,   99,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   19,    0,
       23,   24,    0,    0,    0,   27,   28,    0,   35,   36,
        0,    0,  107,  107,  107,  107,  107,   96,    0,    0,
        0,    0,   55,    0,    0,   92,    0,    0,    0,   47,
        0,    0,    0,    0,    0,    0,   71,    0,    0,   88,
        0,    0,    0,    0,    0,    0,    0,   65,    0,    0,

        0,    0,    0,   81,    0,  105,    0,   83,    0,    0,
        0,    0,    0,    0,    0,    0,   21,   22,    0,    0,
        0,   25,   26,    0,   33,   34,    0,   39,   40,  107,
      107,  107,  107,    0,    0,    0,    0,    0,   67,    0,
        0,    0,   47,    0,  100,    0,    0,    0,    0,   71,
        0,    0,    0,    0,    0,    0,    0,  104,   65,   66,
        0,    0,    0,    0,    0,    0,   50,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   37,   38,  107,
      107,  107,  107,    0,    0,    0,    0,   67,    0,    0,
        0,  100,    0,    0,    0,   82,    0,   51,    0,    0,

       84,    0,    0,    0,    0,   48,    0,    0,    0,    0,
       72,    0,    0,    0,   52,    0,    0,   79,   50,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  107,  107,  107,  107,  107,  107,
      107,  107,    0,    0,    0,   49,    0,    0,    0,   74,
        0,    0,    0,   53,    0,    0,    0,   82,   51,    0,
       84,    0,    0,    0,   48,    0,    0,  106,   72,   73,
        0,    0,   52,    0,    0,    0,   89,    0,    0,    0,
        0,   31,   32,    0,    0,    0,    0,    0,    0,    0,
        0,  107,  107,  107,  107,  107,  107,  107,  107,    0,

        0,   49,    0,    0,   74,    0,    0,   53,    0,    0,
        0,   80,    0,    0,    0,   85,    0,    0,   93,    0,
        0,    0,    0,    0,    0,    0,    0,   29,   30,    0,
        0,    0,    0,    0,    0,    0,    0,  107,  107,  107,
      107,  107,  107,  107,  107,    0,    0,    0,    0,    0,
        0,    0,    0,   80,    0,    0,   90,   97,    0,    0,
        0,    0,    0,    0,   56,    0,    0,    0,    0,    0,
        0,    0,   18,    0,    0,   17,    0,    0,    0,    0,
        0,   16,    0,    0,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,    0,    0,   86,    0,    0,

        0,   94,    0,    0,    0,   58,    0,   90,    0,    0,
       77,    0,    0,   59,  101,   56,   57,    0,    0,    0,
        0,   43,   44,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  107,  107,  107,  107,  107,  107,  107,
        0,   98,   86,    0,    0,   94,    0,    0,   61,   58,
        0,   75,    0,    0,   62,  102,   59,   60,    0,    0,
        0,   41,   42,   18,    0,   17,    0,    0,    0,    0,
        0,    0,    8,   16,    0,    0,  107,  107,  107,  107,
      107,  107,  107,  107,  107,   98,    0,    0,   64,    0,
       78,   61,    0,  103,   62,   63,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  107,  107,  107,  107,
      107,  107,  107,  107,    0,   76,   64,   78,    0,    0,
        0,    0,    0,    0,    0,    0,    8,    0,    0,  107,
      107,  107,  107,  107,  107,  107,  107,   76,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  107,  107,
      107,  107,  107,  107,  107,  107,    0,   68,    0,    0,
        0,    0,    0,    0,    9,    0,   10,    0,  107,  107,
      107,  107,  107,  107,  107,  107,    0,    0,    0,   11,
        0,    0,    0,    0,    0,    0,   20,  107,  107,  107,
      107,  107,  107,    0,   69,    0,   12,    0,    0,    0,

        0,    9,   10,    0,  107,  107,  107,  107,   69,    0,
       11,    0,    0,    0,   20,  107,  107,  107,   12,    0,
        0,    0,  107,  107,  107,    0,    0,    0,  107,  107,
      107,    0,    0,    0,  107,  107,  107,    0,    0,    0,
      107,  107,  107,    0,    0,    0,  107,  107,  107,    0,
        0,    0,  107,  107,  107,    0,    0,    0,  107,  107,
      107,    0,    0,    0,   13,  107,  107,  107,    0,    0,
       14,    0,  107,  107,    0,   15,    0,   13,  107,    0,
       14,   15,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    8,    1,    1,    9,    1,
        1,    8,   10,    1,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    8,    1,   15,
       16,   17,   18,    8,    8,    8,   19,   20,   21,   22,
        8,    8,   23,    8,    8,    8,    8,   24,   25,    8,
        8,   26,   27,   28,   29,   30,    8,    8,    8,    8,
        1,    1,    1,    1,    8,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   40,    8,   41,   42,   43,
       44,   45,    8,   46,   47,   48,   49,   50,    8,   51,
       52,   53,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    2,    2,    2,    2,    1,    3,    2,    4,    1,
        2,    2,    2,    2,    2,    1,    5,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[995] =
    {   0,
        0,   23, 2562, 2561, 2570, 2569, 2566, 2565,    0,    0,
        0,    0,   39,   40,   41,   42, 2564, 2669,   59,  108,
     2556,   64, 2551,    8,  157, 2542,    7,  187,   50,   64,
        0, 2669,    0,    0, 2669, 2669, 2547, 2669, 2669, 2539,
        0,   35,   66, 2538,   82,  225,  124, 2530, 2521, 2512,
     2503,   34,   17, 2493, 2504,  274,   70,    0,   83,  119,
      118,  131,  141,  146,  159,  175,  177, 2669,    0,  193,
     2669, 2522,  292, 2669, 2488, 2482, 2494, 2485, 2469, 2477,
      137,  171, 2472, 2478,  132,  195,    0,    0,    0, 2491,
     2669,  211,  104, 2464, 2461, 2469,  201, 2463, 2479, 2452,

     2443, 2437, 2444, 2443, 2438, 2436, 2441, 2437,  226,  236,
      249,  285,  295,  298,  300,  327,  329, 2463,  280, 2465,
     2429, 2418, 2431, 2421, 2418, 2426,  154,  204, 2417, 2423,
     2407, 2405, 2389, 2384, 2389, 2373, 2379, 2368, 2361, 2366,
     2357, 2354, 2363, 2345, 2349,  142,  332, 2669, 2376, 2332,
     2343, 2322, 2320, 2323, 2669, 2328, 2320,  239, 2316, 2317,
     2311, 2302, 2288, 2273,  333,  338,  372,  337,  364,  366,
      369,  370,  381, 2669, 2278, 2289, 2275, 2270, 2274, 2258,
     2262, 2253, 2254, 2260, 2251, 2246, 2255, 2237, 2230,  249,
     2221, 2226, 2228, 2209,  406, 2204, 2213, 2202, 2199, 2204,

     2187, 2187, 2187, 2185,   51, 2183, 2179, 2169,  410, 2168,
     2164,   65, 2175, 2164,  432,  417,  436, 2174, 2160,  440,
      455, 2159,  432,  433,  478,  512,  441,  449,  546,  580,
      451,  485, 2151, 2151, 2119,  501, 2118,  505, 2113, 2105,
     2110, 2094, 2092, 2090, 2089,  109, 2084,  539, 2079, 2095,
     2050, 2063,  569,  300, 2073, 2061, 2055, 2038,  585, 2033,
     2039, 2002, 2000, 2013,  532, 2003, 2010, 2013, 2003, 2012,
     1998, 1989, 2669, 1980, 1983, 2012,  493,  550,  518, 1968,
     1964,  595,  556,  601,  605,  616,  595,  556,  638,  610,
      612,  672,  706,  740,  632,  659, 1963, 1980, 1962, 1971,

      663,  667, 1962, 1936,  679,  687, 1933, 1922,  695, 1916,
     1906, 1894, 1884, 1897,  699, 1887, 1893,  721,  726, 1896,
     1876, 1888, 1887, 1874,  730,  745, 1876, 1859, 1866,  761,
     2669, 2669, 1853, 1846, 1837, 1840,  766, 1863, 1829, 1818,
     1828, 1798,  778, 1803, 1788, 1774, 1772,  620,  782, 1812,
     1800, 1779, 1761, 1734, 1754, 1748, 1745, 1747, 1743, 1736,
      786,  648,  778,  732,  779,  780,  823,  804, 1689, 1703,
     1702, 1684,  814,  818, 1689,  827, 1677, 1680,  838,  843,
      847, 1685, 1678, 1652, 1656,  857,  863, 1652, 1632,  867,
     1646, 1646, 1634, 1632, 1638,  873, 1642,  877, 1623, 1615,

     1598, 1609, 1596, 2669,  891, 2669, 1616, 2669, 1591, 1588,
      895, 1582, 1581, 1563, 1550,  712, 2669, 2669, 1558, 1557,
      882, 2669, 2669,  900, 2669, 2669, 1570, 1564, 1561,  890,
      892,  738,  896, 1538, 1526, 1505, 1512,  916,  932, 1486,
     1476, 1461,  941,  945,  949, 1476, 1461,  953,  961,  969,
     1473,  977, 1452, 1448, 1427,  981, 1438, 2669,  985, 2669,
      997, 1422, 1429, 1001, 1414, 1017, 1024, 1413, 1419, 1415,
     1033, 1037, 1041, 1410, 1028, 1395, 1060, 2669, 2669, 1068,
     1060, 1090, 1062, 1395, 1367, 1083, 1380, 1075, 1088, 1361,
     1375, 1119, 1124, 1357, 1128, 1132, 1147, 1152, 1356, 1156,

     1163, 1363, 1327, 1332, 1167, 1172, 1294, 1317, 1176, 1297,
     1183, 1278, 1258, 1192, 1197, 1274, 1263, 2669, 1201, 1246,
     1234, 1250, 1208, 1242, 1246, 1212, 1137, 1213, 1203,   98,
     1190, 1194, 1196, 1185, 1227, 1205, 1221, 1223, 1224, 1225,
     1249, 1240, 1175, 1173, 1219, 1248, 1159, 1168, 1274, 1283,
     1156, 1142, 1290, 1294, 1152, 1156, 1298, 1306, 1314, 1127,
     1318, 1115, 1099, 1096, 1322, 1107, 1088, 2669, 1326, 2669,
     1065, 1069, 1330, 1065, 1083, 1057, 2669, 1067, 1054, 1071,
     1071, 1061, 1055, 1017, 1016, 1012,  995,  991,  989,  978,
      990, 1269, 1322, 1323, 1324, 1325, 1326, 1334, 1350,  969,

      969, 1347,  980,  978, 1370,  960,  958, 1374,  954,  968,
     1384, 1388,  933, 1392,  929, 2669,  927,  927, 2669,  924,
      932, 1400,  915,  918,  924, 1416, 1405, 2669, 2669, 1420,
     1424, 1439,  887,  867,  880, 1443,  866, 1481, 1515, 1459,
     1416, 1417, 1418, 1465, 1444,  854, 1486,  840,  841, 1496,
      829,  828, 1505, 1521,  811, 1530, 1535, 2669,  789,  777,
      768, 1539, 1555,  793, 1561,  761,  763, 1575, 1579, 1583,
     1546, 1598,  358,  749, 1602,  395,  763,  730,  724,  713,
     1606,  472,  726,  716, 1621,  704, 1598, 1625, 1540, 1599,
     1617, 1622, 1645, 1639, 1641, 1679, 1683, 1699,  691,  683,

     1703, 1707,  670, 1711, 1719, 1727,  664, 1735,  658, 1739,
     2669, 1744,  678, 1760, 2669, 1764, 2669,  663, 1768, 1774,
      683,  678,  670,  674,  612,  644,  598,  550,  605, 1778,
      634,  596,  563, 1621, 1739, 1765, 1775, 1795, 1787, 1788,
     1801, 1822, 1826,  546, 1830, 1841, 1846, 1850, 1854, 1866,
      561, 2669, 1870,  562, 1874, 2669, 1888, 2669,  528, 1892,
     1588, 2669, 2669,  734,  537,  831,  525,  513,  514,  508,
      494, 1896,  851,  921,  490,  495, 1889, 1867, 1890, 1894,
     1900, 1902, 1936, 1922, 1930, 1945, 1951, 1956, 1967, 1972,
     1976, 1982,  481, 2669, 1988, 2669,  480,  473,  461,  458,

      460,  447,  448,  481,  443,  450, 1974, 1980, 1982, 1983,
     1985, 1984, 1986, 2012, 2034, 2038, 2050, 2054,  427,  420,
      418,  416,  403,  414,  393,  384,  927,  381,  391, 2046,
     2047, 2048, 2049, 2051, 2050, 2052, 2077, 2072,  377,  374,
      358,  347,  344,  356,  351, 2098, 2102,  330, 2094, 2096,
     2099, 2095, 2105, 2119, 2146, 2118,  336, 2669,  322, 2152,
      319,  309,  324, 2156,  936, 2171,  990, 2175, 2149, 2195,
     2167, 2168, 2169, 2203, 2218, 2222, 2226, 2242, 2250, 1010,
      324,  310,  297,  324,  314, 2257, 1046, 2272, 2276, 2268,
     2269, 2250, 2291, 2307, 2311, 2323, 1111,  307,  271,  248,

      261, 1264, 1351,  289, 2327, 2319, 2320, 2150, 2342,  288,
     1379,  239,  246,  254, 1475, 2321, 2235, 2336, 1525,  220,
      240,  225, 2338, 2346, 2347,  228,  216,  186, 2362, 2363,
     2364,  187,  166,  148, 2366, 2375, 2379,  140,  130,  124,
     2388, 2391, 2392,  115,  122,  102, 2394, 2403, 2404,   97,
       76,   69, 2416, 2420, 2428,   58,   42, 2443, 2439, 2444,
     2467,   20, 2490, 2494, 1661, 2468, 2514, 2518, 2522, 2537,
     1688,   53, 2541, 2546, 2564, 1692,   52, 1810, 2568,    4,
     1834, 1859, 2669, 2615, 2620, 2625, 2630, 2635, 2640, 2645,
     2649, 2654, 2658, 2663

    } ;

static yyconst flex_int16_t yy_def[995] =
    {   0,
      984,  984,  985,  985,  986,  986,  987,  987,  988,  988,
      988,  988,  989,  989,  990,  990,  983,  983,  983,  991,
      983,  991,  983,  983,  991,  983,   25,  983,  983,   25,
      992,  983,  993,  994,  983,  983,  983,  983,  983,  983,
       19,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  991,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,  983,   25,   25,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,   25,  992,  993,  994,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,

      983,  983,  983,  983,  983,  983,  983,  983,   25,   25,
       25,   25,   25,   25,   25,   25,   25,  983,   25,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,   25,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,   25,   25,   25,   25,   25,   25,
       25,   25,   25,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,

      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,   25,   25,   25,   25,
       25,   25,   25,   25,  983,  983,  983,  983,  983,  983,

      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,   25,   25,   25,   25,   25,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,

      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,   25,
       25,   25,   25,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,   25,
       25,   25,   25,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,

      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,   25,   25,   25,   25,   25,   25,
       25,   25,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,   25,   25,   25,   25,   25,   25,   25,   25,  983,

      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,   25,   25,  639,
       25,   25,   25,  639,   25,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  639,  639,   25,  639,   25,   25,
       25,   25,  639,   25,   25,  983,  983,  983,  983,  983,

      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,   25,   25,  482,   25,  639,   25,   25,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,   25,   25,   25,   25,
       25,   25,  639,   25,   25,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,

      983,  983,  983,  983,  983,  983,   25,   25,   25,   25,
       25,   25,   25,   25,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,   25,
       25,   25,   25,   25,   25,   25,   25,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,   25,   25,
       25,   25,   25,  639,  639,   25,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,   25,  639,
       25,   25,   25,  639,  639,  639,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  639,  639,   25,
       25,   25,  639,  983,  983,  983,  983,  983,  983,  983,

      983,  983,  983,  983,  639,   25,   25,   25,  983,  983,
      983,  983,  983,  983,  983,   25,   25,   25,  983,  983,
      983,  983,   25,   25,   25,  983,  983,  983,   25,   25,
       25,  983,  983,  983,   25,   25,   25,  983,  983,  983,
       25,   25,   25,  983,  983,  983,   25,   25,   25,  983,
      983,  983,   25,   25,   25,  983,  983,  983,   25,   25,
      639,  983,  983,  983,  983,   25,  639,  639,  983,  983,
      983,  983,  639,  639,  983,  983,  983,  983,  639,  983,
      983,  983,    0,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983

    } ;

static yyconst flex_int16_t yy_nxt[2723] =
    {   0,
       18,   19,   20,   19,   20,   18,   21,  982,   23,   18,
       24,   25,   26,   27,   28,   18,   29,   18,   58,   43,
       59,   45,   30,   18,   19,   20,   19,   20,   18,   21,
       48,   23,   18,   24,   25,   26,   27,   28,   18,   29,
       18,   36,   36,   39,   39,   30,   43,  105,   45,   37,
       37,   85,   85,   85,   85,  981,  978,   48,   40,   40,
       41,   41,   41,   41,  103,  983,  969,  983,  106,   42,
       43,   44,   45,   46,  983,   47,  983,   57,  983,   92,
      983,   48,  104,   57,   57,  265,   93,   86,  963,  266,
       57,   49,   50,   43,   58,   45,   59,   51,   57,  273,

       93,   52,   93,  266,   57,  962,   53,   54,   55,   41,
       56,   41,   56,  118,  118,  958,   93,  149,   42,   58,
       44,   59,   46,  957,   47,   85,   85,   85,   85,  586,
       60,   57,   57,   85,   85,   85,   85,  956,   57,   57,
       61,   62,   86,  315,   57,  587,   63,  316,  109,  952,
       64,   57,   57,   57,   57,   65,   66,   67,  983,   57,
      983,   57,  951,  950,  946,  110,   57,  983,  137,  983,
       69,  983,   57,  983,  111,   57,  112,   70,  945,   57,
       57,  138,  206,  139,  140,  181,  944,  207,   57,  114,
       57,   70,   72,   57,  113,   57,  940,   57,  182,   73,

      183,  184,  118,  118,   74,  141,  119,  117,   57,   57,
      115,   57,  939,   57,  142,   57,  147,  116,  143,   75,
       76,  938,  144,   77,   92,   78,   79,   57,   80,   57,
       81,   93,  934,   82,   83,  153,   84,   73,  185,   57,
      215,  215,  215,  215,  142,   93,   57,  186,  143,   57,
      933,  187,  144,  932,  216,  188,   57,   75,   76,  928,
       57,   77,   57,   94,   95,  927,   96,  926,   81,   57,
       57,   97,   98,  165,   84,   41,   56,   41,   56,  922,
      921,  920,  166,   57,   42,   58,   44,   59,   46,  247,
       47,  919,  915,  119,  248,  914,   60,  913,   57,  167,

       57,  325,  325,  325,  325,   57,   61,   62,   57,  912,
      911,   57,   63,   57,   57,   57,   64,  903,   57,   57,
       57,   65,   66,   67,  121,  122,  168,  902,  123,   57,
      124,  125,   57,  126,   57,  127,  169,  901,  128,  129,
       57,  130,   57,  170,  171,   57,   57,   57,  900,   57,
       57,   57,   57,   57,  899,  883,  882,   57,   57,  724,
      724,   57,  724,   57,  881,  172,   57,  223,  878,  173,
      224,  226,   57,  215,  225,  215,  225,   57,  877,   57,
      868,  863,   57,   57,   57,   57,   57,  216,  862,   57,
       57,  861,   57,  860,   57,  227,  726,  726,   57,  726,

       57,   57,  228,  229,   57,  859,   57,  253,  253,  253,
      253,  253,  253,  253,  253,   57,  858,  230,  276,  276,
      857,  276,  254,  277,  848,  277,  254,  847,  255,  231,
      846,  845,  270,  215,  215,  215,  215,  278,  278,  278,
      278,  282,  282,  282,  282,   57,   57,  216,  844,  843,
      842,  279,   57,   57,   57,  283,  284,  284,  284,  284,
      841,   57,   57,  840,   57,  839,   57,   57,  287,   57,
      285,   57,  829,  731,  731,  290,  731,  828,  288,  215,
      225,  215,  225,  291,  827,  294,  295,  295,  295,  295,
      826,   57,  825,  216,  349,  349,  349,  349,   57,  824,

      823,  296,  301,  301,  301,  301,  305,  305,  305,  305,
      822,  821,   57,  278,  289,  278,  289,  302,  820,  350,
      350,  306,  350,  303,  351,   57,  352,  279,  819,  806,
      805,  297,   57,  337,  337,  337,  337,  803,  802,  307,
      318,  318,  318,  318,  338,  801,   57,  282,  292,  282,
      292,  278,  278,  278,  278,  319,  800,  355,  355,   57,
      355,  283,  356,  799,  357,  279,   57,  798,  768,   57,
      253,  253,  253,  253,  769,  797,   57,  320,  794,  770,
       57,  284,  293,  284,  293,  254,  330,  330,  330,  330,
       57,  793,  787,   57,  364,  285,  282,  282,  282,  282,

       57,  331,  284,  284,  284,  284,  358,  358,   57,  358,
      283,  359,  776,  360,   57,   57,  285,  361,  361,  361,
      361,  276,  276,   57,  276,   57,  277,  775,  277,   57,
       57,  362,   57,  295,  295,  295,  295,  774,  363,  278,
      289,  278,  289,  771,   57,  767,   57,  766,  296,  427,
      427,   57,  427,  279,  428,  365,  429,  765,   57,  366,
      368,  368,  368,  368,  301,  301,  301,  301,  373,  373,
      373,  373,   57,  282,  292,  282,  292,  764,  763,  302,
      305,  305,  305,  305,  762,   57,  761,  283,  376,  376,
      376,  376,   57,  759,  756,  306,  379,  379,  379,  379,

      386,  386,  386,  386,  752,  751,   57,  284,  293,  284,
      293,  380,  747,  350,  350,  387,  350,  745,  351,   57,
      352,  285,  318,  318,  318,  318,   57,  390,  390,  390,
      390,  325,  325,  325,  325,  724,  724,  319,  724,  744,
       57,  361,  367,  361,  367,   57,  396,  396,  396,  396,
       57,   57,   57,   57,  733,  362,  732,  397,   57,  730,
       57,  398,  330,  330,  330,  330,   57,  337,  337,  337,
      337,  729,   57,  482,   57,  728,  431,  331,  338,  411,
      411,  411,  411,  349,  349,  349,  349,  361,  361,  361,
      361,   57,   57,   57,  398,  727,  725,  719,   57,   57,

       57,  362,  718,  432,  433,  368,  368,  368,  368,  715,
      711,  710,   57,   57,   57,  373,  373,  373,  373,  438,
      438,  438,  438,  430,  361,  367,  361,  367,  376,  376,
      376,  376,  726,  726,  439,  726,   57,  709,  362,  379,
      379,  379,  379,   57,  443,  443,  443,  443,  444,  444,
      444,  444,  804,  804,  380,  804,  707,   57,  386,  386,
      386,  386,  704,  445,  450,  450,  450,  450,  390,  390,
      390,  390,  703,  387,  396,  396,  396,  396,  459,  459,
      459,  459,  700,  355,  355,  397,  355,  699,  356,  398,
      357,  460,  466,  466,  466,  466,  411,  411,  411,  411,

      696,  358,  358,   57,  358,   57,  359,  467,  360,   57,
       57,  398,   57,  684,  680,  679,   57,  438,  438,  438,
      438,  678,  731,  731,   57,  731,   57,  483,  804,  804,
       57,  804,  439,  488,  488,  488,  488,  884,  884,  481,
      884,  480,  443,  443,  443,  443,  444,  444,  444,  444,
      492,  492,  492,  492,  495,  495,  495,  495,  668,  667,
      666,  445,  497,  497,  497,  497,  662,  661,  660,  496,
      450,  450,  450,  450,  659,  658,  655,  498,  500,  500,
      500,  500,  505,  505,  505,  505,  459,  459,  459,  459,
      653,  885,  885,  501,  885,  652,  651,  506,  509,  509,

      509,  509,  514,  514,  514,  514,  650,  507,  649,  510,
      648,  898,  898,  511,  898,  647,  646,  515,  466,  466,
      466,  466,  637,  636,  516,  519,  519,  519,  519,  517,
      635,  634,  633,  467,  523,  523,  523,  523,  514,  514,
      514,  514,  526,  526,  526,  526,  529,  904,  904,  511,
      904,  632,  530,  515,  531,  532,  527,  533,  631,  630,
      524,  427,  427,  629,  427,  525,  428,  628,  429,  526,
      535,  526,  535,   57,  627,   57,  488,  488,  488,  488,
       57,   57,   57,  527,  545,  545,  545,  545,   57,  549,
      549,  549,  549,  626,   57,  625,   57,  624,  536,  546,

      623,  542,   57,   57,  550,  622,  621,  620,  537,  547,
       57,  619,  910,  910,  538,  910,  539,  540,  618,  541,
      492,  492,  492,  492,   57,  553,  553,  553,  553,  495,
      495,  495,  495,  558,  558,  558,  558,  617,  581,  581,
      554,  581,  616,  582,  496,  583,  615,  555,  497,  497,
      497,  497,  556,  559,  559,  559,  559,  500,  500,  500,
      500,  614,  613,  498,  561,  561,  561,  561,  505,  505,
      505,  505,  501,  565,  565,  565,  565,  509,  509,  509,
      509,  610,  609,  506,  569,  569,  569,  569,  510,  607,
      606,  604,  511,  514,  514,  514,  514,  570,  573,  573,

      573,  573,  519,  519,  519,  519,  603,  601,  515,  523,
      523,  523,  523,  526,  526,  526,  526,  600,   57,  591,
      545,  545,  545,  545,  511,   57,  590,  527,  526,  535,
      526,  535,  589,  588,   57,  546,   57,   57,   57,   57,
       57,   57,  527,   57,   57,   57,  585,   57,  592,  602,
      602,  602,  602,   57,  594,   57,  584,   57,   57,   57,
       57,   57,   57,  597,  593,  884,  884,  596,  884,   57,
      595,  580,  579,  578,  599,  549,  549,  549,  549,  598,
      577,  576,   57,   57,  605,  605,  605,  605,  575,   57,
      550,  553,  553,  553,  553,  608,  608,  608,  608,  611,

      611,  611,  611,   57,  574,  572,  554,  558,  558,  558,
      558,  638,  571,  568,  612,  559,  559,  559,  559,  561,
      561,  561,  561,  565,  565,  565,  565,  569,  569,  569,
      569,  573,  573,  573,  573,   57,   57,   57,   57,   57,
      567,  566,   57,   57,   57,   57,   57,   57,  602,  602,
      602,  602,  885,  885,   57,  885,   57,   57,   57,   57,
       57,  641,  640,   57,  639,  642,  564,  643,   57,  563,
       57,  605,  605,  605,  605,  608,  608,  608,  608,  644,
      898,  898,  645,  898,   57,  611,  611,  611,  611,  654,
      654,  654,  654,  656,  656,  656,  656,  562,  560,  557,

      612,  663,  663,  663,  663,  552,  581,  581,  657,  581,
      551,  582,  664,  583,  548,  544,  665,  669,  669,  669,
      669,  670,  670,  670,  670,  672,  672,  672,  672,   57,
       57,   57,  665,  543,  534,  671,   57,   57,   57,  673,
      675,  675,  675,  675,  681,  681,  681,  681,  528,  522,
      690,   57,  692,  521,  676,  520,  518,   57,  682,  513,
      675,  688,  675,  688,   57,  691,  681,  693,  681,  693,
      674,  512,  508,  677,  676,  504,  904,  904,   57,  904,
      682,  683,  670,  685,  670,  685,  503,  697,  697,  697,
      697,  695,  502,  689,   57,  499,  671,  701,  701,  701,

      701,   57,  698,  694,  494,   57,  705,  705,  705,  705,
      493,   57,  702,  491,  490,   57,  672,  686,  672,  686,
      489,  706,  654,  654,  654,  654,  910,  910,   57,  910,
      673,  656,  656,  656,  656,   57,  708,  708,  708,  708,
      712,  712,  712,  712,  487,  486,  657,  721,  721,   57,
      721,  713,  722,   57,  723,  714,  663,  663,  663,  663,
       57,  687,  716,  716,  716,  716,  485,  664,  484,  479,
      478,  665,  735,  477,   57,  717,  720,  720,  720,  720,
      669,  669,  669,  669,  670,  670,  670,  670,  476,  721,
      721,  714,  721,  475,  722,  665,  723,  474,  671,  672,

      672,  672,  672,  675,  675,  675,  675,  681,  681,  681,
      681,   57,   57,  673,  473,  472,  471,  676,   57,   57,
      470,  682,  670,  685,  670,  685,  675,  688,  675,  688,
       57,  469,   57,   57,   57,   57,  671,   57,  468,  465,
      676,   57,   57,  464,  736,  734,  681,  693,  681,  693,
      463,   57,   57,  462,   57,   57,   57,  461,  458,   57,
      682,   57,  972,  972,  737,  972,  777,   57,  738,  739,
      457,   57,  456,   57,  455,   57,  454,  453,  452,  740,
      741,  741,  741,  741,  697,  697,  697,  697,  451,  977,
      977,   57,  977,  980,  980,  742,  980,  449,  448,  698,

      743,  743,  743,  743,  701,  701,  701,  701,  746,  746,
      746,  746,  748,  748,  748,  748,  447,  446,  442,  702,
      705,  705,  705,  705,  441,  440,  437,  749,  750,  750,
      750,  750,  436,  435,  434,  706,  708,  708,  708,  708,
      753,  753,  753,  753,  426,  712,  712,  712,  712,  425,
      424,  754,   57,  423,  422,  755,  713,  421,  420,   57,
      714,  757,  757,  757,  757,  716,  716,  716,  716,  760,
      760,  760,  760,   57,  758,  720,  720,  720,  720,  772,
      772,  772,  772,  779,  755,  419,  778,  418,   57,  780,
      714,   57,   57,  773,  781,   57,  772,  783,  772,  783,

       57,   57,  741,  741,  741,  741,  417,   57,   57,   57,
      773,  972,  972,  782,  972,  416,  415,  742,  784,  414,
      413,   57,   57,  786,  786,  786,  786,  743,  743,  743,
      743,  788,  788,  788,  788,  977,  977,  785,  977,  412,
      410,   57,  746,  746,  746,  746,  789,  790,  790,  790,
      790,  748,  748,  748,  748,  792,  792,  792,  792,  409,
      980,  980,  791,  980,  408,  407,  749,  750,  750,  750,
      750,  753,  753,  753,  753,  795,  795,  795,  795,  406,
       57,  405,  754,  404,  403,  402,  755,   57,  796,  757,
      757,  757,  757,  760,  760,  760,  760,  772,  772,  772,

      772,   57,   57,   57,  401,  808,  400,   57,  755,   57,
       57,  773,  399,   57,   57,   57,  395,  394,  393,  807,
       57,  392,   57,   57,   57,  810,  391,  389,   57,  388,
      811,  385,  384,  809,   57,   57,   57,  772,  783,  772,
      783,  383,   57,   57,  382,  812,  786,  786,  786,  786,
       57,  773,  815,  815,  815,  815,   57,  788,  788,  788,
      788,  381,  813,  378,  814,  377,  375,  816,  817,  817,
      817,  817,  789,  790,  790,  790,  790,  818,  818,  818,
      818,  374,   57,  792,  792,  792,  792,   57,  791,  795,
      795,  795,  795,   57,   57,   57,   57,   57,   57,   57,

       57,  372,   57,   57,   57,   57,   57,  371,   57,  370,
      369,  354,  830,  353,   57,  348,   57,   57,   57,   57,
      836,  347,  833,  346,  832,   57,  835,  345,  344,  831,
      834,  343,   57,  342,  837,  815,  815,  815,  815,  838,
      838,  838,  838,  341,  340,  339,   57,  336,  335,  334,
      816,  817,  817,  817,  817,  818,  818,  818,  818,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,  838,  838,  838,  838,  333,  332,  329,
       57,  850,   57,  852,   57,   57,   57,  328,  849,  853,
       57,  327,  326,  324,  851,  323,  854,   57,  855,  864,

      864,  864,  864,  866,  866,  866,  866,   57,   57,   57,
      856,   57,   57,  865,   57,   57,   57,  867,   57,   57,
      864,  874,  864,  874,  322,   57,  321,  872,   57,   57,
       57,   57,  317,   57,  865,  873,  314,  313,   57,   57,
      312,  869,  870,  311,  310,  309,  871,  866,  875,  866,
      875,  308,   57,  879,  879,  879,  879,  864,  864,  864,
      864,  867,   57,   57,  304,   57,  300,  880,  876,   57,
       57,  865,  866,  866,  866,  866,  886,  886,  886,  886,
       57,   57,   57,   57,  918,  299,  867,   57,   57,   57,
      887,  298,   57,  286,  281,  888,  879,  889,  879,  889,

      892,   57,   57,   57,  864,  874,  864,  874,  280,  275,
      880,  274,  890,  272,  271,  891,  269,  268,  865,  866,
      875,  866,  875,  886,  893,  886,  893,  894,  894,  894,
      894,  267,  264,  867,  263,  262,  261,  887,  260,  259,
      258,   57,  895,  896,  896,  896,  896,  257,   57,   57,
      256,  879,  879,  879,  879,   57,  252,  897,  886,  886,
      886,  886,  251,   57,   57,  880,  250,  249,   57,  924,
       57,  246,  887,  896,  905,  896,  905,  879,  889,  879,
      889,   57,   57,  245,   57,  244,  243,  897,   57,   57,
      908,  880,  886,  893,  886,  893,  242,  241,  906,  240,

      239,  238,   57,   57,  237,  236,  887,  907,  894,  894,
      894,  894,  909,  909,  909,  909,  235,  234,   57,  233,
      232,  222,   57,  895,  896,  896,  896,  896,  896,  905,
      896,  905,   57,   57,   57,  221,  220,   57,  897,   57,
       57,   57,  897,  909,  909,  909,  909,  219,  218,   57,
      217,   57,  214,   57,   57,   57,   57,  916,   57,   57,
       57,  925,  213,  923,  212,  211,   57,   57,  210,  917,
       57,  930,   57,   57,  209,   57,   57,   57,  208,   57,
       57,  931,   57,   57,   57,  929,   57,  935,   57,  149,
      205,  204,   57,  203,  202,   57,   57,  936,   57,   57,

      941,   57,  201,  200,   57,   57,  199,   57,   57,   57,
      937,   57,   57,   57,   57,  198,   57,   57,  197,  196,
      195,  942,   57,   57,   57,   57,   57,  943,   57,   57,
      194,  193,  949,   57,  947,  192,   57,   57,   57,  948,
       57,   57,  953,  954,  964,  964,  964,  964,   57,  191,
       57,  955,   57,  190,   57,  189,  959,   57,  965,   57,
      180,  179,   57,  178,   57,  177,  176,  960,  964,  968,
      964,  968,  175,   57,  961,  174,  149,  164,   57,  163,
      162,   57,  965,  161,  160,  159,  966,  158,   57,  157,
      967,  970,  970,  970,  970,  964,  964,  964,  964,  156,

      155,  154,   57,  152,  151,  971,  150,  148,  146,  965,
      145,  136,  135,   57,  973,  970,  974,  970,  974,  964,
      968,  964,  968,  975,  975,  975,  975,  134,  133,  971,
      132,  131,  120,  965,  108,  107,  102,  976,  970,  970,
      970,  970,  975,  979,  975,  979,  101,  970,  974,  970,
      974,  100,  971,   99,   71,   91,  976,   90,   71,   68,
       57,  971,   68,  983,   57,  975,  975,  975,  975,  975,
      979,  975,  979,   32,   32,   32,   32,   32,   32,  976,
      983,  983,  983,  976,  983,  983,  983,   57,  983,  983,
      983,  983,   57,  983,  983,  983,  983,  983,  983,  983,

      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,   57,   22,   22,   22,   22,   22,
       31,   31,   31,   31,   31,   33,   33,   33,   33,   33,
       34,   34,   34,   34,   34,   32,   32,   32,   32,   32,
       35,   35,   35,   35,   35,   38,   38,   38,   38,   38,
       57,  983,  983,   57,   87,   87,   87,   87,   88,   88,
      983,   88,   88,   89,   89,   89,  983,   89,   17,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,

      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983
    } ;

static yyconst flex_int16_t yy_chk[2723] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,  980,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   27,   24,
       27,   24,    1,    2,    2,    2,    2,    2,    2,    2,
       24,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   13,   14,   15,   16,    2,   42,   53,   42,   13,
       14,   29,   29,   29,   29,  977,  972,   42,   15,   16,
       19,   19,   19,   19,   52,   22,  962,   22,   53,   19,
       19,   19,   19,   19,   22,   19,   22,   30,   22,   43,
       22,   19,   52,   57,   30,  205,   43,   30,  957,  205,
       57,   19,   19,   45,   59,   45,   59,   19,   30,  212,

       43,   19,   45,  212,   57,  956,   19,   19,   19,   20,
       20,   20,   20,   93,   93,  952,   45,   93,   20,   20,
       20,   20,   20,  951,   20,   47,   47,   47,   47,  530,
       20,   61,   60,   85,   85,   85,   85,  950,   61,   60,
       20,   20,   60,  246,   62,  530,   20,  246,   61,  946,
       20,   62,   61,   60,   63,   20,   20,   20,   25,   64,
       25,   63,  945,  944,  940,   62,   64,   25,   81,   25,
       25,   25,   65,   25,   63,   63,   64,   25,  939,   65,
       64,   81,  146,   81,   81,  127,  938,  146,   66,   65,
       67,   25,   28,   65,   64,   66,  934,   67,  127,   28,

      127,  127,   70,   70,   28,   82,   70,   67,   86,   66,
       65,   67,  933,   70,   82,   86,   86,   66,   82,   28,
       28,  932,   82,   28,   92,   28,   28,   70,   28,   86,
       28,   92,  928,   28,   28,   97,   28,   46,  128,  109,
      158,  158,  158,  158,   97,   92,  109,  128,   97,  110,
      927,  128,   97,  926,  158,  128,  110,   46,   46,  922,
      109,   46,  111,   46,   46,  921,   46,  920,   46,  111,
      110,   46,   46,  109,   46,   56,   56,   56,   56,  914,
      913,  912,  110,  111,   56,   56,   56,   56,   56,  190,
       56,  910,  904,  119,  190,  901,   56,  900,  112,  111,

      119,  254,  254,  254,  254,  112,   56,   56,  113,  899,
      898,  114,   56,  115,  119,  113,   56,  885,  114,  112,
      115,   56,   56,   56,   73,   73,  112,  884,   73,  113,
       73,   73,  114,   73,  115,   73,  113,  883,   73,   73,
      116,   73,  117,  114,  115,  147,  165,  116,  882,  117,
      168,  166,  147,  165,  881,  863,  862,  168,  166,  673,
      673,  116,  673,  117,  861,  116,  147,  165,  859,  117,
      166,  168,  166,  167,  167,  167,  167,  169,  857,  170,
      848,  845,  171,  172,  169,  167,  170,  167,  844,  171,
      172,  843,  167,  842,  173,  169,  676,  676,  169,  676,

      170,  173,  170,  171,  172,  841,  167,  195,  195,  195,
      195,  209,  209,  209,  209,  173,  840,  172,  216,  216,
      839,  216,  195,  216,  829,  216,  209,  828,  195,  173,
      826,  825,  209,  215,  215,  215,  215,  217,  217,  217,
      217,  220,  220,  220,  220,  223,  224,  215,  824,  823,
      822,  217,  223,  224,  227,  220,  221,  221,  221,  221,
      821,  227,  228,  820,  231,  819,  223,  224,  223,  228,
      221,  231,  806,  682,  682,  227,  682,  805,  224,  225,
      225,  225,  225,  228,  804,  231,  232,  232,  232,  232,
      803,  225,  802,  225,  277,  277,  277,  277,  225,  801,

      800,  232,  236,  236,  236,  236,  238,  238,  238,  238,
      799,  798,  225,  226,  226,  226,  226,  236,  797,  279,
      279,  238,  279,  236,  279,  226,  279,  226,  793,  776,
      775,  232,  226,  265,  265,  265,  265,  771,  770,  238,
      248,  248,  248,  248,  265,  769,  226,  229,  229,  229,
      229,  278,  278,  278,  278,  248,  768,  283,  283,  229,
      283,  229,  283,  767,  283,  278,  229,  765,  728,  288,
      253,  253,  253,  253,  728,  759,  288,  248,  754,  728,
      229,  230,  230,  230,  230,  253,  259,  259,  259,  259,
      288,  751,  744,  230,  288,  230,  282,  282,  282,  282,

      230,  259,  284,  284,  284,  284,  285,  285,  287,  285,
      282,  285,  733,  285,  230,  287,  284,  286,  286,  286,
      286,  348,  348,  290,  348,  291,  348,  732,  348,  287,
      290,  286,  291,  295,  295,  295,  295,  731,  287,  289,
      289,  289,  289,  729,  290,  727,  291,  726,  295,  362,
      362,  289,  362,  289,  362,  290,  362,  725,  289,  291,
      296,  296,  296,  296,  301,  301,  301,  301,  302,  302,
      302,  302,  289,  292,  292,  292,  292,  724,  723,  301,
      305,  305,  305,  305,  722,  292,  721,  292,  306,  306,
      306,  306,  292,  718,  713,  305,  309,  309,  309,  309,

      315,  315,  315,  315,  709,  707,  292,  293,  293,  293,
      293,  309,  703,  416,  416,  315,  416,  700,  416,  293,
      416,  293,  318,  318,  318,  318,  293,  319,  319,  319,
      319,  325,  325,  325,  325,  764,  764,  318,  764,  699,
      293,  294,  294,  294,  294,  364,  326,  326,  326,  326,
      686,  432,  364,  294,  684,  294,  683,  326,  432,  680,
      294,  326,  330,  330,  330,  330,  364,  337,  337,  337,
      337,  679,  432,  432,  294,  678,  364,  330,  337,  343,
      343,  343,  343,  349,  349,  349,  349,  361,  361,  361,
      361,  363,  365,  366,  343,  677,  674,  667,  363,  365,

      366,  361,  666,  365,  366,  368,  368,  368,  368,  664,
      661,  660,  363,  365,  366,  373,  373,  373,  373,  374,
      374,  374,  374,  363,  367,  367,  367,  367,  376,  376,
      376,  376,  766,  766,  374,  766,  367,  659,  367,  379,
      379,  379,  379,  367,  380,  380,  380,  380,  381,  381,
      381,  381,  773,  773,  379,  773,  655,  367,  386,  386,
      386,  386,  652,  381,  387,  387,  387,  387,  390,  390,
      390,  390,  651,  386,  396,  396,  396,  396,  398,  398,
      398,  398,  649,  421,  421,  396,  421,  648,  421,  396,
      421,  398,  405,  405,  405,  405,  411,  411,  411,  411,

      646,  424,  424,  430,  424,  431,  424,  405,  424,  433,
      430,  411,  431,  637,  635,  634,  433,  438,  438,  438,
      438,  633,  774,  774,  430,  774,  431,  433,  827,  827,
      433,  827,  438,  439,  439,  439,  439,  865,  865,  431,
      865,  430,  443,  443,  443,  443,  444,  444,  444,  444,
      445,  445,  445,  445,  448,  448,  448,  448,  625,  624,
      623,  444,  449,  449,  449,  449,  621,  620,  618,  448,
      450,  450,  450,  450,  617,  615,  613,  449,  452,  452,
      452,  452,  456,  456,  456,  456,  459,  459,  459,  459,
      610,  867,  867,  452,  867,  609,  607,  456,  461,  461,

      461,  461,  464,  464,  464,  464,  606,  456,  604,  461,
      603,  880,  880,  461,  880,  601,  600,  464,  466,  466,
      466,  466,  591,  590,  464,  467,  467,  467,  467,  464,
      589,  588,  587,  466,  471,  471,  471,  471,  472,  472,
      472,  472,  473,  473,  473,  473,  475,  887,  887,  471,
      887,  586,  475,  472,  475,  475,  473,  475,  585,  584,
      472,  477,  477,  583,  477,  472,  477,  582,  477,  480,
      480,  480,  480,  481,  581,  483,  488,  488,  488,  488,
      481,  480,  483,  480,  486,  486,  486,  486,  480,  489,
      489,  489,  489,  580,  481,  579,  483,  578,  481,  486,

      576,  483,  480,  482,  489,  575,  574,  572,  482,  486,
      482,  571,  897,  897,  482,  897,  482,  482,  567,  482,
      492,  492,  492,  492,  482,  493,  493,  493,  493,  495,
      495,  495,  495,  496,  496,  496,  496,  566,  527,  527,
      493,  527,  564,  527,  495,  527,  563,  493,  497,  497,
      497,  497,  493,  498,  498,  498,  498,  500,  500,  500,
      500,  562,  560,  497,  501,  501,  501,  501,  505,  505,
      505,  505,  500,  506,  506,  506,  506,  509,  509,  509,
      509,  556,  555,  505,  511,  511,  511,  511,  509,  552,
      551,  548,  509,  514,  514,  514,  514,  511,  515,  515,

      515,  515,  519,  519,  519,  519,  547,  544,  514,  523,
      523,  523,  523,  526,  526,  526,  526,  543,  536,  534,
      545,  545,  545,  545,  523,  536,  533,  526,  535,  535,
      535,  535,  532,  531,  537,  545,  538,  539,  540,  536,
      535,  537,  535,  538,  539,  540,  529,  535,  536,  546,
      546,  546,  546,  542,  538,  537,  528,  538,  539,  540,
      542,  535,  541,  540,  537,  902,  902,  539,  902,  541,
      538,  525,  524,  522,  542,  549,  549,  549,  549,  541,
      521,  520,  592,  541,  550,  550,  550,  550,  517,  592,
      549,  553,  553,  553,  553,  554,  554,  554,  554,  557,

      557,  557,  557,  592,  516,  513,  553,  558,  558,  558,
      558,  592,  512,  510,  557,  559,  559,  559,  559,  561,
      561,  561,  561,  565,  565,  565,  565,  569,  569,  569,
      569,  573,  573,  573,  573,  593,  594,  595,  596,  597,
      508,  507,  593,  594,  595,  596,  597,  598,  602,  602,
      602,  602,  903,  903,  598,  903,  593,  594,  595,  596,
      597,  595,  594,  599,  593,  596,  504,  597,  598,  503,
      599,  605,  605,  605,  605,  608,  608,  608,  608,  598,
      911,  911,  599,  911,  599,  611,  611,  611,  611,  612,
      612,  612,  612,  614,  614,  614,  614,  502,  499,  494,

      611,  622,  622,  622,  622,  491,  627,  627,  614,  627,
      490,  627,  622,  627,  487,  485,  622,  626,  626,  626,
      626,  630,  630,  630,  630,  631,  631,  631,  631,  641,
      642,  643,  626,  484,  476,  630,  641,  642,  643,  631,
      632,  632,  632,  632,  636,  636,  636,  636,  474,  470,
      641,  642,  643,  469,  632,  468,  465,  645,  636,  463,
      640,  640,  640,  640,  645,  642,  644,  644,  644,  644,
      631,  462,  457,  632,  640,  455,  915,  915,  645,  915,
      644,  636,  638,  638,  638,  638,  454,  647,  647,  647,
      647,  645,  453,  640,  638,  451,  638,  650,  650,  650,

      650,  638,  647,  644,  447,  640,  653,  653,  653,  653,
      446,  644,  650,  442,  441,  638,  639,  639,  639,  639,
      440,  653,  654,  654,  654,  654,  919,  919,  639,  919,
      639,  656,  656,  656,  656,  639,  657,  657,  657,  657,
      662,  662,  662,  662,  437,  436,  656,  671,  671,  639,
      671,  662,  671,  689,  671,  662,  663,  663,  663,  663,
      689,  639,  665,  665,  665,  665,  435,  663,  434,  429,
      428,  663,  689,  427,  689,  665,  668,  668,  668,  668,
      669,  669,  669,  669,  670,  670,  670,  670,  420,  761,
      761,  668,  761,  419,  761,  669,  761,  415,  670,  672,

      672,  672,  672,  675,  675,  675,  675,  681,  681,  681,
      681,  687,  690,  672,  414,  413,  412,  675,  687,  690,
      410,  681,  685,  685,  685,  685,  688,  688,  688,  688,
      691,  409,  687,  690,  734,  692,  685,  691,  407,  403,
      688,  734,  692,  402,  690,  687,  693,  693,  693,  693,
      401,  691,  694,  400,  695,  734,  692,  399,  397,  694,
      693,  695,  965,  965,  691,  965,  734,  685,  692,  694,
      395,  688,  394,  694,  393,  695,  392,  391,  389,  695,
      696,  696,  696,  696,  697,  697,  697,  697,  388,  971,
      971,  693,  971,  976,  976,  696,  976,  385,  384,  697,

      698,  698,  698,  698,  701,  701,  701,  701,  702,  702,
      702,  702,  704,  704,  704,  704,  383,  382,  378,  701,
      705,  705,  705,  705,  377,  375,  372,  704,  706,  706,
      706,  706,  371,  370,  369,  705,  708,  708,  708,  708,
      710,  710,  710,  710,  360,  712,  712,  712,  712,  359,
      358,  710,  735,  357,  356,  710,  712,  355,  354,  735,
      712,  714,  714,  714,  714,  716,  716,  716,  716,  719,
      719,  719,  719,  735,  714,  720,  720,  720,  720,  730,
      730,  730,  730,  736,  719,  353,  735,  352,  737,  736,
      720,  736,  736,  730,  736,  737,  738,  738,  738,  738,

      739,  740,  741,  741,  741,  741,  351,  739,  740,  737,
      738,  978,  978,  737,  978,  350,  347,  741,  739,  346,
      345,  739,  740,  742,  742,  742,  742,  743,  743,  743,
      743,  745,  745,  745,  745,  981,  981,  740,  981,  344,
      342,  738,  746,  746,  746,  746,  745,  747,  747,  747,
      747,  748,  748,  748,  748,  749,  749,  749,  749,  341,
      982,  982,  747,  982,  340,  339,  748,  750,  750,  750,
      750,  753,  753,  753,  753,  755,  755,  755,  755,  338,
      778,  336,  753,  335,  334,  333,  753,  778,  755,  757,
      757,  757,  757,  760,  760,  760,  760,  772,  772,  772,

      772,  778,  777,  779,  329,  778,  328,  780,  760,  777,
      779,  772,  327,  781,  780,  782,  324,  323,  322,  777,
      781,  321,  782,  777,  779,  780,  320,  317,  780,  316,
      781,  314,  313,  779,  781,  784,  782,  783,  783,  783,
      783,  312,  784,  785,  311,  782,  786,  786,  786,  786,
      785,  783,  787,  787,  787,  787,  784,  788,  788,  788,
      788,  310,  784,  308,  785,  307,  304,  787,  789,  789,
      789,  789,  788,  790,  790,  790,  790,  791,  791,  791,
      791,  303,  783,  792,  792,  792,  792,  807,  790,  795,
      795,  795,  795,  808,  807,  809,  810,  812,  811,  813,

      808,  300,  809,  810,  812,  811,  813,  299,  807,  298,
      297,  281,  807,  280,  808,  276,  809,  810,  812,  811,
      813,  275,  810,  274,  809,  814,  812,  272,  271,  808,
      811,  270,  814,  269,  814,  815,  815,  815,  815,  816,
      816,  816,  816,  268,  267,  266,  814,  264,  263,  262,
      815,  817,  817,  817,  817,  818,  818,  818,  818,  830,
      831,  832,  833,  835,  834,  836,  830,  831,  832,  833,
      835,  834,  836,  838,  838,  838,  838,  261,  260,  258,
      830,  831,  832,  833,  835,  834,  836,  257,  830,  834,
      837,  256,  255,  252,  832,  251,  835,  837,  836,  846,

      846,  846,  846,  847,  847,  847,  847,  849,  852,  850,
      837,  837,  851,  846,  849,  852,  850,  847,  853,  851,
      854,  854,  854,  854,  250,  853,  249,  852,  849,  852,
      850,  856,  247,  851,  854,  853,  245,  244,  856,  853,
      243,  849,  850,  242,  241,  240,  851,  855,  855,  855,
      855,  239,  856,  860,  860,  860,  860,  864,  864,  864,
      864,  855,  869,  908,  237,  854,  235,  860,  856,  869,
      908,  864,  866,  866,  866,  866,  868,  868,  868,  868,
      871,  872,  873,  869,  908,  234,  866,  871,  872,  873,
      868,  233,  855,  222,  219,  869,  870,  870,  870,  870,

      873,  871,  872,  873,  874,  874,  874,  874,  218,  214,
      870,  213,  871,  211,  210,  872,  208,  207,  874,  875,
      875,  875,  875,  876,  876,  876,  876,  877,  877,  877,
      877,  206,  204,  875,  203,  202,  201,  876,  200,  199,
      198,  870,  877,  878,  878,  878,  878,  197,  917,  874,
      196,  879,  879,  879,  879,  917,  194,  878,  886,  886,
      886,  886,  193,  892,  875,  879,  192,  191,  876,  917,
      892,  189,  886,  888,  888,  888,  888,  889,  889,  889,
      889,  890,  891,  188,  892,  187,  186,  888,  890,  891,
      892,  889,  893,  893,  893,  893,  185,  184,  890,  183,

      182,  181,  890,  891,  180,  179,  893,  891,  894,  894,
      894,  894,  895,  895,  895,  895,  178,  177,  888,  176,
      175,  164,  889,  894,  896,  896,  896,  896,  905,  905,
      905,  905,  906,  907,  916,  163,  162,  893,  896,  906,
      907,  916,  905,  909,  909,  909,  909,  161,  160,  918,
      159,  923,  157,  906,  907,  916,  918,  906,  923,  924,
      925,  918,  156,  916,  154,  153,  924,  925,  152,  907,
      918,  924,  923,  905,  151,  929,  930,  931,  150,  935,
      924,  925,  929,  930,  931,  923,  935,  929,  936,  149,
      145,  144,  937,  143,  142,  936,  929,  930,  931,  937,

      935,  941,  141,  140,  942,  943,  139,  947,  941,  936,
      931,  942,  943,  937,  947,  138,  948,  949,  137,  136,
      135,  936,  941,  948,  949,  942,  943,  937,  947,  953,
      134,  133,  943,  954,  941,  132,  953,  948,  949,  942,
      954,  955,  947,  948,  958,  958,  958,  958,  955,  131,
      953,  949,  959,  130,  954,  129,  953,  960,  958,  959,
      126,  125,  955,  124,  960,  123,  122,  954,  961,  961,
      961,  961,  121,  959,  955,  120,  118,  108,  960,  107,
      106,  966,  961,  105,  104,  103,  959,  102,  966,  101,
      960,  963,  963,  963,  963,  964,  964,  964,  964,  100,

       99,   98,  966,   96,   95,  963,   94,   90,   84,  964,
       83,   80,   79,  961,  966,  967,  967,  967,  967,  968,
      968,  968,  968,  969,  969,  969,  969,   78,   77,  967,
       76,   75,   72,  968,   55,   54,   51,  969,  970,  970,
      970,  970,  973,  973,  973,  973,   50,  974,  974,  974,
      974,   49,  970,   48,   44,   40,  973,   37,   26,   23,
      967,  974,   21,   17,  968,  975,  975,  975,  975,  979,
      979,  979,  979,    8,    7,    6,    5,    4,    3,  975,
        0,    0,    0,  979,    0,    0,    0,  973,    0,    0,
        0,    0,  974,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  979,  984,  984,  984,  984,  984,
      985,  985,  985,  985,  985,  986,  986,  986,  986,  986,
      987,  987,  987,  987,  987,  988,  988,  988,  988,  988,
      989,  989,  989,  989,  989,  990,  990,  990,  990,  990,
      991,    0,    0,  991,  992,  992,  992,  992,  993,  993,
        0,  993,  993,  994,  994,  994,    0,  994,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,

      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[121] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
/** @file parseosrl.l
 * 
 * @author  Robert Fourer,  Jun Ma, Kipp Martin, 
 * @version 2.0, 02/04/2009
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005-2009, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSrLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"


#define PARSERDEBUG
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;
     







#line 100 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 1479 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osrllex_init (yyscan_t* scanner);

int osrllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 110 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"



#line 1731 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 984 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2669 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 113 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 117 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 118 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 119 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 120 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 122 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 136 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 138 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 139 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 140 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 141 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 142 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 143 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 144 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 145 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 146 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 147 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 148 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 149 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 150 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 152 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 153 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 154 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 155 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 156 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 157 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 158 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 159 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 160 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 161 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 162 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 163 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 164 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 165 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 166 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 167 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 168 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 169 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 170 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 171 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 172 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 173 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 174 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 175 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 178 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 179 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 180 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 181 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 182 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 183 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 184 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 185 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 186 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 187 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 188 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBEND);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 190 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 191 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICEURISTART);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 192 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 193 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 194 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICENAMESTART);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 195 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 196 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 197 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(INSTANCENAMESTART);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 198 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 199 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 200 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(JOBIDSTART);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 201 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 203 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 204 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 206 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 207 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 209 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 210 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(MESSAGESTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 211 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 213 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 214 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 216 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 217 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 219 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 220 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 222 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 223 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 225 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 226 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 228 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 229 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 231 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 232 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 233 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 234 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 236 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 237 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 238 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 239 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 241 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 242 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 243 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 244 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 247 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 248 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 250 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTARTANDEND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 251 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTARTANDEND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 252 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTARTANDEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 253 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTARTANDEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 254 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTARTANDEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 255 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTARTANDEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 260 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext);   yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 262 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 109:
#line 264 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 264 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 265 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 267 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 113:
#line 269 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 269 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 270 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 273 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /* yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 274 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 275 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 278 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 290 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"
ECHO;
	YY_BREAK
#line 2558 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osrlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 984 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 984 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 983);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osrllex_init_extra has the same functionality as osrllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osrlalloc in
 * the yyextra field.
 */

int osrllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osrlset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osrlset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 290 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosrl.l"





