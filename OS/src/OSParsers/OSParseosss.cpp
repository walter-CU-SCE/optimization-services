#line 2 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.cpp"

#line 4 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osssrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE ossslex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osssrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osssrestart (FILE *input_file ,yyscan_t yyscanner );
void osss_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osss_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osss_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osss_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void ossspush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void ossspop_buffer_state (yyscan_t yyscanner );

static void osssensure_buffer_stack (yyscan_t yyscanner );
static void osss_load_buffer_state (yyscan_t yyscanner );
static void osss_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osss_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osss_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osss_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osss_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osssalloc (yy_size_t ,yyscan_t yyscanner );
void *osssrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osssfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osss_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osssensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osss_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osssensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osss_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ossswrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 54
#define YY_END_OF_BUFFER 55
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[398] =
    {   0,
        1,    1,   55,   53,    1,    1,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,    1,    0,
        0,    0,    0,    7,    0,    0,    0,    0,    0,    0,
       11,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   43,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   46,
        6,    0,   40,   42,    0,    0,    0,    0,    0,    0,

       12,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   45,    0,    0,   39,    0,    0,   42,   15,
       24,    0,   18,    0,    0,    0,    5,    0,    0,    0,
        0,   44,    0,    0,   38,    0,    0,   41,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   45,
        0,    0,   39,   14,    0,   23,    0,    0,   17,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   44,
        0,    0,   38,   13,    0,   22,    0,    0,    0,   16,
        0,    0,    0,    0,    0,    4,    0,    0,   14,    0,

       23,    0,    0,   17,    0,    0,    0,   49,    0,    0,
        0,    0,    0,    0,   13,    0,   22,    0,    0,    0,
       16,    0,    0,    0,   52,    3,    0,   21,    0,    0,
        0,    0,    0,   48,    0,    0,   10,    0,    2,    0,
        0,    0,    0,    0,    0,    0,   47,    0,   51,    0,
        0,    3,   20,    0,    0,    0,   31,    0,    0,    0,
       48,    0,   50,    0,    0,    2,   19,    0,    0,    0,
        0,    0,    0,    0,   47,    0,   51,    0,   20,   27,
        9,   30,    0,    0,    0,    0,    0,   50,    0,   19,
        0,    0,   29,    0,    0,    0,   26,    0,    0,   30,

        0,    0,    8,   25,    0,    0,    0,   29,    0,    0,
        0,   26,    0,    0,    0,   25,   28,    0,    0,    0,
        0,    0,    0,   28,    0,    0,    0,   34,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       37,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   36,    0,    0,    0,    0,    0,
        0,    0,   35,    0,    0,    0,    0,    0,    0,    0,
        0,   36,    0,   33,    0,    0,    0,    0,   35,    0,
       32,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    4,    4,    1,    4,    1,    4,
        4,    4,    4,    1,    6,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    1,    1,
        1,    1,    4,    4,    4,    4,    4,    7,    4,    4,
        4,    4,    8,    9,    4,   10,   11,    4,   12,    4,
        4,   13,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    4,    1,    1,    4,    1,   14,   15,   16,   17,

       18,   19,   20,   21,   22,    4,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,    4,
        4,    4,    1,    1,    1,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[36] =
    {   0,
        1,    2,    3,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[453] =
    {   0,
        0,   30,  675,  676,    2,    5,   56,  644,  646,  658,
      653,  644,  641,  644,  636,  636,  632,   12,    7,   14,
      634,  636,  648,  676,  635,  632,  635,  627,  627,   16,
      676,  629,  629,  622,  629,  621,  620,    9,   38,  628,
      627,  618,  623,  628,  615,  626,  616,  616,  609,  609,
      608,   11,   58,  616,  607,  612,  600,  615,   16,  605,
      622,   21,   35,  607,  606,  605,  604,  601,  594,  591,
      590,  599,  600,  591,  585,  600,   47,  608,   51,   89,
      593,  592,  591,  590,  587,  578,  577,  579,  587,   93,
      676,  586,   97,  101,  602,   61,   67,  598,   72,  573,

      676,  582,  585,  574,  575,  569,  568,  576,  105,  575,
      109,  113,  591,  117,  119,   81,  121,  563,  572,  575,
      574,  571,  123,  585,  558,  127,  583,  582,  676,  131,
      135,  560,  139,  132,  569,  554,  676,  551,  560,  563,
      560,  144,  574,  547,  148,  572,  571,  676,  152,  156,
      549,  541,  160,  560,  556,  541,  540,  164,  564,  676,
      536,  562,  676,  166,  561,  170,  560,  536,  174,  558,
      535,  534,  542,  178,  548,  531,  527,  180,  551,  676,
      523,  549,  676,  182,  548,  186,  547,  523,  518,  190,
      544,  521,  529,  194,  196,  198,  202,  541,  676,  540,

      676,  511,  538,  676,  525,  506,  196,  206,  513,  513,
      210,  212,  216,  533,  676,  532,  676,  503,  507,  529,
      676,  498,  210,  220,  224,  228,  527,  232,  499,  512,
      236,  502,  510,  238,  522,  509,  676,  242,  246,  520,
      250,  492,  490,  254,  495,  503,  256,  515,  260,  514,
      513,  676,  264,  512,  268,  492,  270,  499,  482,  508,
      676,  494,  274,  506,  505,  676,  278,  504,  282,  476,
      284,  491,  474,  500,  676,  499,  676,  498,  676,  288,
      676,  292,  497,  487,  479,  475,  380,  676,  379,  676,
      296,  300,  302,  378,  368,  360,  306,  375,  373,  676,

      345,  348,  676,  310,  369,  314,  368,  676,  340,  344,
      365,  676,  347,  351,  362,  676,  318,  361,  343,  347,
      336,  322,  357,  676,  334,  324,  334,  326,  329,  356,
      328,  336,   75,  335,   49,  330,  334,   83,  333,  121,
      332,  312,  316,  309,  290,  292,  290,  336,  278,  282,
      273,  264,  266,  264,  340,  277,  269,  250,  252,  234,
      243,  220,  345,  245,  237,  218,  220,  202,  211,  190,
      211,  676,  183,  676,  179,  172,  172,  181,  676,  151,
      676,  151,  148,  146,  145,  138,  137,  117,  123,   93,
      109,   79,   72,   26,   34,    2,  676,  387,  389,  391,

      393,  395,  398,  399,  401,  404,  406,  408,  409,  411,
      413,  416,  418,  419,  421,  423,  426,  428,  430,  432,
      434,  436,  437,  439,  441,  443,  445,  448,  449,  452,
      453,  456,  457,  460,  462,  464,  465,  468,  470,  471,
      473,  476,  477,  480,  482,  484,  485,  488,  489,  491,
      494,  496
    } ;

static yyconst flex_int16_t yy_def[453] =
    {   0,
      398,  398,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  399,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  400,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  401,
      397,  397,  402,  399,  403,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  404,  397,
      405,  400,  406,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  401,  407,  397,  402,  408,  403,  397,  409,
      410,  397,  411,  397,  397,  397,  397,  397,  397,  397,
      397,  404,  412,  397,  405,  413,  406,  397,  414,  415,
      397,  397,  416,  397,  397,  397,  397,  397,  407,  397,
      397,  408,  397,  409,  417,  410,  418,  397,  411,  419,
      397,  397,  397,  397,  397,  397,  397,  397,  412,  397,
      397,  413,  397,  414,  420,  415,  421,  397,  397,  416,
      422,  397,  397,  397,  397,  423,  397,  417,  397,  418,

      397,  397,  419,  397,  397,  397,  397,  424,  397,  397,
      397,  425,  397,  420,  397,  421,  397,  397,  397,  422,
      397,  397,  397,  426,  427,  423,  428,  429,  397,  397,
      397,  397,  397,  424,  430,  397,  397,  431,  425,  432,
      433,  397,  397,  397,  397,  397,  426,  434,  427,  435,
      428,  397,  429,  436,  397,  397,  437,  397,  397,  430,
      397,  397,  431,  438,  432,  397,  433,  439,  397,  397,
      440,  397,  397,  434,  397,  435,  397,  436,  397,  441,
      397,  437,  442,  397,  397,  397,  438,  397,  439,  397,
      443,  397,  440,  444,  397,  397,  441,  445,  442,  397,

      397,  397,  397,  443,  446,  447,  444,  397,  397,  397,
      445,  397,  397,  397,  446,  397,  447,  448,  397,  397,
      397,  397,  448,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      449,  397,  397,  397,  397,  397,  397,  450,  397,  397,
      397,  397,  397,  397,  449,  451,  397,  397,  397,  397,
      397,  397,  450,  452,  397,  397,  397,  397,  397,  397,
      451,  397,  397,  397,  397,  397,  397,  452,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,    0,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397
    } ;

static yyconst flex_int16_t yy_nxt[712] =
    {   0,
      397,    5,    6,   19,   19,    7,   19,   19,   19,   19,
       63,   63,   80,   80,    8,    9,   10,   90,   90,  381,
       11,   12,   93,   93,   13,   14,   15,   16,   17,   42,
       18,    5,    6,   55,   44,    7,   63,   63,   43,   95,
      381,   45,   56,  374,    8,    9,   10,   46,  109,  109,
       11,   12,  111,  111,   13,   14,   15,   16,   17,   64,
       18,   20,  130,  130,   65,   66,  346,   67,  131,  131,
       21,   22,   23,  133,  133,  347,   24,   25,  374,   81,
       26,   27,   28,   29,   82,   83,   30,   84,  151,   31,
       80,   80,  152,  113,   90,   90,  343,  124,   93,   93,

      344,  127,  397,  397,  350,  397,  109,  109,  351,  143,
      111,  111,  396,  146,  397,  397,  395,  397,  149,  149,
      150,  150,  153,  153,  397,  397,  394,  397,  397,  397,
      393,  397,  130,  130,  392,  165,  131,  131,  353,  167,
      133,  133,  171,  170,  172,  397,  397,  354,  397,  397,
      397,  391,  397,  149,  149,  390,  185,  150,  150,  389,
      187,  153,  153,  381,  191,  196,  196,  397,  397,  388,
      397,  397,  397,  381,  397,  397,  397,  387,  397,  208,
      208,  212,  212,  397,  397,  379,  397,  397,  397,  374,
      397,  397,  397,  386,  397,  224,  224,  225,  225,  196,

      196,  374,  227,  228,  228,  232,  233,  208,  208,  385,
      235,  238,  238,  212,  212,  372,  240,  241,  241,  245,
      246,  224,  224,  384,  248,  225,  225,  381,  250,  397,
      397,  383,  397,  228,  228,  382,  254,  257,  257,  397,
      397,  381,  397,  238,  238,  380,  264,  397,  397,  379,
      397,  241,  241,  377,  268,  271,  271,  397,  397,  374,
      397,  397,  397,  376,  397,  397,  397,  375,  397,  280,
      280,  257,  257,  374,  283,  397,  397,  373,  397,  397,
      397,  372,  397,  291,  291,  271,  271,  370,  294,  280,
      280,  369,  298,  397,  397,  368,  397,  291,  291,  367,

      305,  306,  306,  397,  397,  366,  397,  397,  397,  365,
      397,  397,  397,  362,  397,  306,  306,  361,  318,  397,
      397,  360,  397,  328,  328,  330,  330,  328,  328,  341,
      341,  348,  348,  341,  341,  359,  356,  348,  348,  358,
      364,  397,  397,  357,  397,  332,  397,  397,  333,  397,
      352,  349,  345,  342,  336,  334,  335,  330,  330,  331,
      329,  324,  327,  326,  325,  324,  316,  322,  321,  312,
      320,  319,  308,  316,  314,  337,  313,  300,  338,  312,
      310,  309,  308,  290,  288,  339,  340,    4,    4,    4,
       94,   94,  112,  112,  123,  123,  126,  126,  128,  128,

      142,  142,  145,  145,  147,  147,  159,  159,  162,  162,
      164,  164,  166,  166,  169,  169,  179,  179,  182,  182,
      184,  184,  186,  186,  190,  190,  198,  198,  200,  200,
      203,  203,  214,  214,  216,  216,  220,  220,  226,  226,
      234,  234,  239,  239,  247,  247,  249,  249,  251,  251,
      253,  253,  260,  260,  263,  263,  265,  265,  267,  267,
      274,  274,  276,  276,  278,  278,  282,  282,  287,  287,
      289,  289,  293,  293,  297,  297,  299,  299,  304,  304,
      307,  307,  311,  311,  315,  315,  317,  317,  323,  323,
      355,  355,  363,  363,  371,  371,  378,  378,  303,  302,

      301,  300,  279,  277,  275,  296,  295,  292,  290,  266,
      288,  286,  261,  285,  284,  281,  279,  252,  277,  275,
      273,  272,  270,  269,  266,  262,  261,  259,  258,  256,
      255,  252,  244,  221,  243,  242,  217,  215,  237,  236,
      231,  230,  204,  229,  201,  199,  223,  222,  221,  219,
      218,  217,  215,  183,  213,  180,  211,  210,  209,  207,
      206,  205,  204,  202,  201,  199,  163,  197,  160,  195,
      194,  193,  192,  189,  188,  148,  183,  181,  180,  178,
      177,  176,  175,  174,  173,  168,  129,  163,  161,  160,
      158,  157,  156,  155,  154,  148,  144,  141,  140,  139,

      138,  137,  136,  135,  134,  132,  129,  125,  122,  121,
      120,  119,  118,  117,  116,  115,  114,  110,  108,  107,
      106,  105,  104,  103,  102,  101,  100,   99,   98,   97,
       96,   92,   91,   89,   88,   87,   86,   85,   79,   78,
       77,   76,   75,   74,   73,   72,   71,   70,   69,   68,
       62,   61,   60,   59,   58,   57,   54,   53,   52,   51,
       50,   49,   48,   47,   41,   40,   39,   38,   37,   36,
       35,   34,   33,   32,  397,    3,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397
    } ;

static yyconst flex_int16_t yy_chk[712] =
    {   0,
        0,    1,    1,    5,    5,    1,    6,    6,   19,   19,
       38,   38,   52,   52,    1,    1,    1,   59,   59,  396,
        1,    1,   62,   62,    1,    1,    1,    1,    1,   18,
        1,    2,    2,   30,   20,    2,   63,   63,   18,   63,
      395,   20,   30,  394,    2,    2,    2,   20,   77,   77,
        2,    2,   79,   79,    2,    2,    2,    2,    2,   39,
        2,    7,   96,   96,   39,   39,  335,   39,   97,   97,
        7,    7,    7,   99,   99,  335,    7,    7,  393,   53,
        7,    7,    7,    7,   53,   53,    7,   53,  116,    7,
       80,   80,  116,   80,   90,   90,  333,   90,   93,   93,

      333,   93,   94,   94,  338,   94,  109,  109,  338,  109,
      111,  111,  392,  111,  112,  112,  391,  112,  114,  114,
      115,  115,  117,  117,  123,  123,  390,  123,  126,  126,
      389,  126,  130,  130,  388,  130,  131,  131,  340,  131,
      133,  133,  134,  133,  134,  142,  142,  340,  142,  145,
      145,  387,  145,  149,  149,  386,  149,  150,  150,  385,
      150,  153,  153,  384,  153,  158,  158,  164,  164,  383,
      164,  166,  166,  382,  166,  169,  169,  380,  169,  174,
      174,  178,  178,  184,  184,  378,  184,  186,  186,  377,
      186,  190,  190,  376,  190,  194,  194,  195,  195,  196,

      196,  375,  196,  197,  197,  207,  207,  208,  208,  373,
      208,  211,  211,  212,  212,  371,  212,  213,  213,  223,
      223,  224,  224,  370,  224,  225,  225,  369,  225,  226,
      226,  368,  226,  228,  228,  367,  228,  231,  231,  234,
      234,  366,  234,  238,  238,  365,  238,  239,  239,  364,
      239,  241,  241,  362,  241,  244,  244,  247,  247,  361,
      247,  249,  249,  360,  249,  253,  253,  359,  253,  255,
      255,  257,  257,  358,  257,  263,  263,  357,  263,  267,
      267,  356,  267,  269,  269,  271,  271,  354,  271,  280,
      280,  353,  280,  282,  282,  352,  282,  291,  291,  351,

      291,  292,  292,  293,  293,  350,  293,  297,  297,  349,
      297,  304,  304,  347,  304,  306,  306,  346,  306,  317,
      317,  345,  317,  322,  322,  326,  326,  328,  328,  331,
      331,  336,  336,  341,  341,  344,  341,  348,  348,  343,
      348,  355,  355,  342,  355,  328,  363,  363,  328,  363,
      339,  337,  334,  332,  329,  328,  328,  330,  330,  327,
      325,  323,  321,  320,  319,  318,  315,  314,  313,  311,
      310,  309,  307,  305,  302,  330,  301,  299,  330,  298,
      296,  295,  294,  289,  287,  330,  330,  398,  398,  398,
      399,  399,  400,  400,  401,  401,  402,  402,  403,  403,

      404,  404,  405,  405,  406,  406,  407,  407,  408,  408,
      409,  409,  410,  410,  411,  411,  412,  412,  413,  413,
      414,  414,  415,  415,  416,  416,  417,  417,  418,  418,
      419,  419,  420,  420,  421,  421,  422,  422,  423,  423,
      424,  424,  425,  425,  426,  426,  427,  427,  428,  428,
      429,  429,  430,  430,  431,  431,  432,  432,  433,  433,
      434,  434,  435,  435,  436,  436,  437,  437,  438,  438,
      439,  439,  440,  440,  441,  441,  442,  442,  443,  443,
      444,  444,  445,  445,  446,  446,  447,  447,  448,  448,
      449,  449,  450,  450,  451,  451,  452,  452,  286,  285,

      284,  283,  278,  276,  274,  273,  272,  270,  268,  265,
      264,  262,  260,  259,  258,  256,  254,  251,  250,  248,
      246,  245,  243,  242,  240,  236,  235,  233,  232,  230,
      229,  227,  222,  220,  219,  218,  216,  214,  210,  209,
      206,  205,  203,  202,  200,  198,  193,  192,  191,  189,
      188,  187,  185,  182,  181,  179,  177,  176,  175,  173,
      172,  171,  170,  168,  167,  165,  162,  161,  159,  157,
      156,  155,  154,  152,  151,  147,  146,  144,  143,  141,
      140,  139,  138,  136,  135,  132,  128,  127,  125,  124,
      122,  121,  120,  119,  118,  113,  110,  108,  107,  106,

      105,  104,  103,  102,  100,   98,   95,   92,   89,   88,
       87,   86,   85,   84,   83,   82,   81,   78,   76,   75,
       74,   73,   72,   71,   70,   69,   68,   67,   66,   65,
       64,   61,   60,   58,   57,   56,   55,   54,   51,   50,
       49,   48,   47,   46,   45,   44,   43,   42,   41,   40,
       37,   36,   35,   34,   33,   32,   29,   28,   27,   26,
       25,   23,   22,   21,   17,   16,   15,   14,   13,   12,
       11,   10,    9,    8,    3,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[55] =
    {   0,
1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
/* $Id$ */
/** @file parseosssl.l
 * 
 * @author  Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin, 
 * @version 1.0, 10/05/2005
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005-2011, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 18 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"


#include <iostream>
#include "OSConfig.h"


#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif
#include "OSErrorClass.h"
#include <sstream>   
#include "OSOptionsStruc.h" 


using std::cout;
using std::endl;
using std::ostringstream;

//#define PARSERDEBUG
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("Found option:  %s\n", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif


#define YY_EXTRA_TYPE struct osOptionsStruc*

void setyyextra( osOptionsStruc *osoptions, void* scanner);

 /*
 * INPUTS:
 * -osil xxx.osil (file name on local machine of optimization instance, 
 *       this is "" by default, however if this remains "" a problem
 * 		 instance must be specified in the osol file)
 * -osol xxx.osol (file name on local machine of solver options, 
 *       default default value is "")
 * -osrl xxx.osrl (file name on local machine where the optimization 
 *       result is put, default is "")
 * -serviceLocation location URL (the URL  of the server that is called 
 *       remotely if the problem not solved locally, default is "")
 * -serviceMethod  (send, solve, kill, knock, getJobID, retrieve, 
 *       default value is solve)
 * -osplInput xxx.ospl  (Not used for now -- ignore)
 * -osplOutput xxx.ospl (Not used for now -- ignore)
 * -mps xxxx.mps (converts mps format to osil and has same effect as -osil)
 * -nl xxxx.nl (converts nl format to osil and has same effect as -osil)
 * -solver solverName (the name of the solver to be invoked)
 * -browser path location to browser e.g. 
 *       /Applications/Firefox.app/Contents/MacOS/firefox (default is "")
 * -config pathToConfigFile is the path to a configure file with the problem 
 * 	     parameters
 * -insList xxx.dat (used only for LINDO, file location on local 
 *       machine of LINDO instruction list)
*/


#line 860 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int ossslex_init (yyscan_t* scanner);

int ossslex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int ossslex_destroy (yyscan_t yyscanner );

int osssget_debug (yyscan_t yyscanner );

void osssset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osssget_extra (yyscan_t yyscanner );

void osssset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osssget_in (yyscan_t yyscanner );

void osssset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osssget_out (yyscan_t yyscanner );

void osssset_out  (FILE * out_str ,yyscan_t yyscanner );

int osssget_leng (yyscan_t yyscanner );

char *osssget_text (yyscan_t yyscanner );

int osssget_lineno (yyscan_t yyscanner );

void osssset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int ossswrap (yyscan_t yyscanner );
#else
extern int ossswrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int ossslex (yyscan_t yyscanner);

#define YY_DECL int ossslex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 114 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"


#line 1087 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.cpp"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osssensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osss_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osss_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 398 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 676 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"

	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 120 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	YY_PRINT  
	//char *ch = strdup(yytext);
	char *ch = yytext;
	// move past -config
	ch+=7;
	for(; isspace(*ch); ch++);
	std::string str(  ch);
	yyextra->configFile = str;

}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 134 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	YY_PRINT  
	//char *ch = strdup(yytext);
	char *ch = yytext;
	// move past -config
	ch+=6;
	for(; isspace(*ch); ch++);
	std::string str(  ch);
	yyextra->configFile = str;

}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 147 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	YY_PRINT  
	//char *ch = strdup(yytext);
	char *ch = yytext;
	// move past -config
	ch+=6;
	for(; isspace(*ch); ch++);
	std::string str(  ch);
	yyextra->configFile = str;

}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 160 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	YY_PRINT  
	yyextra->invokeHelp = true;

}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 166 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
    YY_PRINT  
    yyextra->invokeHelp = true;
 
 }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 172 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	YY_PRINT
	yyextra->invokeHelp = true;
	
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 180 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
    YY_PRINT  
    yyextra->printModel = true;
 
 }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 187 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
    YY_PRINT  
    yyextra->printModel = true;
 
 }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 196 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	YY_PRINT  
	yyextra->writeVersion = true;
	
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 202 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	YY_PRINT 
	yyextra->writeVersion = true;
	
	
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 210 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
   YY_PRINT  
   yyextra->quit = true;
 
}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 217 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->osilFile == ""){
		YY_PRINT  
		//char *ch = strdup(yytext);
		char *ch = yytext;
		// move past -osil
		ch+=5;
		for(; isspace(*ch); ch++);
		std::string str(  ch);
		yyextra->osilFile = str;
	//} 
}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 233 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->osilFile == ""){
		 YY_PRINT  
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past osil
		 ch+=4;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->osilFile = str;
	// } 
 }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 247 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->osilFile == ""){
		 YY_PRINT  
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past osil
		 ch+=4;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->osilFile = str;
	// } 
 }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 260 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->osrlFile == ""){
		YY_PRINT 
		//char *ch = strdup(yytext);
		char *ch = yytext;
		// move past -osrl
		ch+=5;
		for(; isspace(*ch); ch++);
		std::string str(  ch);
		yyextra->osrlFile = str;
	//}  
}  
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 273 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	 //if(yyextra->osrlFile == ""){
		 YY_PRINT 
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -osrl
		 ch+=4;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->osrlFile = str;
	 //}  
 } 			 
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 287 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->osrlFile == ""){
		 YY_PRINT 
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -osrl
		 ch+=4;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->osrlFile = str;
	// }  
 }			 
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 302 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->insListFile == ""){
		YY_PRINT
		//char *ch = strdup(yytext);
		char *ch = yytext;
		// move past -insList
		ch+=8;
		for(; isspace(*ch); ch++);
		std::string str(  ch);
		yyextra->insListFile = str;
	//}  
}  
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 317 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	 //if(yyextra->insListFile == ""){
		 YY_PRINT
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -insList
		 ch+=7;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->insListFile = str;
	// }  
 }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 331 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->insListFile == ""){
		 YY_PRINT
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -insList
		 ch+=7;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->insListFile = str;
	// }  
 }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 345 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->osolFile == ""){
		YY_PRINT 
		//char *ch = strdup(yytext);
		char *ch = yytext;
		// move past -osol
		ch+=5;
		for(; isspace(*ch); ch++);
		std::string str(  ch);
		yyextra->osolFile = str;  
	//}
}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 360 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->osolFile == ""){
		 YY_PRINT 
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -osol
		 ch+=4;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->osolFile = str;  
	//}
}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 374 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	 //if(yyextra->osolFile == ""){
		 YY_PRINT 
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -osol
		 ch+=4;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->osolFile = str;  
	// }
 }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 389 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->osplInputFile == ""){
		YY_PRINT 
		//char *ch = strdup(yytext);
		char *ch = yytext;
		// move past -osplInput
		ch+=10;
		for(; isspace(*ch); ch++);
		std::string str(  ch);
		yyextra->osplInputFile = str;  
	//}
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 403 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->osplInputFile == ""){
		 YY_PRINT 
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -osplInput
		 ch+=9;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->osplInputFile = str;  
	// }
}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 416 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->osplInputFile == ""){
		 YY_PRINT 
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -osplInput
		 ch+=9;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->osplInputFile = str;  
	// }
}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 429 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->osplOutputFile == ""){
		YY_PRINT 
		//char *ch = strdup(yytext);
		char *ch = yytext;
		// move past -osplInput
		ch+=11;
		for(; isspace(*ch); ch++);
		std::string str(  ch);
		yyextra->osplOutputFile = str;  
	//}
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 442 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->printRow == ""){
		YY_PRINT 
		//yyextra->printRowNumberAsString = strdup(yytext);
		yyextra->printRowNumberAsString =  yytext;
		//char *ch = strdup(yytext);
		char *ch = yytext;
		// move past -printRow
		ch+=8;
		for(; isspace(*ch); ch++);
		std::string str(  ch);
		yyextra->printRowNumberAsString = str; 
	//}
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 458 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->printRow == ""){
		YY_PRINT 
		//yyextra->printRowNumberAsString = strdup(yytext);
		yyextra->printRowNumberAsString =  yytext;
		//char *ch = strdup(yytext);
		char *ch = yytext;
		// move past -printRow
		ch+=8;
		for(; isspace(*ch); ch++);
		std::string str(  ch);
		yyextra->printRowNumberAsString = str; 
	//}
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 473 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->printRow == ""){
		YY_PRINT 
		//yyextra->printRowNumberAsString = strdup(yytext);
		yyextra->printRowNumberAsString =  yytext;
		//char *ch = strdup(yytext);
		char *ch = yytext;
		// move past -printRow
		ch+=8;
		for(; isspace(*ch); ch++);
		std::string str(  ch);
		yyextra->printRowNumberAsString = str; 
	//}
}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 488 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->serviceMethod == ""){
		YY_PRINT
		//char *ch = strdup(yytext);
		char *ch = yytext;
		// move past -serviceMethod
		ch+=14;
		for(; isspace(*ch); ch++);
		std::string str(  ch);
		yyextra->serviceMethod = str; 
	//}
}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 501 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->serviceMethod == ""){
		 YY_PRINT
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -serviceMethod
		 ch+=13;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->serviceMethod = str; 
	// }
}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 514 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->serviceMethod == ""){
		 YY_PRINT
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -serviceMethod
		 ch+=13;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->serviceMethod = str; 
	// }
}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 527 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->serviceLocation == ""){
		YY_PRINT 
		//yyextra->serviceLocation = strdup(yytext);
		yyextra->serviceLocation =  yytext;
		//char *ch = strdup(yytext);
		char *ch = yytext;
		// move past -serviceLocation
		ch+=16;
		for(; isspace(*ch); ch++);
		std::string str(  ch);
		yyextra->serviceLocation = str; 
	//}
}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 544 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->serviceLocation == ""){
		 YY_PRINT 
		 //yyextra->serviceLocation = strdup(yytext);
		 yyextra->serviceLocation =  yytext;
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -serviceLocation
		 ch+=15;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->serviceLocation = str; 
	// }
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 560 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->serviceLocation == ""){
		 YY_PRINT 
		 //yyextra->serviceLocation = strdup(yytext);
		 yyextra->serviceLocation =  yytext;
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -serviceLocation
		 ch+=15;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->serviceLocation = str; 
	// }
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 576 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->mpsFile == ""){
		YY_PRINT 
		//char *ch = strdup(yytext);
		char *ch = yytext;
		// move past -mps
		ch+=4;
		for(; isspace(*ch); ch++);
		std::string str(  ch);
		yyextra->mpsFile = str; 
	//}
}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 592 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->mpsFile == ""){
		 YY_PRINT 
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -mps
		 ch+=3;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->mpsFile = str; 
	// }
}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 607 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->mpsFile == ""){
		 YY_PRINT 
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -mps
		 ch+=3;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->mpsFile = str; 
	// }
}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 620 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->nlFile == ""){
		YY_PRINT
		//char *ch = strdup(yytext);
		char *ch = yytext;
		// move past -nl
		ch+=3;
		for(; isspace(*ch); ch++);
		std::string str(  ch);
		yyextra->nlFile = str; 
	//} 
}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 636 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->nlFile == ""){
		 YY_PRINT
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -nl
		 ch+=2;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->nlFile = str; 
	// } 
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 650 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->nlFile == ""){
		 YY_PRINT
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -nl
		 ch+=2;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->nlFile = str; 
	// } 
}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 666 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->gamsControlFile == ""){
		YY_PRINT
		//char *ch = strdup(yytext);
		char *ch = yytext;
		// move past -dat
		ch+=4;
		for(; isspace(*ch); ch++);
		std::string str(  ch);
		yyextra->gamsControlFile = str;
	//} 
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 681 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->gamsControlFile == ""){
		 YY_PRINT
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -dat
		 ch+=3;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->gamsControlFile = str;
	// } 
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 694 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	 //if(yyextra->gamsControlFile == ""){
		 YY_PRINT
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -dat
		 ch+=3;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->gamsControlFile = str;
	// } 
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 707 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->solverName == ""){
		YY_PRINT 
		//char *ch = strdup(yytext);
		char *ch = yytext;
		// move past -solver
		ch+=7;
		for(; isspace(*ch); ch++);
		std::string str(  ch);
		yyextra->solverName = str;
	//} 
}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 721 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	 //if(yyextra->solverName == ""){
		 YY_PRINT 
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -solver
		 ch+=6;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->solverName = str;
	// } 
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 734 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->solverName == ""){
		 YY_PRINT 
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -solver
		 ch+=6;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->solverName = str;
	// } 
}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 747 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	//if(yyextra->browser == ""){
		YY_PRINT  
		//char *ch = strdup(yytext);
		char *ch = yytext;
		// move past -browser
		ch+=8;
		for(; isspace(*ch); ch++);
		std::string str(  ch);
		yyextra->browser = str; 
	//}
}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 761 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->browser == ""){
		 YY_PRINT  
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -browser
		 ch+=7;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->browser = str; 
	// }
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 775 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	// if(yyextra->browser == ""){
		 YY_PRINT  
		 //char *ch = strdup(yytext);
		 char *ch = yytext;
		 // move past -browser
		 ch+=7;
		 for(; isspace(*ch); ch++);
		 std::string str(  ch);
		 yyextra->browser = str; 
	// }
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 788 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
{
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "Please make sure your options are spelled correctly" << endl;
	outStr << "Type OSSolverService -h or OSSolverService --help for valid commands" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	//outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);  
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 801 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"
ECHO;
	YY_BREAK
#line 2023 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * ossslex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( ossswrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of ossslex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osssrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osssrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osssrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 398 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 398 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 397);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osssrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( ossswrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osssrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osssensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osss_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osss_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osss_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osss_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		ossspop_buffer_state();
	 *		ossspush_buffer_state(new_buffer);
     */
	osssensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osss_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (ossswrap()) processing, but the only time this flag
	 * is looked at is after ossswrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osss_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osss_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osssalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osss_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osssalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osss_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osss_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osss_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osss_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osssfree((void *) b->yy_ch_buf ,yyscanner );

	osssfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osssrestart() or at EOF.
 */
    static void osss_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osss_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osss_init_buffer was _probably_
     * called from osssrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osss_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osss_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void ossspush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osssensure_buffer_stack(yyscanner);

	/* This block is copied from osss_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osss_switch_to_buffer. */
	osss_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void ossspop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osss_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osss_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osssensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osssalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osssensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osssrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osssensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osss_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osssalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osss_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osss_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to ossslex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osss_scan_bytes() instead.
 */
YY_BUFFER_STATE osss_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osss_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to ossslex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osss_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osssalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osss_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osss_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osss_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osssget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osssget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osssget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osssget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osssget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osssget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osssget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osssset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osssset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osssset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osssset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osssset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osss_switch_to_buffer
 */
void osssset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osssset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osssget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osssset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* ossslex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int ossslex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osssalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* ossslex_init_extra has the same functionality as ossslex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osssalloc in
 * the yyextra field.
 */

int ossslex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osssset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osssalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osssset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from ossslex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * ossslex_init()
     */
    return 0;
}

/* ossslex_destroy is for both reentrant and non-reentrant scanners. */
int ossslex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osss_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		ossspop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osssfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osssfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * ossslex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osssfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osssalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osssrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osssfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osssrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 801 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosss.l"



void setyyextra(osOptionsStruc *osoptions, void* scanner){
	osssset_extra(osoptions, scanner);
}



