#line 2 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.cpp"

#line 4 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 34
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osilrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osillex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 * Given that the standard has decreed that size_t exists since 1989,
 * I guess we can afford to depend on it. Manoj.
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osilrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osilrestart (FILE *input_file ,yyscan_t yyscanner );
void osil_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osil_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osil_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osilpop_buffer_state (yyscan_t yyscanner );

static void osilensure_buffer_stack (yyscan_t yyscanner );
static void osil_load_buffer_state (yyscan_t yyscanner );
static void osil_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osil_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osil_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osilalloc (yy_size_t ,yyscan_t yyscanner );
void *osilrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osilfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osil_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osilwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 114
#define YY_END_OF_BUFFER 115
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[766] =
    {   0,
        0,    0,  111,  111,  112,  112,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  115,  113,    1,    1,
        1,    2,  113,    5,  113,    4,  113,    3,  113,  111,
      114,  112,  104,  105,  104,  108,  109,  108,    0,    0,
        0,    3,    0,    0,    0,    0,    0,    0,    0,    5,
        4,    0,    5,    0,    6,    0,    0,  107,   77,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  111,  112,    0,  110,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    5,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   79,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   35,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    5,  106,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  103,    0,   78,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   97,    0,
        0,    0,    0,   63,    0,    0,   49,    0,    0,    0,
        0,    0,   99,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   95,    0,    0,    0,   21,   22,    0,
       13,    0,    0,    0,    0,    0,    0,    0,   78,    0,
       80,    0,    0,    0,    0,    0,    0,    0,   64,    0,
        0,    0,   50,    0,    0,    0,    0,   36,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   61,    0,    0,    0,   57,    0,
        0,   59,   63,    0,   49,    0,   65,    0,   67,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       55,    0,    0,    0,   69,    0,    0,    0,   16,    0,
       13,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       80,    0,   62,    0,    0,   98,    0,    0,   58,    0,
        0,   60,   64,    0,    0,   50,    0,   66,    0,   68,
        0,    0,   36,    0,    0,    0,  100,    0,    0,    0,
        0,    0,    0,    0,    0,   56,    0,    0,    0,   70,
        0,    0,   96,    0,   61,    0,    0,   57,    0,   59,
        0,   65,   67,    0,    0,    0,    0,    0,    0,   41,
        0,    0,   31,    0,   55,    0,   87,   69,    0,    0,
        0,   16,    0,    0,    0,    0,   25,   26,    0,    0,
       20,    0,    0,   23,   24,    0,   17,   62,    0,   98,
        0,   58,    0,   60,    0,    0,   66,   68,    0,    0,

        0,    0,  100,    0,    0,   27,    0,   42,    0,    0,
        0,    0,   56,    0,    0,   70,    0,    0,   96,    0,
        0,    0,    0,    0,    0,   43,    0,    0,   75,    0,
       41,    0,   47,    0,    0,    0,   85,    0,    0,   37,
        0,    0,    0,   14,    0,   15,    0,   20,    0,   17,
        0,    0,    0,    0,    0,    0,   44,    0,    0,    0,
        0,   27,   42,    0,   48,    0,    0,   32,    0,    0,
        0,   88,    0,    0,    0,   38,    0,    0,    0,    0,
       39,    0,   43,    0,   45,    0,    0,   47,    0,    0,
        0,   53,    0,    0,   37,    0,    0,   19,   14,   15,

        0,    0,    0,    0,    0,   40,    0,    0,   44,    0,
       46,    0,    0,   76,    0,   48,    0,   32,    0,    0,
       54,    0,   88,    0,   86,    0,   38,    0,    0,   71,
        0,   39,  101,   45,    0,    0,    0,   73,    0,   53,
        0,    0,   81,   19,    0,    0,    0,    0,    0,    0,
        0,   18,    0,   72,    0,   40,    0,    0,   46,    0,
       76,    0,    0,   74,    0,   54,    0,   86,    0,    0,
       71,    0,    0,    0,   73,    0,    0,    0,   89,    0,
        0,    0,    0,    0,    0,   18,   72,    0,    0,    0,
      102,    0,    0,   74,    0,    0,    0,    0,   82,    0,

        0,    0,   93,    0,    0,   83,    0,    0,    0,    0,
        0,    0,    0,    0,  102,    0,    0,    0,    0,    0,
       82,    0,   90,   91,    0,    0,    0,   51,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   94,    0,
        0,   52,    0,   84,   90,    0,    0,   51,    0,    0,
        0,    0,    0,    0,    0,   92,    0,    0,   94,    0,
       52,   84,    0,    0,    0,    0,    0,    0,    0,    0,
       92,    0,   28,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   12,    0,   28,    0,    0,    0,    0,    0,
        0,    0,    0,   12,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    7,    0,    0,    0,    0,    0,    0,
        0,    9,    0,    7,    0,    0,    0,    0,    0,    8,
        0,    9,    0,    0,    0,   33,    0,    8,    0,    0,
        0,    0,   29,    0,    0,    0,   34,    0,    0,    0,
       10,   34,    0,   30,    0,   10,   30,    0,    0,    0,
        0,    0,   11,   11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    1,    1,    1,    7,    1,
        1,    1,    8,    1,    9,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,    1,   13,
       14,   15,   16,    1,    1,    1,   17,   18,   19,   20,
        1,    1,   21,    1,    1,    1,    1,   22,   23,   24,
       25,   26,   27,   28,    1,   29,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   30,   31,   32,   33,

       34,   35,   36,   37,   38,   39,    1,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,    1,   55,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[56] =
    {   0,
        1,    1,    1,    1,    1,    2,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[774] =
    {   0,
        0,   54, 1636, 1635, 1633, 1632,    0,    0,    0,    0,
        0,    0,    5,   13,    2,   14, 1638, 1643,  108,    0,
        0, 1643,   13,    7, 1622,   17,  154, 1643, 1614,    0,
     1643,    0, 1643, 1643, 1626, 1643, 1643, 1619,    0, 1618,
       15, 1643, 1589, 1588, 1597,    3, 1581, 1575, 1597,   16,
       28, 1604,   20,   34, 1643, 1616,  186, 1643, 1643, 1603,
       13, 1580, 1584, 1569,   35, 1578,    7,   38, 1588,   28,
       31,   41, 1580, 1587, 1596,    0,    0, 1600, 1643, 1580,
     1567,   80, 1571, 1570, 1580, 1565, 1568, 1595, 1594, 1596,
       89, 1583,   45, 1560, 1564, 1549,   53, 1558,   67,   73,

       67,   56,   75,   80, 1561, 1568, 1643, 1550, 1556,   59,
     1545, 1550,  132, 1545,  139, 1540, 1549, 1554, 1643, 1547,
     1547, 1548, 1537, 1534, 1541, 1549, 1552, 1539, 1531, 1549,
     1537, 1536, 1530, 1643, 1643, 1540, 1536,  135,  160,  209,
     1539, 1541, 1525, 1536, 1520, 1643,  178,  149,  236, 1521,
     1527,   73, 1516, 1521,  239,    1,  242, 1512, 1521, 1526,
      245, 1519, 1519, 1520, 1520, 1508, 1505, 1512, 1520, 1523,
     1510, 1502, 1520, 1508, 1507, 1501,  259, 1528, 1498,  262,
     1506,  265,  268,  172, 1509,  282,  187,  285,  288, 1512,
     1501, 1509, 1505, 1491, 1503, 1503, 1489, 1501,  291, 1503,

     1496,  305, 1497, 1492,  308, 1475,  311, 1643, 1643,  321,
      204, 1486, 1476,  324, 1492, 1477,  327, 1490,  330,  340,
      343,  346, 1505,  349,  354, 1484,  363,  368,  371, 1473,
     1486,  377,  382,  385,  391, 1489,  395,  399, 1478, 1486,
      405, 1476, 1468, 1480, 1480, 1466, 1478,  409, 1480, 1473,
      412, 1474,  415,  419,  429, 1469, 1458,  433,  439, 1472,
      442,  447,  452, 1458,  456,  459,  462,  465,  468, 1456,
     1454, 1463, 1466, 1467,  473, 1452, 1448, 1455, 1449,  479,
      482, 1448, 1459,  487,  493,  113, 1462,  496,  501, 1448,
      504, 1456, 1446,  509,  512, 1442,  518,  522,  527,  538,

      541,  544,  547, 1449,  551,  554, 1438,  558,  561, 1452,
      565,  568,  572, 1454, 1437,  575,  579,  582,  585,  588,
     1435, 1433,  593, 1442, 1445,  599,  602, 1446,  605,  608,
     1431, 1427, 1434, 1425,  613,  622, 1404, 1415,  627,  630,
      130,  633,  636, 1404,  641, 1385, 1373,  647, 1369,  650,
     1351,  653,  656,  659, 1340, 1331, 1312, 1309,  662,  665,
      668, 1323, 1643, 1324,  676, 1302, 1288,  682, 1264,  685,
     1275,  688, 1259,  691,  694,  700, 1643, 1643, 1261,  707,
      710, 1250,  713, 1643, 1643,  720,  723,  726, 1240,  729,
     1221,  733, 1232,  736, 1219, 1203,  739,  742,  745, 1218,

     1205, 1187,  748, 1184,  751,  754,  759,  765,  768, 1198,
      773, 1199,  776, 1193,  782,  787, 1170,  790,  796, 1181,
     1172, 1175,  799, 1174,  804,  807,  813, 1165, 1643, 1160,
      818,  821,  828, 1142, 1125,  831, 1643, 1078,  835,  838,
     1062,  841,  845,  849,  858,  861, 1066,  864, 1041,  867,
     1044, 1048,  871, 1041, 1029,  874,  877,  880, 1024,  888,
     1015,  894,  897,  902,  905,  991,  908,  911,  990,  916,
      922,  925,  930,  995,  936,  944,  981,  950,  981,  953,
      956,  977,  959,  967,  970,  984,  945,  973,  976,  952,
      981,  984,  946,  951,  990,  933,  995,  998, 1001, 1004,

      993, 1009, 1022,  928, 1025, 1028,  930,  910, 1031, 1039,
     1042,  919, 1045, 1048,  894, 1053, 1059, 1062,  905, 1065,
     1068,  898, 1073, 1079, 1082,  906, 1085,  901, 1088, 1093,
      888, 1096, 1643, 1102,  876,  887, 1105, 1108,  884, 1111,
      859,  856,  846, 1114,  845,  844,  854,  809,  808,  824,
     1119, 1122, 1125, 1128,  785, 1132,  808, 1135, 1139,  772,
     1142,  779, 1145, 1149,  780, 1152,  761, 1155,  758, 1159,
     1162,  747,  768,  735, 1165,  764,  725,  723, 1643,  722,
      717,  679,  671,  669,  636, 1168, 1173,  633,  646, 1176,
     1179,  656,  626, 1182,  630,  598,  599, 1185, 1190, 1193,

      580,  570, 1643,  578, 1199, 1643,  572,  578,  579,  566,
      562,  555,  491,  489, 1207,  483, 1213,  485, 1216, 1219,
     1222, 1233, 1236, 1643,  483,  483, 1239, 1242,  461,  463,
      461,  446,  453,  449, 1247,  448,  429, 1253, 1256,  418,
     1261, 1267, 1270, 1275, 1278,  401,  403, 1284,  383,  386,
      378,  395,  358,  373, 1287, 1290, 1293,  345, 1296,  355,
     1301, 1307,  348,  342,  346,  334,  325,  314, 1310,  320,
     1313, 1316, 1319,  325,  319,  293,  301,  298,  291,  269,
      278, 1323, 1326,  271, 1330,  257,  264,  254,  267,  256,
      250,  248,  249, 1336,  232,  231,  244,  237,  235,  211,

      239,  209,  227, 1339,  215,  214,  207,  201,  178,  170,
     1342,  187, 1345, 1348,  174,  181,  172,  167, 1358,  159,
     1361, 1364,  154, 1367,  143,  141,  132,  124, 1374, 1377,
      125, 1380,  128,  121,  113, 1643,  110, 1383,  110,   86,
     1387,   83, 1643,   80, 1390, 1393, 1396, 1403,   79, 1407,
     1410, 1413, 1420, 1423,   79, 1426, 1429,   65,   58,   26,
     1434, 1437, 1440, 1443, 1643, 1451, 1454, 1457, 1460, 1463,
     1466, 1469, 1472
    } ;

static yyconst flex_int16_t yy_def[774] =
    {   0,
      766,  766,  767,  767,  768,  768,  769,  769,  769,  769,
      769,  769,  770,  770,  771,  771,  765,  765,  765,   19,
       19,  765,  765,  765,  765,  765,  765,  765,  765,  772,
      765,  773,  765,  765,  765,  765,  765,  765,   19,  765,
       27,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  772,  773,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,

      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,

      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,

      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,

      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,

      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,

      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,

      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,    0,  765,  765,  765,  765,  765,
      765,  765,  765
    } ;

static yyconst flex_int16_t yy_nxt[1699] =
    {   0,
      765,   19,   20,   21,   37,   22,   22,   34,   23,   24,
       25,   26,   27,   35,   28,   34,   37,   38,   53,  765,
       29,   35,   50,  765,   51,   54,   50,   53,   51,   38,
      765,   53,   83,   52,   54,   54,  116,   50,   54,   51,
       54,   88,   88,  108,  117,   89,   54,  230,  231,   54,
       54,   84,  109,   54,   22,   19,   20,   21,  126,   22,
       22,   54,   23,   24,   25,   26,   27,  123,   28,  113,
      124,  118,  761,  125,   29,  150,  114,  119,  128,  127,
      120,  138,  138,  138,  151,  129,  121,  155,  130,  131,
      147,  147,  147,  139,  156,  166,  158,  164,  167,  760,

      179,  168,  169,  148,  159,  180,  160,  759,   22,   39,
       39,   39,  161,  165,  224,  162,  758,  171,   40,  225,
       41,  163,   42,  170,  172,  755,  749,  173,  174,  748,
      369,  140,  745,  183,  183,  183,  138,  138,  138,   43,
      186,  186,  186,  744,   44,   45,  184,  417,  139,   46,
      219,  219,  219,  187,   47,   48,  743,   49,   56,  370,
      742,  207,  207,  207,   57,  208,  209,  741,  740,   58,
      739,  737,   59,  263,  263,  263,  418,   60,  736,  147,
      147,  147,  735,   61,  734,   62,   63,   64,  265,  265,
      265,   65,  148,   66,   67,   68,   69,   70,   71,  733,

       72,   73,  731,   74,   91,  291,  291,  291,  728,   92,
      210,  210,  210,  727,  726,   93,  725,   94,   95,   96,
      723,  720,  211,   97,  719,   98,   99,  100,  101,  102,
      103,  212,  104,  105,  718,  106,  213,  220,  220,  220,
      228,  228,  228,  232,  232,  232,  237,  237,  237,  717,
      221,  716,  715,  229,  712,  711,  233,  710,  709,  238,
      254,  254,  254,  258,  258,  258,  261,  261,  261,  183,
      183,  183,  708,  255,  707,  706,  259,  705,  704,  262,
      703,  702,  184,  186,  186,  186,  266,  266,  266,  268,
      268,  268,  280,  280,  280,  701,  187,  700,  699,  267,

      698,  697,  269,  696,  695,  281,  284,  284,  284,  288,
      288,  288,  207,  207,  207,  693,  208,  209,  692,  285,
      691,  289,  210,  210,  210,  294,  294,  294,  298,  298,
      298,  219,  219,  219,  211,  690,  270,  295,  689,  688,
      299,  220,  220,  220,  301,  301,  301,  302,  302,  302,
      305,  305,  305,  687,  221,  308,  308,  308,  686,  684,
      303,  681,  680,  306,  311,  311,  311,  679,  309,  228,
      228,  228,  313,  313,  313,  678,  677,  312,  232,  232,
      232,  676,  229,  316,  316,  316,  317,  317,  317,  675,
      674,  233,  319,  319,  319,  307,  237,  237,  237,  318,

      323,  323,  323,  670,  669,  320,  326,  326,  326,  238,
      335,  335,  335,  339,  339,  339,  342,  342,  342,  327,
      254,  254,  254,  336,  668,  667,  340,  666,  665,  343,
      345,  345,  345,  255,  258,  258,  258,  664,  328,  321,
      348,  348,  348,  261,  261,  261,  663,  259,  350,  350,
      350,  660,  344,  263,  263,  263,  262,  265,  265,  265,
      266,  266,  266,  352,  352,  352,  268,  268,  268,  353,
      353,  353,  658,  267,  359,  359,  359,  657,  654,  269,
      280,  280,  280,  365,  365,  365,  653,  360,  284,  284,
      284,  652,  651,  281,  368,  368,  368,  288,  288,  288,

      650,  285,  372,  372,  372,  291,  291,  291,  649,  289,
      294,  294,  294,  376,  376,  376,  647,  377,  378,  380,
      380,  380,  295,  298,  298,  298,  646,  640,  383,  383,
      383,  381,  384,  385,  637,  299,  636,  635,  382,  386,
      386,  386,  301,  301,  301,  302,  302,  302,  388,  388,
      388,  387,  305,  305,  305,  390,  390,  390,  303,  308,
      308,  308,  392,  392,  392,  306,  311,  311,  311,  394,
      394,  394,  309,  313,  313,  313,  316,  316,  316,  312,
      317,  317,  317,  397,  397,  397,  319,  319,  319,  398,
      398,  398,  634,  318,  323,  323,  323,  633,  632,  320,

      326,  326,  326,  403,  403,  403,  405,  405,  405,  407,
      407,  407,  631,  327,  335,  335,  335,  630,  629,  406,
      626,  625,  408,  413,  413,  413,  624,  336,  339,  339,
      339,  416,  416,  416,  342,  342,  342,  419,  419,  419,
      620,  340,  345,  345,  345,  619,  618,  343,  348,  348,
      348,  350,  350,  350,  352,  352,  352,  353,  353,  353,
      425,  425,  425,  359,  359,  359,  431,  431,  431,  432,
      432,  432,  617,  426,  616,  614,  360,  365,  365,  365,
      613,  612,  433,  368,  368,  368,  439,  439,  439,  372,
      372,  372,  443,  443,  443,  445,  445,  445,  611,  440,

      610,  376,  376,  376,  444,  377,  378,  446,  380,  380,
      380,  448,  448,  448,  383,  383,  383,  609,  384,  385,
      381,  386,  386,  386,  450,  450,  450,  388,  388,  388,
      390,  390,  390,  387,  392,  392,  392,  394,  394,  394,
      397,  397,  397,  398,  398,  398,  456,  456,  456,  403,
      403,  403,  405,  405,  405,  462,  462,  462,  608,  457,
      407,  407,  407,  607,  606,  406,  463,  463,  463,  464,
      464,  464,  605,  408,  467,  467,  467,  413,  413,  413,
      604,  603,  465,  471,  471,  471,  602,  468,  416,  416,
      416,  475,  475,  475,  601,  597,  472,  419,  419,  419,

      480,  480,  480,  596,  476,  425,  425,  425,  483,  483,
      483,  595,  593,  481,  484,  484,  484,  592,  426,  431,
      431,  431,  432,  432,  432,  589,  588,  485,  473,  488,
      488,  488,  491,  491,  491,  433,  439,  439,  439,  495,
      495,  495,  497,  497,  497,  492,  443,  443,  443,  440,
      499,  499,  499,  585,  498,  584,  493,  583,  444,  445,
      445,  445,  500,  500,  500,  448,  448,  448,  450,  450,
      450,  446,  505,  505,  505,  456,  456,  456,  509,  509,
      509,  510,  510,  510,  582,  506,  581,  580,  457,  513,
      513,  513,  579,  578,  511,  462,  462,  462,  463,  463,

      463,  577,  514,  464,  464,  464,  516,  516,  516,  467,
      467,  467,  518,  518,  518,  576,  465,  520,  520,  520,
      574,  573,  468,  471,  471,  471,  523,  523,  523,  572,
      521,  524,  524,  524,  570,  569,  472,  475,  475,  475,
      567,  522,  565,  562,  525,  527,  527,  527,  560,  558,
      476,  529,  529,  529,  480,  480,  480,  532,  532,  532,
      483,  483,  483,  557,  530,  555,  543,  481,  484,  484,
      484,  534,  534,  534,  488,  488,  488,  537,  537,  537,
      542,  485,  491,  491,  491,  540,  540,  540,  541,  539,
      538,  495,  495,  495,  536,  492,  497,  497,  497,  544,

      544,  544,  499,  499,  499,  500,  500,  500,  498,  545,
      551,  551,  551,  535,  546,  547,  533,  548,  531,  549,
      528,  550,  552,  553,  553,  553,  505,  505,  505,  556,
      556,  556,  509,  509,  509,  526,  554,  519,  517,  506,
      510,  510,  510,  559,  559,  559,  513,  513,  513,  561,
      561,  561,  515,  511,  516,  516,  516,  512,  508,  514,
      563,  563,  563,  518,  518,  518,  520,  520,  520,  566,
      566,  566,  507,  564,  523,  523,  523,  504,  503,  521,
      524,  524,  524,  568,  568,  568,  527,  527,  527,  529,
      529,  529,  502,  525,  571,  571,  571,  532,  532,  532,

      501,  496,  530,  534,  534,  534,  537,  537,  537,  575,
      575,  575,  540,  540,  540,  544,  544,  544,  494,  538,
      551,  551,  551,  586,  586,  586,  553,  553,  553,  587,
      587,  587,  552,  556,  556,  556,  590,  590,  590,  554,
      559,  559,  559,  561,  561,  561,  563,  563,  563,  591,
      594,  594,  594,  566,  566,  566,  568,  568,  568,  564,
      598,  598,  598,  571,  571,  571,  575,  575,  575,  586,
      586,  586,  490,  599,  587,  587,  587,  590,  590,  590,
      615,  615,  615,  594,  594,  594,  598,  598,  598,  489,
      591,  621,  621,  621,  622,  622,  622,  487,  486,  599,

      627,  627,  627,  482,  479,  600,  478,  623,  615,  615,
      615,  477,  474,  628,  638,  638,  638,  641,  641,  641,
      643,  643,  643,  621,  621,  621,  470,  639,  469,  466,
      642,  461,  460,  644,  622,  622,  622,  645,  645,  645,
      627,  627,  627,  648,  648,  648,  459,  623,  655,  655,
      655,  458,  455,  628,  638,  638,  638,  659,  659,  659,
      454,  656,  641,  641,  641,  453,  452,  639,  661,  661,
      661,  643,  643,  643,  451,  642,  662,  662,  662,  645,
      645,  645,  449,  447,  644,  648,  648,  648,  655,  655,
      655,  671,  671,  671,  672,  672,  672,  659,  659,  659,

      442,  656,  661,  661,  661,  441,  438,  673,  662,  662,
      662,  682,  682,  682,  671,  671,  671,  672,  672,  672,
      685,  685,  685,  683,  682,  682,  682,  694,  694,  694,
      673,  685,  685,  685,  437,  436,  683,  694,  694,  694,
      713,  713,  713,  721,  721,  721,  713,  713,  713,  724,
      724,  724,  714,  435,  434,  722,  430,  429,  714,  729,
      729,  729,  721,  721,  721,  732,  732,  732,  724,  724,
      724,  730,  428,  427,  722,  729,  729,  729,  738,  738,
      738,  732,  732,  732,  738,  738,  738,  730,  746,  746,
      746,  750,  750,  750,  746,  746,  746,  752,  752,  752,

      424,  747,  423,  751,  753,  753,  753,  747,  750,  750,
      750,  756,  756,  756,  752,  752,  752,  754,  422,  421,
      751,  753,  753,  753,  757,  757,  757,  756,  756,  756,
      757,  757,  757,  420,  754,  762,  762,  762,  762,  762,
      762,  764,  764,  764,  764,  764,  764,  763,  415,  414,
      763,   18,   18,   18,   30,   30,   30,   32,   32,   32,
       31,   31,   31,   33,   33,   33,   36,   36,   36,   76,
      412,   76,   77,   77,  411,  410,  409,  404,  402,  401,
      400,  399,  396,  395,  393,  391,  389,  379,  375,  374,
      373,  371,  367,  366,  364,  363,  362,  361,  358,  357,

      356,  355,  354,  351,  349,  347,  346,  341,  338,  337,
      334,  333,  332,  331,  330,  329,  325,  324,  322,  315,
      314,  310,  304,  300,  297,  296,  293,  292,  290,  287,
      286,  283,  282,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  264,  260,  257,  256,  253,  252,  251,  250,
      249,  248,  247,  246,  245,  244,  243,  242,  241,  240,
      239,  236,  235,  234,  227,  226,  223,  222,  218,  217,
      216,  215,  214,  206,  205,  204,  203,  202,  201,  200,
      199,  198,  197,  196,  195,  194,  193,  192,  191,  190,
      189,  188,  185,  182,  181,  178,  177,  176,  175,  157,

      154,  153,  152,  149,  146,   89,   89,  145,  144,  143,
      142,  141,  137,  136,  135,  134,  133,  132,  122,  115,
      112,  111,  110,  107,   90,   75,   87,   86,   85,   82,
       81,   80,   55,   79,   78,   75,   55,  765,   31,   31,
       31,   31,   17,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765

    } ;

static yyconst flex_int16_t yy_chk[1699] =
    {   0,
        0,    1,    1,    1,   15,    1,    1,   13,    1,    1,
        1,    1,    1,   13,    1,   14,   16,   15,   24,   41,
        1,   14,   23,    0,   23,   24,   26,   50,   26,   16,
       41,   53,   46,   23,   50,   26,   67,   51,   53,   51,
       24,   54,   54,   61,   67,   54,   51,  156,  156,   50,
       26,   46,   61,   53,    1,    2,    2,    2,   71,    2,
        2,   51,    2,    2,    2,    2,    2,   70,    2,   65,
       70,   68,  760,   70,    2,   93,   65,   68,   72,   71,
       68,   82,   82,   82,   93,   72,   68,   97,   72,   72,
       91,   91,   91,   82,   97,  102,   99,  101,  102,  759,

      110,  102,  103,   91,   99,  110,  100,  758,    2,   19,
       19,   19,  100,  101,  152,  100,  755,  104,   19,  152,
       19,  100,   19,  103,  104,  749,  744,  104,  104,  742,
      286,   82,  740,  113,  113,  113,  138,  138,  138,   19,
      115,  115,  115,  739,   19,   19,  113,  341,  138,   19,
      148,  148,  148,  115,   19,   19,  737,   19,   27,  286,
      735,  139,  139,  139,   27,  139,  139,  734,  733,   27,
      731,  728,   27,  184,  184,  184,  341,   27,  727,  147,
      147,  147,  726,   27,  725,   27,   27,   27,  187,  187,
      187,   27,  147,   27,   27,   27,   27,   27,   27,  723,

       27,   27,  720,   27,   57,  211,  211,  211,  718,   57,
      140,  140,  140,  717,  716,   57,  715,   57,   57,   57,
      712,  710,  140,   57,  709,   57,   57,   57,   57,   57,
       57,  140,   57,   57,  708,   57,  140,  149,  149,  149,
      155,  155,  155,  157,  157,  157,  161,  161,  161,  707,
      149,  706,  705,  155,  703,  702,  157,  701,  700,  161,
      177,  177,  177,  180,  180,  180,  182,  182,  182,  183,
      183,  183,  699,  177,  698,  697,  180,  696,  695,  182,
      693,  692,  183,  186,  186,  186,  188,  188,  188,  189,
      189,  189,  199,  199,  199,  691,  186,  690,  689,  188,

      688,  687,  189,  686,  684,  199,  202,  202,  202,  205,
      205,  205,  207,  207,  207,  681,  207,  207,  680,  202,
      679,  205,  210,  210,  210,  214,  214,  214,  217,  217,
      217,  219,  219,  219,  210,  678,  189,  214,  677,  676,
      217,  220,  220,  220,  221,  221,  221,  222,  222,  222,
      224,  224,  224,  675,  220,  225,  225,  225,  674,  670,
      222,  668,  667,  224,  227,  227,  227,  666,  225,  228,
      228,  228,  229,  229,  229,  665,  664,  227,  232,  232,
      232,  663,  228,  233,  233,  233,  234,  234,  234,  660,
      658,  232,  235,  235,  235,  224,  237,  237,  237,  234,

      238,  238,  238,  654,  653,  235,  241,  241,  241,  237,
      248,  248,  248,  251,  251,  251,  253,  253,  253,  241,
      254,  254,  254,  248,  652,  651,  251,  650,  649,  253,
      255,  255,  255,  254,  258,  258,  258,  647,  241,  235,
      259,  259,  259,  261,  261,  261,  646,  258,  262,  262,
      262,  640,  253,  263,  263,  263,  261,  265,  265,  265,
      266,  266,  266,  267,  267,  267,  268,  268,  268,  269,
      269,  269,  637,  266,  275,  275,  275,  636,  634,  268,
      280,  280,  280,  281,  281,  281,  633,  275,  284,  284,
      284,  632,  631,  280,  285,  285,  285,  288,  288,  288,

      630,  284,  289,  289,  289,  291,  291,  291,  629,  288,
      294,  294,  294,  295,  295,  295,  626,  295,  295,  297,
      297,  297,  294,  298,  298,  298,  625,  618,  299,  299,
      299,  297,  299,  299,  616,  298,  614,  613,  297,  300,
      300,  300,  301,  301,  301,  302,  302,  302,  303,  303,
      303,  300,  305,  305,  305,  306,  306,  306,  302,  308,
      308,  308,  309,  309,  309,  305,  311,  311,  311,  312,
      312,  312,  308,  313,  313,  313,  316,  316,  316,  311,
      317,  317,  317,  318,  318,  318,  319,  319,  319,  320,
      320,  320,  612,  317,  323,  323,  323,  611,  610,  319,

      326,  326,  326,  327,  327,  327,  329,  329,  329,  330,
      330,  330,  609,  326,  335,  335,  335,  608,  607,  329,
      604,  602,  330,  336,  336,  336,  601,  335,  339,  339,
      339,  340,  340,  340,  342,  342,  342,  343,  343,  343,
      597,  339,  345,  345,  345,  596,  595,  342,  348,  348,
      348,  350,  350,  350,  352,  352,  352,  353,  353,  353,
      354,  354,  354,  359,  359,  359,  360,  360,  360,  361,
      361,  361,  593,  354,  592,  589,  359,  365,  365,  365,
      588,  585,  361,  368,  368,  368,  370,  370,  370,  372,
      372,  372,  374,  374,  374,  375,  375,  375,  584,  370,

      583,  376,  376,  376,  374,  376,  376,  375,  380,  380,
      380,  381,  381,  381,  383,  383,  383,  582,  383,  383,
      380,  386,  386,  386,  387,  387,  387,  388,  388,  388,
      390,  390,  390,  386,  392,  392,  392,  394,  394,  394,
      397,  397,  397,  398,  398,  398,  399,  399,  399,  403,
      403,  403,  405,  405,  405,  406,  406,  406,  581,  399,
      407,  407,  407,  580,  578,  405,  408,  408,  408,  409,
      409,  409,  577,  407,  411,  411,  411,  413,  413,  413,
      576,  574,  409,  415,  415,  415,  573,  411,  416,  416,
      416,  418,  418,  418,  572,  569,  415,  419,  419,  419,

      423,  423,  423,  567,  418,  425,  425,  425,  426,  426,
      426,  565,  562,  423,  427,  427,  427,  560,  425,  431,
      431,  431,  432,  432,  432,  557,  555,  427,  415,  433,
      433,  433,  436,  436,  436,  432,  439,  439,  439,  440,
      440,  440,  442,  442,  442,  436,  443,  443,  443,  439,
      444,  444,  444,  550,  442,  549,  436,  548,  443,  445,
      445,  445,  446,  446,  446,  448,  448,  448,  450,  450,
      450,  445,  453,  453,  453,  456,  456,  456,  457,  457,
      457,  458,  458,  458,  547,  453,  546,  545,  456,  460,
      460,  460,  543,  542,  458,  462,  462,  462,  463,  463,

      463,  541,  460,  464,  464,  464,  465,  465,  465,  467,
      467,  467,  468,  468,  468,  539,  464,  470,  470,  470,
      536,  535,  467,  471,  471,  471,  472,  472,  472,  531,
      470,  473,  473,  473,  528,  526,  471,  475,  475,  475,
      522,  470,  519,  515,  473,  476,  476,  476,  512,  508,
      475,  478,  478,  478,  480,  480,  480,  481,  481,  481,
      483,  483,  483,  507,  478,  504,  496,  480,  484,  484,
      484,  485,  485,  485,  488,  488,  488,  489,  489,  489,
      494,  484,  491,  491,  491,  492,  492,  492,  493,  490,
      489,  495,  495,  495,  487,  491,  497,  497,  497,  498,

      498,  498,  499,  499,  499,  500,  500,  500,  497,  501,
      502,  502,  502,  486,  501,  501,  482,  501,  479,  501,
      477,  501,  502,  503,  503,  503,  505,  505,  505,  506,
      506,  506,  509,  509,  509,  474,  503,  469,  466,  505,
      510,  510,  510,  511,  511,  511,  513,  513,  513,  514,
      514,  514,  461,  510,  516,  516,  516,  459,  455,  513,
      517,  517,  517,  518,  518,  518,  520,  520,  520,  521,
      521,  521,  454,  517,  523,  523,  523,  452,  451,  520,
      524,  524,  524,  525,  525,  525,  527,  527,  527,  529,
      529,  529,  449,  524,  530,  530,  530,  532,  532,  532,

      447,  441,  529,  534,  534,  534,  537,  537,  537,  538,
      538,  538,  540,  540,  540,  544,  544,  544,  438,  537,
      551,  551,  551,  552,  552,  552,  553,  553,  553,  554,
      554,  554,  551,  556,  556,  556,  558,  558,  558,  553,
      559,  559,  559,  561,  561,  561,  563,  563,  563,  558,
      564,  564,  564,  566,  566,  566,  568,  568,  568,  563,
      570,  570,  570,  571,  571,  571,  575,  575,  575,  586,
      586,  586,  435,  570,  587,  587,  587,  590,  590,  590,
      591,  591,  591,  594,  594,  594,  598,  598,  598,  434,
      590,  599,  599,  599,  600,  600,  600,  430,  428,  598,

      605,  605,  605,  424,  422,  570,  421,  600,  615,  615,
      615,  420,  417,  605,  617,  617,  617,  619,  619,  619,
      620,  620,  620,  621,  621,  621,  414,  617,  412,  410,
      619,  404,  402,  620,  622,  622,  622,  623,  623,  623,
      627,  627,  627,  628,  628,  628,  401,  622,  635,  635,
      635,  400,  396,  627,  638,  638,  638,  639,  639,  639,
      395,  635,  641,  641,  641,  393,  391,  638,  642,  642,
      642,  643,  643,  643,  389,  641,  644,  644,  644,  645,
      645,  645,  382,  379,  643,  648,  648,  648,  655,  655,
      655,  656,  656,  656,  657,  657,  657,  659,  659,  659,

      373,  655,  661,  661,  661,  371,  369,  657,  662,  662,
      662,  669,  669,  669,  671,  671,  671,  672,  672,  672,
      673,  673,  673,  669,  682,  682,  682,  683,  683,  683,
      672,  685,  685,  685,  367,  366,  682,  694,  694,  694,
      704,  704,  704,  711,  711,  711,  713,  713,  713,  714,
      714,  714,  704,  364,  362,  711,  358,  357,  713,  719,
      719,  719,  721,  721,  721,  722,  722,  722,  724,  724,
      724,  719,  356,  355,  721,  729,  729,  729,  730,  730,
      730,  732,  732,  732,  738,  738,  738,  729,  741,  741,
      741,  745,  745,  745,  746,  746,  746,  747,  747,  747,

      351,  741,  349,  745,  748,  748,  748,  746,  750,  750,
      750,  751,  751,  751,  752,  752,  752,  748,  347,  346,
      750,  753,  753,  753,  754,  754,  754,  756,  756,  756,
      757,  757,  757,  344,  753,  761,  761,  761,  762,  762,
      762,  763,  763,  763,  764,  764,  764,  761,  338,  337,
      762,  766,  766,  766,  767,  767,  767,  768,  768,  768,
      769,  769,  769,  770,  770,  770,  771,  771,  771,  772,
      334,  772,  773,  773,  333,  332,  331,  328,  325,  324,
      322,  321,  315,  314,  310,  307,  304,  296,  293,  292,
      290,  287,  283,  282,  279,  278,  277,  276,  274,  273,

      272,  271,  270,  264,  260,  257,  256,  252,  250,  249,
      247,  246,  245,  244,  243,  242,  240,  239,  236,  231,
      230,  226,  223,  218,  216,  215,  213,  212,  206,  204,
      203,  201,  200,  198,  197,  196,  195,  194,  193,  192,
      191,  190,  185,  181,  179,  178,  176,  175,  174,  173,
      172,  171,  170,  169,  168,  167,  166,  165,  164,  163,
      162,  160,  159,  158,  154,  153,  151,  150,  145,  144,
      143,  142,  141,  137,  136,  133,  132,  131,  130,  129,
      128,  127,  126,  125,  124,  123,  122,  121,  120,  118,
      117,  116,  114,  112,  111,  109,  108,  106,  105,   98,

       96,   95,   94,   92,   90,   89,   88,   87,   86,   85,
       84,   83,   81,   80,   78,   75,   74,   73,   69,   66,
       64,   63,   62,   60,   56,   52,   49,   48,   47,   45,
       44,   43,   40,   38,   35,   29,   25,   17,    6,    5,
        4,    3,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[115] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
/** @file parseosil.l
 * 
 * @author  Robert Fourer, Gus Gassmann, Jun Ma, Kipp Martin, 
 * @version 1.1, 12/21/2007
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005-2007, Robert Fourer, Gus Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"


#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#include <iostream>



#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

#include <sstream>  
#include "OSiLParserData.h"



#include "OSErrorClass.h"
#include "OSParseosil.tab.hpp"
#include "OSInstance.h"




#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif



#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>
  #endif
#endif
using std::cout;
using std::endl;
using std::ostringstream;







#line 106 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
#define YY_EXTRA_TYPE OSiLParserData*
#line 1185 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.cpp"

#define INITIAL 0
#define doublequoteattributetext 1
#define singlequoteattributetext 2
#define startelement 3
#define osilattributetext 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osillex_init (yyscan_t* scanner);

int osillex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osillex_destroy (yyscan_t yyscanner );

int osilget_debug (yyscan_t yyscanner );

void osilset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osilget_extra (yyscan_t yyscanner );

void osilset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osilget_in (yyscan_t yyscanner );

void osilset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osilget_out (yyscan_t yyscanner );

void osilset_out  (FILE * out_str ,yyscan_t yyscanner );

int osilget_leng (yyscan_t yyscanner );

char *osilget_text (yyscan_t yyscanner );

int osilget_lineno (yyscan_t yyscanner );

void osilset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osilget_lval (yyscan_t yyscanner );

void osilset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osilget_lloc (yyscan_t yyscanner );
    
        void osilset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osilwrap (yyscan_t yyscanner );
#else
extern int osilwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osillex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osillex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 117 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"

 
#line 1436 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osilensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osil_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 766 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1643 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 119 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 124 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 125 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 126 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 128 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 144 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 147 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 148 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 149 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 150 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFQTERMSATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 151 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 152 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFSTAGESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 155 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 156 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXONEATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 157 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXTWOATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 158 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 159 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUEATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 160 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTIDXATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 161 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HORIZONATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 162 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 164 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(IDATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 165 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(IDATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 166 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 167 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 168 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 169 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
/* patterns for <quadraticCoefficients> */
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 172 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OSILEND);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 173 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATAEND);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 174 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSSTART);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 175 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSEND);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 176 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMSTART);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 177 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMEND);}
	YY_BREAK
/* patterns for <nonlinearExpressions> */
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 180 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 181 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 182 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 183 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 184 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 185 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 186 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 187 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 188 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 189 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 190 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 191 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 192 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 193 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 194 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 195 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 196 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 197 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 198 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 199 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 200 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 201 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 202 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 203 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 204 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 205 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 206 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 207 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 208 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 209 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 210 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 211 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 212 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 213 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 214 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 215 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 216 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 217 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 218 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 219 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 220 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 221 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 223 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 224 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 225 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 226 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 227 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 228 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 229 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 230 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
/* patterns for <timeDomain> element */
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 233 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINSTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 234 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 235 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESSTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 236 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 237 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 238 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGEEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 239 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 240 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 241 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 242 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 243 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 244 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 245 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 246 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 247 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 248 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 249 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 250 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 251 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 252 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALEND);}
	YY_BREAK
/* patterns for <parametersAndStochasticElements> 
{xmlwhitespace}*\<parametersAndStochasticElements {YY_PRINT; return(PARAMETERSSTART);}
{xmlwhitespace}*\<\/parametersAndStochasticElements{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMETERSEND);}
{xmlwhitespace}*\<param {YY_PRINT; return(PARAMSTART);}
{xmlwhitespace}*\<\/param{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMEND);}
*/
case 103:
YY_RULE_SETUP
#line 262 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
BEGIN comment;
	YY_BREAK
case 104:
#line 264 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 264 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 265 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 267 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
BEGIN xmldeclaration;
	YY_BREAK
case 108:
#line 269 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 269 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 270 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 273 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 274 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 276 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 288 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"
ECHO;
	YY_BREAK
#line 2234 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(osilattributetext):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osillex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osilwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osillex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osilrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osilrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osilrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 766 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 766 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 765);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osilrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osilwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osilrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osilensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osil_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osil_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osil_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osilpop_buffer_state();
	 *		osilpush_buffer_state(new_buffer);
     */
	osilensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osil_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osilwrap()) processing, but the only time this flag
	 * is looked at is after osilwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osil_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osil_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osilalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osil_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osil_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osil_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osilfree((void *) b->yy_ch_buf ,yyscanner );

	osilfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osilrestart() or at EOF.
 */
    static void osil_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osil_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osil_init_buffer was _probably_
     * called from osilrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osil_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osil_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osilensure_buffer_stack(yyscanner);

	/* This block is copied from osil_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osil_switch_to_buffer. */
	osil_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osilpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osil_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osilensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osil_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osil_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osillex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osil_scan_bytes() instead.
 */
YY_BUFFER_STATE osil_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osil_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osillex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osil_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osilalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osil_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osil_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osilget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osilget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osilget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osilget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osilget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osilset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osil_switch_to_buffer
 */
void osilset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osilset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osilget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osilset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osilget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osilset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osilget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osilset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osillex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osillex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osillex_init_extra has the same functionality as osillex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osilalloc in
 * the yyextra field.
 */

int osillex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osilset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osilset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osillex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osillex_init()
     */
    return 0;
}

/* osillex_destroy is for both reentrant and non-reentrant scanners. */
int osillex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osilpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osilfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osilfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osillex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osilfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osilalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osilrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osilfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osilrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 288 "/home/kmartin/coin/oscommon/OS/src/OSParsers/OSParseosil.l"




