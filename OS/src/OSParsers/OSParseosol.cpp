#line 2 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

#line 4 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osollex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 189
#define YY_END_OF_BUFFER 190
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1665] =
    {   0,
        1,    1,  187,  187,  185,  185,  186,  186,    0,    0,
        0,    0,    0,    0,    0,    0,  190,  188,    1,    1,
        2,  176,    2,  176,    6,  176,    5,  188,    4,  176,
        2,  187,  189,  185,  186,  178,  179,  178,  182,  183,
      182,    1,  176,  176,    0,    4,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,    3,    6,
        5,  176,    6,  176,    7,    0,    0,  181,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    4,  176,  187,  185,  186,    0,  184,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,

      176,  176,  176,  176,  176,  176,  176,    0,  176,    6,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        6,  180,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,    0,  176,  176,  176,
      176,  176,  176,    6,  177,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  168,

        0,    0,    0,    0,    0,    0,    0,    0,   68,    0,
        0,    0,  160,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  152,    0,    0,    0,  154,  176,  176,
      176,  176,  176,   24,  176,  176,  176,  176,  176,  176,
      176,  176,    0,   41,   42,  176,  176,  176,  176,  176,
      176,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  114,    0,    0,    0,    0,    0,    0,  104,
        0,    0,  176,  176,  176,    0,  176,   24,  176,  176,
      176,  176,  176,    0,  176,  176,  176,  176,  176,    0,
      176,  176,  176,    0,  176,    0,  169,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   69,    0,
        0,    0,    0,    0,    0,    0,  161,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  153,
        0,    0,    0,    0,    0,  155,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   80,    0,    0,
        0,    0,    0,    0,    0,   60,   59,   94,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      176,  176,    0,   39,   40,  176,  176,  176,  176,  176,
        0,   31,   32,  176,  176,  176,  176,    0,   49,   50,
      176,  176,    0,   37,   38,  176,    0,  169,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   69,    0,
        0,    0,    0,    0,    0,  161,    0,    0,    0,   61,
        0,    0,    0,    0,  115,    0,    0,    0,    0,    0,
        0,  153,    0,    0,    0,  105,    0,  155,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   64,    0,    0,
      176,  176,  176,  176,  176,  176,  176,  176,  176,    0,
      176,   25,  176,  176,  176,    0,   33,   34,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       81,    0,    0,    0,    0,    0,    0,    0,   61,    0,
       95,    0,    0,    0,  115,    0,    0,    0,    0,    0,
        0,    0,    0,  105,    0,    0,    0,   90,    0,    0,
        0,   62,    0,    0,    0,    0,    0,   84,  106,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      138,    0,    0,   66,    0,    0,    0,    0,    0,  176,

      176,  176,  176,  176,    0,  176,  176,  176,    0,   45,
       46,   25,  176,  176,  176,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   81,    0,    0,
        0,    0,    0,    0,    0,    0,   95,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       65,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   88,  126,    0,    0,
        0,    0,    0,    0,    0,    0,   86,    0,  176,    0,
      176,  176,  176,    0,   51,   52,  176,  176,    0,  176,

      176,  176,  176,  176,  176,  176,  176,    0,   53,   54,
        0,    0,   91,    0,    0,    0,    0,    0,   63,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   85,
        0,  107,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  139,    0,    0,    0,    0,   67,
        0,    0,    0,    0,    0,   65,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  140,    0,   47,   48,  176,  176,  176,  176,    0,

       43,   44,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,    0,   91,    0,    0,    0,    0,   63,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       85,  107,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   89,    0,  127,  139,    0,    0,    0,    0,
       67,    0,    0,    0,    0,    0,    0,   87,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  156,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   72,    0,
        0,    0,  176,  176,  176,  176,  176,  176,  176,  176,

      176,  176,  176,  176,  176,  176,  176,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   89,  127,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   87,    0,  141,  164,    0,    0,    0,  120,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  100,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   74,    0,    0,    0,  176,    0,  176,   26,
      176,    0,  176,  176,   22,  176,  176,  176,   20,  176,
      176,  176,  176,  176,   18,  176,  176,   17,  176,  176,

      176,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  157,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   73,    0,    0,    0,  141,  110,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   76,
        0,  102,   96,    0,   70,   92,    0,    0,    0,    0,
        0,    0,  174,    0,    0,    0,   35,   36,   26,    0,
       55,   56,  176,    0,   22,  176,  176,   20,  176,  176,
      176,  176,  176,   18,  176,   17,  176,  176,    0,   57,
       58,    0,  165,    0,    0,    0,    0,  121,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      101,    0,    0,  157,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   75,   73,    0,    0,    0,    0,  134,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   98,
        0,    0,    0,    0,    0,  116,  172,    0,    0,    0,
       27,   28,  176,  176,  176,  176,  176,  176,  176,  176,
       10,  176,  176,  176,  176,    0,  165,    0,  111,    0,
        0,  121,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   77,    0,    0,  103,  101,    0,   97,    0,    0,
       71,    0,   93,    0,    0,    0,    0,    0,    0,   75,

        0,  175,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   82,    0,  176,  176,    9,  176,  176,  176,  176,
      176,  176,   10,  176,  176,  176,    0,   29,   30,  111,
        0,    0,    0,  135,    0,    0,    0,    0,    0,    0,
        0,    0,   77,    0,  103,   97,    0,   99,   71,   93,
        0,    0,    0,    0,    0,    0,  117,  175,    0,  173,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  136,    0,    0,    0,  176,
        9,  176,  176,  176,  176,  176,  176,  176,  176,  176,

        0,    0,  135,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   99,    0,    0,    0,    0,    0,  117,  173,
        0,   83,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  124,   78,    0,    0,    0,    0,    0,    0,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  137,    0,    0,   83,    0,    0,  118,
        0,    0,  170,    0,    0,    0,    0,    0,    0,  130,
        0,    0,    0,  176,  176,  176,  176,  176,  176,  176,
       11,  176,   12,  176,  176,   13,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  125,    0,   79,    0,
        0,    0,  137,    0,    0,    0,    0,  146,    0,    0,
        0,    0,    0,    0,    0,  108,    0,    0,  176,  176,
       14,  176,  176,  176,  176,   11,   12,  176,   13,    0,
        0,  119,    0,    0,    0,  171,    0,    0,    0,    0,
      125,   79,    0,    0,    0,  131,    0,    0,    0,  132,
        0,    0,    0,    0,    0,    0,    0,  112,    0,  176,
       15,   14,  176,  176,  176,  176,  176,    0,  119,    0,
      147,    0,  171,    0,    0,    0,    0,    0,    0,  131,
        0,  109,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   15,  176,  176,  176,    8,  176,  176,    0,
      133,  147,    0,    0,    0,    0,    0,    0,    0,  109,
        0,  113,    0,    0,    0,    0,  142,    0,    0,    0,
        0,  176,  176,    8,  176,  176,   23,  133,    0,    0,
        0,    0,    0,    0,    0,  113,    0,    0,  162,  158,
        0,  122,    0,    0,    0,  176,  176,  176,   23,    0,
        0,    0,    0,  143,    0,    0,    0,    0,    0,  166,
        0,    0,  128,    0,  176,  176,  176,    0,    0,  163,
        0,  159,  143,    0,    0,  123,    0,    0,    0,    0,
        0,    0,  176,  176,  176,    0,  167,  163,  159,    0,

      123,    0,    0,  129,    0,    0,    0,    0,  176,  176,
      176,  167,    0,    0,  129,    0,    0,    0,    0,  176,
      176,  176,    0,    0,    0,  144,    0,  150,  176,  176,
      176,    0,    0,    0,    0,  176,  176,  176,   16,    0,
      145,    0,    0,  151,    0,  176,  176,   19,   16,  145,
        0,  151,    0,  176,   21,   19,    0,  148,   21,    0,
        0,  149,  149,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    7,    1,    1,    8,    1,
        1,    7,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    7,    1,   14,
       15,   16,   17,    7,    7,   18,   19,   20,   21,   22,
        7,    7,   23,   24,   25,   26,   27,   28,   29,   30,
        7,   31,   32,   33,   34,   35,   36,    7,    7,    7,
        1,    7,    1,    1,    7,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,    1,   63,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[64] =
    {   0,
        1,    2,    2,    2,    1,    3,    2,    4,    1,    2,
        2,    2,    2,    2,    1,    5,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1
    } ;

static yyconst flex_int16_t yy_base[1676] =
    {   0,
        0,   63, 3440, 3439, 3448, 3447, 3444, 3443,    0,    0,
        0,    0,   15,   16,    4,   17, 3450, 3457,  125,  182,
     3443,    8, 3440,   16,   29,   17,   40,  236,   33,   24,
     3457,    0, 3457,    0,    0, 3457, 3457, 3437, 3457, 3457,
     3430,    0,   30,   33,   43,   55,   68,   69,   76,   77,
       73,   81,   80,   85,   84,   92,   95,   88, 3457,  135,
      176,  122,  187,  145, 3457, 3435,  256, 3457, 3393,   62,
     3398, 3401, 3391, 3389, 3394,   75,  150,   86, 3397,   73,
     3376, 3381, 3398,  175,  177,    0,    0,    0, 3418, 3457,
      155,  102,  196,  199,  200,  229,  219,  204,  146,  220,

      301,  252,  228,  245,  302,  258,  305, 3420,  257,  310,
     3422, 3380,  178, 3385, 3388, 3378, 3376, 3381,  107,  287,
      172, 3384,  279, 3363, 3368, 3385, 3371, 3368, 3365, 3370,
     3367,  296, 3378, 3376, 3354, 3363, 3366, 3355, 3359, 3365,
     3352,  207, 3356, 3353, 3351,    7, 3349, 3351, 3361, 3347,
      313, 3457,  317,  318,  322,  331,  358,  349,  350,  353,
      354,  361,  362,  365,  366,  382,  401,  377,  378,  385,
      394,  397,  398, 3387, 3457, 3349, 3346, 3343, 3348, 3345,
      370, 3356, 3354, 3332, 3341, 3344, 3333, 3337, 3343, 3330,
      299, 3334, 3331, 3329,  280, 3327, 3329, 3339, 3325,  361,

     3337, 3336, 3335, 3334, 3318, 3316, 3316, 3330, 3347, 3328,
     3335,  401, 3326, 3321, 3317, 3323, 3311, 3307, 3317, 3321,
     3302, 3300, 3299, 3321, 3299, 3313, 3299, 3307,  416,  419,
      434,  425,  442,  458,  438,  449,  450,  453,  476,  454,
      460,  467,  496, 3457, 3457,  468,  506,  480,  471,  510,
      489,  525, 3310, 3309, 3308, 3307, 3291, 3289, 3289, 3303,
      529, 3302, 3309,  515,  534, 3296, 3292, 3298, 3286, 3282,
     3292, 3296, 3277, 3275, 3274,  544, 3275, 3289, 3275,  551,
     3272, 3290, 3276, 3286, 3269, 3269, 3277, 3265, 3283, 3276,
     3298, 3267, 3271, 3285, 3269, 3272, 3273, 3262,  554, 3256,

     3252, 3249, 3277, 3265,  305, 3260, 3263, 3266, 3261, 3457,
     3273, 3263,  535,  545,  562,  581,  555,  570,  578,  579,
      583,  584,  599,  602,  593,  602,  502,  603,  618,  621,
      623,  624,  646,  661,  670,  641,  649, 3243, 3261, 3247,
     3257, 3240, 3240, 3248, 3236, 3254, 3247,  673,  676, 3269,
     3238, 3242, 3256, 3240, 3243,  688,  691, 3244, 3233,  694,
     3227, 3223, 3220,  697, 3237,  402, 3232, 3235,  703,  712,
     3238, 3233,  718, 3245,  721,  726, 3235, 3217, 3231, 3229,
     3212, 3234, 3229, 3228,  466, 3214, 3222, 3457, 3207, 3212,
     3226, 3204, 3209, 3201, 3211,  729, 3457, 3226, 3198, 3202,

     3215, 3196, 3195, 3195, 3209, 3193, 3192, 3196, 3207, 3205,
      654,  695,  736, 3457, 3457,  727,  732,  735,  736,  739,
      754, 3457, 3457,  745,  767,  782,  749,  786, 3457, 3457,
      764,  761,  801, 3457, 3457,  808,  811,  823, 3188, 3202,
     3200, 3183, 3205, 3200, 3199,  744, 3185, 3193,  826,  829,
     3178, 3183, 3197, 3175, 3180,  832, 3172, 3182,  835,  838,
      844, 3170, 3174,  850,  853, 3187, 3168, 3167, 3167, 3181,
     3165,  859, 3164, 3168,  865,  868, 3179,  872, 3177, 3177,
     3157, 3171, 3160, 3159, 3161, 3160, 3162, 3161, 3166, 3150,
     3162, 3161,  461, 3154, 3149, 3154, 3136, 3145,  773, 3142,

     3150, 3139, 3137, 3151, 3150,  482, 3145, 3457, 3140, 3140,
      804,  863,  864,  868,  883,  874,  875,  878,  898,  919,
      914,  904,  879,  918,  935,  938, 3457, 3457, 3150, 3130,
     3144, 3133, 3132, 3134, 3133, 3135, 3134, 3139, 3123,  950,
      954, 3135, 3134,  511, 3127, 3122, 3127, 3109,  957,  960,
      965, 3118,  786, 3115,  968, 3123, 3112, 3110, 3124, 3123,
      511, 3118,  971,  975, 3113, 3113, 3115, 3457, 3109, 3104,
      639, 3457,  962, 3103, 3108, 3114, 3119, 3457, 3457, 3096,
     3100, 3119, 3096, 3091, 3111, 3091, 3101, 3100, 3104, 3089,
     3101, 3100, 3100,   87, 3087, 3087, 3100, 3095, 3094,  986,

      969,  970,  978, 1001, 1004,  995, 1016, 1019, 1019, 3457,
     3457, 1037, 1020, 1030, 1053, 1056, 3089, 1068, 3083, 3078,
      752, 1071, 1061, 3077, 3082, 3088, 3093, 1089, 1095, 1098,
     3070, 3074, 3093, 3070, 3065, 3085, 1101, 3065, 3075, 3074,
     3078, 3063, 1104, 3075, 3075, 1113, 3062, 3062, 3075, 1119,
     1122, 3070, 3069, 3059, 3069, 3062, 3065, 3068, 3067, 3052,
     3045, 3063, 3063, 3058, 3057,  917, 3060, 3047, 3054, 3042,
     3032, 3051, 3035, 3045, 3035, 3040, 3457, 3457, 3032, 3046,
      973, 3048, 3053, 3027, 3059, 3043, 3457, 3025, 1128, 1146,
     1031, 1069, 1096, 1153, 3457, 3457, 1072, 1160, 1163, 1122,

     1144, 1154, 1163, 1164, 1167, 1168, 1171, 1203, 3457, 3457,
     3029, 1186, 1194, 3039, 3032, 3035, 3038, 1210, 1216, 3037,
     3022, 3015, 3033, 3033, 3028, 3027,  970, 3030, 1219, 1227,
     1230, 1234, 3017, 3024, 3012, 3002, 3021, 3005, 3015, 3005,
     3010, 1237, 1240, 1245, 1248, 3002, 3016, 1030, 1255, 1260,
     3018, 3023, 2997, 3029, 3013, 1263, 1266, 2995, 2993, 3003,
     3006, 2998, 2998, 2989, 2993, 3005, 2995, 2986, 3000, 2983,
     2986, 2999, 2981, 2996, 2992, 2995, 2999, 2975, 2984, 2977,
     2986, 2985, 2992, 2992, 2978, 2977, 2972, 2997, 2974, 2968,
     2969, 3457, 1270, 3457, 3457, 1261, 1265, 1269, 1270, 1285,

     3457, 3457, 1276, 1280, 1049, 1211, 1281, 1284, 1285, 1288,
     1289, 1292, 1293, 2960, 1310, 2970, 2973, 2965, 2965, 1321,
     2956, 2960, 2972, 2962, 2953, 2967, 2950, 2953, 2966, 2948,
     1325, 1328, 2963, 2959, 2962, 2966, 2942, 2951, 2944, 2953,
     2952, 1336, 1342, 1345, 1352, 1355, 2959, 2959, 2945, 2944,
     1360, 2939, 2964, 2941, 2935, 2936, 1363, 1366, 1369, 2928,
     2941, 2926, 2939, 2938, 2933, 2922, 2928, 2933, 2923, 2904,
     2926, 2882, 2871, 2873, 2876, 2824, 2824, 2813, 3457, 2806,
     2805, 2815, 2786, 2783, 2771, 2772,   40,  106, 3457,  112,
      108,  131, 1372, 1378, 1387, 1381, 1396, 1123, 1402, 1393,

     1405, 1399, 1421, 1412, 1438, 1413, 1442,  149,  188,  191,
      211,  216,  232,  225,  235,  245,  244,  244,  273,  270,
      310,  338,  377,  384,  390,  389, 1457,  389,  401,  432,
      508, 1428, 1460,  517,  526,  534,  563,  571, 1464,  579,
      573,  600, 1472, 1475, 1482, 3457,  587,  613,  598, 3457,
      603,  626,  648,  648,  651,  651,  652,  675,  676,  681,
      672, 3457,  694,  674,  704,  718,  745,  783,  796,  806,
      803,  808, 3457,  800,  807,  841, 1485, 1490, 1500, 1503,
     1506, 1521, 1528, 1531, 1509, 1434, 1534, 1537, 1515, 1522,
     1512, 1541, 1542, 1560, 1565, 1556, 1575, 1578, 1570, 1571,

     1590, 1607, 1598,  809,  850,  840, 1614,  848,  848,  875,
      872,  878,  875,  880,  898,  906,  911,  911, 1617,  958,
      962, 1620, 1623,  979,  982,  986, 1020, 1036, 1029, 1036,
     1048, 1635, 1638, 1641, 1044, 1058, 1100, 1644, 3457, 1068,
     1086, 1096, 1080, 1103, 1095, 1134, 1132, 1164, 1138, 3457,
     1161, 3457, 3457, 1162, 3457, 3457, 1157, 1165, 1179, 1191,
     1215, 1205, 1225, 1268, 1262, 1653, 3457, 3457, 1660, 1663,
     3457, 3457, 1670, 1673, 1685, 1636, 1615, 1689, 1481, 1680,
     1664, 1702, 1681, 1708, 1644, 1717, 1686, 1723, 1726, 3457,
     3457, 1738, 1741, 1744, 1268, 1279, 1747, 1753, 1301, 1287,

     1305, 1294, 1313, 1306, 1350, 1322, 1762, 1345, 1765, 1768,
     1771, 1783, 1343, 1786, 1789, 1792, 1345, 1357, 1369, 1366,
     1394, 1384, 1798, 1807, 1813, 1816, 1400, 1401, 1568, 3457,
     1413, 1434, 1424, 1436, 1434, 1504, 1508, 1515, 1517, 3457,
     1519, 1571, 1551, 1547, 1552, 3457, 3457, 1587, 1595, 1819,
     3457, 3457, 1745, 1826, 1717, 1810, 1817, 1820, 1790, 1835,
     1841, 1832, 1838, 1842, 1860, 1875, 1882, 1889, 1892, 1687,
     1895, 1898, 1578, 1598, 1601, 1608, 1620, 1637, 1632, 1658,
     1904, 1910, 1660, 1913, 1919, 1922, 1928, 1931, 1934, 1937,
     1943, 1952, 1955, 1659, 1695, 1675, 1679, 1696, 1958, 1961,

     1967, 1973, 1976, 1712, 1721, 1735, 1740, 1742, 1735, 1726,
     1739, 1757, 1762, 1749, 1761, 1772, 1802, 1802, 1811, 1827,
     1814, 3457, 1816, 1968, 1983, 1986, 1935, 1854, 1980, 1986,
     1987, 1990, 2005, 1996, 1866, 2002, 2017, 3457, 3457, 2025,
     1831, 1836, 2029, 2032, 1851, 1844, 1846, 1851, 1869, 1878,
     1869, 1877, 2036, 1901, 2044, 2047, 2050, 2053, 2056, 2059,
     1898, 1897, 1904, 1933, 1916, 2065, 2068, 2071, 2074, 2080,
     2083, 1922, 1925, 1934, 1935, 1945, 1964, 1970, 1979, 1960,
     1976, 1972, 2006, 1989, 2006, 3457, 2020, 2025, 2041, 2075,
     2090, 2081, 2082, 2086, 2087, 2090, 2091, 2094, 2095, 2098,

     2040, 2066, 2113, 2062, 2069, 2079, 2080, 2088, 2069, 2085,
     2078, 2111, 2136, 2089, 2073, 2139, 2088, 2080, 2154, 2157,
     2160, 2163, 2097, 2103, 2104, 2090, 2092, 2095, 2134, 2117,
     2135, 3457, 3457, 2116, 2116, 2131, 2124, 2129, 2131, 2163,
     2166, 2167, 2170, 2171, 2174, 2189, 2192, 2183, 2198, 2137,
     2148, 2141, 2154, 2160, 2198, 2180, 2185, 2222, 2227, 2166,
     2172, 2191, 2232, 2237, 2188, 2197, 2242, 2203, 2193, 3457,
     2195, 2216, 3457, 2201, 2216, 2206, 2204, 2219, 2224, 3457,
     2217, 2218, 2215, 2247, 2262, 2253, 2254, 2258, 2257, 2277,
     2280, 2283, 2286, 2280, 2301, 2309, 2206, 2316, 2220, 2265,

     2319, 2250, 2269, 2261, 2263, 2322, 2325, 2337, 2340, 2293,
     2300, 2343, 2346, 2293, 2295, 2292, 2310, 3457, 2315, 2297,
     2307, 2299, 2330, 2308, 2309, 3457, 2306, 2312, 2361, 2364,
     2367, 2358, 2367, 2368, 2371, 2386, 2389, 2380, 2395, 2332,
     2398, 2401, 2404, 2349, 2413, 2407, 2356, 2370, 2364, 2395,
     2422, 2429, 2377, 2377, 2432, 2435, 2438, 2388, 2394, 3457,
     2397, 2396, 2390, 2408, 2399, 2412, 2425, 3457, 2410, 2453,
     2456, 2459, 2450, 2456, 2471, 2462, 2463, 2478, 2486, 2489,
     2494, 2417, 2497, 2421, 2426, 2443, 2451, 2465, 2479, 2505,
     2508, 2513, 2517, 2470, 2465, 2483, 2484, 2471, 2469, 2484,

     2478, 2494, 2532, 2523, 2524, 2539, 2542, 2533, 2554, 2548,
     2557, 2572, 2474, 2492, 2507, 2508, 2508, 2523, 2520, 2575,
     2578, 2581, 2536, 2545, 2532, 2533, 2557, 2549, 2546, 2534,
     2552, 2581, 2582, 2597, 2588, 2603, 2606, 2610, 2562, 2560,
     2561, 2618, 2582, 2579, 2567, 2624, 2588, 2575, 3457, 3457,
     2575, 3457, 2582, 2592, 2590, 2622, 2625, 2628, 2643, 2588,
     2650, 2653, 2656, 2659, 2592, 2671, 2599, 2623, 2620, 3457,
     2613, 2625, 3457, 2627, 2662, 2665, 2666, 2686, 2689, 2692,
     2696, 2704, 2713, 2617, 2716, 2720, 2640, 2723, 2642, 2641,
     2661, 2657, 2714, 2715, 2720, 2738, 2741, 2744, 2747, 2658,

     2753, 2668, 2759, 2762, 2665, 2660, 2672, 2677, 2753, 2721,
     2760, 2775, 2688, 2711, 2778, 2697, 2715, 2714, 2713, 2769,
     2772, 2773, 2730, 2739, 2735, 3457, 2748, 3457, 2779, 2778,
     2797, 2800, 2753, 2803, 2753, 2801, 2821, 2828, 2836, 2843,
     2846, 2764, 2849, 2858, 2753, 2864, 2867, 2870, 2873, 2882,
     2758, 2885, 2763, 2888, 2891, 2894, 2766, 3457, 2897, 2903,
     2906, 2909, 2912, 3457, 2922, 2927, 2932, 2937, 2942, 2947,
     2952, 2956, 2961, 2965, 2970
    } ;

static yyconst flex_int16_t yy_def[1676] =
    {   0,
     1665, 1665, 1666, 1666, 1667, 1667, 1668, 1668, 1669, 1669,
     1669, 1669, 1670, 1670, 1671, 1671, 1664, 1664, 1672, 1672,
     1664, 1672, 1664, 1672, 1672, 1672, 1672, 1664, 1664, 1672,
     1664, 1673, 1664, 1674, 1675, 1664, 1664, 1664, 1664, 1664,
     1664,   20, 1672, 1672,   28, 1664, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1664, 1672,
     1672, 1672, 1672, 1672, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1672, 1673, 1674, 1675, 1664, 1664,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1664, 1672, 1672,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1672, 1664, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1664, 1672, 1672, 1672,
     1672, 1672, 1672, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,

     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1672, 1672,
     1672, 1672, 1672, 1664, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1664, 1664, 1664, 1672, 1672, 1672, 1672, 1672,
     1672, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,

     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1672, 1672, 1672, 1664, 1672, 1664, 1672, 1672,
     1672, 1672, 1672, 1664, 1672, 1672, 1672, 1672, 1672, 1664,
     1672, 1672, 1672, 1664, 1672, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,

     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1672, 1672, 1664, 1664, 1664, 1672, 1672, 1672, 1672, 1672,
     1664, 1664, 1664, 1672, 1672, 1672, 1672, 1664, 1664, 1664,
     1672, 1672, 1664, 1664, 1664, 1672, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,

     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1664,
     1672, 1664, 1672, 1672, 1672, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1672,

     1672, 1672, 1672, 1672, 1664, 1672, 1672, 1672, 1664, 1664,
     1664, 1664, 1672, 1672, 1672, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1672, 1664,
     1672, 1672, 1672, 1664, 1664, 1664, 1672, 1672, 1664, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1672, 1672, 1672, 1672, 1664,

     1664, 1664, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1672, 1664, 1672, 1664,
     1672, 1664, 1672, 1672, 1664, 1672, 1672, 1672, 1664, 1672,
     1672, 1672, 1672, 1672, 1664, 1672, 1672, 1664, 1672, 1672,

     1672, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1672, 1664, 1664, 1672, 1672, 1664, 1672, 1672,
     1672, 1672, 1672, 1664, 1672, 1664, 1672, 1672, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,

     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1664, 1672, 1672, 1672, 1672, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,

     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1672, 1672, 1664, 1672, 1672, 1672, 1672,
     1672, 1672, 1664, 1672, 1672, 1672, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1672,
     1664, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1664, 1672, 1664, 1672, 1672, 1664, 1664, 1664, 1664, 1664,

     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1672, 1672,
     1664, 1672, 1672, 1672, 1672, 1664, 1664, 1672, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1672,
     1664, 1664, 1672, 1672, 1672, 1672, 1672, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,

     1664, 1664, 1664, 1672, 1672, 1672, 1664, 1672, 1672, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1672, 1672, 1664, 1672, 1672, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1672, 1672, 1672, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1672, 1672, 1672, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1672, 1672, 1672, 1664, 1664, 1664, 1664, 1664,

     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1672, 1672,
     1672, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1672,
     1672, 1672, 1664, 1664, 1664, 1664, 1664, 1664, 1672, 1672,
     1672, 1664, 1664, 1664, 1664, 1672, 1672, 1672, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1672, 1672, 1664, 1664, 1664,
     1664, 1664, 1664, 1672, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664,    0, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664
    } ;

static yyconst flex_int16_t yy_nxt[3521] =
    {   0,
       18,   19,   19,   20,   18,   21,   40,   23,   18,   24,
       25,   26,   27,   28,   18,   29,   18,   37,   37,   40,
       41, 1664,   30, 1664,   38,   38,   60, 1664,   61, 1664,
     1664, 1664,   65,   41,   84,   84,   84, 1664,   62, 1664,
     1664,   63, 1664, 1664, 1664, 1664, 1664, 1664,   65,   64,
       60,   85,   61, 1664,  223, 1664,   84,   84,   84, 1664,
       64,  224,   31,   18,   19,   19,   20,   18,   21,   64,
       23,   18,   24,   25,   26,   27,   28,   18,   29,   18,
       64, 1664, 1664, 1664, 1664,   30, 1664,  972, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,

     1664, 1664,  128, 1664,   91, 1664,  129, 1664, 1664,   92,
     1664,  135,   95,  145,  682, 1664,   98, 1664,   96,  136,
      683,   99,  142,  146,  107,   31,   42,   42,   42,   93,
       94,   97,  105,  147,  101, 1664,   44, 1664,   45,  143,
       46,  100,  102,  184,  106,  103,  973,   63, 1664,   85,
     1664,  185,  104,  108,  109,   64,  154,  110, 1664, 1664,
     1664, 1664,  974,   47,   48,  975,   49,   50, 1664,   51,
     1664,  976,   52,   53,   54,   64,   84,   84,   84,   55,
       56,   57,   58,   42,   42,   42,   60,  137,   61, 1664,
     1664, 1664, 1664,   44,  162,   45,   64,   46,  151,   63,

     1664,  138, 1664, 1003,  139,  140,  141,   64,  191, 1664,
      153, 1664, 1664, 1664, 1664, 1664,   64, 1664,  177, 1664,
       47,   48,  178,   49,   50,  192,   51,   64, 1004,   52,
       53,   54, 1664, 1664, 1664, 1664,   55,   56,   57,   58,
       66, 1664, 1664, 1664, 1664, 1005,  155,   67,  158,  156,
      161, 1006,   68,  166,  166,  166, 1007,  160, 1664,  157,
     1664,  218,  219,  159,  168, 1664,  167, 1664,  163,  110,
     1664, 1664, 1664, 1664,   69,   70, 1008,   71,   72, 1009,
       73,   74, 1010,   75,   76, 1011,   77,   78, 1012,   79,
       80,   81,   82,   83,  112,  113,  169,  114,  115, 1013,

      116,  117,  172,  118,  119, 1014,  120,  121, 1015,  122,
      123,  124,  125,  126, 1664, 1664, 1664, 1664, 1664,  194,
     1664,  170,  110, 1664,  186, 1664, 1664,  275, 1664,  195,
     1664, 1664, 1664, 1664,  276, 1664,  171, 1664,  187,  196,
      205,  188,  189,  190, 1664,  403, 1664,  206,  164,  404,
      207,  208,  173,  270,  271,  165,  230,  229, 1016,  233,
      233,  233, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
      231, 1664,  234, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1017,  166,  166,  166,  236,  232,  242,  237,
     1664, 1664, 1664, 1664,  238, 1664,  167, 1664, 1664,  240,

     1664,  239,  243,  243,  243,  235,  244, 1664,  245, 1664,
     1664, 1664, 1664, 1664,  257,  281,  282, 1018,  247,  294,
      295,  258,  241, 1019,  259,  260,  246,  296, 1020, 1664,
      249, 1664, 1664, 1021, 1664,  315,  315,  315, 1664, 1024,
     1664,  248,  468,  233,  233,  233,  469, 1664,  316, 1664,
     1025, 1664,  250, 1664,  251, 1664,  234, 1664,  313,  318,
      318,  318, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1026,  322,  314, 1664,  319, 1664,  317,  323,  323,  323,
     1664, 1664, 1664, 1664, 1664,  487, 1664,  488,  580, 1664,
      324, 1664,  581, 1664,  325, 1664,  320,  243,  243,  243,

      326,  244, 1664,  245, 1664,  321,  327,  329,  329,  329,
      595,  333,  333,  333,  596, 1664,  331, 1664,  332, 1664,
      330, 1664,  328, 1664,  334, 1664,  336,  336,  336,  335,
      348,  348,  348,  353,  354,  356,  356,  356,  631,  647,
      337,  355,  632,  648,  349,  369,  369,  369, 1664,  357,
     1664,  350,  375,  375,  375,  396,  396,  396, 1664,  370,
     1664,  426, 1027,  315,  315,  315,  376, 1028, 1664,  397,
     1664,  318,  318,  318,  358, 1664,  316, 1664,  371,  338,
      339, 1029,  413,  413,  413,  411,  414, 1030,  415,  412,
      416, 1664, 1664, 1664, 1664,  377, 1664, 1664, 1664, 1664,

      323,  323,  323,  421,  421,  421, 1664,  422, 1664,  423,
     1031, 1032, 1664,  324, 1664, 1664, 1664, 1664, 1664,  329,
      329,  329,  428,  428,  428,  417,  429,  419,  430, 1035,
     1036, 1664,  330, 1664,  420,  418, 1664, 1664, 1664, 1664,
     1037, 1039,  336,  336,  336, 1040,  424,  333,  333,  333,
      438,  438,  438, 1041,  427,  425,  337, 1042,  657, 1664,
      334, 1664,  433,  433,  433,  658,  434, 1664,  435, 1664,
      431,  436,  436,  436,  348,  348,  348,  449,  449,  449,
      432, 1043, 1044, 1664,  437, 1664, 1045, 1046,  349,  356,
      356,  356,  456,  456,  456,  459,  459,  459,  464,  464,

      464, 1047, 1048,  357,  369,  369,  369,  511, 1664,  460,
     1664, 1049,  465,  472,  472,  472, 1050, 1051,  370,  475,
      475,  475,  375,  375,  375, 1052,  466,  478,  478,  478,
      396,  396,  396,  476, 1053, 1054,  376,  413,  413,  413,
     1664,  414, 1664,  415,  397, 1664,  512, 1664, 1664, 1664,
     1664, 1664, 1664, 1055, 1664,  421,  421,  421, 1664,  422,
     1664,  423, 1664,  536, 1664,  537,  514,  513,  519,  519,
      519,  716, 1056,  518, 1664,  515, 1664, 1664,  717, 1664,
     1664,  520, 1664,  521,  521,  521,  516,  428,  428,  428,
      517,  429,  587,  430,  588, 1664,  522, 1664,  524,  523,

     1057,  525,  433,  433,  433,  639,  434,  640,  435,  436,
      436,  436,  526,  526,  526, 1058,  527, 1664,  528, 1664,
     1059, 1664,  437, 1664,  438,  438,  438,  449,  449,  449,
      540,  540,  540,  456,  456,  456,  459,  459,  459,  549,
      549,  549, 1060, 1061,  541,  550,  550,  550, 1062, 1063,
      460,  464,  464,  464,  555,  555,  555, 1064, 1065,  551,
      472,  472,  472, 1094,  600,  465,  475,  475,  475,  564,
      564,  564,  552,  478,  478,  478, 1664, 1664, 1664, 1664,
      476, 1664, 1095, 1664,  604,  604,  604, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1096, 1664,  605, 1664,  519,

      519,  519, 1099, 1100,  603,  612,  612,  612,  602, 1101,
     1102, 1664,  520, 1664, 1103,  521,  521,  521,  601,  608,
      609,  609,  609,  606,  610, 1104,  611, 1664,  522, 1664,
     1105, 1664,  613, 1664, 1106,  607,  615,  615,  615,  526,
      526,  526,  771,  527,  772,  528, 1107, 1108, 1664,  616,
     1664,  540,  540,  540,  614,  628,  628,  628,  549,  549,
      549,  550,  550,  550, 1109,  541,  637,  637,  637,  555,
      555,  555,  650,  650,  650,  551,  564,  564,  564,  659,
      660,  661, 1664, 1664, 1664, 1664,  651,  689,  689,  689,
      662, 1664,  785, 1664,  786,  828,  663,  829, 1112, 1664,

      690, 1664,  604,  604,  604,  694,  694,  694, 1664,  695,
     1664,  696,  692,  691, 1664,  605, 1664,  698,  698,  698,
      609,  609,  609, 1113,  610,  693,  611,  697, 1115, 1664,
      699, 1664, 1664, 1664, 1664, 1664, 1116,  700,  612,  612,
      612, 1117,  701, 1664, 1664, 1664, 1664,  702,  703,  849,
      704,  850, 1118,  705,  615,  615,  615,  708,  708,  708,
     1119,  709, 1664,  710, 1664, 1120, 1664,  616, 1664,  712,
      712,  712,  718,  718,  718,  706, 1121,  707,  720,  721,
      722,  796, 1664,  713, 1664, 1664,  719, 1664, 1122,  723,
      628,  628,  628, 1126,  899,  724,  729,  729,  729,  731,

      731,  731,  637,  637,  637,  744,  744,  744, 1127, 1664,
      730, 1664,  797,  732,  749,  749,  749, 1128, 1129,  745,
      650,  650,  650,  756,  756,  756, 1130, 1131,  750,  689,
      689,  689,  799, 1132,  651, 1664, 1664, 1664, 1664, 1133,
      751, 1664,  690, 1664,  746,  987,  752,  793,  793,  793,
     1134,  794,  798,  795,  694,  694,  694, 1664,  695, 1664,
      696,  698,  698,  698,  800,  800,  800, 1664,  801, 1664,
      802, 1135,  803, 1664,  699, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1136, 1664,  712,  712,  712,
     1137,  805,  809, 1138,  804,  815,  815,  815, 1139,  807,

      812,  713, 1140,  811,  708,  708,  708, 1141,  709,  806,
      710,  718,  718,  718,  810, 1142,  808,  820,  820,  820,
      729,  729,  729, 1143, 1664,  719, 1664,  813,  831,  831,
      831,  731,  731,  731,  730,  832,  832,  832,  842,  842,
      842,  844,  844,  844, 1144,  732,  744,  744,  744,  846,
      846,  846,  843, 1145,  900,  845,  749,  749,  749, 1146,
      745,  851,  851,  851,  756,  756,  756,  857,  857,  857,
      750,  793,  793,  793, 1664,  794, 1664,  795, 1664, 1147,
     1664,  858, 1664, 1664, 1664, 1664,  800,  800,  800, 1664,
      801, 1664,  802, 1664, 1664, 1664, 1664, 1664, 1664, 1664,

     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,  895,
      893,  815,  815,  815, 1148, 1149,  903,  898, 1170, 1171,
      894,  896,  820,  820,  820,  897,  831,  831,  831,  832,
      832,  832, 1173,  907,  902,  904,  901,  842,  842,  842,
     1174, 1175,  905,  932,  932,  932,  844,  844,  844, 1176,
     1177,  843,  906,  933,  933,  933,  846,  846,  846, 1178,
      845,  851,  851,  851,  857,  857,  857,  943,  943,  943,
      944,  944,  944,  977,  977,  977, 1179, 1180,  858,  979,
      979,  979, 1183, 1189,  945, 1664,  978, 1664,  981,  981,
      981, 1664,  980, 1664, 1664, 1194, 1664,  984,  984,  984,

     1664,  982, 1664,  988,  988,  988, 1664, 1195, 1664, 1664,
      985, 1664, 1664, 1196, 1664, 1664,  989, 1664, 1664, 1197,
     1664,  983,  994,  994,  994, 1664, 1664, 1664, 1664,  932,
      932,  932, 1198,  991, 1664,  995, 1664,  993, 1199,  997,
      997,  997,  990, 1001, 1001, 1001, 1204, 1664,  992, 1664,
      986, 1664,  998, 1664, 1205, 1664, 1002, 1664, 1022, 1022,
     1022,  933,  933,  933, 1000, 1033, 1033, 1033, 1208,  996,
     1209, 1210, 1023,  943,  943,  943,  944,  944,  944, 1034,
     1211, 1212,  999, 1038, 1038, 1038,  977,  977,  977, 1076,
      945, 1066, 1066, 1066, 1664, 1067, 1664, 1068, 1664,  978,

     1664,  979,  979,  979, 1069, 1069, 1069,  981,  981,  981,
     1075, 1075, 1075, 1664,  980, 1664, 1078, 1078, 1078, 1664,
      982, 1664, 1070, 1070, 1070, 1664, 1071, 1664, 1072, 1073,
     1073, 1073,  984,  984,  984, 1664, 1155, 1664,  988,  988,
      988, 1664, 1074, 1664, 1664,  985, 1664, 1664, 1213, 1664,
     1664,  989, 1664, 1077, 1664, 1664, 1664, 1664, 1214, 1215,
     1079,  994,  994,  994, 1216, 1080, 1084, 1084, 1084, 1664,
     1081, 1664, 1217, 1664,  995, 1664,  997,  997,  997, 1086,
     1086, 1086, 1083, 1664, 1664, 1664, 1664, 1206, 1664,  998,
     1664, 1001, 1001, 1001, 1207, 1082, 1085, 1218, 1219, 1092,

     1092, 1092, 1220, 1664, 1002, 1664, 1087, 1221, 1089, 1089,
     1089, 1088, 1090, 1093, 1091, 1097, 1097, 1097, 1110, 1110,
     1110, 1022, 1022, 1022, 1114, 1114, 1114, 1222, 1664, 1098,
     1664, 1223, 1111, 1245, 1246, 1023, 1123, 1123, 1123, 1033,
     1033, 1033, 1125, 1125, 1125, 1038, 1038, 1038, 1247, 1664,
     1124, 1664, 1248, 1034, 1066, 1066, 1066, 1664, 1067, 1664,
     1068, 1069, 1069, 1069, 1070, 1070, 1070, 1249, 1071, 1154,
     1072, 1073, 1073, 1073, 1150, 1150, 1150, 1664, 1151, 1664,
     1152, 1250, 1251, 1664, 1074, 1664, 1075, 1075, 1075, 1153,
     1078, 1078, 1078, 1664, 1664, 1664, 1664, 1163, 1156, 1664,

     1159, 1664, 1252, 1160, 1160, 1160, 1241, 1254, 1157, 1084,
     1084, 1084, 1261, 1242, 1158, 1664, 1161, 1664, 1086, 1086,
     1086, 1262, 1263, 1164, 1165, 1165, 1165, 1089, 1089, 1089,
     1664, 1090, 1664, 1091, 1264, 1162, 1664, 1166, 1664, 1092,
     1092, 1092, 1167, 1167, 1167, 1168, 1168, 1168, 1097, 1097,
     1097, 1265, 1271, 1093, 1172, 1172, 1172, 1272, 1664, 1169,
     1664, 1227, 1098, 1181, 1181, 1181, 1184, 1184, 1184, 1110,
     1110, 1110, 1186, 1186, 1186, 1273, 1274, 1182, 1275, 1276,
     1185, 1224, 1277, 1111, 1187, 1187, 1187, 1114, 1114, 1114,
     1190, 1190, 1190, 1192, 1192, 1192, 1278, 1279, 1188, 1123,

     1123, 1123, 1280, 1664, 1191, 1664, 1281, 1193, 1200, 1200,
     1200, 1282, 1283, 1124, 1125, 1125, 1125, 1201, 1201, 1201,
     1150, 1150, 1150, 1664, 1151, 1664, 1152, 1225, 1225, 1225,
     1664, 1202, 1664, 1664, 1232, 1664, 1160, 1160, 1160, 1664,
     1226, 1664, 1233, 1233, 1233, 1664, 1284, 1664, 1664, 1161,
     1664, 1664, 1285, 1664, 1229, 1664, 1231, 1664, 1286, 1287,
     1228, 1165, 1165, 1165, 1288, 1289, 1235, 1664, 1230, 1664,
     1203, 1301, 1302, 1664, 1166, 1664, 1237, 1237, 1237, 1664,
     1238, 1664, 1239, 1167, 1167, 1167, 1234, 1304, 1305, 1236,
     1168, 1168, 1168, 1240, 1240, 1240, 1243, 1243, 1243, 1172,

     1172, 1172, 1306, 1293, 1169, 1181, 1181, 1181, 1307, 1308,
     1244, 1253, 1253, 1253, 1184, 1184, 1184, 1299, 1309, 1182,
     1255, 1255, 1255, 1186, 1186, 1186, 1310, 1311, 1185, 1187,
     1187, 1187, 1256, 1256, 1256, 1257, 1257, 1257, 1190, 1190,
     1190, 1312, 1314, 1188, 1259, 1259, 1259, 1315, 1664, 1258,
     1664, 1316, 1191, 1192, 1192, 1192, 1260, 1260, 1260, 1266,
     1266, 1266, 1200, 1200, 1200, 1317, 1318, 1193, 1201, 1201,
     1201, 1323, 1324, 1267, 1268, 1268, 1268, 1269, 1269, 1269,
     1325, 1664, 1202, 1664, 1225, 1225, 1225, 1291, 1291, 1291,
     1326, 1270, 1292, 1664, 1327, 1664, 1664, 1226, 1664, 1664,

     1664, 1664, 1664, 1664, 1328, 1664, 1233, 1233, 1233, 1664,
     1329, 1664, 1290, 1330, 1331, 1664, 1332, 1664, 1237, 1237,
     1237, 1333, 1238, 1334, 1239, 1294, 1240, 1240, 1240, 1335,
     1243, 1243, 1243, 1303, 1303, 1303, 1298, 1253, 1253, 1253,
     1296, 1295, 1300, 1297, 1244, 1255, 1255, 1255, 1256, 1256,
     1256, 1257, 1257, 1257, 1313, 1313, 1313, 1259, 1259, 1259,
     1260, 1260, 1260, 1336, 1337, 1258, 1266, 1266, 1266, 1319,
     1319, 1319, 1268, 1268, 1268, 1269, 1269, 1269, 1338, 1339,
     1267, 1320, 1320, 1320, 1321, 1321, 1321, 1350, 1664, 1270,
     1664, 1291, 1291, 1291, 1664, 1664, 1664, 1664, 1322, 1664,

     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1351, 1664, 1303, 1303, 1303, 1352, 1353, 1354,
     1355, 1341, 1356, 1357, 1340, 1358, 1343, 1359, 1360, 1361,
     1362, 1344, 1365, 1366, 1345, 1368, 1342, 1313, 1313, 1313,
     1363, 1363, 1363, 1369, 1370, 1346, 1371, 1372, 1347, 1373,
     1348, 1374, 1349, 1376, 1364, 1319, 1319, 1319, 1320, 1320,
     1320, 1321, 1321, 1321, 1367, 1367, 1367, 1377, 1375, 1378,
     1379, 1380, 1381, 1382, 1383, 1322, 1664, 1397, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1398, 1664,
     1390, 1390, 1390, 1392, 1392, 1392, 1664, 1399, 1664, 1395,

     1395, 1395, 1664, 1391, 1664, 1664, 1393, 1664, 1387, 1400,
     1389, 1664, 1396, 1664, 1401, 1402, 1404, 1405, 1384, 1410,
     1385, 1388, 1386, 1406, 1406, 1406, 1411, 1394, 1408, 1408,
     1408, 1412, 1403, 1363, 1363, 1363, 1414, 1407, 1413, 1413,
     1413, 1415, 1409, 1367, 1367, 1367, 1416, 1364, 1417, 1418,
     1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
     1664, 1440, 1664, 1430, 1430, 1430, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1443, 1664, 1431, 1664, 1390, 1390,
     1390, 1436, 1436, 1436, 1392, 1392, 1392, 1437, 1437, 1437,
     1664, 1391, 1664, 1664, 1435, 1664, 1664, 1393, 1664, 1444,

     1447, 1429, 1395, 1395, 1395, 1448, 1432, 1434, 1449, 1433,
     1439, 1439, 1439, 1450, 1664, 1396, 1664, 1441, 1441, 1441,
     1445, 1445, 1445, 1406, 1406, 1406, 1451, 1451, 1451, 1453,
     1438, 1442, 1454, 1457, 1446, 1458, 1459, 1407, 1408, 1408,
     1408, 1452, 1452, 1452, 1455, 1455, 1455, 1413, 1413, 1413,
     1460, 1461, 1409, 1462, 1463, 1464, 1465, 1466, 1456, 1467,
     1468, 1469, 1470, 1470, 1470, 1430, 1430, 1430, 1472, 1472,
     1472, 1664, 1478, 1664, 1664, 1471, 1664, 1664, 1431, 1664,
     1664, 1664, 1664, 1664, 1664, 1482, 1664, 1436, 1436, 1436,
     1437, 1437, 1437, 1664, 1473, 1664, 1439, 1439, 1439, 1441,

     1441, 1441, 1479, 1479, 1479, 1480, 1480, 1480, 1483, 1483,
     1483, 1474, 1484, 1442, 1445, 1445, 1445, 1485, 1476, 1481,
     1486, 1487, 1475, 1451, 1451, 1451, 1488, 1489, 1446, 1477,
     1452, 1452, 1452, 1455, 1455, 1455, 1490, 1490, 1490, 1491,
     1491, 1491, 1493, 1494, 1495, 1496, 1497, 1456, 1498, 1499,
     1500, 1501, 1502, 1492, 1470, 1470, 1470, 1503, 1503, 1503,
     1472, 1472, 1472, 1664, 1513, 1664, 1664, 1471, 1664, 1664,
     1514, 1664, 1506, 1506, 1506, 1664, 1664, 1664, 1664, 1510,
     1510, 1510, 1515, 1516, 1664, 1507, 1664, 1479, 1479, 1479,
     1480, 1480, 1480, 1511, 1504, 1512, 1512, 1512, 1483, 1483,

     1483, 1517, 1508, 1518, 1481, 1519, 1490, 1490, 1490, 1491,
     1491, 1491, 1523, 1505, 1520, 1520, 1520, 1509, 1521, 1521,
     1521, 1524, 1525, 1492, 1526, 1527, 1528, 1529, 1530, 1531,
     1539, 1540, 1522, 1503, 1503, 1503, 1664, 1664, 1664, 1664,
     1506, 1506, 1506, 1534, 1534, 1534, 1664, 1541, 1664, 1510,
     1510, 1510, 1664, 1507, 1664, 1536, 1536, 1536, 1538, 1538,
     1538, 1535, 1542, 1511, 1533, 1543, 1544, 1664, 1537, 1664,
     1545, 1547, 1532, 1512, 1512, 1512, 1520, 1520, 1520, 1521,
     1521, 1521, 1546, 1546, 1546, 1548, 1549, 1550, 1551, 1552,
     1553, 1554, 1555, 1522, 1664, 1664, 1664, 1664, 1534, 1534,

     1534, 1664, 1560, 1664, 1536, 1536, 1536, 1559, 1559, 1559,
     1557, 1538, 1538, 1538, 1561, 1562, 1664, 1537, 1664, 1563,
     1563, 1563, 1566, 1567, 1568, 1546, 1546, 1546, 1569, 1570,
     1571, 1572, 1573, 1564, 1574, 1664, 1556, 1664, 1664, 1558,
     1664, 1664, 1578, 1664, 1559, 1559, 1559, 1584, 1587, 1565,
     1575, 1579, 1579, 1579, 1581, 1581, 1581, 1563, 1563, 1563,
     1583, 1583, 1583, 1588, 1589, 1580, 1590, 1591, 1582, 1592,
     1600, 1564, 1585, 1585, 1585, 1664, 1576, 1664, 1664, 1664,
     1664, 1664, 1602, 1577, 1605, 1606, 1586, 1596, 1596, 1596,
     1579, 1579, 1579, 1598, 1598, 1598, 1607, 1581, 1581, 1581,

     1608, 1597, 1613, 1614, 1580, 1599, 1599, 1599, 1616, 1617,
     1595, 1582, 1618, 1593, 1583, 1583, 1583, 1585, 1585, 1585,
     1594, 1601, 1601, 1601, 1603, 1603, 1603, 1664, 1664, 1664,
     1664, 1586, 1619, 1664, 1664, 1664, 1664, 1623, 1604, 1596,
     1596, 1596, 1612, 1612, 1612, 1598, 1598, 1598, 1599, 1599,
     1599, 1624, 1625, 1597, 1601, 1601, 1601, 1626, 1627, 1610,
     1603, 1603, 1603, 1615, 1615, 1615, 1664, 1628, 1664, 1609,
     1611, 1621, 1632, 1664, 1604, 1664, 1612, 1612, 1612, 1615,
     1615, 1615, 1664, 1633, 1664, 1664, 1664, 1664, 1664, 1634,
     1635, 1664, 1664, 1664, 1664, 1642, 1645, 1620, 1638, 1638,

     1638, 1640, 1640, 1640, 1643, 1643, 1643, 1651, 1653, 1622,
     1664, 1639, 1664, 1657, 1664, 1641, 1664, 1658, 1644, 1629,
     1660, 1630, 1647, 1647, 1647,  971,  970, 1631, 1636, 1638,
     1638, 1638, 1637,  969, 1664, 1648, 1664, 1649, 1649, 1649,
      968, 1664, 1639, 1664, 1640, 1640, 1640, 1650, 1650, 1650,
     1643, 1643, 1643,  967,  966, 1646,  965,  964, 1641, 1652,
     1652, 1652,  963,  962, 1644, 1654, 1654, 1654, 1647, 1647,
     1647, 1656, 1656, 1656, 1649, 1649, 1649, 1664, 1655, 1664,
     1664, 1648, 1664, 1650, 1650, 1650, 1652, 1652, 1652, 1654,
     1654, 1654, 1659, 1659, 1659, 1656, 1656, 1656, 1659, 1659,

     1659, 1664, 1655, 1664, 1661, 1661, 1661, 1661, 1661, 1661,
     1663, 1663, 1663, 1663, 1663, 1663,  961,  960, 1662,  959,
      958, 1662,   22,   22,   22,   22,   22,   32,   32,   32,
       32,   32,   34,   34,   34,   34,   34,   35,   35,   35,
       35,   35,   33,   33,   33,   33,   33,   36,   36,   36,
       36,   36,   39,   39,   39,   39,   39,   43,  957,  956,
       43,   86,   86,   86,   86,   87,   87,  955,   87,   87,
       88,   88,   88,  954,   88,  953,  952,  951,  950,  949,
      948,  947,  946,  942,  941,  940,  939,  938,  937,  936,
      935,  934,  931,  930,  929,  928,  927,  926,  925,  924,

      923,  922,  921,  920,  919,  918,  917,  916,  915,  914,
      913,  912,  911,  910,  909,  908,  892,  891,  890,  889,
      888,  887,  886,  885,  884,  883,  882,  881,  880,  879,
      878,  877,  876,  875,  874,  873,  872,  871,  870,  869,
      868,  867,  866,  865,  864,  863,  862,  861,  860,  859,
      856,  855,  854,  853,  852,  848,  847,  841,  840,  839,
      838,  837,  836,  835,  834,  833,  830,  827,  826,  825,
      824,  823,  822,  821,  819,  818,  817,  816,  814,  792,
      791,  790,  789,  788,  787,  784,  783,  782,  781,  780,
      779,  778,  777,  776,  775,  774,  773,  770,  769,  768,

      767,  766,  765,  764,  763,  762,  761,  760,  759,  758,
      757,  755,  754,  753,  748,  747,  743,  742,  741,  740,
      739,  738,  737,  736,  735,  734,  733,  728,  727,  726,
      725,  715,  714,  711,  688,  687,  686,  685,  684,  681,
      680,  679,  678,  677,  676,  675,  674,  673,  672,  671,
      670,  669,  668,  667,  666,  665,  664,  656,  655,  654,
      653,  652,  649,  646,  645,  644,  643,  642,  641,  638,
      636,  635,  634,  633,  630,  629,  627,  626,  625,  624,
      623,  622,  621,  620,  619,  618,  617,  599,  598,  597,
      594,  593,  592,  591,  590,  589,  586,  585,  584,  583,

      582,  579,  578,  577,  576,  575,  574,  573,  572,  571,
      570,  569,  568,  567,  566,  565,  563,  562,  561,  560,
      559,  558,  557,  556,  554,  553,  548,  547,  546,  545,
      544,  543,  542,  539,  538,  535,  534,  533,  532,  531,
      530,  529,  510,  509,  508,  507,  506,  505,  504,  503,
      502,  501,  500,  499,  498,  497,  496,  495,  494,  493,
      492,  491,  490,  489,  486,  485,  484,  483,  482,  481,
      480,  479,  477,  474,  473,  471,  470,  467,  463,  462,
      461,  458,  457,  455,  454,  453,  452,  451,  450,  448,
      447,  446,  445,  444,  443,  442,  441,  440,  439,  410,

      409,  408,  407,  406,  405,  402,  401,  400,  399,  398,
      395,  394,  393,  392,  391,  390,  389,  388,  387,  386,
      385,  384,  383,  382,  381,  380,  379,  378,  374,  373,
      372,  368,  367,  366,  365,  364,  363,  362,  361,  360,
      359,  352,  351,  347,  346,  345,  344,  343,  342,  341,
      340,  312,  311,  310,  309,  308,  307,  306,  305,  304,
      303,  302,  301,  300,  299,  298,  297,  293,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  280,  279,
      278,  277,  274,  273,  272,  269,  268,  267,  266,  265,
      264,  263,  262,  261,  256,  255,  254,  253,  252,  174,

      228,  227,  226,  225,  222,  221,  220,  217,  216,  215,
      214,  213,  212,  211,  210,  209,  204,  203,  202,  201,
      200,  199,  198,  197,  193,  183,  182,  181,  180,  179,
      176,  175,  174,  152,  150,  149,  148,  144,  134,  133,
      132,  131,  130,  127,  111,   90,   89,   59,   59, 1664,
       33,   33,   33,   33,   33,   33,   17, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,

     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664
    } ;

static yyconst flex_int16_t yy_chk[3521] =
    {   0,
        1,    1,    1,    1,    1,    1,   15,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   13,   14,   16,
       15,   22,    1,   22,   13,   14,   24,    0,   24,   24,
       26,   24,   26,   16,   29,   29,   29,   30,   24,   30,
        0,   25,   25,   43,   25,   43,   44,   45,   44,   25,
       27,   30,   27,   27,  146,   27,   46,   46,   46,   45,
       27,  146,    1,    2,    2,    2,    2,    2,    2,   25,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       27,   47,   48,   47,   48,    2,   51,  887,   51,   49,
       50,   49,   50,   53,   52,   53,   52,   55,   54,   55,

       54,   58,   70,   58,   47,   56,   70,   56,   57,   48,
       57,   76,   51,   80,  594,   92,   53,   92,   52,   76,
      594,   54,   78,   80,   58,    2,   19,   19,   19,   49,
       50,   52,   57,   80,   55,   62,   19,   62,   19,   78,
       19,   54,   56,  119,   57,   56,  888,   60,   60,   62,
       60,  119,   56,   64,   64,   60,   92,   64,   64,   99,
       64,   99,  890,   19,   19,  891,   19,   19,   91,   19,
       91,  892,   19,   19,   19,   60,   84,   84,   84,   19,
       19,   19,   19,   20,   20,   20,   61,   77,   61,   61,
       85,   61,   85,   20,   99,   20,   61,   20,   85,   63,

       63,   77,   63,  908,   77,   77,   77,   63,  121,   93,
       91,   93,   94,   95,   94,   95,   61,   98,  113,   98,
       20,   20,  113,   20,   20,  121,   20,   63,  909,   20,
       20,   20,   97,  100,   97,  100,   20,   20,   20,   20,
       28,  103,   96,  103,   96,  910,   93,   28,   96,   94,
       98,  911,   28,  102,  102,  102,  912,   97,  104,   95,
      104,  142,  142,   96,  103,  102,  102,  102,  100,  109,
      109,  106,  109,  106,   28,   28,  913,   28,   28,  914,
       28,   28,  915,   28,   28,  916,   28,   28,  917,   28,
       28,   28,   28,   28,   67,   67,  104,   67,   67,  918,

       67,   67,  106,   67,   67,  919,   67,   67,  920,   67,
       67,   67,   67,   67,  101,  105,  101,  105,  107,  123,
      107,  105,  110,  110,  120,  110,  151,  195,  151,  123,
      153,  154,  153,  154,  195,  155,  105,  155,  120,  123,
      132,  120,  120,  120,  156,  305,  156,  132,  101,  305,
      132,  132,  107,  191,  191,  101,  154,  153,  921,  157,
      157,  157,  158,  159,  158,  159,  160,  161,  160,  161,
      155,  157,  157,  157,  162,  163,  162,  163,  164,  165,
      164,  165,  922,  166,  166,  166,  159,  156,  165,  160,
      168,  169,  168,  169,  161,  166,  166,  166,  170,  163,

      170,  162,  167,  167,  167,  158,  167,  171,  167,  171,
      172,  173,  172,  173,  181,  200,  200,  923,  169,  212,
      212,  181,  164,  924,  181,  181,  168,  212,  925,  229,
      171,  229,  230,  926,  230,  231,  231,  231,  232,  928,
      232,  170,  366,  233,  233,  233,  366,  231,  231,  231,
      929,  235,  172,  235,  173,  233,  233,  233,  229,  234,
      234,  234,  236,  237,  236,  237,  238,  240,  238,  240,
      930,  238,  230,  241,  235,  241,  232,  239,  239,  239,
      242,  246,  242,  246,  249,  385,  249,  385,  493,  239,
      239,  239,  493,  248,  240,  248,  236,  243,  243,  243,

      241,  243,  251,  243,  251,  237,  242,  247,  247,  247,
      506,  250,  250,  250,  506,  327,  248,  327,  249,  247,
      247,  247,  246,  250,  250,  250,  252,  252,  252,  251,
      261,  261,  261,  264,  264,  265,  265,  265,  544,  561,
      252,  264,  544,  561,  261,  276,  276,  276,  313,  265,
      313,  261,  280,  280,  280,  299,  299,  299,  314,  276,
      314,  327,  931,  315,  315,  315,  280,  934,  317,  299,
      317,  318,  318,  318,  265,  315,  315,  315,  276,  252,
      252,  935,  316,  316,  316,  313,  316,  936,  316,  314,
      317,  319,  320,  319,  320,  280,  321,  322,  321,  322,

      323,  323,  323,  324,  324,  324,  325,  324,  325,  324,
      937,  938,  323,  323,  323,  326,  328,  326,  328,  329,
      329,  329,  330,  330,  330,  319,  330,  321,  330,  940,
      941,  329,  329,  329,  322,  320,  331,  332,  331,  332,
      942,  947,  336,  336,  336,  948,  325,  333,  333,  333,
      337,  337,  337,  949,  328,  326,  336,  951,  571,  333,
      333,  333,  334,  334,  334,  571,  334,  411,  334,  411,
      331,  335,  335,  335,  348,  348,  348,  349,  349,  349,
      332,  952,  953,  335,  335,  335,  954,  955,  348,  356,
      356,  356,  357,  357,  357,  360,  360,  360,  364,  364,

      364,  956,  957,  356,  369,  369,  369,  411,  412,  360,
      412,  958,  364,  370,  370,  370,  959,  960,  369,  373,
      373,  373,  375,  375,  375,  961,  364,  376,  376,  376,
      396,  396,  396,  373,  963,  964,  375,  413,  413,  413,
      416,  413,  416,  413,  396,  417,  412,  417,  418,  419,
      418,  419,  420,  965,  420,  421,  421,  421,  424,  421,
      424,  421,  427,  446,  427,  446,  417,  416,  425,  425,
      425,  621,  966,  424,  432,  418,  432,  431,  621,  431,
      425,  425,  425,  426,  426,  426,  419,  428,  428,  428,
      420,  428,  499,  428,  499,  426,  426,  426,  431,  427,

      967,  432,  433,  433,  433,  553,  433,  553,  433,  436,
      436,  436,  437,  437,  437,  968,  437,  511,  437,  511,
      969,  436,  436,  436,  438,  438,  438,  449,  449,  449,
      450,  450,  450,  456,  456,  456,  459,  459,  459,  460,
      460,  460,  970,  971,  450,  461,  461,  461,  972,  974,
      459,  464,  464,  464,  465,  465,  465,  975,  976,  461,
      472,  472,  472, 1004,  511,  464,  475,  475,  475,  476,
      476,  476,  461,  478,  478,  478,  512,  513,  512,  513,
      475,  514, 1005,  514,  515,  515,  515,  516,  517,  516,
      517,  518,  523,  518,  523, 1006,  515,  515,  515,  519,

      519,  519, 1008, 1009,  514,  522,  522,  522,  513, 1010,
     1011,  519,  519,  519, 1012,  521,  521,  521,  512,  518,
      520,  520,  520,  516,  520, 1013,  520,  521,  521,  521,
     1014,  524,  523,  524, 1015,  517,  525,  525,  525,  526,
      526,  526,  666,  526,  666,  526, 1016, 1017,  525,  525,
      525,  540,  540,  540,  524,  541,  541,  541,  549,  549,
      549,  550,  550,  550, 1018,  540,  551,  551,  551,  555,
      555,  555,  563,  563,  563,  550,  564,  564,  564,  573,
      573,  573,  601,  602,  601,  602,  563,  600,  600,  600,
      573,  603,  681,  603,  681,  727,  573,  727, 1020,  600,

      600,  600,  604,  604,  604,  605,  605,  605,  606,  605,
      606,  605,  602,  601,  604,  604,  604,  607,  607,  607,
      609,  609,  609, 1021,  609,  603,  609,  606, 1024,  607,
      607,  607,  608,  613,  608,  613, 1025,  608,  612,  612,
      612, 1026,  608,  614,  691,  614,  691,  608,  608,  748,
      608,  748, 1027,  608,  615,  615,  615,  616,  616,  616,
     1028,  616,  805,  616,  805, 1029,  615,  615,  615,  618,
      618,  618,  622,  622,  622,  613, 1030,  614,  623,  623,
      623,  691,  692,  618,  692,  697,  622,  697, 1031,  623,
      628,  628,  628, 1035,  805,  623,  629,  629,  629,  630,

      630,  630,  637,  637,  637,  643,  643,  643, 1036,  693,
      629,  693,  692,  630,  646,  646,  646, 1037, 1040,  643,
      650,  650,  650,  651,  651,  651, 1041, 1042,  646,  689,
      689,  689,  697, 1043,  650,  700,  898,  700,  898, 1044,
      646,  689,  689,  689,  643,  898,  646,  690,  690,  690,
     1045,  690,  693,  690,  694,  694,  694,  701,  694,  701,
      694,  698,  698,  698,  699,  699,  699,  702,  699,  702,
      699, 1046,  700,  698,  698,  698,  703,  704,  703,  704,
      705,  706,  705,  706,  707, 1047,  707,  712,  712,  712,
     1048,  702,  704, 1049,  701,  713,  713,  713, 1051,  703,

      706,  712, 1054,  705,  708,  708,  708, 1057,  708,  702,
      708,  718,  718,  718,  704, 1058,  703,  719,  719,  719,
      729,  729,  729, 1059,  806,  718,  806,  707,  730,  730,
      730,  731,  731,  731,  729,  732,  732,  732,  742,  742,
      742,  743,  743,  743, 1060,  731,  744,  744,  744,  745,
      745,  745,  742, 1061,  806,  743,  749,  749,  749, 1062,
      744,  750,  750,  750,  756,  756,  756,  757,  757,  757,
      749,  793,  793,  793,  796,  793,  796,  793,  797, 1063,
      797,  757,  798,  799,  798,  799,  800,  800,  800,  803,
      800,  803,  800,  804,  807,  804,  807,  808,  809,  808,

      809,  810,  811,  810,  811,  812,  813,  812,  813,  798,
      796,  815,  815,  815, 1064, 1065,  809,  804, 1095, 1096,
      797,  799,  820,  820,  820,  803,  831,  831,  831,  832,
      832,  832, 1099,  813,  808,  810,  807,  842,  842,  842,
     1100, 1101,  811,  843,  843,  843,  844,  844,  844, 1102,
     1103,  842,  812,  845,  845,  845,  846,  846,  846, 1104,
      844,  851,  851,  851,  857,  857,  857,  858,  858,  858,
      859,  859,  859,  893,  893,  893, 1105, 1106,  857,  894,
      894,  894, 1108, 1113,  859,  893,  893,  893,  895,  895,
      895,  894,  894,  894,  896, 1117,  896,  897,  897,  897,

      895,  895,  895,  899,  899,  899,  900, 1118,  900,  897,
      897,  897,  902, 1119,  902,  899,  899,  899,  901, 1120,
      901,  896,  903,  903,  903,  904,  906,  904,  906,  932,
      932,  932, 1121,  900,  903,  903,  903,  902, 1122,  905,
      905,  905,  899,  907,  907,  907, 1127,  986,  901,  986,
      897,  905,  905,  905, 1128,  907,  907,  907,  927,  927,
      927,  933,  933,  933,  906,  939,  939,  939, 1131,  904,
     1132, 1133,  927,  943,  943,  943,  944,  944,  944,  939,
     1134, 1135,  905,  945,  945,  945,  977,  977,  977,  986,
      944,  978,  978,  978, 1079,  978, 1079,  978,  977,  977,

      977,  979,  979,  979,  980,  980,  980,  981,  981,  981,
      985,  985,  985,  979,  979,  979,  989,  989,  989,  981,
      981,  981,  982,  982,  982,  991,  982,  991,  982,  983,
      983,  983,  984,  984,  984,  990, 1079,  990,  988,  988,
      988,  983,  983,  983,  984,  984,  984,  987, 1136,  987,
      988,  988,  988,  987,  992,  993,  992,  993, 1137, 1138,
      990,  994,  994,  994, 1139,  991,  995,  995,  995,  996,
      992,  996, 1141,  994,  994,  994,  997,  997,  997,  998,
      998,  998,  993,  999, 1000,  999, 1000, 1129,  997,  997,
      997, 1001, 1001, 1001, 1129,  992,  996, 1142, 1143, 1003,

     1003, 1003, 1144, 1001, 1001, 1001,  999, 1145, 1002, 1002,
     1002, 1000, 1002, 1003, 1002, 1007, 1007, 1007, 1019, 1019,
     1019, 1022, 1022, 1022, 1023, 1023, 1023, 1148, 1077, 1007,
     1077, 1149, 1019, 1173, 1174, 1022, 1032, 1032, 1032, 1033,
     1033, 1033, 1034, 1034, 1034, 1038, 1038, 1038, 1175, 1076,
     1032, 1076, 1176, 1033, 1066, 1066, 1066, 1085, 1066, 1085,
     1066, 1069, 1069, 1069, 1070, 1070, 1070, 1177, 1070, 1077,
     1070, 1073, 1073, 1073, 1074, 1074, 1074, 1081, 1074, 1081,
     1074, 1178, 1179, 1073, 1073, 1073, 1075, 1075, 1075, 1076,
     1078, 1078, 1078, 1080, 1083, 1080, 1083, 1085, 1080, 1087,

     1081, 1087, 1180, 1082, 1082, 1082, 1170, 1183, 1080, 1084,
     1084, 1084, 1194, 1170, 1080, 1082, 1082, 1082, 1086, 1086,
     1086, 1195, 1196, 1087, 1088, 1088, 1088, 1089, 1089, 1089,
     1155, 1089, 1155, 1089, 1197, 1083, 1088, 1088, 1088, 1092,
     1092, 1092, 1093, 1093, 1093, 1094, 1094, 1094, 1097, 1097,
     1097, 1198, 1204, 1092, 1098, 1098, 1098, 1205, 1153, 1094,
     1153, 1155, 1097, 1107, 1107, 1107, 1109, 1109, 1109, 1110,
     1110, 1110, 1111, 1111, 1111, 1206, 1207, 1107, 1208, 1209,
     1109, 1153, 1210, 1110, 1112, 1112, 1112, 1114, 1114, 1114,
     1115, 1115, 1115, 1116, 1116, 1116, 1211, 1212, 1112, 1123,

     1123, 1123, 1213, 1159, 1115, 1159, 1214, 1116, 1124, 1124,
     1124, 1215, 1216, 1123, 1125, 1125, 1125, 1126, 1126, 1126,
     1150, 1150, 1150, 1156, 1150, 1156, 1150, 1154, 1154, 1154,
     1157, 1126, 1157, 1158, 1159, 1158, 1160, 1160, 1160, 1154,
     1154, 1154, 1161, 1161, 1161, 1162, 1217, 1162, 1160, 1160,
     1160, 1163, 1218, 1163, 1157, 1164, 1158, 1164, 1219, 1220,
     1156, 1165, 1165, 1165, 1221, 1223, 1163, 1228, 1157, 1228,
     1126, 1241, 1242, 1165, 1165, 1165, 1166, 1166, 1166, 1235,
     1166, 1235, 1166, 1167, 1167, 1167, 1162, 1245, 1246, 1164,
     1168, 1168, 1168, 1169, 1169, 1169, 1171, 1171, 1171, 1172,

     1172, 1172, 1247, 1228, 1168, 1181, 1181, 1181, 1248, 1249,
     1171, 1182, 1182, 1182, 1184, 1184, 1184, 1235, 1250, 1181,
     1185, 1185, 1185, 1186, 1186, 1186, 1251, 1252, 1184, 1187,
     1187, 1187, 1188, 1188, 1188, 1189, 1189, 1189, 1190, 1190,
     1190, 1254, 1261, 1187, 1191, 1191, 1191, 1262, 1227, 1189,
     1227, 1263, 1190, 1192, 1192, 1192, 1193, 1193, 1193, 1199,
     1199, 1199, 1200, 1200, 1200, 1264, 1265, 1192, 1201, 1201,
     1201, 1272, 1273, 1199, 1202, 1202, 1202, 1203, 1203, 1203,
     1274, 1224, 1201, 1224, 1225, 1225, 1225, 1226, 1226, 1226,
     1275, 1203, 1227, 1229, 1276, 1229, 1225, 1225, 1225, 1230,

     1231, 1230, 1231, 1232, 1277, 1232, 1233, 1233, 1233, 1234,
     1278, 1234, 1224, 1279, 1280, 1236, 1281, 1236, 1237, 1237,
     1237, 1282, 1237, 1283, 1237, 1229, 1240, 1240, 1240, 1284,
     1243, 1243, 1243, 1244, 1244, 1244, 1234, 1253, 1253, 1253,
     1231, 1230, 1236, 1232, 1243, 1255, 1255, 1255, 1256, 1256,
     1256, 1257, 1257, 1257, 1258, 1258, 1258, 1259, 1259, 1259,
     1260, 1260, 1260, 1285, 1287, 1257, 1266, 1266, 1266, 1267,
     1267, 1267, 1268, 1268, 1268, 1269, 1269, 1269, 1288, 1289,
     1266, 1270, 1270, 1270, 1271, 1271, 1271, 1301, 1290, 1269,
     1290, 1291, 1291, 1291, 1292, 1293, 1292, 1293, 1271, 1294,

     1295, 1294, 1295, 1296, 1297, 1296, 1297, 1298, 1299, 1298,
     1299, 1300, 1302, 1300, 1303, 1303, 1303, 1304, 1305, 1306,
     1307, 1292, 1308, 1309, 1290, 1310, 1294, 1311, 1312, 1314,
     1315, 1295, 1317, 1318, 1296, 1323, 1293, 1313, 1313, 1313,
     1316, 1316, 1316, 1324, 1325, 1297, 1326, 1327, 1298, 1328,
     1299, 1329, 1300, 1330, 1316, 1319, 1319, 1319, 1320, 1320,
     1320, 1321, 1321, 1321, 1322, 1322, 1322, 1331, 1329, 1334,
     1335, 1336, 1337, 1338, 1339, 1321, 1340, 1350, 1340, 1341,
     1342, 1341, 1342, 1343, 1344, 1343, 1344, 1345, 1351, 1345,
     1346, 1346, 1346, 1347, 1347, 1347, 1348, 1352, 1348, 1349,

     1349, 1349, 1346, 1346, 1346, 1347, 1347, 1347, 1343, 1353,
     1345, 1349, 1349, 1349, 1354, 1355, 1356, 1357, 1340, 1360,
     1341, 1344, 1342, 1358, 1358, 1358, 1361, 1348, 1359, 1359,
     1359, 1362, 1355, 1363, 1363, 1363, 1365, 1358, 1364, 1364,
     1364, 1366, 1359, 1367, 1367, 1367, 1368, 1363, 1369, 1371,
     1372, 1374, 1375, 1376, 1377, 1378, 1379, 1381, 1382, 1383,
     1384, 1397, 1384, 1385, 1385, 1385, 1386, 1387, 1386, 1387,
     1389, 1388, 1389, 1388, 1399, 1385, 1385, 1385, 1390, 1390,
     1390, 1391, 1391, 1391, 1392, 1392, 1392, 1393, 1393, 1393,
     1390, 1390, 1390, 1394, 1389, 1394, 1392, 1392, 1392, 1400,

     1402, 1384, 1395, 1395, 1395, 1403, 1386, 1388, 1404, 1387,
     1396, 1396, 1396, 1405, 1395, 1395, 1395, 1398, 1398, 1398,
     1401, 1401, 1401, 1406, 1406, 1406, 1407, 1407, 1407, 1410,
     1394, 1398, 1411, 1414, 1401, 1415, 1416, 1406, 1408, 1408,
     1408, 1409, 1409, 1409, 1412, 1412, 1412, 1413, 1413, 1413,
     1417, 1419, 1408, 1420, 1421, 1422, 1423, 1424, 1412, 1425,
     1427, 1428, 1429, 1429, 1429, 1430, 1430, 1430, 1431, 1431,
     1431, 1432, 1440, 1432, 1429, 1429, 1429, 1430, 1430, 1430,
     1433, 1434, 1433, 1434, 1435, 1444, 1435, 1436, 1436, 1436,
     1437, 1437, 1437, 1438, 1432, 1438, 1439, 1439, 1439, 1441,

     1441, 1441, 1442, 1442, 1442, 1443, 1443, 1443, 1446, 1446,
     1446, 1433, 1447, 1441, 1445, 1445, 1445, 1448, 1435, 1443,
     1449, 1450, 1434, 1451, 1451, 1451, 1453, 1454, 1445, 1438,
     1452, 1452, 1452, 1455, 1455, 1455, 1456, 1456, 1456, 1457,
     1457, 1457, 1458, 1459, 1461, 1462, 1463, 1455, 1464, 1465,
     1466, 1467, 1469, 1457, 1470, 1470, 1470, 1471, 1471, 1471,
     1472, 1472, 1472, 1473, 1482, 1473, 1470, 1470, 1470, 1474,
     1484, 1474, 1475, 1475, 1475, 1476, 1477, 1476, 1477, 1478,
     1478, 1478, 1485, 1486, 1475, 1475, 1475, 1479, 1479, 1479,
     1480, 1480, 1480, 1478, 1473, 1481, 1481, 1481, 1483, 1483,

     1483, 1487, 1476, 1488, 1480, 1489, 1490, 1490, 1490, 1491,
     1491, 1491, 1494, 1474, 1492, 1492, 1492, 1477, 1493, 1493,
     1493, 1495, 1496, 1491, 1497, 1498, 1499, 1500, 1501, 1502,
     1513, 1514, 1493, 1503, 1503, 1503, 1504, 1505, 1504, 1505,
     1506, 1506, 1506, 1507, 1507, 1507, 1508, 1515, 1508, 1510,
     1510, 1510, 1506, 1506, 1506, 1509, 1509, 1509, 1511, 1511,
     1511, 1508, 1516, 1510, 1505, 1517, 1518, 1509, 1509, 1509,
     1519, 1523, 1504, 1512, 1512, 1512, 1520, 1520, 1520, 1521,
     1521, 1521, 1522, 1522, 1522, 1524, 1525, 1526, 1527, 1528,
     1529, 1530, 1531, 1521, 1532, 1533, 1532, 1533, 1534, 1534,

     1534, 1535, 1539, 1535, 1536, 1536, 1536, 1537, 1537, 1537,
     1533, 1538, 1538, 1538, 1540, 1541, 1536, 1536, 1536, 1542,
     1542, 1542, 1543, 1544, 1545, 1546, 1546, 1546, 1547, 1548,
     1551, 1553, 1554, 1542, 1555, 1556, 1532, 1556, 1557, 1535,
     1557, 1558, 1560, 1558, 1559, 1559, 1559, 1565, 1567, 1542,
     1556, 1561, 1561, 1561, 1562, 1562, 1562, 1563, 1563, 1563,
     1564, 1564, 1564, 1568, 1569, 1561, 1571, 1572, 1562, 1574,
     1584, 1563, 1566, 1566, 1566, 1575, 1557, 1575, 1576, 1577,
     1576, 1577, 1587, 1558, 1589, 1590, 1566, 1578, 1578, 1578,
     1579, 1579, 1579, 1580, 1580, 1580, 1591, 1581, 1581, 1581,

     1592, 1578, 1600, 1602, 1579, 1582, 1582, 1582, 1605, 1606,
     1577, 1581, 1607, 1575, 1583, 1583, 1583, 1585, 1585, 1585,
     1576, 1586, 1586, 1586, 1588, 1588, 1588, 1593, 1594, 1593,
     1594, 1585, 1608, 1595, 1610, 1595, 1610, 1613, 1588, 1596,
     1596, 1596, 1597, 1597, 1597, 1598, 1598, 1598, 1599, 1599,
     1599, 1614, 1616, 1596, 1601, 1601, 1601, 1617, 1618, 1594,
     1603, 1603, 1603, 1604, 1604, 1604, 1609, 1619, 1609, 1593,
     1595, 1610, 1623, 1611, 1603, 1611, 1612, 1612, 1612, 1615,
     1615, 1615, 1620, 1624, 1620, 1621, 1622, 1621, 1622, 1625,
     1627, 1630, 1629, 1630, 1629, 1633, 1635, 1609, 1631, 1631,

     1631, 1632, 1632, 1632, 1634, 1634, 1634, 1642, 1645, 1611,
     1631, 1631, 1631, 1651, 1636, 1632, 1636, 1653, 1634, 1620,
     1657, 1621, 1637, 1637, 1637,  886,  885, 1622, 1629, 1638,
     1638, 1638, 1630,  884, 1637, 1637, 1637, 1639, 1639, 1639,
      883, 1638, 1638, 1638, 1640, 1640, 1640, 1641, 1641, 1641,
     1643, 1643, 1643,  882,  881, 1636,  880,  878, 1640, 1644,
     1644, 1644,  877,  876, 1643, 1646, 1646, 1646, 1647, 1647,
     1647, 1648, 1648, 1648, 1649, 1649, 1649, 1646, 1646, 1646,
     1647, 1647, 1647, 1650, 1650, 1650, 1652, 1652, 1652, 1654,
     1654, 1654, 1655, 1655, 1655, 1656, 1656, 1656, 1659, 1659,

     1659, 1654, 1654, 1654, 1660, 1660, 1660, 1661, 1661, 1661,
     1662, 1662, 1662, 1663, 1663, 1663,  875,  874, 1660,  873,
      872, 1661, 1665, 1665, 1665, 1665, 1665, 1666, 1666, 1666,
     1666, 1666, 1667, 1667, 1667, 1667, 1667, 1668, 1668, 1668,
     1668, 1668, 1669, 1669, 1669, 1669, 1669, 1670, 1670, 1670,
     1670, 1670, 1671, 1671, 1671, 1671, 1671, 1672,  871,  870,
     1672, 1673, 1673, 1673, 1673, 1674, 1674,  869, 1674, 1674,
     1675, 1675, 1675,  868, 1675,  867,  866,  865,  864,  863,
      862,  861,  860,  856,  855,  854,  853,  852,  850,  849,
      848,  847,  841,  840,  839,  838,  837,  836,  835,  834,

      833,  830,  829,  828,  827,  826,  825,  824,  823,  822,
      821,  819,  818,  817,  816,  814,  791,  790,  789,  788,
      787,  786,  785,  784,  783,  782,  781,  780,  779,  778,
      777,  776,  775,  774,  773,  772,  771,  770,  769,  768,
      767,  766,  765,  764,  763,  762,  761,  760,  759,  758,
      755,  754,  753,  752,  751,  747,  746,  741,  740,  739,
      738,  737,  736,  735,  734,  733,  728,  726,  725,  724,
      723,  722,  721,  720,  717,  716,  715,  714,  711,  688,
      686,  685,  684,  683,  682,  680,  679,  676,  675,  674,
      673,  672,  671,  670,  669,  668,  667,  665,  664,  663,

      662,  661,  660,  659,  658,  657,  656,  655,  654,  653,
      652,  649,  648,  647,  645,  644,  642,  641,  640,  639,
      638,  636,  635,  634,  633,  632,  631,  627,  626,  625,
      624,  620,  619,  617,  599,  598,  597,  596,  595,  593,
      592,  591,  590,  589,  588,  587,  586,  585,  584,  583,
      582,  581,  580,  577,  576,  575,  574,  570,  569,  567,
      566,  565,  562,  560,  559,  558,  557,  556,  554,  552,
      548,  547,  546,  545,  543,  542,  539,  538,  537,  536,
      535,  534,  533,  532,  531,  530,  529,  510,  509,  507,
      505,  504,  503,  502,  501,  500,  498,  497,  496,  495,

      494,  492,  491,  490,  489,  488,  487,  486,  485,  484,
      483,  482,  481,  480,  479,  477,  474,  473,  471,  470,
      469,  468,  467,  466,  463,  462,  458,  457,  455,  454,
      453,  452,  451,  448,  447,  445,  444,  443,  442,  441,
      440,  439,  410,  409,  408,  407,  406,  405,  404,  403,
      402,  401,  400,  399,  398,  395,  394,  393,  392,  391,
      390,  389,  387,  386,  384,  383,  382,  381,  380,  379,
      378,  377,  374,  372,  371,  368,  367,  365,  363,  362,
      361,  359,  358,  355,  354,  353,  352,  351,  350,  347,
      346,  345,  344,  343,  342,  341,  340,  339,  338,  312,

      311,  309,  308,  307,  306,  304,  303,  302,  301,  300,
      298,  297,  296,  295,  294,  293,  292,  291,  290,  289,
      288,  287,  286,  285,  284,  283,  282,  281,  279,  278,
      277,  275,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  263,  262,  260,  259,  258,  257,  256,  255,  254,
      253,  228,  227,  226,  225,  224,  223,  222,  221,  220,
      219,  218,  217,  216,  215,  214,  213,  211,  210,  209,
      208,  207,  206,  205,  204,  203,  202,  201,  199,  198,
      197,  196,  194,  193,  192,  190,  189,  188,  187,  186,
      185,  184,  183,  182,  180,  179,  178,  177,  176,  174,

      150,  149,  148,  147,  145,  144,  143,  141,  140,  139,
      138,  137,  136,  135,  134,  133,  131,  130,  129,  128,
      127,  126,  125,  124,  122,  118,  117,  116,  115,  114,
      112,  111,  108,   89,   83,   82,   81,   79,   75,   74,
       73,   72,   71,   69,   66,   41,   38,   23,   21,   17,
        8,    7,    6,    5,    4,    3, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,

     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[190] =
    {   0,
1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 
    0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin, 
 * @version 1.1, 10/07/2008
 * @since   OS1.1
 *
 * \remarks
 * Copyright (C) 2005-2008, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSoLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"


//#define PARSERDEBUG
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;








#line 100 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 1879 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 110 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"


 
#line 2125 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1665 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3457 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 113 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 117 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 118 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 119 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 120 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 122 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 136 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 138 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 139 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 140 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 141 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 142 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 143 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 144 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 145 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 146 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 147 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 148 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 149 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 150 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 151 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 152 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 153 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 154 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 155 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 156 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 158 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 159 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 160 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 161 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 162 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 163 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 164 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 165 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 166 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 167 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 168 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 169 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 170 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 171 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 172 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 173 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 174 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 175 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 176 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 177 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 178 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 179 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 180 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 181 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 182 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 183 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 184 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 185 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 187 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBDUALVALUEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 188 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBDUALVALUEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 189 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBDUALVALUEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 190 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBDUALVALUEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 193 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 194 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 196 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 197 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 198 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 199 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 200 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 201 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 202 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 203 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 204 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 205 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 206 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 208 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 209 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 210 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 211 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 212 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 213 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 214 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 215 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 216 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 217 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 218 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 219 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 220 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 221 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 222 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 223 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 224 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 225 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 226 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 227 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 228 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 229 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 230 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 231 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 233 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 234 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 235 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZESTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 236 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZEEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 237 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 238 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 239 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 240 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 242 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 243 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 245 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 246 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 247 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 248 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 249 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 250 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 251 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 252 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 253 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 254 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 255 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 256 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 257 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 258 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 259 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 260 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 261 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 262 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 263 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 264 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 265 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 266 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 267 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 268 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 269 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 270 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 271 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 272 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 273 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 274 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 275 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 276 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 277 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 278 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 281 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 282 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 283 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 284 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 285 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 286 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 287 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 288 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 289 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 290 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 291 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 292 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 293 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 294 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 295 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 296 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 297 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 298 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 299 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 300 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 301 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 302 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 303 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 304 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 305 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 306 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 307 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 308 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 309 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 310 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 311 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 312 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 313 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 314 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 315 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 316 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 319 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; /*yylval->sval = strdup( yytext);*/   yylval->sval = yytext; yyextra->errorText = yylval->sval;  return (ELEMENTTEXT); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 321 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 178:
#line 323 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 323 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 324 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 326 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 182:
#line 328 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 328 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 329 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 332 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 333 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;  return(ATTRIBUTETEXT);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 334 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 337 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 349 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 3364 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1665 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1665 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1664);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 349 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"





