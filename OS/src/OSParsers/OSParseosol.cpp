#line 2 "OSParseosol.cpp"

#line 4 "OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osollex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 260
#define YY_END_OF_BUFFER 261
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2104] =
    {   0,
        1,    1,  258,  258,  256,  256,  257,  257,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  261,  259,
        1,    2,  246,    2,  246,    6,  246,    5,  259,    4,
      246,  246,    2,  258,  260,  256,  257,  247,  249,  250,
      249,  253,  254,  253,    1,  246,  246,    6,  246,    5,
        0,    4,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,    3,    6,    6,
      246,    7,    5,    0,    0,  252,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    4,  246,  246,  258,  256,

      257,  247,    0,  255,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,    0,  246,    6,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  134,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    6,  251,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,

        0,  246,  246,  246,  246,  246,  246,  246,    6,  248,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  212,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   96,
        0,    0,    0,    0,  204,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  196,    0,    0,    0,    0,
        0,    0,  198,  246,  246,  246,  246,  246,   27,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,

        0,   78,   79,  246,  246,  246,  246,  246,  246,  246,
        6,    0,    0,    0,    0,    0,    0,    0,    0,  135,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  146,    0,    0,    0,    0,    0,
        0,    0,    0,  136,    0,    0,    0,  246,  246,  246,

        0,  246,   27,  246,   82,  246,  246,  246,  246,  246,
       83,  246,    0,  246,  246,  246,  246,  246,  246,    0,
      246,  246,  246,    0,  246,  246,    0,    0,    0,    0,
        0,  213,    0,    0,    0,    0,    0,  135,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   97,    0,
        0,    0,    0,    0,    0,    0,    0,  205,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      197,    0,    0,    0,    0,    0,    0,    0,    0,  199,
        0,    0,    0,    0,  180,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  223,  108,    0,    0,    0,    0,    0,    0,    0,
      227,    0,    0,    0,   86,   85,  122,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  246,  246,    0,   76,   77,  246,   82,  246,
      246,  246,  246,   83,    0,   48,   49,  246,  246,  246,
      246,  246,    0,   56,   57,  246,  246,    0,   66,   67,
      246,    0,  246,    0,    0,    0,    0,  213,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  224,   97,    0,    0,    0,    0,    0,
        0,    0,  228,  205,    0,    0,    0,    0,   87,    0,

        0,    0,    0,  147,    0,    0,    0,    0,    0,    0,
      197,    0,    0,    0,    0,    0,  137,    0,    0,  199,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  186,  225,
      223,    0,    0,    0,    0,    0,    0,    0,  229,  227,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   92,    0,    0,    0,
      246,  246,  246,  246,  246,  246,  246,   46,   47,  246,
      246,   84,  246,    0,  246,   28,  246,   54,   55,  246,
      246,   64,   65,    0,   70,   71,  246,    0,    0,    0,

        0,    0,  181,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  224,    0,
      109,    0,    0,    0,    0,    0,    0,  228,    0,    0,
        0,   87,    0,  123,    0,    0,    0,  147,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  137,    0,
        0,    0,  182,  184,    0,    0,  118,    0,    0,    0,
        0,    0,    0,   90,    0,    0,    0,    0,    0,  225,
        0,    0,  112,  138,    0,    0,    0,    0,  229,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  170,    0,
        0,   94,    0,    0,    0,    0,    0,  231,    0,  190,

        0,    0,  246,  246,  246,  246,  246,    0,  246,  246,
      246,   84,    0,   52,   53,   28,  246,  246,  246,    0,
       68,   69,    0,   74,   75,    0,    0,    0,  181,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  187,  109,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  123,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      232,    0,    0,   93,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  243,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      116,  158,    0,    0,    0,    0,    0,    0,    0,    0,
      233,  231,    0,    0,  114,    0,  246,    0,  246,  246,
      246,    0,   42,   43,  246,  246,    0,  246,  246,  246,
      246,  246,  246,  246,  246,   50,   51,  246,  246,    0,
       62,   63,   72,   73,    0,  183,    0,  185,    0,    0,
        0,  119,    0,    0,    0,    0,    0,    0,    0,    0,
       91,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      187,    0,  244,    0,  113,    0,  139,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      171,    0,    0,    0,    0,   95,    0,    0,    0,    0,
        0,  232,    0,   93,    0,  191,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  245,  243,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  233,    0,    0,  172,    0,   34,   35,  246,  246,
      246,   40,   41,  246,    0,   80,   81,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,   60,   61,  183,  185,    0,    0,  119,    0,    0,

        0,    0,    0,    0,    0,   91,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  244,  113,  139,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      117,    0,  159,  171,    0,    0,    0,    0,   95,    0,
        0,    0,    0,    0,    0,  191,    0,  115,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  245,
        0,    0,    0,    0,    0,    0,  200,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  100,    0,    0,
        0,    0,  188,   32,   33,  246,  246,  246,  246,  246,

      246,   10,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  117,  159,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  115,    0,  173,    0,  208,
        0,    0,    0,  220,    0,    0,  152,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      128,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  102,    0,    0,    0,    0,  246,    0,

      246,   29,  246,   30,  246,  246,   25,  246,   10,  246,
      246,  246,  246,   23,  246,  246,  246,  246,  246,   21,
      246,  246,   20,  246,  246,  246,   31,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  201,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  101,    0,    0,    0,    0,  189,  173,
        0,  142,    0,    0,  235,    0,    0,    0,  239,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  104,    0,
        0,  222,    0,  130,  124,    0,    0,  226,   98,   88,

      120,    0,    0,    0,    0,    0,    0,  218,    0,    0,
        0,    0,   38,   39,   29,   30,  246,    0,   25,  246,
      246,  246,  246,   23,  246,  246,  246,  246,  246,   21,
      246,   20,  246,  246,   31,    0,    0,  209,    0,    0,
      236,    0,    0,  221,    0,  240,    0,    0,  153,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  129,    0,    0,  201,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  103,  101,    0,    0,    0,
      189,    0,  237,  235,    0,    0,  241,  239,    0,  166,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  222,

        0,  126,  226,    0,    0,    0,    0,    0,  148,  216,
        0,    0,    0,   36,   37,    0,   45,   44,  246,  246,
      246,   13,  246,  246,  246,  246,  246,  246,  246,   12,
      246,  246,  246,  246,    0,    0,  209,    0,  143,  236,
        0,  221,  240,    0,  153,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  105,    0,    0,  131,  129,    0,
      125,    0,    0,   99,    0,   89,    0,  121,    0,    0,
        0,    0,    0,    0,  103,    0,  219,    0,    0,    0,
        0,  237,    0,    0,    0,  241,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  110,    0,    0,  246,  246,   13,  246,    9,
      246,  246,  246,  246,  246,  246,   12,  246,  246,  246,
        0,   59,   58,    0,  143,    0,    0,    0,  167,    0,
        0,    0,    0,    0,    0,    0,    0,  105,    0,  131,
      125,    0,  127,   99,   89,  121,    0,    0,    0,    0,
        0,    0,  149,  219,    0,  217,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  168,    0,    0,    0,    0,
      246,  246,    9,  246,  246,  246,  246,  246,  246,  246,
      246,  246,    0,    0,    0,  167,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  127,    0,    0,    0,    0,
        0,  149,  217,    0,  111,    0,  132,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  156,  106,    0,
        0,    0,    0,    0,    0,    0,    0,  230,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  169,    0,    0,  111,    0,    0,
        0,  150,    0,    0,    0,  214,    0,    0,    0,    0,
        0,    0,    0,  162,    0,    0,    0,  230,  246,  246,
      246,  246,  246,  246,  246,  246,   14,  246,   15,  246,

      246,   16,    0,  133,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  157,    0,  107,    0,    0,    0,
      169,    0,    0,    0,    0,    0,    0,  178,    0,    0,
        0,    0,    0,    0,    0,  242,    0,  140,    0,    0,
      246,  246,  246,   17,  246,  246,  246,  246,   14,   15,
      246,   16,  133,    0,    0,  151,    0,    0,    0,  215,
        0,    0,    0,    0,  157,  107,    0,    0,    0,  163,
        0,    0,    0,    0,  164,    0,    0,    0,    0,    0,
        0,    0,  242,    0,  144,    0,  246,   18,  246,   17,
      246,  246,  246,  246,  246,    0,  151,    0,  179,    0,

      215,    0,    0,    0,    0,    0,    0,  163,    0,  141,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   18,  246,   11,  246,  246,  246,    8,  246,
      246,    0,  165,  179,    0,    0,    0,    0,    0,    0,
        0,  141,    0,  145,    0,    0,    0,    0,    0,    0,
      174,    0,    0,    0,    0,   11,  246,  246,    8,  246,
      246,   26,  165,    0,    0,    0,    0,    0,    0,    0,
      145,    0,    0,    0,    0,  206,  202,    0,  154,    0,
        0,    0,  246,  246,  246,   26,    0,    0,    0,    0,
      175,    0,    0,    0,    0,    0,    0,    0,  210,    0,

        0,  160,    0,  246,  246,  246,    0,    0,  207,    0,
      203,  175,    0,    0,  155,    0,    0,    0,    0,    0,
        0,    0,    0,  246,  246,  246,    0,  211,  207,  203,
        0,  155,    0,    0,  161,    0,    0,    0,    0,    0,
        0,  246,  246,  246,  211,    0,    0,  161,    0,    0,
      234,    0,  238,    0,    0,    0,  246,  246,  246,    0,
        0,    0,  234,  238,  176,    0,  194,  246,  246,  246,
        0,    0,    0,    0,  246,  246,  246,   19,    0,  177,
        0,    0,  195,    0,  246,  246,   22,   19,  177,    0,
      195,    0,  246,   24,   22,    0,  192,   24,    0,    0,

      193,  193,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    1,    1,    7,    1,
        1,    6,    8,    1,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,   27,   28,   29,   30,   31,   32,
        6,   33,   34,   35,   36,   37,   38,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,   65,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2116] =
    {   0,
        0,   65, 3250, 3249, 3260, 3259, 3256, 3255,    0,    0,
        0,    0, 3246, 3245,   17,   18,   16,   19, 3259, 3268,
      129, 3253,  192, 3250,   19,   49, 3239,   84,  250,   21,
     3225, 3215, 3268,    0, 3268,    0,    0,    0, 3268, 3268,
     3244, 3268, 3268, 3235,    0,    0,   28,  102, 3234,  213,
       31,   43, 3220, 3210, 3209, 3204, 3190, 3189,    5,    3,
        0,   25,    1,   46,   48, 3205, 3200, 3268,  105,  216,
      109, 3268,  108, 3233,  272, 3268, 3183, 3201, 3186,   42,
        8, 3191, 3194,   68, 3183, 3188,   54, 3195,  206,   73,
     3190,  214, 3169,   76, 3192,  134, 3207, 3199,    0,    0,

        0,    0, 3211, 3268, 3169, 3169, 3172, 3171, 3161, 3181,
       82, 3180, 3171, 3169, 3167, 3166, 3152,  163,  194, 3176,
     3160,  177, 3166, 3162, 3164,  257,  262,  331, 3201, 3151,
     3169, 3154,  165,  195, 3159, 3162,  226, 3151, 3156,  185,
     3163,  281,  192, 3158,  293, 3137,  228, 3160,    0, 3141,
     3145,  201, 3140, 3268, 3136, 3144, 3141,  300, 3169, 3148,
     3150, 3148, 3126, 3135, 3135, 3137, 3126, 3130, 3136, 3123,
      142, 3127, 3124, 3122,  222, 3123, 3119, 3121, 3125, 3130,
     3116,  238, 3268, 3128, 3129, 3118, 3109,  339, 3111, 3107,
     3126, 3125, 3120, 3104, 3118, 3120, 3116, 3098, 3132,  346,

      358, 3104, 3112, 3095, 3114, 3094, 3092, 3105,  364, 3268,
      260, 3092, 3096,  296, 3091,  366, 3087, 3095, 3092,  317,
     3120, 3099, 3101, 3099, 3077, 3086, 3086, 3088, 3077, 3081,
     3087, 3074,  229, 3078, 3075, 3073,  322, 3074, 3070, 3072,
     3076, 3081, 3067, 3069, 3067,  219,  327, 3077, 3078, 3075,
     3066, 3073, 3072, 3056, 3054, 3054, 3068, 3054, 3058, 3083,
     3064, 3071,  366, 3062, 3061, 3056, 3052, 3058, 3046, 3042,
     3052, 3056, 3037, 3035, 3034, 3056, 3036, 3048, 3032, 3046,
     3036, 3031, 3039, 3040, 3028,  386, 3029,  388,  390,  394,
     3043, 3031, 3022, 3059,  396,  398, 3035, 3046, 3033, 3033,

      404, 3268, 3268, 3017,  413, 3034, 3022,  415, 3028, 3024,
      417, 3016, 3014,  378,  420, 3024, 3025, 3022,  424,  430,
     3013, 3020, 3019, 3003, 3001, 3001, 3015, 3001, 3005,  432,
     3012, 3019,  418, 3010,  441, 3005, 3001, 3007, 2995, 2991,
     3001, 3005, 2986, 2984, 2983,  443, 2986, 2998, 2982, 2996,
     2986, 2981,  448, 2975, 2981, 3020, 2992, 2974, 2992, 2978,
     2973, 2987, 2984,  383, 2970, 2978, 2966, 2984, 2977, 2978,
      450, 2999, 2967, 2971, 2985, 2969, 2972,  452, 2973,  329,
      468, 2957, 2953, 2950, 2978, 2966,  381, 2961, 2964, 2967,
     2964, 2948, 2960, 3268, 2949, 2971, 2961, 2946, 2951,  470,

      485, 2959,  472,  480,  491, 2946, 2936, 2947, 2940,  495,
      497,  499,  501, 2936, 2947, 2934, 2927, 2934,  507,  511,
     2937, 2927,  517,  519,  525, 2927, 2923, 2929, 2968, 2940,
      527,  529, 2922, 2940, 2926, 2921, 2935,  532, 2932,  385,
     2918, 2926, 2914, 2932, 2925, 2926,  534,  536,  540, 2947,
     2915, 2919, 2933, 2917, 2920,  543,  545,  547, 2921,  411,
      552, 2905, 2901, 2898,  554, 2915,  516, 2910, 2913,  562,
      564, 2916, 2913, 2897, 2909,  570, 2898, 2920,  572,  574,
     2910, 2905, 2904, 2933, 3268, 2889, 2903, 2901, 2895, 2883,
     2884, 2883, 2903, 2898, 2897,  445, 2883, 2891, 2890,  579,

     2915,  582, 3268,  448, 2880, 2894, 2872, 2877,  589, 2910,
      592, 2868, 2878, 2872,  596, 3268, 2892, 2864, 2868, 2881,
     2862, 2861, 2861, 2875, 2859, 2858, 2870, 2872, 2860, 2849,
     2870, 2868, 2851, 2852,  607, 3268, 3268, 2862,  599, 2867,
     2860, 2849, 2847,  601,  613, 2895, 2892, 2867,  619,  621,
      623, 2844,  625, 2891, 2888, 2857, 2850,  631, 2887, 2884,
      638,  640,  646, 2847, 2846, 2875,  648,  650, 2831, 2845,
     2843, 2837, 2825, 2826, 2825, 2845, 2840, 2839,  458, 2825,
     2833, 2832,  653,  655,  657,  661,  450, 2823, 2837, 2815,
     2820,  664,  666,  669, 2812, 2822, 2816,  671,  673,  677,

     2809, 2813,  680,  682, 2826, 2807, 2806, 2806, 2820, 2804,
      684, 2803, 2815, 2817, 2805,  687,  689, 2794, 2815,  693,
     2813, 2796, 2795, 2831, 2810, 2790, 2804, 2792, 2792, 2805,
     2800, 2789, 2791, 2790, 2792, 2791, 2796, 2780, 3268,  696,
      698, 2824, 2791, 2790, 2789,  672, 2782, 2777,  707,  709,
     2818, 2781, 2763, 2802, 2771,  547, 2768, 2776, 2765, 2763,
     2777, 2776,  672, 2771,  712, 2778, 3268, 2764, 2764, 2764,
     2750, 2754, 2764, 2771,  714, 2757, 2745, 3268, 3268, 2763,
      716,  718,  723,  731,  725,  740, 2750, 3268, 3268, 2766,
      742, 3268, 3268,  744, 2799, 2796,  750,  752, 2746, 2745,

     2781,  758,  760, 2760, 2740, 2754, 2742, 2742, 2755, 2750,
     2739, 2741, 2740, 2742, 2741, 2746, 2730,  762,  765,  767,
      769, 2742, 2741, 2740,  701, 2733, 2728,  771, 2733, 2715,
     2753,  774,  778,  780, 2717,  557, 2709,  783, 2671, 2659,
     2657, 2671, 2670,  756, 2665,  786, 2672,  790,  794,    3,
       40,   63, 3268, 3268,   87,  100, 3268,  159,  163,  226,
      241,  266,  330, 3268,  779,  262,  277,  294,  333,  799,
      326,  802, 3268, 3268,  335,  354,  379,  374,  806,  384,
      388,  417,  416,  418,  465,  470,  483,  484,  509,  515,
      519,  575,  529,  535,  554,  809,  591,  812,  560, 3268,

      576,  586,  815,  584,  599,  596,  819,  827,  626,  821,
      816,  837,  849,  672,  686,  841,  647,  672,  843,  855,
     3268, 3268,  861,  732,  733,  867,  869,  701,  871,  703,
      873,  704,  720,  734,  736,  767,  804,  875,  860,  772,
      799,  812,  824,  885,  880,  891,  893,  896,  898,  806,
      813,  851,  833,  843,  865,  862,  904,  850,  862,  864,
      870,  858,  914,  875,  877,  918,  868,  870,  885,  923,
      925,  872,  930,  934,  936,  887,  891,  889,  890,  902,
      897,  898,  899,  891,  907,  912,  913,  902,  897,  918,
      920,  917,  918,  934,  924,  907,  964,  951,  967,  920,

      929,  919,  911,  937,  934,  920,  940,  933,  927,  934,
     3268, 3268,  928,  944,  966,  949,  957,  933,  967,  953,
      992,  994,  987,  952, 3268,  943,  999, 1001,  952,  961,
      951, 1009, 1008, 1010,  955, 1017, 1019,  970,  975,  970,
      976,  990,  993, 1000,  995, 3268, 3268, 1000,  977, 1035,
     1034, 1034, 3268, 3268, 1041, 1043, 1048, 1052,  995, 1000,
     1054, 1057, 1020, 1015, 1016, 1017, 1008, 1024, 1029, 1067,
     1070, 1035, 1022, 1017, 1037, 1039, 1036, 1037, 1053, 1043,
     1083, 1085, 1087, 1089, 1091, 1093, 1095, 1048, 1057, 1047,
     1040, 1061, 1047, 1068, 1061, 1053, 1061, 1110, 1112, 1114,

     1116, 1063, 1079, 1101, 1123, 1130, 1084, 1095, 1072, 1109,
     1095, 1134, 1091, 1139, 1141, 1143, 1145, 1082, 1110, 1092,
     1104, 1099, 1110, 1101, 1102, 1106, 1108, 1102, 1108, 1122,
     1115, 1108, 1124, 1109, 1114, 1129, 1113, 1127, 1169, 1171,
     1164, 1136, 1134, 1139, 1145, 1129, 1124, 1135, 1141, 1131,
     1142, 1144, 1153, 1155, 1143, 1144, 1141, 1168, 1147, 1143,
     1146, 1195, 1142, 1159, 3268, 1199, 1198, 1198, 1155, 1150,
     1166, 3268, 3268, 1156, 1209, 3268, 3268, 1161, 1215, 1156,
     1176, 1180, 1173, 1176, 1165, 1171, 1191, 1176, 1171, 1165,
     1186, 3268, 3268, 1230, 1232, 1191, 1178, 1235, 1192, 1187,

     1198, 1189, 1190, 1194, 1196, 1244, 1191, 1197, 1211, 1203,
     1196, 1212, 1197, 1202, 1217, 1201, 1256, 1258, 1260, 1224,
     1222, 1227, 1233, 1211, 1222, 1228, 1218, 1229, 1230, 1272,
     1274, 1276, 1278, 1280, 1249, 1251, 1239, 1240, 1288, 1237,
     1267, 1247, 1243, 1246, 1256, 1296, 1298, 1300, 1302, 1250,
     1250, 1265, 1257, 1253, 1259, 1256, 1270, 1271, 1269, 1260,
     1268, 1277, 1274, 1264, 1288, 1283, 1274, 1279, 1276, 1326,
     1280, 1288, 1290, 1292, 1287, 1292, 3268, 1283, 1294, 1286,
     1298, 1283, 1288, 1284, 1287, 1294, 1302, 3268, 1293, 1287,
     1305, 1296, 3268, 3268, 3268, 1348, 1350, 1352, 1313, 1355,

     1357, 1359, 1312, 1314, 1342, 1367, 1329, 1328, 1334, 1374,
     1318, 1377, 1327, 1382, 1326, 1329, 1344, 1336, 1332, 1339,
     1336, 1351, 1352, 1349, 1340, 1349, 1357, 1354, 1344, 1368,
     1363, 1354, 1359, 1364, 1366, 1368, 1364, 1411, 1362, 1373,
     1365, 1377, 1362, 1418, 1420, 1372, 1368, 1371, 1379, 1387,
     1429, 1380, 1374, 1392, 1434, 1436, 1438, 1440, 1381, 3268,
     1388, 1445, 1414, 3268, 1450, 1392, 3268, 1397, 1399, 1421,
     1418, 1421, 1410, 1411, 1426, 1423, 1429, 1467, 1424, 1416,
     3268, 1430, 1410, 1473, 1425, 1422, 1422, 1422, 1446, 1455,
     1444, 1442, 1443, 3268, 1435, 1435, 1470, 1432, 1490, 1492,

     1498, 1500, 1502, 1505, 1507, 1509, 1513, 1438, 1517, 1455,
     1456, 1496, 1519, 1524, 1483, 1472, 1497, 1487, 1529, 1531,
     1493, 1535, 1537, 1502, 1499, 1541, 1544, 1485, 1547, 1495,
     1553, 1518, 1556, 1558, 1504, 1563, 1506, 1509, 1531, 1528,
     1532, 1519, 1521, 1537, 1534, 1539, 1523, 1579, 1540, 1520,
     1583, 1585, 1537, 1534, 1534, 1534, 1558, 1567, 1556, 1554,
     1555, 1599, 1601, 1603, 1547, 1554, 1589, 1607, 1609, 1611,
     1594, 3268, 1617, 1600, 1620, 1568, 1627, 1608, 1624, 1588,
     1598, 1577, 1597, 1579, 1600, 1585, 1613, 1585, 3268, 1605,
     1644, 1646, 1609, 3268, 3268, 1608, 1650, 1652, 3268, 3268,

     3268, 1603, 1604, 1611, 1603, 1619, 1605, 1606, 1615, 1609,
     1610, 1666, 1665, 1665, 1672, 1674, 1676, 1678, 1684, 1626,
     1628, 1686, 1633, 1691, 1633, 1675, 1657, 1695, 1642, 1698,
     1647, 1702, 1667, 1706, 1711, 1689, 1713, 1715, 1717, 1721,
     1723, 1668, 1725, 1729, 1733, 1737, 1686, 1741, 1743, 1699,
     1681, 1702, 1689, 1708, 1693, 1722, 1694, 1751, 1715, 1754,
     1757, 1759, 1761, 1722, 1764, 1767, 1770, 1773, 1724, 1726,
     1733, 1725, 1741, 1726, 1783, 1786, 1789, 1791, 1746, 1740,
     1795, 1760, 1799, 1801, 1794, 1785, 1807, 1809, 1796, 3268,
     1755, 1776, 1767, 1771, 1769, 1773, 1768, 1775, 1773, 1823,

     1784, 3268, 1826, 1774, 1802, 1782, 1775, 1776, 3268, 3268,
     1792, 1797, 1796, 3268, 3268, 1836, 3268, 3268, 1801, 1803,
     1842, 1844, 1847, 1804, 1799, 1813, 1815, 1808, 1854, 1857,
     1804, 1831, 1814, 1863, 1866, 1833, 1872, 1874, 1878, 1880,
     1857, 1882, 1885, 1887, 1890, 1836, 1856, 1846, 1850, 1848,
     1852, 1847, 1854, 1900, 1903, 1857, 1906, 1908, 1910, 1912,
     1916, 1918, 1922, 1924, 1928, 1930, 1934, 1938, 1860, 1893,
     1878, 1876, 1880, 1940, 1944, 1946, 1950, 1952, 1901, 1911,
     1898, 1956, 1918, 1918, 1923, 1962, 1922, 1928, 1921, 1911,
     1911, 1929, 1930, 1914, 1922, 1933, 1925, 1931, 1926, 1930,

     1946, 1929, 3268, 1931, 1941, 1938, 1928, 1985, 1987, 1989,
     1933, 1942, 1947, 1938, 1941, 1942, 1997, 1958, 1948, 1961,
     2003, 3268, 3268, 1949, 2009, 1966, 1974, 2012, 2014, 1979,
     1972, 1961, 1961, 1979, 1980, 1964, 1972, 2024, 1985, 2028,
     2030, 2032, 2034, 2036, 2038, 2040, 1997, 1992, 1996, 2012,
     1995, 2048, 2050, 2052, 2054, 2056, 2058, 2010, 2024, 2021,
     2016, 2018, 2021, 2011, 2018, 2029, 2030, 2037, 2019, 2034,
     2026, 2060, 2039, 2038, 2022, 3268, 2036, 2028, 2044, 2084,
     2036, 2042, 2088, 2049, 2036, 2051, 2048, 2049, 2040, 2041,
     2041, 2043, 2063, 2053, 2055, 2103, 2049, 2056, 2066, 2067,

     2074, 2055, 2070, 2062, 2096, 2114, 2075, 2059, 2118, 2075,
     2067, 2122, 2124, 2126, 2128, 2091, 3268, 2076, 2091, 2093,
     2087, 2079, 2081, 2083, 2122, 2103, 2109, 3268, 3268, 2089,
     2103, 2090, 2105, 2098, 2103, 2105, 2150, 2152, 2098, 2104,
     2101, 2102, 2120, 2109, 2124, 2162, 2166, 2119, 2168, 2170,
     2131, 2132, 2117, 2119, 2122, 2161, 2142, 2148, 2183, 2186,
     2134, 2134, 2149, 2191, 2193, 2146, 2152, 2199, 2158, 2164,
     2148, 3268, 2164, 2152, 2173, 3268, 2158, 2173, 2163, 2161,
     2176, 2214, 2183, 3268, 2176, 2177, 2174, 2220, 2167, 2173,
     2224, 2172, 2171, 2178, 2192, 2231, 2233, 2235, 2239, 2186,

     2241, 2243, 2246, 2250, 2192, 2252, 2199, 2221, 2257, 2208,
     2223, 2214, 2212, 2264, 2268, 2270, 2273, 2229, 2242, 2276,
     2280, 2237, 2241, 2238, 2230, 2245, 2269, 3268, 2251, 2232,
     2242, 2235, 2266, 2244, 2295, 2297, 2248, 3268, 2245, 2251,
     2302, 2249, 2305, 2307, 2272, 2266, 2257, 2265, 2314, 2317,
     2270, 2321, 2323, 2284, 2326, 2328, 2330, 2295, 2333, 2335,
     2280, 2290, 2282, 2313, 2342, 2346, 2294, 2298, 2350, 2352,
     2354, 2301, 2307, 2313, 3268, 2305, 2312, 2311, 2305, 2322,
     2313, 2327, 2367, 2343, 3268, 2328, 2372, 2374, 2376, 2378,
     2335, 2323, 2382, 2343, 2330, 2387, 2391, 2393, 2397, 2341,

     2399, 2345, 2344, 2362, 2353, 2366, 2379, 2409, 2411, 2413,
     2415, 2364, 2365, 2377, 2362, 2380, 2380, 2367, 2365, 2380,
     2374, 2391, 2428, 2431, 2433, 2385, 2395, 2437, 2439, 2412,
     2442, 2446, 2448, 2452, 2387, 2410, 2413, 2400, 2399, 2414,
     2408, 2462, 2464, 2466, 2424, 2412, 2432, 2429, 2416, 2417,
     2441, 2433, 2430, 2418, 2436, 2480, 2422, 2453, 2483, 2433,
     2486, 2488, 2490, 2451, 2438, 2439, 2495, 2456, 2453, 2441,
     2501, 2462, 2459, 2449, 2451, 3268, 3268, 2451, 3268, 2458,
     2468, 2466, 2483, 2461, 2458, 2515, 2462, 2518, 2520, 2522,
     2524, 2470, 2528, 2480, 2490, 2487, 2483, 2485, 3268, 2484,

     2496, 3268, 2497, 2489, 2486, 2499, 2545, 2547, 2549, 2551,
     2553, 2555, 2503, 2558, 2563, 2518, 2567, 2522, 2519, 2516,
     2526, 2536, 2530, 2519, 2531, 2526, 2578, 2580, 2583, 2585,
     2542, 2588, 2554, 2591, 2594, 2552, 2597, 2599, 2551, 2561,
     2547, 2559, 2554, 2557, 2608, 2560, 2570, 2615, 2557, 2617,
     2619, 2621, 2623, 2582, 2581, 2572, 2577, 2579, 2575, 2588,
     2588, 2579, 2637, 2639, 3268, 2592, 3268, 2591, 2587, 2643,
     2645, 2604, 2648, 2606, 2596, 2652, 2654, 2658, 2661, 2664,
     2612, 2669, 2671, 2611, 2673, 2677, 2679, 2681, 2685, 2619,
     2688, 2628, 2692, 2694, 2696, 2635, 3268, 2698, 2700, 2702,

     2704, 2707, 3268, 2719, 2724, 2729, 2734, 2739, 2744, 2749,
     2754, 2759, 2763, 2768, 2773
    } ;

static yyconst flex_int16_t yy_def[2116] =
    {   0,
     2104, 2104, 2105, 2105, 2106, 2106, 2107, 2107, 2108, 2108,
     2108, 2108, 2109, 2109, 2110, 2110, 2111, 2111, 2103, 2103,
     2103, 2103,   21, 2103,   23,   23,   23,   23, 2103, 2103,
       23,   23, 2103, 2112, 2103, 2113, 2114, 2115, 2103, 2103,
     2103, 2103, 2103, 2103,   21,   23,   23,   23,   23,   23,
       29, 2103,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2103,   23,   23,
       23, 2103,   23, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103,   23,   23, 2112, 2113,

     2114, 2115, 2103, 2103,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 2103,   23,   23, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103,   23, 2103,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

     2103,   23,   23,   23,   23,   23,   23,   23, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103,   23,   23,   23,   23,   23, 2103,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

     2103, 2103, 2103,   23,   23,   23,   23,   23,   23,   23,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103,   23,   23,   23,

     2103,   23, 2103,   23, 2103,   23,   23,   23,   23,   23,
     2103,   23, 2103,   23,   23,   23,   23,   23,   23, 2103,
       23,   23,   23, 2103,   23,   23, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,

     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103,   23,   23, 2103, 2103, 2103,   23, 2103,   23,
       23,   23,   23, 2103, 2103, 2103, 2103,   23,   23,   23,
       23,   23, 2103, 2103, 2103,   23,   23, 2103, 2103, 2103,
       23, 2103,   23, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,

     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
       23,   23,   23,   23,   23,   23,   23, 2103, 2103,   23,
       23, 2103,   23, 2103,   23, 2103,   23, 2103, 2103,   23,
       23, 2103, 2103, 2103, 2103, 2103,   23, 2103, 2103, 2103,

     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,

     2103, 2103,   23,   23,   23,   23,   23, 2103,   23,   23,
       23, 2103, 2103, 2103, 2103, 2103,   23,   23,   23, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,

     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103,   23, 2103,   23,   23,
       23, 2103, 2103, 2103,   23,   23, 2103,   23,   23,   23,
       23,   23,   23,   23,   23, 2103, 2103,   23,   23, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,

     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,   23,   23,
       23, 2103, 2103,   23, 2103, 2103, 2103,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,

     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103,   23,   23,   23,   23,   23,

       23, 2103,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,   23, 2103,

       23, 2103,   23, 2103,   23,   23, 2103,   23, 2103,   23,
       23,   23,   23, 2103,   23,   23,   23,   23,   23, 2103,
       23,   23, 2103,   23,   23,   23, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,

     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103,   23, 2103, 2103,   23,
       23,   23,   23, 2103,   23,   23,   23,   23,   23, 2103,
       23, 2103,   23,   23, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,

     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,   23,   23,
       23, 2103,   23,   23,   23,   23,   23,   23,   23, 2103,
       23,   23,   23,   23, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,

     2103, 2103, 2103, 2103, 2103,   23,   23, 2103,   23, 2103,
       23,   23,   23,   23,   23,   23, 2103,   23,   23,   23,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
       23,   23, 2103,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,

     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,   23,   23,
       23,   23,   23,   23,   23,   23, 2103,   23, 2103,   23,

       23, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
       23,   23,   23, 2103,   23,   23,   23,   23, 2103, 2103,
       23, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103,   23, 2103,   23, 2103,
       23,   23,   23,   23,   23, 2103, 2103, 2103, 2103, 2103,

     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103,   23, 2103,   23,   23,   23, 2103,   23,
       23, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103,   23,   23, 2103,   23,
       23, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103,   23,   23,   23, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,

     2103, 2103, 2103,   23,   23,   23, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103,   23,   23,   23, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103,   23,   23,   23, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103,   23,   23,   23, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103,   23,   23,   23,
     2103, 2103, 2103, 2103,   23,   23,   23, 2103, 2103, 2103,
     2103, 2103, 2103, 2103,   23,   23, 2103, 2103, 2103, 2103,
     2103, 2103,   23, 2103, 2103, 2103, 2103, 2103, 2103, 2103,

     2103, 2103,    0, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103
    } ;

static yyconst flex_int16_t yy_nxt[3334] =
    {   0,
       20,   21,   21,   20,   22, 2103,   24,   20,   25,   26,
       27,   28,   28,   28,   29,   20,   30,   20,   43,   40,
       40,   43,   96,   96,   31,   41,   41,  244,   48,   32,
       50,   50,   50,   44, 2103,  245,   44,   48,  113,   50,
       50,   50,  111,   53,   96,   96,  109,  117, 2103, 2103,
       69,   69,   53,  118,  875,  112,  110,  154,  114,  155,
       70,   70,   70,  115,   33,   20,   21,   21,   20,   22,
       71,   24,   20,   25,   26,   27,   28,   28,   28,   29,
       20,   30,   20,  116,  152,   73,   73,  122,  153,   31,
      876,   71,  163,   48,   32,   50,   50,   50,  119,  123,

      164,  120,  190,   69,   69,   71,   69,   69,  121,   73,
       73,  171,  877,   70,   70,   70,  126,  127,  191,  158,
      128,  128,  128,   71,  159,  160,   71,  179,  172,   33,
       45,   45,  180,  878,   46,   96,   96,   47,   48,   49,
       50,   50,   50,   51,   71,   52,  879,   46,   46,   46,
       46,   46,   46,   53,   46,   46,   46,   46,   54,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   55,
       56,   46,   57,   58,   46,   59,   46,   46,   60,   61,
       62,   46,   46,   46,   46,   63,   64,   65,   66,   67,
       46,   46,   46,   46,   46,  200,  200,  204,  270,  271,

       46,   46,   46,   46,   46,   46, 2103,  214, 2103,  201,
      880,  215,  198,  205,   73,   73,   46,   69,   69,  199,
      881,   46,   48,  225,   50,   50,   50,   70,   70,   70,
      233,  226,   46,   46,   71,   46,   46,   71,   46,   69,
       69,   46,   46,   46,  216,  166,  217,  234,   46,   46,
       46,   46,   46,   74,  248,   71,  174,  249,   71,  167,
       75,  356,  168,  169,  170,  357,  175,   76,  209,  209,
      209,  275,  176,  128,  128,  128,  177,  220,  276,  241,
      277,  882,  221,  222,  242,  340,  341,  312,   77,   78,
       79,   80,   81,   82,   83,  313,   84,   85,  883,   86,

       87,   88,   89,   90,  884,   91,   92,   93,   94,   95,
      130,  131,  132,  133,  134,  135,  136,  892,  137,  138,
      228,  139,  140,  141,  142,  143,  893,  144,  145,  146,
      147,  148,   69,   69,  229,  236,  894,  230,  231,  232,
      288,  288,  128,  128,  128,  237,  254,  200,  200,  316,
      885,  238,  317,  255,  289,  239,  256,  257,  886,  301,
      301,  201,  302,  324,  303,  311,  311,  319,  319,  895,
      325,  345,  896,  326,  327,  209,  209,  209,  346,  513,
      347,  514,  320,  358,  359,  375,  376,  400,  400,  288,
      288,  403,  403,  900,  377,  404,  404,  410,  410,  412,

      412,  401,  492,  289,  575,  301,  301,  901,  302,  405,
      303,  411,  902,  413,  419,  419,  423,  423,  311,  311,
      429,  431,  431,  522,  430,  319,  319,  523,  420,  903,
      424,  438,  438,  448,  448,  904,  432,  453,  454,  493,
      320,  576,  457,  457,  470,  470,  455,  905,  449,  479,
      479,  500,  500,  509,  509,  906,  450,  458,  907,  471,
      501,  596,  510,  597,  480,  635,  502,  636,  511,  515,
      515,  400,  400,  403,  403,  908,  433,  434,  714,  472,
      715,  404,  404,  459,  516,  401,  535,  535,  643,  536,
      722,  537,  539,  539,  481,  405,  410,  410,  544,  544,

      412,  412,  545,  545,  644,  546,  723,  547,  419,  419,
      411,  909,  553,  553,  413,  554,  910,  555,  423,  423,
      558,  558,  420,  559,  911,  560,  561,  561,  431,  431,
      568,  568,  424,  438,  438,  583,  583,  448,  448,  912,
      562,  585,  585,  432,  592,  592,  457,  457,  594,  594,
      584,  913,  449,  598,  598,  603,  603,  914,  607,  593,
      915,  458,  608,  470,  470,  611,  611,  785,  599,  786,
      604,  616,  616,  479,  479,  620,  620,  859,  471,  860,
      500,  500,  918,  641,  641,  605,  617,  919,  480,  501,
      509,  509,  920,  650,  650,  502,  642,  515,  515,  510,

      539,  539,  544,  544,  916,  511,  651,  921,  535,  535,
      917,  536,  516,  537,  545,  545,  924,  546,  925,  547,
      681,  681,  683,  683,  685,  685,  553,  553,  926,  554,
      929,  555,  558,  558,  682,  559,  684,  560,  686,  561,
      561,  694,  694,  930,  695,  931,  696,  697,  697,  702,
      702,  568,  568,  562,  583,  583,  719,  719,  585,  585,
      935,  698,  720,  720,  703,  592,  592,  728,  728,  584,
      594,  594,  598,  598,  732,  732,  946,  721,  733,  733,
      593,  603,  603,  738,  738,  611,  611,  599,  616,  616,
      749,  749,  947,  734,  620,  620,  604,  770,  770,  641,

      641,  775,  793,  617,  948,  776,  794,  735,  779,  779,
      650,  650,  642,  796,  796,  807,  807,  681,  681,  812,
      812,  949,  797,  651,  683,  683,  685,  685,  798,  808,
      850,  682,  813,  813,  851,  814,  953,  815,  684,  954,
      686,  816,  816,  819,  819,  694,  694,  959,  695,  960,
      696,  697,  697,  823,  823,  963,  824,  820,  825,  702,
      702,  829,  829,  844,  844,  698,  719,  719,  720,  720,
      846,  846,  728,  728,  703,  732,  732,  964,  845,  733,
      733,  857,  857,  721,  738,  738,  867,  870,  870,  965,
      868,  873,  873,  966,  734,  749,  749,  887,  888,  889,

      770,  770,  871,  897,  897,  967,  874,  779,  779,  890,
      796,  796,  898,  922,  922,  891,  927,  927,  899,  797,
      807,  807,  936,  936,  968,  798,  923,  977,  932,  932,
      928,  933,  969,  934,  808,  938,  937,  939,  812,  812,
      940,  941,  816,  816,  819,  819,  942,  943,  978,  944,
      813,  813,  945,  814,  979,  815,  950,  950,  820,  951,
      980,  952,  823,  823,  988,  824,  989,  825,  955,  955,
      957,  957,  829,  829,  961,  961,  970,  970,  972,  973,
      974,  981,  981,  956,  990,  958,  844,  844,  991,  962,
      975,  971,  846,  846,  982,  982,  976,  984,  984,  986,

      986,  845,  992,  993,  994,  857,  857,  995,  996,  983,
      997,  998,  985,  999,  987, 1000, 1000, 1003, 1004, 1005,
     1005, 1009, 1010, 1011,  870,  870, 1012, 1012, 1013, 1017,
     1001,  873,  873, 1018, 1006, 1014, 1014, 1015, 1015,  871,
     1019, 1020, 1021, 1022, 1023, 1024,  874, 1007, 1025, 1026,
     1027, 1028, 1016, 1008, 1029, 1030, 1002, 1031, 1032, 1033,
     1034, 1035, 1037, 1036, 1038,  897,  897, 1039, 1040, 1040,
     1042, 1043, 1044, 1045,  898, 1046, 1047, 1048, 1049, 1050,
      899, 1041, 1051, 1052, 1053, 1054, 1055, 1057, 1056, 1058,
     1059, 1060, 1061, 1062, 1062,  922,  922, 1063, 1064, 1065,

      927,  927, 1066, 1066, 1069, 1067, 1070, 1068,  923, 1071,
      932,  932, 1072,  933,  928,  934, 1073, 1074,  936,  936,
     1075, 1075, 1078, 1076, 1079, 1077, 1080, 1081, 1082, 1083,
     1087, 1085,  937, 1089, 1090, 1091,  950,  950, 1092,  951,
     1093,  952,  955,  955, 1094, 1094, 1096, 1084, 1086,  957,
      957, 1097, 1088, 1095, 1095,  961,  961,  956, 1098, 1098,
     1099, 1100, 1101, 1102,  958, 1103, 1104, 1105,  970,  970,
      962, 1106, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
     1114, 1116, 1115,  971,  981,  981,  982,  982, 1117, 1117,
      984,  984, 1118, 1118,  986,  986, 1119, 1119, 1120, 1121,

     1122,  983, 1123, 1124, 1125,  985, 1126, 1127, 1128,  987,
     1129, 1130, 1130, 1132, 1132, 1000, 1000, 1134, 1134, 1135,
     1136, 1137, 1140, 1138, 1005, 1005, 1131, 1141, 1133, 1142,
     1001, 1139, 1139, 1143, 1144, 1012, 1012, 1145, 1149, 1006,
     1014, 1014, 1015, 1015, 1146, 1146, 1147, 1147, 1150, 1151,
     1152, 1153, 1154, 1155, 1156, 1157, 1158, 1016, 1159, 1160,
     1161, 1148, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
     1170, 1170, 1040, 1040, 1171, 1172, 1173, 1174, 1175, 1176,
     1177, 1178, 1179, 1180, 1181, 1041, 1182, 1183, 1184, 1185,
     1186, 1187, 1188, 1189, 1190, 1191, 1062, 1062, 1192, 1193,

     1066, 1066, 1194, 1067, 1195, 1068, 1196, 1197, 1198, 1199,
     1075, 1075, 1200, 1076, 1203, 1077, 1201, 1201, 1204, 1205,
     1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
     1202, 1094, 1094, 1095, 1095, 1216, 1098, 1098, 1217, 1218,
     1219, 1220, 1221, 1222, 1223, 1106, 1106, 1224, 1225, 1226,
     1227, 1228, 1229, 1230, 1231, 1232, 1233, 1117, 1117, 1118,
     1118, 1119, 1119, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
     1241, 1242, 1243, 1130, 1130, 1244, 1244, 1132, 1132, 1245,
     1245, 1134, 1134, 1246, 1247, 1248, 1249, 1250, 1131, 1139,
     1139, 1251, 1133, 1252, 1253, 1254, 1255, 1146, 1146, 1147,

     1147, 1256, 1256, 1257, 1257, 1259, 1260, 1261, 1262, 1263,
     1264, 1265, 1266, 1267, 1148, 1268, 1269, 1270, 1258, 1271,
     1272, 1273, 1274, 1275, 1276, 1277, 1278, 1170, 1170, 1279,
     1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
     1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
     1299, 1301, 1301, 1303, 1303, 1305, 1306, 1306, 1201, 1201,
     1309, 1309, 1310, 1300, 1311, 1302, 1312, 1304, 1313, 1313,
     1307, 1316, 1202, 1317, 1318, 1319, 1319, 1321, 1322, 1322,
     1325, 1328, 1314, 1326, 1326, 1329, 1330, 1331, 1332, 1320,
     1333, 1334, 1323, 1335, 1336, 1337, 1338, 1327, 1339, 1340,

     1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1315,
     1350, 1308, 1351, 1351, 1353, 1354, 1355, 1356, 1357, 1244,
     1244, 1245, 1245, 1324, 1358, 1359, 1360, 1352, 1361, 1362,
     1363, 1363, 1365, 1366, 1367, 1368, 1368, 1256, 1256, 1257,
     1257, 1370, 1370, 1371, 1372, 1364, 1373, 1373, 1376, 1380,
     1369, 1377, 1377, 1381, 1258, 1374, 1382, 1383, 1384, 1385,
     1378, 1375, 1386, 1387, 1388, 1389, 1379, 1390, 1391, 1391,
     1393, 1394, 1395, 1396, 1397, 1397, 1399, 1400, 1401, 1402,
     1403, 1404, 1405, 1392, 1406, 1407, 1408, 1409, 1410, 1398,
     1411, 1299, 1299, 1412, 1412, 1420, 1413, 1421, 1414, 1301,

     1301, 1415, 1415, 1303, 1303, 1300, 1416, 1416, 1417, 1417,
     1306, 1306, 1422, 1302, 1419, 1419, 1423, 1304, 1309, 1309,
     1313, 1313, 1418, 1425, 1307, 1424, 1424, 1426, 1427, 1429,
     1319, 1319, 1430, 1430, 1314, 1431, 1322, 1322, 1432, 1432,
     1433, 1434, 1326, 1326, 1320, 1435, 1435, 1436, 1437, 1437,
     1323, 1439, 1442, 1428, 1440, 1440, 1327, 1443, 1443, 1445,
     1445, 1447, 1450, 1438, 1448, 1448, 1451, 1452, 1453, 1441,
     1454, 1455, 1444, 1456, 1446, 1457, 1458, 1459, 1460, 1449,
     1461, 1461, 1463, 1464, 1351, 1351, 1465, 1465, 1466, 1467,
     1468, 1469, 1470, 1471, 1472, 1462, 1473, 1474, 1478, 1352,

     1475, 1475, 1363, 1363, 1477, 1477, 1479, 1480, 1368, 1368,
     1481, 1481, 1370, 1370, 1482, 1476, 1483, 1364, 1373, 1373,
     1486, 1484, 1484, 1369, 1487, 1488, 1488, 1374, 1377, 1377,
     1490, 1491, 1492, 1375, 1485, 1493, 1494, 1378, 1489, 1495,
     1496, 1497, 1498, 1379, 1499, 1391, 1391, 1500, 1500, 1501,
     1502, 1397, 1397, 1503, 1503, 1504, 1505, 1506, 1507, 1508,
     1392, 1509, 1510, 1511, 1512, 1513, 1398, 1412, 1412, 1514,
     1413, 1515, 1414, 1415, 1415, 1416, 1416, 1417, 1417, 1516,
     1516, 1519, 1517, 1520, 1518, 1419, 1419, 1521, 1521, 1523,
     1524, 1418, 1424, 1424, 1525, 1528, 1529, 1529, 1531, 1430,

     1430, 1522, 1532, 1432, 1432, 1526, 1533, 1534, 1534, 1536,
     1530, 1527, 1435, 1435, 1437, 1437, 1537, 1537, 1538, 1538,
     1541, 1535, 1440, 1440, 1540, 1540, 1443, 1443, 1544, 1438,
     1542, 1542, 1546, 1539, 1445, 1445, 1547, 1441, 1543, 1543,
     1548, 1444, 1448, 1448, 1545, 1545, 1549, 1550, 1551, 1446,
     1552, 1553, 1554, 1554, 1556, 1557, 1557, 1449, 1461, 1461,
     1559, 1559, 1560, 1560, 1562, 1465, 1465, 1555, 1563, 1563,
     1558, 1565, 1565, 1462, 1567, 1567, 1569, 1561, 1570, 1571,
     1572, 1573, 1574, 1564, 1475, 1475, 1566, 1575, 1575, 1568,
     1477, 1477, 1576, 1576, 1579, 1580, 1481, 1481, 1581, 1476,

     1582, 1582, 1484, 1484, 1583, 1584, 1587, 1577, 1586, 1586,
     1488, 1488, 1588, 1585, 1589, 1485, 1590, 1591, 1592, 1593,
     1594, 1595, 1596, 1489, 1500, 1500, 1597, 1503, 1503, 1598,
     1599, 1600, 1601, 1602, 1603, 1604, 1605, 1516, 1516, 1606,
     1517, 1607, 1518, 1521, 1521, 1608, 1608, 1578, 1609, 1609,
     1611, 1612, 1613, 1615, 1616, 1529, 1529, 1522, 1617, 1617,
     1618, 1619, 1610, 1620, 1534, 1534, 1614, 1621, 1621, 1530,
     1622, 1624, 1623, 1537, 1537, 1538, 1538, 1626, 1535, 1625,
     1625, 1540, 1540, 1542, 1542, 1627, 1543, 1543, 1628, 1628,
     1539, 1545, 1545, 1630, 1631, 1632, 1633, 1634, 1635, 1636,

     1637, 1554, 1554, 1629, 1638, 1638, 1639, 1557, 1557, 1640,
     1640, 1559, 1559, 1560, 1560, 1647, 1555, 1641, 1641, 1642,
     1642, 1648, 1558, 1563, 1563, 1644, 1644, 1649, 1561, 1565,
     1565, 1645, 1645, 1650, 1643, 1567, 1567, 1651, 1564, 1646,
     1646, 1652, 1652, 1657, 1566, 1575, 1575, 1576, 1576, 1658,
     1568, 1654, 1654, 1655, 1655, 1659, 1653, 1582, 1582, 1660,
     1661, 1662, 1577, 1586, 1586, 1663, 1664, 1665, 1656, 1666,
     1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676,
     1677, 1678, 1679, 1680, 1681, 1682, 1608, 1608, 1609, 1609,
     1683, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1617, 1617,

     1690, 1691, 1610, 1692, 1621, 1621, 1693, 1622, 1694, 1623,
     1625, 1625, 1695, 1628, 1628, 1696, 1696, 1697, 1698, 1699,
     1700, 1701, 1702, 1703, 1704, 1638, 1638, 1705, 1629, 1640,
     1640, 1641, 1641, 1642, 1642, 1706, 1706, 1644, 1644, 1645,
     1645, 1646, 1646, 1707, 1708, 1709, 1710, 1711, 1643, 1652,
     1652, 1712, 1712, 1654, 1654, 1655, 1655, 1713, 1713, 1714,
     1714, 1716, 1717, 1718, 1653, 1719, 1720, 1721, 1722, 1723,
     1656, 1724, 1725, 1726, 1715, 1727, 1728, 1729, 1730, 1731,
     1732, 1733, 1734, 1735, 1736, 1737, 1737, 1739, 1740, 1683,
     1683, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,

     1738, 1750, 1751, 1752, 1696, 1696, 1753, 1754, 1755, 1756,
     1757, 1758, 1759, 1760, 1761, 1706, 1706, 1762, 1763, 1764,
     1764, 1766, 1767, 1712, 1712, 1713, 1713, 1714, 1714, 1768,
     1768, 1769, 1770, 1771, 1765, 1772, 1773, 1774, 1775, 1776,
     1777, 1779, 1715, 1780, 1781, 1782, 1783, 1784, 1785, 1786,
     1787, 1737, 1737, 1788, 1788, 1789, 1790, 1791, 1778, 1792,
     1793, 1794, 1795, 1796, 1796, 1800, 1738, 1798, 1798, 1801,
     1801, 1803, 1803, 1805, 1806, 1807, 1808, 1797, 1809, 1810,
     1812, 1799, 1813, 1802, 1814, 1814, 1804, 1816, 1816, 1818,
     1819, 1820, 1764, 1764, 1821, 1821, 1822, 1811, 1823, 1815,

     1768, 1768, 1817, 1824, 1825, 1826, 1827, 1765, 1828, 1829,
     1830, 1831, 1832, 1833, 1834, 1835, 1835, 1837, 1838, 1839,
     1840, 1788, 1788, 1841, 1842, 1843, 1843, 1845, 1846, 1847,
     1836, 1848, 1796, 1796, 1849, 1849, 1798, 1798, 1851, 1844,
     1850, 1850, 1801, 1801, 1852, 1852, 1797, 1803, 1803, 1854,
     1799, 1853, 1853, 1855, 1855, 1857, 1802, 1858, 1859, 1859,
     1861, 1862, 1804, 1863, 1864, 1814, 1814, 1867, 1856, 1865,
     1865, 1816, 1816, 1860, 1866, 1866, 1868, 1869, 1869, 1871,
     1815, 1821, 1821, 1872, 1873, 1874, 1817, 1875, 1876, 1877,
     1878, 1879, 1870, 1880, 1881, 1882, 1835, 1835, 1883, 1883,

     1884, 1885, 1886, 1887, 1887, 1889, 1843, 1843, 1890, 1890,
     1891, 1836, 1892, 1893, 1894, 1849, 1849, 1888, 1850, 1850,
     1844, 1895, 1852, 1852, 1853, 1853, 1896, 1855, 1855, 1897,
     1897, 1898, 1898, 1900, 1859, 1859, 1901, 1901, 1902, 1903,
     1904, 1905, 1856, 1865, 1865, 1906, 1899, 1866, 1866, 1860,
     1907, 1869, 1869, 1908, 1908, 1909, 1909, 1911, 1912, 1913,
     1914, 1915, 1916, 1917, 1918, 1919, 1870, 1920, 1883, 1883,
     1910, 1921, 1922, 1887, 1887, 1923, 1923, 1924, 1924, 1890,
     1890, 1926, 1927, 1928, 1928, 1930, 1931, 1888, 1932, 1932,
     1935, 1925, 1897, 1897, 1898, 1898, 1936, 1929, 1934, 1934,

     1901, 1901, 1937, 1933, 1938, 1939, 1940, 1941, 1945, 1899,
     1908, 1908, 1909, 1909, 1942, 1942, 1943, 1943, 1946, 1947,
     1948, 1949, 1950, 1951, 1952, 1953, 1954, 1910, 1955, 1923,
     1923, 1944, 1924, 1924, 1956, 1956, 1957, 1958, 1928, 1928,
     1959, 1959, 1960, 1961, 1961, 1964, 1925, 1932, 1932, 1963,
     1963, 1965, 1929, 1934, 1934, 1966, 1967, 1962, 1968, 1969,
     1970, 1972, 1933, 1942, 1942, 1943, 1943, 1971, 1971, 1973,
     1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983,
     1944, 1956, 1956, 1984, 1959, 1959, 1985, 1961, 1961, 1986,
     1986, 1963, 1963, 1987, 1988, 1989, 1990, 1990, 1993, 1994,

     1995, 1962, 1971, 1971, 1996, 1997, 1998, 1999, 2000, 2001,
     2002, 1991, 2003, 2004, 2005, 2006, 1986, 1986, 2007, 2008,
     2008, 2010, 2010, 1990, 1990, 2012, 2012, 2013, 1992, 2014,
     2014, 2016, 2017, 2018, 2009, 2019, 2011, 2020, 1991, 2021,
     2022, 2023, 2024, 2025, 2015, 2026, 2027, 2027, 2008, 2008,
     2029, 2029, 2010, 2010, 2030, 2030, 2012, 2012, 2031, 2014,
     2014, 2028, 2033, 2009, 2032, 2032, 2036, 2011, 2034, 2034,
     2037, 2038, 2039, 2040, 2015, 2041, 2042, 2043, 2044, 2027,
     2027, 2045, 2045, 2035, 2029, 2029, 2030, 2030, 2046, 2032,
     2032, 2047, 2034, 2034, 2028, 2048, 2048, 2049, 2050, 2050,

     2052, 2052, 2054, 2055, 2056, 2057, 2058, 2035, 2059, 2045,
     2045, 2060, 2061, 2051, 2062, 2053, 2048, 2048, 2050, 2050,
     2063, 2063, 2052, 2052, 2064, 2064, 2065, 2066, 2067, 2068,
     2069, 2070, 2071, 2051, 2072, 2073, 2074, 2053, 2063, 2063,
     2064, 2064, 2075, 2076, 2077, 2077, 2079, 2079, 2081, 2082,
     2082, 2084, 2085, 2086, 2086, 2077, 2077, 2090, 2078, 2088,
     2088, 2080, 2079, 2079, 2083, 2089, 2089, 2087, 2092, 2078,
     2082, 2082, 2091, 2091, 2093, 2093, 2096, 2080, 2086, 2086,
     2095, 2095, 2088, 2088, 2097, 2083, 2089, 2089, 2094, 2091,
     2091, 2099, 2087, 2093, 2093, 2098, 2098, 2095, 2095, 2098,

     2098, 2100, 2100, 2100, 2100, 2102, 2102, 2094, 2102, 2102,
      872,  869,  866,  865,  864,  863, 2101,  862, 2101,   23,
       23,   23,   23,   23,   34,   34,   34,   34,   34,   36,
       36,   36,   36,   36,   37,   37,   37,   37,   37,   35,
       35,   35,   35,   35,   38,   38,   38,   38,   38,   39,
       39,   39,   39,   39,   42,   42,   42,   42,   42,   99,
       99,   99,   99,  100,  861,  100,  100,  100,  101,  101,
      858,  101,  101,  102,  102,  102,  856,  102,  855,  854,
      853,  852,  849,  848,  847,  843,  842,  841,  840,  839,
      838,  837,  836,  835,  834,  833,  832,  831,  830,  828,

      827,  826,  822,  821,  818,  817,  811,  810,  809,  806,
      805,  804,  803,  802,  801,  800,  799,  795,  792,  791,
      790,  789,  788,  787,  784,  783,  782,  781,  780,  778,
      777,  774,  773,  772,  771,  769,  768,  767,  766,  765,
      764,  763,  762,  761,  760,  759,  758,  757,  756,  755,
      754,  753,  752,  751,  750,  748,  747,  746,  745,  744,
      743,  742,  741,  740,  739,  737,  736,  731,  730,  729,
      727,  726,  725,  724,  718,  717,  716,  713,  712,  711,
      710,  709,  708,  707,  706,  705,  704,  701,  700,  699,
      693,  692,  691,  690,  689,  688,  687,  680,  679,  678,

      677,  676,  675,  674,  673,  672,  671,  670,  669,  668,
      667,  666,  665,  664,  663,  662,  661,  660,  659,  658,
      657,  656,  655,  654,  653,  652,  649,  648,  647,  646,
      645,  640,  639,  638,  637,  634,  633,  632,  631,  630,
      629,  628,  627,  626,  625,  624,  623,  622,  621,  619,
      618,  615,  614,  613,  612,  610,  609,  606,  602,  601,
      600,  595,  591,  590,  589,  588,  587,  586,  582,  581,
      580,  579,  578,  577,  574,  573,  572,  571,  570,  569,
      567,  566,  565,  564,  563,  557,  556,  552,  551,  550,
      549,  548,  543,  542,  541,  540,  538,  534,  533,  532,

      531,  530,  529,  528,  527,  526,  525,  524,  521,  520,
      519,  518,  517,  512,  508,  507,  506,  505,  504,  503,
      499,  498,  497,  496,  495,  494,  491,  490,  489,  488,
      487,  486,  485,  484,  483,  482,  478,  477,  476,  475,
      474,  473,  469,  468,  467,  466,  465,  464,  463,  462,
      461,  460,  456,  452,  451,  447,  446,  445,  444,  443,
      442,  441,  440,  439,  437,  436,  435,  428,  427,  426,
      425,  422,  421,  418,  417,  416,  415,  414,  409,  408,
      407,  406,  402,  399,  398,  397,  396,  395,  394,  393,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,

      382,  381,  380,  379,  378,  374,  373,  372,  371,  370,
      369,  368,  367,  366,  365,  364,  363,  362,  361,  360,
      355,  354,  353,  352,  351,  350,  349,  348,  344,  343,
      342,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  323,  322,  321,  318,  315,  314,  310,
      309,  308,  307,  306,  305,  304,  300,  299,  298,  297,
      296,  295,  294,  293,  292,  291,  290,  287,  286,  285,
      284,  283,  282,  281,  280,  279,  278,  274,  273,  272,
      269,  268,  267,  266,  265,  264,  263,  262,  261,  260,
      259,  258,  253,  252,  251,  250,  247,  246,  243,  240,

      235,  227,  224,  223,  219,  218,  213,  212,  211,  210,
      208,  207,  206,  203,  202,  197,  196,  195,  194,  193,
      192,  189,  188,  187,  186,  185,  184,  183,  182,  182,
      181,  178,  173,  165,  162,  161,  157,  156,  151,  150,
      149,  129,  125,  124,  108,  107,  106,  105,   98,   97,
       72,  104,  103,   98,   97,   72,   68,   68, 2103,   35,
       35,   35,   35,   35,   35,   35,   35,   19, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,

     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103
    } ;

static yyconst flex_int16_t yy_chk[3334] =
    {   0,
        1,    1,    1,    1,    1,    0,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   17,   15,
       16,   18,   30,   30,    1,   15,   16,  149,   25,    1,
       25,   25,   25,   17,   51,  149,   18,   47,   61,   47,
       47,   47,   60,   25,   52,   52,   59,   63,   51,    0,
       26,   26,   47,   63,  750,   60,   59,   81,   61,   81,
       26,   26,   26,   62,    1,    2,    2,    2,    2,    2,
       26,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,   62,   80,   28,   28,   65,   80,    2,
      751,   26,   87,   28,    2,   28,   28,   28,   64,   65,

       87,   64,  111,   48,   48,   28,   69,   69,   64,   73,
       73,   90,  752,   48,   48,   48,   71,   71,  111,   84,
       71,   71,   71,   48,   84,   84,   28,   94,   90,    2,
       21,   21,   94,  755,   21,   96,   96,   21,   21,   21,
       21,   21,   21,   21,   48,   21,  756,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   23,   23,  119,  119,  122,  171,  171,

       23,   23,   23,   23,   23,   23,   23,  133,   23,  119,
      758,  133,  118,  122,   50,   50,   23,   70,   70,  118,
      759,   23,   50,  140,   50,   50,   50,   70,   70,   70,
      143,  140,   23,   23,   50,   23,   23,   70,   23,  182,
      182,   23,   23,   23,  134,   89,  134,  143,   23,   23,
       23,   23,   23,   29,  152,   50,   92,  152,   70,   89,
       29,  246,   89,   89,   89,  246,   92,   29,  126,  126,
      126,  175,   92,  127,  127,  127,   92,  137,  175,  147,
      175,  760,  137,  137,  147,  233,  233,  211,   29,   29,
       29,   29,   29,   29,   29,  211,   29,   29,  761,   29,

       29,   29,   29,   29,  762,   29,   29,   29,   29,   29,
       75,   75,   75,   75,   75,   75,   75,  766,   75,   75,
      142,   75,   75,   75,   75,   75,  767,   75,   75,   75,
       75,   75,  128,  128,  142,  145,  768,  142,  142,  142,
      188,  188,  128,  128,  128,  145,  158,  200,  200,  214,
      763,  145,  214,  158,  188,  145,  158,  158,  763,  201,
      201,  200,  201,  220,  201,  209,  209,  216,  216,  769,
      220,  237,  771,  220,  220,  209,  209,  209,  237,  380,
      237,  380,  216,  247,  247,  263,  263,  286,  286,  288,
      288,  289,  289,  775,  263,  290,  290,  295,  295,  296,

      296,  286,  364,  288,  440,  301,  301,  776,  301,  290,
      301,  295,  777,  296,  305,  305,  308,  308,  311,  311,
      314,  315,  315,  387,  314,  319,  319,  387,  305,  778,
      308,  320,  320,  330,  330,  780,  315,  333,  333,  364,
      319,  440,  335,  335,  346,  346,  333,  781,  330,  353,
      353,  371,  371,  378,  378,  782,  330,  335,  783,  346,
      371,  460,  378,  460,  353,  496,  371,  496,  378,  381,
      381,  400,  400,  403,  403,  784,  315,  315,  579,  346,
      579,  404,  404,  335,  381,  400,  401,  401,  504,  401,
      587,  401,  405,  405,  353,  404,  410,  410,  411,  411,

      412,  412,  413,  413,  504,  413,  587,  413,  419,  419,
      410,  785,  420,  420,  412,  420,  786,  420,  423,  423,
      424,  424,  419,  424,  787,  424,  425,  425,  431,  431,
      432,  432,  423,  438,  438,  447,  447,  448,  448,  788,
      425,  449,  449,  431,  456,  456,  457,  457,  458,  458,
      447,  789,  448,  461,  461,  465,  465,  790,  467,  456,
      791,  457,  467,  470,  470,  471,  471,  656,  461,  656,
      465,  476,  476,  479,  479,  480,  480,  736,  470,  736,
      500,  500,  793,  502,  502,  465,  476,  794,  479,  500,
      509,  509,  795,  511,  511,  500,  502,  515,  515,  509,

      539,  539,  544,  544,  792,  509,  511,  797,  535,  535,
      792,  535,  515,  535,  545,  545,  799,  545,  801,  545,
      549,  549,  550,  550,  551,  551,  553,  553,  802,  553,
      804,  553,  558,  558,  549,  558,  550,  558,  551,  561,
      561,  562,  562,  805,  562,  806,  562,  563,  563,  567,
      567,  568,  568,  561,  583,  583,  584,  584,  585,  585,
      809,  563,  586,  586,  567,  592,  592,  593,  593,  583,
      594,  594,  598,  598,  599,  599,  814,  586,  600,  600,
      592,  603,  603,  604,  604,  611,  611,  598,  616,  616,
      617,  617,  815,  600,  620,  620,  603,  640,  640,  641,

      641,  646,  663,  616,  817,  646,  663,  600,  649,  649,
      650,  650,  641,  665,  665,  675,  675,  681,  681,  682,
      682,  818,  665,  650,  683,  683,  685,  685,  665,  675,
      725,  681,  684,  684,  725,  684,  824,  684,  683,  825,
      685,  686,  686,  691,  691,  694,  694,  828,  694,  830,
      694,  697,  697,  698,  698,  832,  698,  691,  698,  702,
      702,  703,  703,  718,  718,  697,  719,  719,  720,  720,
      721,  721,  728,  728,  702,  732,  732,  833,  718,  733,
      733,  734,  734,  720,  738,  738,  744,  746,  746,  834,
      744,  748,  748,  835,  733,  749,  749,  765,  765,  765,

      770,  770,  746,  772,  772,  836,  748,  779,  779,  765,
      796,  796,  772,  798,  798,  765,  803,  803,  772,  796,
      807,  807,  810,  810,  837,  796,  798,  840,  808,  808,
      803,  808,  837,  808,  807,  811,  810,  811,  812,  812,
      811,  811,  816,  816,  819,  819,  811,  811,  841,  811,
      813,  813,  811,  813,  842,  813,  820,  820,  819,  820,
      843,  820,  823,  823,  850,  823,  851,  823,  826,  826,
      827,  827,  829,  829,  831,  831,  838,  838,  839,  839,
      839,  845,  845,  826,  852,  827,  844,  844,  853,  831,
      839,  838,  846,  846,  847,  847,  839,  848,  848,  849,

      849,  844,  854,  855,  856,  857,  857,  858,  859,  847,
      860,  861,  848,  862,  849,  863,  863,  864,  865,  866,
      866,  867,  868,  869,  870,  870,  871,  871,  872,  876,
      863,  873,  873,  877,  866,  874,  874,  875,  875,  870,
      878,  879,  880,  881,  882,  883,  873,  866,  884,  885,
      886,  887,  875,  866,  888,  889,  863,  890,  891,  892,
      893,  894,  895,  894,  896,  897,  897,  898,  899,  899,
      900,  901,  902,  903,  897,  904,  905,  906,  907,  908,
      897,  899,  909,  910,  913,  914,  915,  916,  915,  917,
      918,  919,  920,  921,  921,  922,  922,  923,  924,  926,

      927,  927,  928,  928,  929,  928,  930,  928,  922,  931,
      932,  932,  933,  932,  927,  932,  934,  935,  936,  936,
      937,  937,  938,  937,  939,  937,  939,  940,  941,  942,
      944,  943,  936,  945,  948,  949,  950,  950,  951,  950,
      952,  950,  955,  955,  956,  956,  959,  942,  943,  957,
      957,  960,  944,  958,  958,  961,  961,  955,  962,  962,
      963,  964,  965,  966,  957,  967,  968,  969,  970,  970,
      961,  971,  971,  972,  973,  974,  975,  976,  977,  978,
      979,  980,  979,  970,  981,  981,  982,  982,  983,  983,
      984,  984,  985,  985,  986,  986,  987,  987,  988,  989,

      990,  982,  991,  992,  993,  984,  994,  995,  996,  986,
      997,  998,  998,  999,  999, 1000, 1000, 1001, 1001, 1002,
     1003, 1004, 1007, 1004, 1005, 1005,  998, 1008,  999, 1009,
     1000, 1006, 1006, 1010, 1011, 1012, 1012, 1013, 1018, 1005,
     1014, 1014, 1015, 1015, 1016, 1016, 1017, 1017, 1019, 1020,
     1021, 1022, 1023, 1024, 1025, 1026, 1027, 1015, 1028, 1029,
     1030, 1017, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
     1039, 1039, 1040, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
     1047, 1048, 1049, 1050, 1051, 1040, 1052, 1053, 1054, 1055,
     1056, 1057, 1058, 1059, 1060, 1061, 1062, 1062, 1063, 1064,

     1066, 1066, 1067, 1066, 1068, 1066, 1069, 1070, 1071, 1074,
     1075, 1075, 1078, 1075, 1080, 1075, 1079, 1079, 1081, 1082,
     1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1096,
     1079, 1094, 1094, 1095, 1095, 1097, 1098, 1098, 1099, 1100,
     1101, 1102, 1103, 1104, 1105, 1106, 1106, 1107, 1108, 1109,
     1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1117, 1118,
     1118, 1119, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
     1127, 1128, 1129, 1130, 1130, 1131, 1131, 1132, 1132, 1133,
     1133, 1134, 1134, 1135, 1136, 1137, 1138, 1140, 1130, 1139,
     1139, 1141, 1132, 1142, 1143, 1144, 1145, 1146, 1146, 1147,

     1147, 1148, 1148, 1149, 1149, 1150, 1151, 1152, 1153, 1154,
     1155, 1156, 1157, 1158, 1147, 1159, 1160, 1161, 1149, 1162,
     1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1170, 1171,
     1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182,
     1183, 1184, 1185, 1186, 1187, 1189, 1190, 1191, 1192, 1196,
     1196, 1197, 1197, 1198, 1198, 1199, 1200, 1200, 1201, 1201,
     1202, 1202, 1203, 1196, 1204, 1197, 1205, 1198, 1206, 1206,
     1200, 1207, 1201, 1208, 1209, 1210, 1210, 1211, 1212, 1212,
     1213, 1215, 1206, 1214, 1214, 1216, 1217, 1218, 1219, 1210,
     1220, 1221, 1212, 1222, 1223, 1224, 1225, 1214, 1226, 1227,

     1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1206,
     1237, 1200, 1238, 1238, 1239, 1240, 1241, 1242, 1243, 1244,
     1244, 1245, 1245, 1212, 1246, 1247, 1248, 1238, 1249, 1250,
     1251, 1251, 1252, 1253, 1254, 1255, 1255, 1256, 1256, 1257,
     1257, 1258, 1258, 1259, 1261, 1251, 1262, 1262, 1263, 1266,
     1255, 1265, 1265, 1268, 1257, 1262, 1269, 1270, 1271, 1272,
     1265, 1262, 1273, 1274, 1275, 1276, 1265, 1277, 1278, 1278,
     1279, 1280, 1282, 1283, 1284, 1284, 1285, 1286, 1287, 1288,
     1289, 1290, 1291, 1278, 1292, 1293, 1295, 1296, 1297, 1284,
     1298, 1299, 1299, 1300, 1300, 1308, 1300, 1310, 1300, 1301,

     1301, 1302, 1302, 1303, 1303, 1299, 1304, 1304, 1305, 1305,
     1306, 1306, 1311, 1301, 1307, 1307, 1312, 1303, 1309, 1309,
     1313, 1313, 1305, 1315, 1306, 1314, 1314, 1316, 1317, 1318,
     1319, 1319, 1320, 1320, 1313, 1321, 1322, 1322, 1323, 1323,
     1324, 1325, 1326, 1326, 1319, 1327, 1327, 1328, 1329, 1329,
     1322, 1330, 1332, 1317, 1331, 1331, 1326, 1333, 1333, 1334,
     1334, 1335, 1337, 1329, 1336, 1336, 1338, 1339, 1340, 1331,
     1341, 1342, 1333, 1343, 1334, 1344, 1345, 1346, 1347, 1336,
     1348, 1348, 1349, 1350, 1351, 1351, 1352, 1352, 1353, 1354,
     1355, 1356, 1357, 1358, 1359, 1348, 1360, 1361, 1365, 1351,

     1362, 1362, 1363, 1363, 1364, 1364, 1366, 1367, 1368, 1368,
     1369, 1369, 1370, 1370, 1371, 1362, 1374, 1363, 1373, 1373,
     1376, 1375, 1375, 1368, 1378, 1379, 1379, 1373, 1377, 1377,
     1380, 1381, 1382, 1373, 1375, 1383, 1384, 1377, 1379, 1385,
     1386, 1387, 1388, 1377, 1390, 1391, 1391, 1392, 1392, 1393,
     1396, 1397, 1397, 1398, 1398, 1402, 1403, 1404, 1405, 1406,
     1391, 1407, 1408, 1409, 1410, 1411, 1397, 1412, 1412, 1413,
     1412, 1414, 1412, 1415, 1415, 1416, 1416, 1417, 1417, 1418,
     1418, 1420, 1418, 1421, 1418, 1419, 1419, 1422, 1422, 1423,
     1425, 1417, 1424, 1424, 1426, 1427, 1428, 1428, 1429, 1430,

     1430, 1422, 1431, 1432, 1432, 1426, 1433, 1434, 1434, 1436,
     1428, 1426, 1435, 1435, 1437, 1437, 1438, 1438, 1439, 1439,
     1442, 1434, 1440, 1440, 1441, 1441, 1443, 1443, 1447, 1437,
     1444, 1444, 1450, 1439, 1445, 1445, 1451, 1440, 1446, 1446,
     1452, 1443, 1448, 1448, 1449, 1449, 1453, 1454, 1455, 1445,
     1456, 1457, 1458, 1458, 1459, 1460, 1460, 1448, 1461, 1461,
     1462, 1462, 1463, 1463, 1464, 1465, 1465, 1458, 1466, 1466,
     1460, 1467, 1467, 1461, 1468, 1468, 1469, 1463, 1470, 1471,
     1472, 1473, 1474, 1466, 1475, 1475, 1467, 1476, 1476, 1468,
     1477, 1477, 1478, 1478, 1479, 1480, 1481, 1481, 1482, 1475,

     1483, 1483, 1484, 1484, 1485, 1486, 1489, 1478, 1487, 1487,
     1488, 1488, 1491, 1486, 1492, 1484, 1493, 1494, 1495, 1496,
     1497, 1498, 1499, 1488, 1500, 1500, 1501, 1503, 1503, 1504,
     1505, 1506, 1507, 1508, 1511, 1512, 1513, 1516, 1516, 1519,
     1516, 1520, 1516, 1521, 1521, 1522, 1522, 1478, 1523, 1523,
     1524, 1525, 1526, 1527, 1528, 1529, 1529, 1521, 1530, 1530,
     1531, 1532, 1523, 1533, 1534, 1534, 1526, 1535, 1535, 1529,
     1535, 1536, 1535, 1537, 1537, 1538, 1538, 1541, 1534, 1539,
     1539, 1540, 1540, 1542, 1542, 1541, 1543, 1543, 1544, 1544,
     1538, 1545, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,

     1553, 1554, 1554, 1544, 1555, 1555, 1556, 1557, 1557, 1558,
     1558, 1559, 1559, 1560, 1560, 1569, 1554, 1561, 1561, 1562,
     1562, 1570, 1557, 1563, 1563, 1564, 1564, 1571, 1560, 1565,
     1565, 1566, 1566, 1572, 1562, 1567, 1567, 1573, 1563, 1568,
     1568, 1574, 1574, 1579, 1565, 1575, 1575, 1576, 1576, 1580,
     1567, 1577, 1577, 1578, 1578, 1581, 1574, 1582, 1582, 1583,
     1584, 1585, 1576, 1586, 1586, 1587, 1588, 1589, 1578, 1590,
     1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
     1601, 1602, 1604, 1605, 1606, 1607, 1608, 1608, 1609, 1609,
     1610, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1617,

     1618, 1619, 1609, 1620, 1621, 1621, 1624, 1621, 1626, 1621,
     1625, 1625, 1627, 1628, 1628, 1629, 1629, 1630, 1631, 1632,
     1633, 1634, 1635, 1636, 1637, 1638, 1638, 1639, 1628, 1640,
     1640, 1641, 1641, 1642, 1642, 1643, 1643, 1644, 1644, 1645,
     1645, 1646, 1646, 1647, 1648, 1649, 1650, 1651, 1642, 1652,
     1652, 1653, 1653, 1654, 1654, 1655, 1655, 1656, 1656, 1657,
     1657, 1658, 1659, 1660, 1652, 1661, 1662, 1663, 1664, 1665,
     1655, 1666, 1667, 1668, 1657, 1669, 1670, 1671, 1672, 1673,
     1674, 1675, 1677, 1678, 1679, 1680, 1680, 1681, 1682, 1683,
     1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692,

     1680, 1693, 1694, 1695, 1696, 1696, 1697, 1698, 1699, 1700,
     1701, 1702, 1703, 1704, 1705, 1706, 1706, 1707, 1708, 1709,
     1709, 1710, 1711, 1712, 1712, 1713, 1713, 1714, 1714, 1715,
     1715, 1716, 1718, 1719, 1709, 1720, 1721, 1722, 1723, 1724,
     1725, 1726, 1714, 1727, 1730, 1731, 1732, 1733, 1734, 1735,
     1736, 1737, 1737, 1738, 1738, 1739, 1740, 1741, 1725, 1742,
     1743, 1744, 1745, 1746, 1746, 1748, 1737, 1747, 1747, 1749,
     1749, 1750, 1750, 1751, 1752, 1753, 1754, 1746, 1755, 1756,
     1757, 1747, 1758, 1749, 1759, 1759, 1750, 1760, 1760, 1761,
     1762, 1763, 1764, 1764, 1765, 1765, 1766, 1756, 1767, 1759,

     1768, 1768, 1760, 1769, 1770, 1771, 1773, 1764, 1774, 1775,
     1777, 1778, 1779, 1780, 1781, 1782, 1782, 1783, 1785, 1786,
     1787, 1788, 1788, 1789, 1790, 1791, 1791, 1792, 1793, 1794,
     1782, 1795, 1796, 1796, 1797, 1797, 1798, 1798, 1800, 1791,
     1799, 1799, 1801, 1801, 1802, 1802, 1796, 1803, 1803, 1805,
     1798, 1804, 1804, 1806, 1806, 1807, 1801, 1808, 1809, 1809,
     1810, 1811, 1803, 1812, 1813, 1814, 1814, 1818, 1806, 1815,
     1815, 1816, 1816, 1809, 1817, 1817, 1819, 1820, 1820, 1822,
     1814, 1821, 1821, 1823, 1824, 1825, 1816, 1826, 1827, 1829,
     1830, 1831, 1820, 1832, 1833, 1834, 1835, 1835, 1836, 1836,

     1837, 1839, 1840, 1841, 1841, 1842, 1843, 1843, 1844, 1844,
     1845, 1835, 1846, 1847, 1848, 1849, 1849, 1841, 1850, 1850,
     1843, 1851, 1852, 1852, 1853, 1853, 1854, 1855, 1855, 1856,
     1856, 1857, 1857, 1858, 1859, 1859, 1860, 1860, 1861, 1862,
     1863, 1864, 1855, 1865, 1865, 1867, 1857, 1866, 1866, 1859,
     1868, 1869, 1869, 1870, 1870, 1871, 1871, 1872, 1873, 1874,
     1876, 1877, 1878, 1879, 1880, 1881, 1869, 1882, 1883, 1883,
     1871, 1884, 1886, 1887, 1887, 1888, 1888, 1889, 1889, 1890,
     1890, 1891, 1892, 1893, 1893, 1894, 1895, 1887, 1896, 1896,
     1900, 1889, 1897, 1897, 1898, 1898, 1902, 1893, 1899, 1899,

     1901, 1901, 1903, 1896, 1904, 1905, 1906, 1907, 1912, 1898,
     1908, 1908, 1909, 1909, 1910, 1910, 1911, 1911, 1913, 1914,
     1915, 1916, 1917, 1918, 1919, 1920, 1921, 1909, 1922, 1923,
     1923, 1911, 1924, 1924, 1925, 1925, 1926, 1927, 1928, 1928,
     1929, 1929, 1930, 1931, 1931, 1935, 1924, 1932, 1932, 1933,
     1933, 1936, 1928, 1934, 1934, 1937, 1938, 1931, 1939, 1940,
     1941, 1945, 1932, 1942, 1942, 1943, 1943, 1944, 1944, 1946,
     1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1957,
     1943, 1956, 1956, 1958, 1959, 1959, 1960, 1961, 1961, 1962,
     1962, 1963, 1963, 1964, 1965, 1966, 1967, 1967, 1968, 1969,

     1970, 1961, 1971, 1971, 1972, 1973, 1974, 1975, 1978, 1980,
     1981, 1967, 1982, 1983, 1984, 1985, 1986, 1986, 1987, 1988,
     1988, 1989, 1989, 1990, 1990, 1991, 1991, 1992, 1967, 1993,
     1993, 1994, 1995, 1996, 1988, 1997, 1989, 1998, 1990, 2000,
     2001, 2003, 2004, 2005, 1993, 2006, 2007, 2007, 2008, 2008,
     2009, 2009, 2010, 2010, 2011, 2011, 2012, 2012, 2013, 2014,
     2014, 2007, 2016, 2008, 2015, 2015, 2018, 2010, 2017, 2017,
     2019, 2020, 2021, 2022, 2014, 2023, 2024, 2025, 2026, 2027,
     2027, 2028, 2028, 2017, 2029, 2029, 2030, 2030, 2031, 2032,
     2032, 2033, 2034, 2034, 2027, 2035, 2035, 2036, 2037, 2037,

     2038, 2038, 2039, 2040, 2041, 2042, 2043, 2034, 2044, 2045,
     2045, 2046, 2047, 2037, 2049, 2038, 2048, 2048, 2050, 2050,
     2051, 2051, 2052, 2052, 2053, 2053, 2054, 2055, 2056, 2057,
     2058, 2059, 2060, 2050, 2061, 2062, 2066, 2052, 2063, 2063,
     2064, 2064, 2068, 2069, 2070, 2070, 2071, 2071, 2072, 2073,
     2073, 2074, 2075, 2076, 2076, 2077, 2077, 2081, 2070, 2078,
     2078, 2071, 2079, 2079, 2073, 2080, 2080, 2076, 2084, 2077,
     2082, 2082, 2083, 2083, 2085, 2085, 2090, 2079, 2086, 2086,
     2087, 2087, 2088, 2088, 2092, 2082, 2089, 2089, 2085, 2091,
     2091, 2096, 2086, 2093, 2093, 2094, 2094, 2095, 2095, 2098,

     2098, 2099, 2099, 2100, 2100, 2101, 2101, 2093, 2102, 2102,
      747,  745,  743,  742,  741,  740, 2099,  739, 2100, 2104,
     2104, 2104, 2104, 2104, 2105, 2105, 2105, 2105, 2105, 2106,
     2106, 2106, 2106, 2106, 2107, 2107, 2107, 2107, 2107, 2108,
     2108, 2108, 2108, 2108, 2109, 2109, 2109, 2109, 2109, 2110,
     2110, 2110, 2110, 2110, 2111, 2111, 2111, 2111, 2111, 2112,
     2112, 2112, 2112, 2113,  737, 2113, 2113, 2113, 2114, 2114,
      735, 2114, 2114, 2115, 2115, 2115,  731, 2115,  730,  729,
      727,  726,  724,  723,  722,  717,  716,  715,  714,  713,
      712,  711,  710,  709,  708,  707,  706,  705,  704,  701,

      700,  699,  696,  695,  690,  687,  680,  677,  676,  674,
      673,  672,  671,  670,  669,  668,  666,  664,  662,  661,
      660,  659,  658,  657,  655,  654,  653,  652,  651,  648,
      647,  645,  644,  643,  642,  638,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  628,  627,  626,  625,  624,
      623,  622,  621,  619,  618,  615,  614,  613,  612,  610,
      609,  608,  607,  606,  605,  602,  601,  597,  596,  595,
      591,  590,  589,  588,  582,  581,  580,  578,  577,  576,
      575,  574,  573,  572,  571,  570,  569,  566,  565,  564,
      560,  559,  557,  556,  555,  554,  552,  548,  547,  546,

      543,  542,  541,  540,  538,  534,  533,  532,  531,  530,
      529,  528,  527,  526,  525,  524,  523,  522,  521,  520,
      519,  518,  517,  514,  513,  512,  510,  508,  507,  506,
      505,  501,  499,  498,  497,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  486,  484,  483,  482,  481,  478,
      477,  475,  474,  473,  472,  469,  468,  466,  464,  463,
      462,  459,  455,  454,  453,  452,  451,  450,  446,  445,
      444,  443,  442,  441,  439,  437,  436,  435,  434,  433,
      430,  429,  428,  427,  426,  422,  421,  418,  417,  416,
      415,  414,  409,  408,  407,  406,  402,  399,  398,  397,

      396,  395,  393,  392,  391,  390,  389,  388,  386,  385,
      384,  383,  382,  379,  377,  376,  375,  374,  373,  372,
      370,  369,  368,  367,  366,  365,  363,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  352,  351,  350,  349,
      348,  347,  345,  344,  343,  342,  341,  340,  339,  338,
      337,  336,  334,  332,  331,  329,  328,  327,  326,  325,
      324,  323,  322,  321,  318,  317,  316,  313,  312,  310,
      309,  307,  306,  304,  300,  299,  298,  297,  294,  293,
      292,  291,  287,  285,  284,  283,  282,  281,  280,  279,
      278,  277,  276,  275,  274,  273,  272,  271,  270,  269,

      268,  267,  266,  265,  264,  262,  261,  260,  259,  258,
      257,  256,  255,  254,  253,  252,  251,  250,  249,  248,
      245,  244,  243,  242,  241,  240,  239,  238,  236,  235,
      234,  232,  231,  230,  229,  228,  227,  226,  225,  224,
      223,  222,  221,  219,  218,  217,  215,  213,  212,  208,
      207,  206,  205,  204,  203,  202,  199,  198,  197,  196,
      195,  194,  193,  192,  191,  190,  189,  187,  186,  185,
      184,  181,  180,  179,  178,  177,  176,  174,  173,  172,
      170,  169,  168,  167,  166,  165,  164,  163,  162,  161,
      160,  159,  157,  156,  155,  153,  151,  150,  148,  146,

      144,  141,  139,  138,  136,  135,  132,  131,  130,  129,
      125,  124,  123,  121,  120,  117,  116,  115,  114,  113,
      112,  110,  109,  108,  107,  106,  105,  103,   98,   97,
       95,   93,   91,   88,   86,   85,   83,   82,   79,   78,
       77,   74,   67,   66,   58,   57,   56,   55,   54,   53,
       49,   44,   41,   32,   31,   27,   24,   22,   19,   14,
       13,    8,    7,    6,    5,    4,    3, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,

     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[261] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "OSParseosol.l"
/* $Id$ */
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2011, Horand Gassmann, Jun Ma, Kipp Martin,
 * Dalhousie University, Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 15 "OSParseosol.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream>  

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 

#define PARSERDEBUG
#ifdef PARSERDEBUG

	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
#include "OSoLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;









#line 103 "OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 1992 "OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 113 "OSParseosol.l"


 
#line 2237 "OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2104 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3268 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 120 "OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 122 "OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 123 "OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 125 "OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 141 "OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 143 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 144 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 145 "OSParseosol.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 146 "OSParseosol.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 147 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 148 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 149 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 150 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 151 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 152 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 153 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 154 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 155 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 156 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 157 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 158 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 159 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 160 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 161 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 162 "OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 163 "OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 164 "OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 165 "OSParseosol.l"
{YY_PRINT; return(LBDUALVALUEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 166 "OSParseosol.l"
{YY_PRINT; return(UBDUALVALUEATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 170 "OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 171 "OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 172 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 173 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 174 "OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 175 "OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 176 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 177 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 178 "OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 179 "OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 180 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 181 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 182 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 183 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 184 "OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 185 "OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 186 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 187 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 188 "OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 189 "OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 190 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 191 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 192 "OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 193 "OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 194 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 195 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 196 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 197 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 198 "OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 199 "OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 200 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 201 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 202 "OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 203 "OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 204 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 205 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 206 "OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 207 "OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 208 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 209 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 210 "OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 211 "OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 212 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 213 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 215 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 216 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 217 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 218 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 219 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 220 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 222 "OSParseosol.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 223 "OSParseosol.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 224 "OSParseosol.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 226 "OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 227 "OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 228 "OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 230 "OSParseosol.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 231 "OSParseosol.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 233 "OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 234 "OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 236 "OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 237 "OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 239 "OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 240 "OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 242 "OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 243 "OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 245 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 246 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 249 "OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 250 "OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 251 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 252 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 253 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 254 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 255 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 256 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 257 "OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 258 "OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 259 "OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 260 "OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 261 "OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 262 "OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 263 "OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 264 "OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 265 "OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 266 "OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 267 "OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 268 "OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 269 "OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 270 "OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 271 "OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 272 "OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 274 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 275 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 276 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 277 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 278 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 279 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 280 "OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 281 "OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 282 "OSParseosol.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 283 "OSParseosol.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 284 "OSParseosol.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 285 "OSParseosol.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 287 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 288 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 290 "OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 291 "OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 292 "OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 293 "OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 294 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 295 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 296 "OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 297 "OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 298 "OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 299 "OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 300 "OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 301 "OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 302 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 303 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 304 "OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 305 "OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 306 "OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 307 "OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 308 "OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 309 "OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 310 "OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 311 "OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 312 "OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 313 "OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 314 "OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 315 "OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 316 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 317 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 318 "OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 319 "OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 320 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 321 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 322 "OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 323 "OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 326 "OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 327 "OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 328 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 329 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 330 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 331 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 332 "OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 333 "OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 334 "OSParseosol.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 335 "OSParseosol.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 336 "OSParseosol.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 337 "OSParseosol.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 338 "OSParseosol.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 339 "OSParseosol.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 340 "OSParseosol.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 341 "OSParseosol.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 342 "OSParseosol.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 343 "OSParseosol.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 344 "OSParseosol.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 345 "OSParseosol.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 346 "OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 347 "OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 348 "OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 349 "OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 350 "OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 351 "OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 352 "OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 353 "OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 354 "OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 355 "OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 356 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 357 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 358 "OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 359 "OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 360 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 361 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 362 "OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 363 "OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 364 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 365 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 366 "OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 367 "OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 368 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 369 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 370 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 371 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 372 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 373 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 374 "OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 375 "OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
/* The <item> element and the children of the option header are treated specially because they may legitimately contain special characters */
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 380 "OSParseosol.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 381 "OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 382 "OSParseosol.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 383 "OSParseosol.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 385 "OSParseosol.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 386 "OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 387 "OSParseosol.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 388 "OSParseosol.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 390 "OSParseosol.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 391 "OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 392 "OSParseosol.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 393 "OSParseosol.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 395 "OSParseosol.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 396 "OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 397 "OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 398 "OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 400 "OSParseosol.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 401 "OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 402 "OSParseosol.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 403 "OSParseosol.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 405 "OSParseosol.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 406 "OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 407 "OSParseosol.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 408 "OSParseosol.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* environments and comments */
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 413 "OSParseosol.l"
{ YY_PRINT; yylval->sval = strdup( yytext); /*  yylval->sval = yytext;*/ yyextra->errorText = yylval->sval;  return (ELEMENTTEXT); }
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 414 "OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 416 "OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 249:
#line 418 "OSParseosol.l"
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 418 "OSParseosol.l"
;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 419 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 421 "OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 253:
#line 423 "OSParseosol.l"
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 423 "OSParseosol.l"
;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 424 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 427 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 428 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 429 "OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 433 "OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 445 "OSParseosol.l"
ECHO;
	YY_BREAK
#line 3910 "OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2104 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2104 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2103);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 445 "OSParseosol.l"





