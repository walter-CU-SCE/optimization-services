#line 2 "OSParseosol.cpp"

#line 4 "OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osollex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 183
#define YY_END_OF_BUFFER 184
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1639] =
    {   0,
        0,    0,  181,  181,  179,  179,  180,  180,    0,    0,
        0,    0,    0,    0,    0,    0,  184,  182,    1,    1,
        1,    2,  170,  170,    5,  170,    4,  182,    3,  170,
      181,  183,  179,  180,  172,  173,  172,  176,  177,  176,
      170,  170,  170,    0,    3,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,    5,    4,  170,
        5,  170,    6,    0,    0,  175,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  170,  181,  179,  180,    0,  178,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,

      170,  170,  170,  170,    0,  170,    5,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    5,  174,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,    0,  170,  170,  170,  170,  170,    5,
      171,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  162,    0,    0,    0,

        0,    0,    0,    0,    0,   62,    0,    0,    0,  154,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  146,    0,    0,    0,  148,  170,  170,  170,  170,
      170,   23,  170,  170,  170,  170,  170,  170,  170,    0,
       40,   41,  170,  170,  170,  170,  170,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  108,

        0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
      170,  170,  170,    0,  170,   23,  170,  170,  170,  170,
        0,  170,  170,  170,  170,  170,    0,  170,  170,    0,
      170,    0,  163,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   63,    0,    0,    0,    0,    0,
        0,    0,  155,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  147,    0,    0,    0,
        0,    0,  149,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   74,    0,    0,    0,    0,    0,
        0,    0,   54,   88,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  170,  170,    0,   38,
       39,  170,  170,  170,  170,    0,   30,   31,  170,  170,
      170,  170,    0,   48,   49,  170,    0,   36,   37,  170,
        0,  163,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   63,    0,    0,    0,    0,    0,    0,  155,
        0,    0,    0,   55,    0,    0,    0,    0,  109,    0,
        0,    0,    0,    0,    0,  147,    0,    0,    0,   99,
        0,  149,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   58,    0,    0,  170,  170,  170,  170,  170,  170,
      170,  170,    0,  170,   24,  170,  170,    0,   32,   33,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   75,    0,    0,    0,    0,    0,    0,    0,
       55,    0,   89,    0,    0,    0,  109,    0,    0,    0,
        0,    0,    0,    0,    0,   99,    0,    0,    0,   84,
        0,    0,    0,   56,    0,    0,    0,    0,    0,   78,
      100,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  132,    0,    0,   60,    0,    0,    0,    0,
        0,  170,  170,  170,  170,    0,  170,  170,  170,    0,

       44,   45,   24,  170,  170,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   75,    0,    0,
        0,    0,    0,    0,    0,    0,   89,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       59,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   82,  120,    0,    0,
        0,    0,    0,    0,    0,    0,   80,    0,  170,    0,
      170,  170,    0,   50,   51,  170,  170,    0,  170,  170,
      170,  170,  170,  170,  170,    0,   52,   53,    0,    0,

       85,    0,    0,    0,    0,    0,   57,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   79,    0,  101,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  133,    0,    0,    0,    0,   61,    0,    0,
        0,    0,    0,   59,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  134,
        0,   46,   47,  170,  170,  170,    0,   42,   43,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,    0,

       85,    0,    0,    0,    0,   57,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   79,  101,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   83,    0,
      121,  133,    0,    0,    0,    0,   61,    0,    0,    0,
        0,    0,    0,   81,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  150,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   66,    0,    0,    0,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   83,  121,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   81,    0,  135,  158,
        0,    0,    0,  114,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   94,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   68,    0,    0,    0,
      170,    0,  170,   25,  170,  170,   21,  170,  170,  170,
       19,  170,  170,  170,  170,  170,   17,  170,  170,   16,
      170,  170,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  151,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   67,    0,    0,    0,  135,  104,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   70,
        0,   96,   90,    0,   64,   86,    0,    0,    0,    0,
        0,    0,  168,    0,    0,    0,   34,   35,   25,  170,
        0,   21,  170,  170,   19,  170,  170,  170,  170,  170,
       17,  170,   16,  170,  170,    0,  159,    0,    0,    0,
        0,  115,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   95,    0,    0,  151,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   69,   67,    0,

        0,    0,    0,  128,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   92,    0,    0,    0,    0,  110,    0,
      166,    0,    0,    0,   26,   27,  170,  170,  170,  170,
      170,  170,  170,  170,    9,  170,  170,  170,  170,    0,
      159,    0,  105,    0,    0,  115,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   71,    0,    0,   97,   95,
        0,   91,    0,    0,   65,    0,   87,    0,    0,    0,
        0,    0,    0,   69,    0,  169,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   76,    0,  170,  170,    8,

      170,  170,  170,  170,  170,  170,    9,  170,  170,  170,
        0,   28,   29,  105,    0,    0,    0,  129,    0,    0,
        0,    0,    0,    0,    0,    0,   71,    0,   97,   91,
        0,   93,   65,   87,    0,    0,    0,    0,    0,  111,
        0,  169,    0,  167,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  130,
        0,    0,    0,  170,    8,  170,  170,  170,  170,  170,
      170,  170,  170,  170,    0,    0,  129,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   93,    0,    0,    0,
        0,  111,    0,  167,    0,   77,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  118,   72,    0,    0,    0,
        0,    0,    0,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  131,    0,    0,
       77,    0,    0,  112,    0,    0,  164,    0,    0,    0,
        0,    0,    0,  124,    0,    0,    0,  170,  170,  170,
      170,  170,  170,  170,   10,  170,   11,  170,  170,   12,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      119,    0,   73,    0,    0,    0,  131,    0,    0,    0,
        0,  140,    0,    0,    0,    0,    0,    0,    0,    0,

      102,    0,  170,  170,   13,  170,  170,  170,  170,   10,
       11,  170,   12,    0,    0,  113,    0,    0,    0,  165,
        0,    0,    0,    0,  119,   73,    0,    0,    0,  125,
        0,    0,    0,  126,    0,    0,    0,    0,    0,    0,
        0,  106,    0,  170,   14,   13,  170,  170,  170,  170,
      170,    0,  113,    0,  141,    0,  165,    0,    0,    0,
        0,    0,    0,  125,    0,    0,  103,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   14,  170,  170,  170,
        7,  170,  170,    0,  127,  141,    0,    0,    0,    0,
        0,    0,    0,    0,  107,  103,    0,    0,    0,    0,

      136,    0,    0,    0,    0,  170,  170,    7,  170,  170,
       22,  127,    0,    0,    0,    0,    0,    0,    0,  107,
        0,    0,  156,  152,    0,  116,    0,    0,    0,  170,
      170,  170,   22,    0,    0,    0,    0,  137,    0,    0,
        0,    0,    0,  160,    0,    0,  122,    0,  170,  170,
      170,    0,    0,  157,    0,  153,  137,    0,    0,  117,
        0,    0,    0,    0,    0,    0,  170,  170,  170,    0,
      161,  157,  153,    0,  117,    0,    0,  123,    0,    0,
        0,    0,  170,  170,  170,  161,    0,    0,  123,    0,
        0,    0,    0,  170,  170,  170,    0,    0,    0,  138,

        0,  144,  170,  170,  170,    0,    0,    0,    0,  170,
      170,  170,   15,    0,  139,    0,    0,  145,    0,  170,
      170,   18,   15,  139,    0,  145,    0,  170,   20,   18,
        0,  142,   20,    0,    0,  143,  143,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    7,    1,    1,    8,    1,
        1,    7,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    7,    1,   14,
       15,   16,   17,    7,    7,   18,   19,   20,   21,   22,
        7,    7,   23,   24,   25,   26,   27,   28,   29,   30,
        7,   31,   32,   33,   34,   35,   36,    7,    7,    7,
        1,    7,    1,    1,    7,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,    1,   63,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[64] =
    {   0,
        1,    2,    2,    2,    1,    3,    2,    4,    1,    2,
        2,    2,    2,    2,    1,    5,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1
    } ;

static yyconst flex_int16_t yy_base[1650] =
    {   0,
        0,   63, 3338, 3337, 3346, 3345, 3342, 3341,    0,    0,
        0,    0,   15,   16,    4,   17, 3348, 3355,  125,  182,
        0, 3355,    8,   16,   29,   17,   40,  236, 3355,   21,
        0, 3355,    0,    0, 3355, 3355, 3337, 3355, 3355, 3330,
        0,   22,   30,   23, 3355,   46,   41,   71,   76,   75,
       80,   79,   83,   84,   91,   94,   87,  135,  176,   95,
      187,  144, 3355, 3335,  256, 3355, 3293,    7, 3298, 3301,
     3291, 3289, 3294,   67,  150,    4, 3297,  172, 3276, 3281,
     3298,  147,    0,    0,    0, 3318, 3355,  103,  122,  196,
      200,  204,  220,  228,  179,  240,  254,  301,  257,  229,

      302,  305,  306,  249, 3320,  236,  310, 3322, 3280,   43,
     3285, 3288, 3278, 3276, 3281,   69,  287,   96, 3284,  294,
     3263, 3268, 3285, 3271, 3268, 3265, 3270, 3267,  282, 3278,
     3276, 3254, 3263, 3266, 3255, 3259, 3265, 3252,   66, 3256,
     3253, 3261, 3250,  107, 3248, 3250, 3260, 3246,  314, 3355,
      332,  336,  315,  343,  363,  344,  347,  354,  355,  360,
      366,  369,  387,  402,  372,  393,  383,  397,  398, 3286,
     3355, 3248, 3245, 3242, 3247, 3244,  371, 3255, 3253, 3231,
     3240, 3243, 3232, 3236, 3242, 3229,   91, 3233, 3230, 3238,
     3227,  123, 3225, 3227, 3237, 3223,  202, 3235, 3234, 3233,

     3232, 3216, 3214, 3214, 3228, 3245, 3226, 3233,  398, 3224,
     3219, 3215, 3221, 3209, 3205, 3215, 3219, 3200, 3215, 3197,
     3196, 3218, 3196, 3210, 3196, 3204,  405,  414,  429,  421,
      436,  454,  433,  445,  446,  468,  450,  453,  460,  484,
     3355, 3355,  461,  493,  464,  511,  488,  515, 3207, 3206,
     3205, 3204, 3188, 3186, 3186, 3200,  518, 3199, 3206,  479,
      533, 3193, 3189, 3195, 3183, 3179, 3189, 3193, 3174, 3189,
     3171, 3170,  540, 3171, 3185, 3171,  536, 3168, 3186, 3172,
     3182, 3165, 3165, 3173, 3161, 3179, 3172, 3194, 3163, 3167,
     3181, 3165, 3168, 3169, 3158,  543, 3152, 3148, 3145, 3173,

     3161, 3156, 3160, 3154, 3157, 3160, 3155, 3355, 3167, 3157,
      514,  534,  574,  551,  544,  559,  550,  553,  568,  589,
      593,  569,  586,  592,  595,  610,  614,  613,  628,  631,
      646,  651,  654, 3137, 3155, 3141, 3151, 3134, 3134, 3142,
     3130, 3148, 3141,  661,  669, 3163, 3132, 3136, 3150, 3134,
     3137,  672,  676, 3138, 3127,  679, 3121, 3117, 3114,  682,
     3131, 3126, 3130, 3124, 3127,  687,  690, 3130, 3125,  697,
     3137,  702,  705, 3127, 3109, 3123, 3121, 3104, 3126, 3121,
     3120,  483, 3106, 3114, 3355, 3099, 3104, 3118, 3096, 3101,
     3093, 3103,  712, 3118, 3090, 3094, 3107, 3088, 3088, 3084,

     3101, 3085, 3084, 3088, 3099, 3097,  703,  706,  721, 3355,
     3355,  712,  718,  717,  721,  736, 3355, 3355,  622,  746,
      761,  727,  777, 3355, 3355,  731,  784, 3355, 3355,  791,
      794,  752, 3080, 3094, 3092, 3075, 3097, 3092, 3091,  646,
     3077, 3085,  767,  806, 3070, 3075, 3089, 3067, 3072,  809,
     3064, 3074,  812,  815,  821, 3062, 3066,  827,  830, 3079,
     3060, 3060, 3056, 3073, 3057,  836, 3056, 3060,  842,  845,
     3071,  849, 3069, 3069, 3049, 3063, 3052, 3051, 3053, 3052,
     3054, 3053, 3058, 3042, 3054, 3053,  187, 3046, 3041, 3046,
     3028, 3037,  762, 3034, 3042, 3031, 3044, 3036, 3042,  303,

     3037, 3355, 3032, 3032,  775,  785,  840,  857,  841,  848,
      851,  866,  884,  892,  872,  863,  896,  912, 3355, 3355,
     3042, 3022, 3036, 3025, 3024, 3026, 3025, 3027, 3026, 3031,
     3015,  919,  899, 3027, 3026,  414, 3019, 3014, 3019, 3001,
      922,  925,  928, 3010,  914, 3007,  935, 3015, 3004, 3017,
     3009, 3015,  456, 3010,  940,  943, 3005, 3005, 3007, 3355,
     3001, 2996,  152, 3355,  930, 2995, 3000, 3006, 3011, 3355,
     3355, 2988, 2992, 3011, 2988, 2983, 3003, 2983, 2993, 2992,
     2996, 2981, 2993, 2993, 2991,  201, 2979, 2979, 2992, 2987,
     2986,  958,  937,  938,  964,  981,  955,  988,  981, 1015,

     3355, 3355,  973,  980, 1023, 1026, 2981, 1004, 2975, 2970,
      242, 1038, 1026, 2969, 2974, 2980, 2985, 1045, 1048, 1054,
     2962, 2966, 2985, 2962, 2957, 2977, 1063, 2957, 2967, 2966,
     2970, 2955, 1069, 2968, 2966, 1072, 2954, 2954, 2967, 1075,
     1078, 2962, 2961, 2951, 2961, 2954, 2957, 2960, 2959, 2944,
     2937, 2955, 2955, 2950, 2949,  929, 2952, 2939, 2946, 2934,
     2924, 2943, 2927, 2937, 2927, 2932, 3355, 3355, 2924,  979,
     2938, 2940, 2945, 2919, 2951, 2935, 3355, 2917, 1093, 1109,
     1008, 1019, 1116, 3355, 3355, 1070, 1123, 1126, 1085, 1089,
     1107, 1119, 1128, 1046,  998, 1144, 3355, 3355, 2921, 1151,

     1090, 2931, 2924, 2927, 2930, 1156, 1162, 2929, 2914, 2907,
     2925, 2925, 2920, 2919, 1061, 2922, 1166, 1172, 1181, 1184,
     2909, 2916, 2904, 2894, 2913, 2897, 2907, 2897, 2902, 1187,
     1190, 1196, 1205, 2894, 1082, 2908, 1211, 1214, 2910, 2915,
     2889, 2921, 2905, 1217, 1220, 2887, 2885, 2895, 2898, 2890,
     2890, 2881, 2885, 2897, 2887, 2878, 2892, 2875, 2878, 2891,
     2873, 2888, 2884, 2887, 2891, 2867, 2876, 2869, 2878, 2877,
     2884, 2871, 2870, 2882, 2864, 2889, 2866, 2860, 2861, 3355,
     1226, 3355, 3355, 1127, 1188, 1217, 1235, 3355, 3355, 1226,
     1232, 1135, 1231, 1235, 1236, 1164, 1240, 1239, 1100, 2852,

     1255, 2862, 2865, 2857, 2857, 1258, 2848, 2852, 2864, 2854,
     2845, 2859, 2842, 2845, 2858, 2840, 1261, 1264, 2855, 2851,
     2854, 2858, 2834, 2843, 2836, 2845, 2844, 1269, 1275, 1278,
     1293, 1296, 2851, 2838, 2837, 2849, 1299, 2831, 2856, 2833,
     2827, 2828, 1302, 1305, 1308, 2820, 2833, 2817, 2825, 2817,
     2812, 2764, 2770, 2775, 2770, 2706, 2728, 2717, 2706, 2708,
     2711, 2699, 2693, 2680, 3355, 2673,    9,   63,   58,   83,
       89,  118,  135,  158, 3355,  153,  151,  205, 1311, 1317,
     1276, 1326, 1320, 1335, 1330, 1331, 1338, 1353, 1344, 1370,
     1270,  219,  236,  225,  242,  245,  255,  251,  261,  300,

      302,  297,  329,  333,  338,  348,  353,  375,  390,  391,
     1362,  390,  404,  424,  424, 1359, 1385,  442,  456,  463,
      467,  483, 1388,  481,  475,  510, 1391, 1394, 1397, 3355,
      513,  539,  517, 3355,  531,  531,  559,  571,  578,  570,
      577,  604,  604,  609,  605, 3355,  628,  625,  646,  642,
      646,  677,  686,  680,  689,  699, 3355,  696,  700,  734,
     1403, 1418, 1425, 1409, 1428, 1431, 1434, 1400, 1434, 1449,
     1455, 1446, 1452, 1453, 1456, 1472, 1475, 1457, 1478, 1487,
     1366, 1485, 1500,  711,  734,  718, 1507,  748,  748,  785,
      782,  789,  776,  784,  805,  822,  829,  824, 1511,  842,

      822, 1515, 1518,  839,  842,  848,  872,  888,  878,  892,
      903, 1526, 1530, 1533,  908,  912,  946, 1536, 3355,  919,
      945,  961,  944,  972,  959, 1005,  999, 1041, 1013, 3355,
     1052, 3355, 3355, 1057, 3355, 3355, 1111, 1120, 1150, 1162,
     1150, 1156, 1156, 1178, 1172, 1541, 3355, 3355, 1548, 1551,
     1554, 1566, 1545, 1557, 1572, 1563, 1566, 1567, 1594, 1570,
     1585, 1576, 1603, 1577, 1618, 1624, 1614, 1633, 1184, 1233,
     1639, 1642, 1251, 1235, 1279, 1267, 1297, 1294, 1326, 1303,
     1648, 1332, 1654, 1657, 1663, 1672, 1338, 1675, 1678, 1681,
     1332, 1357, 1364, 1384, 1370, 1395, 1687, 1696, 1702, 1705,

     1408, 1407, 1480, 3355, 1428, 1458, 1448, 1460, 1464, 1479,
     1474, 1496, 1500, 3355, 1509, 1537, 1524, 1522, 3355, 1538,
     3355, 1559, 1565, 1708, 3355, 3355, 1655, 1715, 1679, 1597,
     1699, 1706, 1709, 1724, 1730, 1728, 1732, 1615, 1753, 1768,
     1760, 1775, 1778, 1627, 1782, 1785, 1547, 1577, 1575, 1579,
     1590, 1594, 1602, 1617, 1790, 1793, 1620, 1797, 1800, 1805,
     1808, 1812, 1815, 1818, 1823, 1826, 1833, 1618, 1659, 1639,
     1640, 1836, 1645, 1841, 1844, 1847, 1851, 1661, 1698, 1695,
     1704, 1708, 1702, 1692, 1692, 1711, 1712, 1700, 1708, 1724,
     1721, 1722, 1727, 1739, 1772, 3355, 1773, 1842, 1859, 1862,

     1843, 1854, 1862, 1855, 1863, 1866, 1881, 1872, 1875, 1878,
     1894, 3355, 3355, 1903, 1791, 1796, 1912, 1919, 1804, 1827,
     1824, 1832, 1852, 1854, 1841, 1852, 1922, 1868, 1927, 1930,
     1933, 1936, 1939, 1942, 1865, 1861, 1870, 1896, 1948, 1951,
     1915, 1954, 1957, 1963, 1966, 1912, 1915, 1924, 1916, 1924,
     1934, 1935, 1942, 1923, 1938, 1930, 1963, 1942, 1926, 3355,
     1931, 1941, 1948, 1974, 1989, 1980, 1981, 1984, 1985, 1988,
     1989, 1992, 1993, 1996, 1941, 1964, 2011, 1960, 1967, 1977,
     1978, 1985, 1967, 1982, 1976, 2009, 2035, 1987, 1971, 2038,
     1977, 2053, 1987, 2056, 2059, 2062, 1995, 1994, 2002, 1988,

     1990, 1993, 2032, 2015, 2020, 3355, 3355, 2014, 2014, 2029,
     2026, 2023, 2029, 2060, 2063, 2064, 2067, 2068, 2071, 2086,
     2089, 2080, 2095, 2045, 2054, 2050, 2056, 2058, 2096, 2078,
     2084, 2119, 2124, 2070, 2074, 2089, 2130, 2134, 2094, 2092,
     2140, 2101, 2091, 3355, 2093, 2114, 3355, 2099, 2114, 2104,
     2102, 2117, 2122, 3355, 2115, 2116, 2113, 2145, 2160, 2151,
     2152, 2156, 2155, 2175, 2178, 2181, 2184, 2178, 2199, 2207,
     2104, 2214, 2118, 2163, 2217, 2148, 2167, 2159, 2161, 2220,
     2223, 2235, 2238, 2191, 2198, 2241, 2244, 2191, 2193, 2190,
     2208, 3355, 2213, 2195, 2205, 2197, 2228, 2206, 2207, 2204,

     3355, 2210, 2259, 2262, 2265, 2256, 2265, 2266, 2269, 2284,
     2287, 2278, 2293, 2230, 2296, 2299, 2302, 2247, 2311, 2305,
     2254, 2268, 2262, 2293, 2320, 2327, 2275, 2275, 2330, 2333,
     2283, 2337, 2292, 3355, 2295, 2294, 2288, 2306, 2297, 2310,
     2323, 3355, 2308, 2352, 2355, 2358, 2349, 2355, 2370, 2361,
     2362, 2377, 2385, 2388, 2393, 2304, 2396, 2314, 2313, 2341,
     2332, 2362, 2376, 2403, 2406, 2412, 2416, 2368, 2355, 2381,
     2382, 2369, 2367, 2382, 2376, 2393, 2428, 2419, 2420, 2435,
     2438, 2429, 2450, 2444, 2453, 2468, 2387, 2419, 2421, 2408,
     2409, 2424, 2422, 2472, 2475, 2478, 2447, 2443, 2430, 2431,

     2455, 2448, 2445, 2433, 2451, 2479, 2480, 2495, 2486, 2501,
     2504, 2508, 2460, 2458, 2459, 2516, 2480, 2477, 2465, 2522,
     2486, 2473, 3355, 3355, 2473, 3355, 2480, 2490, 2488, 2520,
     2523, 2526, 2541, 2486, 2548, 2551, 2554, 2557, 2490, 2569,
     2497, 2521, 2518, 3355, 2511, 2523, 3355, 2525, 2560, 2563,
     2564, 2584, 2587, 2590, 2594, 2602, 2611, 2515, 2614, 2618,
     2538, 2621, 2540, 2539, 2559, 2555, 2612, 2613, 2618, 2636,
     2639, 2642, 2645, 2556, 2651, 2566, 2657, 2660, 2563, 2558,
     2570, 2575, 2651, 2619, 2658, 2673, 2586, 2609, 2676, 2595,
     2613, 2612, 2611, 2667, 2670, 2671, 2628, 2637, 2633, 3355,

     2646, 3355, 2677, 2676, 2695, 2698, 2651, 2701, 2651, 2699,
     2719, 2726, 2734, 2741, 2744, 2662, 2747, 2756, 2651, 2762,
     2765, 2768, 2771, 2780, 2656, 2783, 2661, 2786, 2789, 2792,
     2664, 3355, 2795, 2801, 2804, 2807, 2810, 3355, 2820, 2825,
     2830, 2835, 2840, 2845, 2850, 2854, 2859, 2863, 2868
    } ;

static yyconst flex_int16_t yy_def[1650] =
    {   0,
     1639, 1639, 1640, 1640, 1641, 1641, 1642, 1642, 1643, 1643,
     1643, 1643, 1644, 1644, 1645, 1645, 1638, 1638, 1646, 1646,
       20, 1638, 1646, 1646, 1646, 1646, 1646, 1638, 1638, 1646,
     1647, 1638, 1648, 1649, 1638, 1638, 1638, 1638, 1638, 1638,
       20, 1646, 1646,   28, 1638, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1646, 1647, 1648, 1649, 1638, 1638, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,

     1646, 1646, 1646, 1646, 1638, 1646, 1646, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1646, 1638,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1638, 1646, 1646, 1646, 1646, 1646, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1646, 1646, 1646, 1646,
     1646, 1638, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1638,
     1638, 1638, 1646, 1646, 1646, 1646, 1646, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1646, 1646, 1646, 1638, 1646, 1638, 1646, 1646, 1646, 1646,
     1638, 1646, 1646, 1646, 1646, 1646, 1638, 1646, 1646, 1638,
     1646, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1646, 1646, 1638, 1638,
     1638, 1646, 1646, 1646, 1646, 1638, 1638, 1638, 1646, 1646,
     1646, 1646, 1638, 1638, 1638, 1646, 1638, 1638, 1638, 1646,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1638, 1646, 1638, 1646, 1646, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1646, 1646, 1646, 1646, 1638, 1646, 1646, 1646, 1638,

     1638, 1638, 1638, 1646, 1646, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1646, 1638,
     1646, 1646, 1638, 1638, 1638, 1646, 1646, 1638, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1646, 1646, 1646, 1638, 1638, 1638, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1646, 1646,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1646, 1638, 1646, 1638, 1646, 1646, 1638, 1646, 1646, 1646,
     1638, 1646, 1646, 1646, 1646, 1646, 1638, 1646, 1646, 1638,
     1646, 1646, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1646,
     1638, 1638, 1646, 1646, 1638, 1646, 1646, 1646, 1646, 1646,
     1638, 1646, 1638, 1646, 1646, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1638, 1646, 1646, 1646, 1646, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1646, 1646, 1638,

     1646, 1646, 1646, 1646, 1646, 1646, 1638, 1646, 1646, 1646,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1646, 1638, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1646, 1646, 1646,
     1646, 1646, 1646, 1646, 1638, 1646, 1638, 1646, 1646, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1646, 1646, 1638, 1646, 1646, 1646, 1646, 1638,
     1638, 1646, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1646, 1638, 1638, 1646, 1646, 1646, 1646,
     1646, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1646, 1646, 1646,
     1638, 1646, 1646, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1646, 1646, 1638, 1646, 1646,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1646,
     1646, 1646, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1646, 1646,
     1646, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1646, 1646, 1646, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1646, 1646, 1646, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1646, 1646, 1646, 1638, 1638, 1638, 1638,

     1638, 1638, 1646, 1646, 1646, 1638, 1638, 1638, 1638, 1646,
     1646, 1646, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1646,
     1646, 1638, 1638, 1638, 1638, 1638, 1638, 1646, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638,    0, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638
    } ;

static yyconst flex_int16_t yy_nxt[3419] =
    {   0,
       18,   19,   20,   21,   18,   22,   39,   22,   18,   24,
       25,   26,   27,   28,   18,   29,   18,   36,   36,   39,
       40, 1638,   30, 1638,   37,   37,   58, 1638,   59, 1638,
     1638, 1638,   63,   40, 1638, 1638, 1638, 1638,   60, 1638,
      139,   61, 1638, 1638, 1638,   63, 1638,  125,   82,   62,
       58,  126,   59, 1638, 1638, 1638, 1638,  140,  950, 1638,
       62, 1638,   22,   18,   19,   20,   21,   18,   22,   62,
       22,   18,   24,   25,   26,   27,   28,   18,   29,   18,
       62,   89,   88,  173, 1638,   30, 1638,  174, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638,  951, 1638,  132, 1638,  180, 1638, 1638, 1638, 1638,
     1638,  133,  952,  181,   92,   95, 1638,   93, 1638,   96,
      215,  216,   82,  104,   90,   22,   41,   41,   41,   91,
       94,  102,  187,  953,   98, 1638,   43, 1638,   44,   97,
       45,   99,  954,  103,  100,  266,  267,   61, 1638,  188,
     1638,  101,  105,  106,  221,   62,  107, 1638,  151, 1638,
     1638,  222, 1638,   46,   47,  955,   48,   49,  149,   50,
      272,  647,   51,   52,   53,   62,  152,  273,  648,   54,
       55,   56,   57,   41,   41,   41,   58,  134,   59, 1638,
      956, 1638, 1638,   43, 1638,   44,   62,   45,  957,   61,

     1638,  135, 1638,  958,  136,  137,  138,   62,  959, 1638,
      142, 1638,  143, 1638,  572, 1638,   62, 1638,  573, 1638,
       46,   47,  144,   48,   49,  158,   50,   62,  672,   51,
       52,   53,  145, 1638,  673, 1638,   54,   55,   56,   57,
       64, 1638, 1638, 1638, 1638,  960,  153,   65,  107, 1638,
      154, 1638,   66, 1638,  156, 1638,  278,  279,  163,  163,
      163,  704, 1638,  155, 1638,  165,  157, 1638,  705, 1638,
     1638,  164, 1638,  983,   67,   68,  984,   69,   70,  985,
       71,   72,  986,   73,   74,  987,   75,   76,  159,   77,
       78,   79,   80,   81,  109,  110,  169,  111,  112,  988,

      113,  114,  160,  115,  116,  989,  117,  118,  990,  119,
      120,  121,  122,  123, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638,  107, 1638,  182, 1638,  202, 1638, 1638, 1638,
     1638,  587,  190,  203,  191,  588,  204,  205,  183,  167,
      991,  184,  185,  186,  192, 1638,  992, 1638,  161, 1638,
      168, 1638,  993,  166,  193,  162, 1638, 1638, 1638, 1638,
     1638,  994, 1638,  229,  231,  231,  231, 1638, 1638, 1638,
     1638,  995,  227, 1638,  228, 1638, 1638,  232, 1638, 1638,
      233, 1638, 1638,  234, 1638, 1638,  996, 1638,  163,  163,
      163,  239,  997,  998,  235,  236, 1638,  237, 1638,  230,

     1638,  164, 1638,  240,  240,  240, 1638,  241, 1638,  242,
     1638, 1638, 1638, 1638,  999,  253,  291,  292, 1638,  245,
     1638,  243,  254,  238,  293,  255,  256, 1638, 1000, 1638,
      313,  313,  313,  244, 1638, 1001, 1638,  231,  231,  231,
     1004,  621, 1638,  314, 1638,  622, 1638,  311, 1638, 1638,
      232, 1638,  246, 1005,  247,  316,  316,  316, 1638, 1638,
     1638, 1638, 1006, 1638,  319, 1638, 1638,  312, 1638,  320,
      320,  320,  315, 1638, 1638, 1638, 1638, 1638, 1007, 1638,
      317, 1638,  321, 1638,  637,  240,  240,  240,  638,  241,
      322,  242, 1008,  323,  326,  326,  326,  349,  350,  324,

      318, 1638,  481, 1638,  482,  351, 1638,  327, 1638, 1009,
     1010,  328,  329,  329,  329,  325,  332,  332,  332,  344,
      344,  344, 1011, 1012, 1638,  330, 1638, 1638,  331, 1638,
      333, 1015, 1016,  345,  352,  352,  352,  372,  372,  372,
      346,  366,  366,  366,  393,  393,  393, 1638,  353, 1638,
     1017,  373,  409,  409,  409,  367,  410, 1638,  411, 1638,
      316,  316,  316, 1638,  407, 1638, 1638, 1019, 1638,  334,
      335, 1020, 1021,  354,  368,  313,  313,  313,  408,  412,
      374, 1638, 1638, 1638, 1638, 1022, 1023, 1638,  314, 1638,
      320,  320,  320, 1024,  416,  416,  416,  414,  417, 1638,

      418, 1638, 1638,  321, 1638, 1638,  413, 1638, 1638, 1025,
     1638,  326,  326,  326, 1026,  423,  423,  423,  415,  424,
     1027,  425,  419, 1638,  327, 1638, 1638, 1028, 1638,  329,
      329,  329,  427,  427,  427, 1638,  428, 1638,  429,  420,
     1029, 1638,  330, 1638, 1030, 1031,  422,  430,  430,  430,
      511,  421,  332,  332,  332,  432,  432,  432, 1032, 1638,
      431, 1638,  344,  344,  344,  528,  333,  529, 1033,  426,
      443,  443,  443,  352,  352,  352,  345,  450,  450,  450,
      453,  453,  453,  458,  458,  458, 1034,  353,  366,  366,
      366,  466,  466,  466,  454, 1035, 1036,  459,  469,  469,

      469, 1037,  367,  372,  372,  372,  472,  472,  472, 1038,
     1039,  460,  470,  393,  393,  393, 1638,  373, 1638, 1638,
     1040, 1638,  409,  409,  409, 1638,  410, 1638,  411, 1041,
     1638, 1638, 1638, 1638, 1638, 1042, 1638,  416,  416,  416,
     1638,  417, 1638,  418, 1638, 1043, 1638,  512,  512,  512,
     1044, 1045,  507,  432,  432,  432,  505,  506,  508, 1638,
      513, 1638,  514,  514,  514, 1068, 1069,  509,  443,  443,
      443,  517,  510, 1070, 1638,  515, 1638,  516,  423,  423,
      423,  579,  424,  580,  425,  427,  427,  427, 1638,  428,
     1638,  429,  430,  430,  430,  518,  518,  518, 1638,  519,

     1638,  520, 1073, 1074, 1638,  431, 1638,  532,  532,  532,
      450,  450,  450,  453,  453,  453,  541,  541,  541, 1075,
     1076,  533,  542,  542,  542, 1077, 1078,  454,  458,  458,
      458,  547,  547,  547, 1079,  592,  543,  466,  466,  466,
      593, 1080,  459,  469,  469,  469,  556,  556,  556,  544,
      472,  472,  472, 1638, 1638, 1638, 1638,  470,  595,  595,
      595, 1638, 1081, 1638, 1638, 1082, 1638,  512,  512,  512,
     1638,  596, 1638,  603,  603,  603, 1638, 1083, 1638, 1638,
      513, 1638, 1086, 1087,  594,  600,  600,  600, 1089,  601,
      597,  602,  599,  514,  514,  514, 1090,  605,  605,  605,

      618,  618,  618, 1091, 1092, 1638,  515, 1638,  598, 1638,
      606, 1638, 1093,  518,  518,  518,  604,  519, 1094,  520,
      532,  532,  532,  541,  541,  541,  542,  542,  542,  627,
      627,  627, 1095,  629,  533,  630,  547,  547,  547, 1096,
      543,  640,  640,  640,  556,  556,  556,  649,  650,  651,
     1638, 1638, 1638, 1638,  759,  641,  760, 1100,  652,  679,
      679,  679, 1101, 1102,  653,  595,  595,  595, 1638, 1103,
     1638, 1638,  680, 1638,  603,  603,  603, 1638,  596, 1638,
      682,  681,  683,  683,  683, 1104,  684,  686,  685,  687,
      687,  687, 1105, 1638, 1638, 1638, 1638, 1106,  772,  689,

      773, 1638,  688, 1638,  690,  700,  700,  700, 1107,  691,
      692, 1638,  693, 1638, 1108,  694,  600,  600,  600,  701,
      601, 1638,  602, 1638,  605,  605,  605,  696,  696,  696,
      799,  697, 1638,  698, 1638,  695, 1638,  606, 1638,  706,
      706,  706, 1109,  708,  709,  710,  618,  618,  618,  717,
      717,  717, 1110,  707,  711,  719,  719,  719,  784, 1638,
      712, 1638,  785,  718,  627,  627,  627, 1111, 1112,  720,
      732,  732,  732,  737,  737,  737,  640,  640,  640,  744,
      744,  744,  798, 1638,  733, 1638,  814,  738,  815, 1113,
      641,  801,  801,  801,  679,  679,  679, 1114, 1638,  739,

     1638,  834, 1638,  835, 1638,  740, 1638,  680, 1638,  734,
      781,  781,  781, 1638,  782, 1638,  783,  683,  683,  683,
     1638,  684, 1638,  685,  687,  687,  687,  787,  787,  787,
      786,  788, 1638,  789, 1638,  790, 1638,  688, 1638,  791,
     1638, 1638, 1638, 1638,  792,  696,  696,  696, 1638,  697,
     1638,  698,  700,  700,  700,  794,  796,  706,  706,  706,
      891, 1115,  793,  806,  806,  806,  701,  717,  717,  717,
     1116,  707,  795,  817,  817,  817,  879, 1638,  797, 1638,
      884,  718,  719,  719,  719,  818,  818,  818,  828,  828,
      828,  830,  830,  830, 1117,  888,  720,  732,  732,  732,

     1118, 1638,  829, 1638, 1119,  831,  832,  832,  832, 1120,
     1121,  733,  737,  737,  737,  837,  837,  837,  744,  744,
      744,  843,  843,  843, 1122, 1123,  738,  781,  781,  781,
     1638,  782, 1638,  783, 1144,  844,  787,  787,  787, 1638,
      788, 1638,  789,  880, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638,  801,  801,  801,  806,
      806,  806,  817,  817,  817,  818,  818,  818,  881,  883,
      828,  828,  828, 1145,  885,  882,  916,  916,  916,  830,
      830,  830, 1147, 1638,  829, 1638,  887,  889, 1148, 1638,
      886, 1638,  890,  831,  917,  917,  917,  832,  832,  832,

      837,  837,  837,  843,  843,  843,  927,  927,  927,  928,
      928,  928,  961,  961,  961, 1149,  965,  844,  963,  963,
      963,  982, 1150,  929, 1638,  962, 1638,  966,  966,  966,
     1638,  964, 1638, 1638, 1151, 1638,  970,  970,  970, 1638,
      967, 1638,  969, 1638, 1638, 1638, 1638, 1152, 1638,  971,
     1638, 1638, 1153, 1638,  976,  976,  976, 1638, 1154, 1638,
      916,  916,  916, 1002, 1002, 1002, 1638,  977, 1638, 1157,
      973,  979,  979,  979,  974,  972,  975, 1003, 1163, 1638,
      968, 1638, 1168, 1638,  980, 1638,  917,  917,  917, 1013,
     1013, 1013,  927,  927,  927,  928,  928,  928, 1018, 1018,

     1018,  978, 1064, 1014,  961,  961,  961, 1169, 1170,  929,
     1049, 1049, 1049, 1638,  981, 1638, 1638,  962, 1638, 1046,
     1046, 1046, 1171, 1047, 1172, 1048,  963,  963,  963, 1050,
     1050, 1050,  966,  966,  966, 1052, 1052, 1052, 1638,  964,
     1638, 1638, 1051, 1638, 1638,  967, 1638, 1638, 1173, 1638,
      970,  970,  970, 1054, 1178, 1053, 1055, 1055, 1055, 1638,
     1179, 1638, 1638,  971, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638,  976,  976,  976, 1061, 1061, 1061,  979,
      979,  979, 1058, 1182, 1056, 1638,  977, 1638, 1063, 1063,
     1063, 1638,  980, 1638, 1183, 1184, 1060, 1062, 1638, 1180,

     1638, 1066, 1066, 1066, 1185, 1057, 1181, 1059, 1071, 1071,
     1071, 1186, 1084, 1084, 1084, 1067, 1002, 1002, 1002, 1088,
     1088, 1088, 1072, 1187, 1188, 1065, 1085, 1097, 1097, 1097,
     1003, 1013, 1013, 1013, 1099, 1099, 1099, 1018, 1018, 1018,
     1189, 1098, 1046, 1046, 1046, 1014, 1047, 1190, 1048, 1049,
     1049, 1049, 1050, 1050, 1050, 1124, 1124, 1124, 1638, 1125,
     1638, 1126, 1191, 1192, 1638, 1051, 1638, 1052, 1052, 1052,
     1638, 1193, 1638, 1055, 1055, 1055, 1638, 1194, 1638, 1638,
     1638, 1638, 1638, 1638, 1130, 1638, 1061, 1061, 1061, 1638,
     1638, 1638, 1638, 1195, 1131, 1134, 1134, 1134, 1127, 1196,

     1132, 1197, 1219, 1133, 1063, 1063, 1063, 1638, 1135, 1638,
     1638, 1128, 1638, 1220, 1138, 1141, 1141, 1141, 1129, 1139,
     1139, 1139, 1221, 1222, 1136, 1066, 1066, 1066, 1638, 1137,
     1638, 1638, 1140, 1638, 1142, 1142, 1142, 1223, 1224, 1067,
     1071, 1071, 1071, 1146, 1146, 1146, 1215, 1202, 1143, 1155,
     1155, 1155, 1225, 1216, 1072, 1158, 1158, 1158, 1084, 1084,
     1084, 1226, 1210, 1156, 1160, 1160, 1160, 1228, 1638, 1159,
     1638, 1235, 1085, 1161, 1161, 1161, 1088, 1088, 1088, 1164,
     1164, 1164, 1166, 1166, 1166, 1236, 1237, 1162, 1097, 1097,
     1097, 1198, 1638, 1165, 1638, 1238, 1167, 1174, 1174, 1174,

     1241, 1245, 1098, 1099, 1099, 1099, 1175, 1175, 1175, 1124,
     1124, 1124, 1638, 1125, 1638, 1126, 1199, 1199, 1199, 1638,
     1176, 1638, 1638, 1201, 1638, 1134, 1134, 1134, 1638, 1200,
     1638, 1207, 1207, 1207, 1246, 1247, 1203, 1638, 1135, 1638,
     1248, 1638, 1205, 1638, 1249, 1638, 1250, 1638, 1251, 1252,
     1204, 1253, 1254, 1206, 1139, 1139, 1139, 1255, 1256, 1177,
     1209, 1141, 1141, 1141, 1257, 1258, 1638, 1140, 1638, 1211,
     1211, 1211, 1259, 1212, 1260, 1213, 1142, 1142, 1142, 1214,
     1214, 1214, 1208, 1217, 1217, 1217, 1146, 1146, 1146, 1261,
     1143, 1155, 1155, 1155, 1227, 1227, 1227, 1218, 1158, 1158,

     1158, 1229, 1229, 1229, 1262, 1156, 1160, 1160, 1160, 1161,
     1161, 1161, 1159, 1230, 1230, 1230, 1231, 1231, 1231, 1164,
     1164, 1164, 1263, 1162, 1233, 1233, 1233, 1166, 1166, 1166,
     1232, 1275, 1276, 1165, 1234, 1234, 1234, 1239, 1239, 1239,
     1278, 1167, 1174, 1174, 1174, 1175, 1175, 1175, 1242, 1242,
     1242, 1240, 1243, 1243, 1243, 1638, 1638, 1638, 1638, 1176,
     1199, 1199, 1199, 1265, 1265, 1265, 1244, 1638, 1638, 1638,
     1638, 1279, 1638, 1200, 1638, 1638, 1638, 1638, 1638, 1638,
     1280, 1638, 1207, 1207, 1207, 1638, 1264, 1638, 1638, 1281,
     1638, 1638, 1282, 1638, 1283, 1211, 1211, 1211, 1284, 1212,

     1266, 1213, 1285, 1267, 1214, 1214, 1214, 1268, 1286, 1288,
     1269, 1289, 1272, 1217, 1217, 1217, 1270, 1290, 1274, 1271,
     1277, 1277, 1277, 1227, 1227, 1227, 1273, 1218, 1229, 1229,
     1229, 1230, 1230, 1230, 1231, 1231, 1231, 1287, 1287, 1287,
     1233, 1233, 1233, 1234, 1234, 1234, 1291, 1293, 1232, 1239,
     1239, 1239, 1292, 1292, 1292, 1242, 1242, 1242, 1243, 1243,
     1243, 1297, 1298, 1240, 1294, 1294, 1294, 1295, 1295, 1295,
     1299, 1300, 1244, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
     1308, 1296, 1309, 1310, 1311, 1312, 1313, 1638, 1324, 1638,
     1265, 1265, 1265, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1325, 1638, 1277, 1277, 1277, 1326, 1327, 1328, 1329, 1330,
     1315, 1331, 1332, 1314, 1317, 1333, 1334, 1335, 1336, 1318,
     1339, 1340, 1319, 1342, 1343, 1316, 1287, 1287, 1287, 1337,
     1337, 1337, 1344, 1320, 1345, 1346, 1321, 1347, 1322, 1348,
     1323, 1350, 1351, 1338, 1292, 1292, 1292, 1294, 1294, 1294,
     1295, 1295, 1295, 1341, 1341, 1341, 1349, 1352, 1353, 1354,
     1355, 1356, 1357, 1638, 1296, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1371, 1638, 1364, 1364, 1364,
     1366, 1366, 1366, 1638, 1372, 1638, 1369, 1369, 1369, 1638,

     1365, 1638, 1638, 1367, 1638, 1361, 1373, 1363, 1638, 1370,
     1638, 1374, 1375, 1376, 1378, 1358, 1379, 1359, 1362, 1360,
     1380, 1380, 1380, 1384, 1368, 1382, 1382, 1382, 1385, 1386,
     1377, 1337, 1337, 1337, 1381, 1387, 1387, 1387, 1388, 1383,
     1389, 1341, 1341, 1341, 1390, 1338, 1391, 1392, 1393, 1394,
     1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1638, 1414,
     1638, 1404, 1404, 1404, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1417, 1638, 1405, 1638, 1364, 1364, 1364, 1410,
     1410, 1410, 1366, 1366, 1366, 1411, 1411, 1411, 1638, 1365,
     1638, 1638, 1409, 1638, 1638, 1367, 1638, 1418, 1421, 1403,

     1369, 1369, 1369, 1422, 1406, 1408, 1423, 1407, 1413, 1413,
     1413, 1424, 1638, 1370, 1638, 1415, 1415, 1415, 1419, 1419,
     1419, 1380, 1380, 1380, 1425, 1425, 1425, 1427, 1412, 1416,
     1428, 1431, 1420, 1432, 1433, 1381, 1382, 1382, 1382, 1426,
     1426, 1426, 1429, 1429, 1429, 1387, 1387, 1387, 1434, 1435,
     1383, 1436, 1437, 1438, 1439, 1440, 1430, 1441, 1442, 1443,
     1444, 1444, 1444, 1404, 1404, 1404, 1446, 1446, 1446, 1638,
     1452, 1638, 1638, 1445, 1638, 1638, 1405, 1638, 1638, 1638,
     1638, 1638, 1638, 1456, 1638, 1410, 1410, 1410, 1411, 1411,
     1411, 1638, 1447, 1638, 1413, 1413, 1413, 1415, 1415, 1415,

     1453, 1453, 1453, 1454, 1454, 1454, 1457, 1457, 1457, 1448,
     1458, 1416, 1419, 1419, 1419, 1459, 1450, 1455, 1460, 1461,
     1449, 1425, 1425, 1425, 1462, 1463, 1420, 1451, 1426, 1426,
     1426, 1429, 1429, 1429, 1464, 1464, 1464, 1465, 1466, 1466,
     1466, 1468, 1469, 1470, 1471, 1430, 1472, 1473, 1474, 1475,
     1476, 1487, 1467, 1444, 1444, 1444, 1477, 1477, 1477, 1446,
     1446, 1446, 1638, 1488, 1638, 1638, 1445, 1638, 1638, 1489,
     1638, 1480, 1480, 1480, 1638, 1638, 1638, 1638, 1484, 1484,
     1484, 1490, 1491, 1638, 1481, 1638, 1453, 1453, 1453, 1454,
     1454, 1454, 1485, 1478, 1486, 1486, 1486, 1457, 1457, 1457,

     1492, 1482, 1493, 1455, 1464, 1464, 1464, 1494, 1494, 1494,
     1497, 1498, 1479, 1466, 1466, 1466, 1483, 1496, 1496, 1496,
     1499, 1495, 1500, 1501, 1502, 1503, 1504, 1467, 1505, 1477,
     1477, 1477, 1638, 1638, 1638, 1638, 1480, 1480, 1480, 1508,
     1508, 1508, 1638, 1513, 1638, 1484, 1484, 1484, 1638, 1481,
     1638, 1510, 1510, 1510, 1512, 1512, 1512, 1509, 1514, 1485,
     1507, 1515, 1516, 1638, 1511, 1638, 1517, 1518, 1506, 1486,
     1486, 1486, 1519, 1494, 1494, 1494, 1520, 1520, 1520, 1496,
     1496, 1496, 1521, 1522, 1523, 1524, 1525, 1495, 1526, 1527,
     1528, 1529, 1638, 1638, 1638, 1638, 1508, 1508, 1508, 1638,

     1534, 1638, 1510, 1510, 1510, 1533, 1533, 1533, 1531, 1512,
     1512, 1512, 1535, 1536, 1638, 1511, 1638, 1537, 1537, 1537,
     1540, 1541, 1542, 1520, 1520, 1520, 1543, 1544, 1545, 1546,
     1547, 1538, 1548, 1638, 1530, 1638, 1638, 1532, 1638, 1638,
     1552, 1638, 1533, 1533, 1533, 1558, 1561, 1539, 1549, 1553,
     1553, 1553, 1555, 1555, 1555, 1537, 1537, 1537, 1557, 1557,
     1557, 1562, 1563, 1554, 1564, 1565, 1556, 1566, 1574, 1538,
     1559, 1559, 1559, 1638, 1550, 1638, 1638, 1638, 1638, 1638,
     1576, 1551, 1579, 1580, 1560, 1570, 1570, 1570, 1553, 1553,
     1553, 1572, 1572, 1572, 1581, 1555, 1555, 1555, 1582, 1571,

     1587, 1588, 1554, 1573, 1573, 1573, 1590, 1591, 1569, 1556,
     1592, 1567, 1557, 1557, 1557, 1559, 1559, 1559, 1568, 1575,
     1575, 1575, 1577, 1577, 1577, 1638, 1638, 1638, 1638, 1560,
     1593, 1638, 1638, 1638, 1638, 1597, 1578, 1570, 1570, 1570,
     1586, 1586, 1586, 1572, 1572, 1572, 1573, 1573, 1573, 1598,
     1599, 1571, 1575, 1575, 1575, 1600, 1601, 1584, 1577, 1577,
     1577, 1589, 1589, 1589, 1638, 1602, 1638, 1583, 1585, 1595,
     1606, 1638, 1578, 1638, 1586, 1586, 1586, 1589, 1589, 1589,
     1638, 1607, 1638, 1638, 1638, 1638, 1638, 1608, 1609, 1638,
     1638, 1638, 1638, 1616, 1619, 1594, 1612, 1612, 1612, 1614,

     1614, 1614, 1617, 1617, 1617, 1625, 1627, 1596, 1638, 1613,
     1638, 1631, 1638, 1615, 1638, 1632, 1618, 1603, 1634, 1604,
     1621, 1621, 1621,  949,  948, 1605, 1610, 1612, 1612, 1612,
     1611,  947, 1638, 1622, 1638, 1623, 1623, 1623,  946, 1638,
     1613, 1638, 1614, 1614, 1614, 1624, 1624, 1624, 1617, 1617,
     1617,  945,  944, 1620,  943,  942, 1615, 1626, 1626, 1626,
      941,  940, 1618, 1628, 1628, 1628, 1621, 1621, 1621, 1630,
     1630, 1630, 1623, 1623, 1623, 1638, 1629, 1638, 1638, 1622,
     1638, 1624, 1624, 1624, 1626, 1626, 1626, 1628, 1628, 1628,
     1633, 1633, 1633, 1630, 1630, 1630, 1633, 1633, 1633, 1638,

     1629, 1638, 1635, 1635, 1635, 1635, 1635, 1635, 1637, 1637,
     1637, 1637, 1637, 1637,  939,  938, 1636,  937,  936, 1636,
       23,   23,   23,   23,   23,   31,   31,   31,   31,   31,
       33,   33,   33,   33,   33,   34,   34,   34,   34,   34,
       32,   32,   32,   32,   32,   35,   35,   35,   35,   35,
       38,   38,   38,   38,   38,   42,  935,  934,   42,   83,
       83,   83,   83,   84,   84,  933,   84,   84,   85,   85,
       85,  932,   85,  931,  930,  926,  925,  924,  923,  922,
      921,  920,  919,  918,  915,  914,  913,  912,  911,  910,
      909,  908,  907,  906,  905,  904,  903,  902,  901,  900,

      899,  898,  897,  896,  895,  894,  893,  892,  878,  877,
      876,  875,  874,  873,  872,  871,  870,  869,  868,  867,
      866,  865,  864,  863,  862,  861,  860,  859,  858,  857,
      856,  855,  854,  853,  852,  851,  850,  849,  848,  847,
      846,  845,  842,  841,  840,  839,  838,  836,  833,  827,
      826,  825,  824,  823,  822,  821,  820,  819,  816,  813,
      812,  811,  810,  809,  808,  807,  805,  804,  803,  802,
      800,  780,  779,  778,  777,  776,  775,  774,  771,  770,
      769,  768,  767,  766,  765,  764,  763,  762,  761,  758,
      757,  756,  755,  754,  753,  752,  751,  750,  749,  748,

      747,  746,  745,  743,  742,  741,  736,  735,  731,  730,
      729,  728,  727,  726,  725,  724,  723,  722,  721,  716,
      715,  714,  713,  703,  702,  699,  678,  677,  676,  675,
      674,  671,  670,  669,  668,  667,  666,  665,  664,  663,
      662,  661,  660,  659,  658,  657,  656,  655,  654,  646,
      645,  644,  643,  642,  639,  636,  635,  634,  633,  632,
      631,  628,  626,  625,  624,  623,  620,  619,  617,  616,
      615,  614,  613,  612,  611,  610,  609,  608,  607,  591,
      590,  589,  586,  585,  584,  583,  582,  581,  578,  577,
      576,  575,  574,  571,  570,  569,  568,  567,  566,  565,

      564,  563,  562,  561,  560,  559,  558,  557,  555,  554,
      553,  552,  551,  550,  549,  548,  546,  545,  540,  539,
      538,  537,  536,  535,  534,  531,  530,  527,  526,  525,
      524,  523,  522,  521,  504,  503,  502,  501,  500,  499,
      498,  497,  496,  495,  494,  493,  492,  491,  490,  489,
      488,  487,  486,  485,  484,  483,  480,  479,  478,  477,
      476,  475,  474,  473,  471,  468,  467,  465,  464,  463,
      462,  461,  457,  456,  455,  452,  451,  449,  448,  447,
      446,  445,  444,  442,  441,  440,  439,  438,  437,  436,
      435,  434,  433,  406,  405,  404,  403,  402,  401,  400,

      399,  398,  397,  396,  395,  394,  392,  391,  390,  389,
      388,  387,  386,  385,  384,  383,  382,  381,  380,  379,
      378,  377,  376,  375,  371,  370,  369,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  348,  347,
      343,  342,  341,  340,  339,  338,  337,  336,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      298,  297,  296,  295,  294,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  277,  276,  275,  274,
      271,  270,  269,  268,  265,  264,  263,  262,  261,  260,
      259,  258,  257,  252,  251,  250,  249,  248,  170,  226,

      225,  224,  223,  220,  219,  218,  217,  214,  213,  212,
      211,  210,  209,  208,  207,  206,  201,  200,  199,  198,
      197,  196,  195,  194,  189,  179,  178,  177,  176,  175,
      172,  171,  170,  150,  148,  147,  146,  141,  131,  130,
      129,  128,  127,  124,  108,   87,   86, 1638,   32,   32,
       32,   32,   32,   32,   17, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638
    } ;

static yyconst flex_int16_t yy_chk[3419] =
    {   0,
        1,    1,    1,    1,    1,    1,   15,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   13,   14,   16,
       15,   23,    1,   23,   13,   14,   24,   44,   24,   24,
       26,   24,   26,   16,   30,   42,   30,   42,   24,   44,
       76,   25,   25,   43,   25,   43,    0,   68,   30,   25,
       27,   68,   27,   27,   47,   27,   47,   76,  867,   46,
       27,   46,    1,    2,    2,    2,    2,    2,    2,   25,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       27,   47,   46,  110,   48,    2,   48,  110,   50,   49,
       50,   49,   52,   51,   52,   51,   53,   54,   53,   54,

       57,  868,   57,   74,   55,  116,   55,   56,   60,   56,
       60,   74,  869,  116,   50,   52,   88,   51,   88,   53,
      139,  139,   60,   57,   48,    2,   19,   19,   19,   49,
       51,   56,  118,  870,   54,   89,   19,   89,   19,   53,
       19,   55,  871,   56,   55,  187,  187,   58,   58,  118,
       58,   55,   62,   62,  144,   58,   62,   62,   88,   62,
       82,  144,   82,   19,   19,  872,   19,   19,   82,   19,
      192,  563,   19,   19,   19,   58,   89,  192,  563,   19,
       19,   19,   19,   20,   20,   20,   59,   75,   59,   59,
      873,   59,   95,   20,   95,   20,   59,   20,  874,   61,

       61,   75,   61,  876,   75,   75,   75,   61,  877,   90,
       78,   90,   78,   91,  487,   91,   59,   92,  487,   92,
       20,   20,   78,   20,   20,   95,   20,   61,  586,   20,
       20,   20,   78,   93,  586,   93,   20,   20,   20,   20,
       28,   94,  100,   94,  100,  878,   90,   28,  106,  106,
       91,  106,   28,   96,   93,   96,  197,  197,   99,   99,
       99,  611,  104,   92,  104,  100,   94,   97,  611,   97,
       99,   99,   99,  892,   28,   28,  893,   28,   28,  894,
       28,   28,  895,   28,   28,  896,   28,   28,   96,   28,
       28,   28,   28,   28,   65,   65,  104,   65,   65,  897,

       65,   65,   97,   65,   65,  898,   65,   65,  899,   65,
       65,   65,   65,   65,   98,  101,   98,  101,  102,  103,
      102,  103,  107,  107,  117,  107,  129,  149,  153,  149,
      153,  500,  120,  129,  120,  500,  129,  129,  117,  102,
      900,  117,  117,  117,  120,  151,  901,  151,   98,  152,
      103,  152,  902,  101,  120,   98,  154,  156,  154,  156,
      157,  903,  157,  153,  155,  155,  155,  158,  159,  158,
      159,  904,  151,  160,  152,  160,  155,  155,  155,  161,
      156,  161,  162,  157,  162,  165,  905,  165,  163,  163,
      163,  162,  906,  907,  158,  159,  167,  160,  167,  154,

      163,  163,  163,  164,  164,  164,  166,  164,  166,  164,
      168,  169,  168,  169,  908,  177,  209,  209,  227,  167,
      227,  165,  177,  161,  209,  177,  177,  228,  909,  228,
      229,  229,  229,  166,  230,  910,  230,  231,  231,  231,
      912,  536,  229,  229,  229,  536,  233,  227,  233,  231,
      231,  231,  168,  913,  169,  232,  232,  232,  234,  235,
      234,  235,  914,  237,  235,  237,  238,  228,  238,  236,
      236,  236,  230,  239,  243,  239,  243,  245,  915,  245,
      233,  236,  236,  236,  553,  240,  240,  240,  553,  240,
      237,  240,  918,  238,  244,  244,  244,  260,  260,  239,

      234,  247,  382,  247,  382,  260,  244,  244,  244,  919,
      920,  245,  246,  246,  246,  243,  248,  248,  248,  257,
      257,  257,  921,  922,  246,  246,  246,  311,  247,  311,
      248,  924,  925,  257,  261,  261,  261,  277,  277,  277,
      257,  273,  273,  273,  296,  296,  296,  312,  261,  312,
      926,  277,  314,  314,  314,  273,  314,  315,  314,  315,
      316,  316,  316,  317,  311,  317,  318,  931,  318,  248,
      248,  932,  933,  261,  273,  313,  313,  313,  312,  315,
      277,  319,  322,  319,  322,  935,  936,  313,  313,  313,
      320,  320,  320,  937,  321,  321,  321,  318,  321,  323,

      321,  323,  320,  320,  320,  324,  317,  324,  325,  938,
      325,  326,  326,  326,  939,  327,  327,  327,  319,  327,
      940,  327,  322,  326,  326,  326,  328,  941,  328,  329,
      329,  329,  330,  330,  330,  419,  330,  419,  330,  323,
      942,  329,  329,  329,  943,  944,  325,  331,  331,  331,
      419,  324,  332,  332,  332,  333,  333,  333,  945,  331,
      331,  331,  344,  344,  344,  440,  332,  440,  947,  328,
      345,  345,  345,  352,  352,  352,  344,  353,  353,  353,
      356,  356,  356,  360,  360,  360,  948,  352,  366,  366,
      366,  367,  367,  367,  356,  949,  950,  360,  370,  370,

      370,  951,  366,  372,  372,  372,  373,  373,  373,  952,
      953,  360,  370,  393,  393,  393,  407,  372,  407,  408,
      954,  408,  409,  409,  409,  412,  409,  412,  409,  955,
      414,  413,  414,  413,  415,  956,  415,  416,  416,  416,
      422,  416,  422,  416,  426,  958,  426,  420,  420,  420,
      959,  960,  412,  432,  432,  432,  407,  408,  413,  420,
      420,  420,  421,  421,  421,  984,  985,  414,  443,  443,
      443,  426,  415,  986,  421,  421,  421,  422,  423,  423,
      423,  493,  423,  493,  423,  427,  427,  427,  505,  427,
      505,  427,  430,  430,  430,  431,  431,  431,  506,  431,

      506,  431,  988,  989,  430,  430,  430,  444,  444,  444,
      450,  450,  450,  453,  453,  453,  454,  454,  454,  990,
      991,  444,  455,  455,  455,  992,  993,  453,  458,  458,
      458,  459,  459,  459,  994,  505,  455,  466,  466,  466,
      506,  995,  458,  469,  469,  469,  470,  470,  470,  455,
      472,  472,  472,  507,  509,  507,  509,  469,  508,  508,
      508,  510,  996,  510,  511,  997,  511,  512,  512,  512,
      508,  508,  508,  515,  515,  515,  516,  998,  516,  512,
      512,  512, 1000, 1001,  507,  513,  513,  513, 1004,  513,
      509,  513,  511,  514,  514,  514, 1005,  517,  517,  517,

      533,  533,  533, 1006, 1007,  514,  514,  514,  510,  517,
      517,  517, 1008,  518,  518,  518,  516,  518, 1009,  518,
      532,  532,  532,  541,  541,  541,  542,  542,  542,  543,
      543,  543, 1010,  545,  532,  545,  547,  547,  547, 1011,
      542,  555,  555,  555,  556,  556,  556,  565,  565,  565,
      593,  594,  593,  594,  656,  555,  656, 1015,  565,  592,
      592,  592, 1016, 1017,  565,  595,  595,  595,  597, 1020,
      597,  592,  592,  592,  603,  603,  603,  595,  595,  595,
      594,  593,  596,  596,  596, 1021,  596,  597,  596,  598,
      598,  598, 1022,  604,  599,  604,  599, 1023,  670,  599,

      670,  598,  598,  598,  599,  608,  608,  608, 1024,  599,
      599,  695,  599,  695, 1025,  599,  600,  600,  600,  608,
      600,  681,  600,  681,  605,  605,  605,  606,  606,  606,
      695,  606,  682,  606,  682,  604,  605,  605,  605,  612,
      612,  612, 1026,  613,  613,  613,  618,  618,  618,  619,
      619,  619, 1027,  612,  613,  620,  620,  620,  681,  694,
      613,  694,  682,  619,  627,  627,  627, 1028, 1029,  620,
      633,  633,  633,  636,  636,  636,  640,  640,  640,  641,
      641,  641,  694,  686,  633,  686,  715,  636,  715, 1031,
      640,  701,  701,  701,  679,  679,  679, 1034,  689,  636,

      689,  735,  690,  735,  690,  636,  679,  679,  679,  633,
      680,  680,  680,  799,  680,  799,  680,  683,  683,  683,
      691,  683,  691,  683,  687,  687,  687,  688,  688,  688,
      686,  688,  692,  688,  692,  689,  687,  687,  687,  690,
      784,  693,  784,  693,  691,  696,  696,  696,  792,  696,
      792,  696,  700,  700,  700,  692,  693,  706,  706,  706,
      799, 1037,  691,  707,  707,  707,  700,  717,  717,  717,
     1038,  706,  692,  718,  718,  718,  784,  796,  693,  796,
      792,  717,  719,  719,  719,  720,  720,  720,  730,  730,
      730,  731,  731,  731, 1039,  796,  719,  732,  732,  732,

     1040,  785,  730,  785, 1041,  731,  733,  733,  733, 1042,
     1043,  732,  737,  737,  737,  738,  738,  738,  744,  744,
      744,  745,  745,  745, 1044, 1045,  737,  781,  781,  781,
      786,  781,  786,  781, 1069,  745,  787,  787,  787,  790,
      787,  790,  787,  785,  793,  791,  793,  791,  794,  795,
      794,  795,  798,  797,  798,  797,  801,  801,  801,  806,
      806,  806,  817,  817,  817,  818,  818,  818,  786,  791,
      828,  828,  828, 1070,  793,  790,  829,  829,  829,  830,
      830,  830, 1073,  891,  828,  891,  795,  797, 1074,  881,
      794,  881,  798,  830,  831,  831,  831,  832,  832,  832,

      837,  837,  837,  843,  843,  843,  844,  844,  844,  845,
      845,  845,  879,  879,  879, 1075,  881,  843,  880,  880,
      880,  891, 1076,  845,  879,  879,  879,  882,  882,  882,
      880,  880,  880,  883, 1077,  883,  884,  884,  884,  882,
      882,  882,  883,  885,  886,  885,  886, 1078,  884,  884,
      884,  887, 1079,  887,  888,  888,  888,  889, 1080,  889,
      916,  916,  916,  911,  911,  911,  888,  888,  888, 1082,
      885,  890,  890,  890,  886,  884,  887,  911, 1087,  981,
      882,  981, 1091,  890,  890,  890,  917,  917,  917,  923,
      923,  923,  927,  927,  927,  928,  928,  928,  929,  929,

      929,  889,  981,  923,  961,  961,  961, 1092, 1093,  928,
      964,  964,  964,  968,  890,  968,  961,  961,  961,  962,
      962,  962, 1094,  962, 1095,  962,  963,  963,  963,  965,
      965,  965,  966,  966,  966,  967,  967,  967,  963,  963,
      963,  965,  965,  965,  966,  966,  966,  969, 1096,  969,
      970,  970,  970,  969, 1101,  968,  971,  971,  971,  972,
     1102,  972,  970,  970,  970,  973,  974,  973,  974,  975,
      978,  975,  978,  976,  976,  976,  977,  977,  977,  979,
      979,  979,  974, 1105,  972,  976,  976,  976,  980,  980,
      980,  979,  979,  979, 1106, 1107,  975,  978,  982, 1103,

      982,  983,  983,  983, 1108,  973, 1103,  974,  987,  987,
      987, 1109,  999,  999,  999,  983, 1002, 1002, 1002, 1003,
     1003, 1003,  987, 1110, 1111,  982,  999, 1012, 1012, 1012,
     1002, 1013, 1013, 1013, 1014, 1014, 1014, 1018, 1018, 1018,
     1112, 1012, 1046, 1046, 1046, 1013, 1046, 1113, 1046, 1049,
     1049, 1049, 1050, 1050, 1050, 1051, 1051, 1051, 1053, 1051,
     1053, 1051, 1115, 1116, 1050, 1050, 1050, 1052, 1052, 1052,
     1054, 1117, 1054, 1055, 1055, 1055, 1056, 1118, 1056, 1057,
     1058, 1057, 1058, 1060, 1057, 1060, 1061, 1061, 1061, 1062,
     1064, 1062, 1064, 1120, 1057, 1059, 1059, 1059, 1053, 1122,

     1057, 1123, 1147, 1058, 1063, 1063, 1063, 1059, 1059, 1059,
     1130, 1054, 1130, 1148, 1064, 1067, 1067, 1067, 1056, 1065,
     1065, 1065, 1149, 1150, 1060, 1066, 1066, 1066, 1138, 1062,
     1138, 1065, 1065, 1065, 1068, 1068, 1068, 1151, 1152, 1066,
     1071, 1071, 1071, 1072, 1072, 1072, 1144, 1130, 1068, 1081,
     1081, 1081, 1153, 1144, 1071, 1083, 1083, 1083, 1084, 1084,
     1084, 1154, 1138, 1081, 1085, 1085, 1085, 1157, 1127, 1083,
     1127, 1168, 1084, 1086, 1086, 1086, 1088, 1088, 1088, 1089,
     1089, 1089, 1090, 1090, 1090, 1169, 1170, 1086, 1097, 1097,
     1097, 1127, 1129, 1089, 1129, 1171, 1090, 1098, 1098, 1098,

     1173, 1178, 1097, 1099, 1099, 1099, 1100, 1100, 1100, 1124,
     1124, 1124, 1131, 1124, 1131, 1124, 1128, 1128, 1128, 1132,
     1100, 1132, 1133, 1129, 1133, 1134, 1134, 1134, 1128, 1128,
     1128, 1135, 1135, 1135, 1179, 1180, 1131, 1134, 1134, 1134,
     1181, 1136, 1132, 1136, 1182, 1137, 1183, 1137, 1184, 1185,
     1131, 1186, 1187, 1133, 1139, 1139, 1139, 1188, 1189, 1100,
     1137, 1141, 1141, 1141, 1190, 1191, 1139, 1139, 1139, 1140,
     1140, 1140, 1192, 1140, 1193, 1140, 1142, 1142, 1142, 1143,
     1143, 1143, 1136, 1145, 1145, 1145, 1146, 1146, 1146, 1194,
     1142, 1155, 1155, 1155, 1156, 1156, 1156, 1145, 1158, 1158,

     1158, 1159, 1159, 1159, 1195, 1155, 1160, 1160, 1160, 1161,
     1161, 1161, 1158, 1162, 1162, 1162, 1163, 1163, 1163, 1164,
     1164, 1164, 1197, 1161, 1165, 1165, 1165, 1166, 1166, 1166,
     1163, 1215, 1216, 1164, 1167, 1167, 1167, 1172, 1172, 1172,
     1219, 1166, 1174, 1174, 1174, 1175, 1175, 1175, 1176, 1176,
     1176, 1172, 1177, 1177, 1177, 1198, 1201, 1198, 1201, 1175,
     1199, 1199, 1199, 1200, 1200, 1200, 1177, 1202, 1204, 1202,
     1204, 1220, 1199, 1199, 1199, 1203, 1205, 1203, 1205, 1206,
     1221, 1206, 1207, 1207, 1207, 1208, 1198, 1208, 1209, 1222,
     1209, 1210, 1223, 1210, 1224, 1211, 1211, 1211, 1225, 1211,

     1201, 1211, 1226, 1202, 1214, 1214, 1214, 1203, 1228, 1235,
     1204, 1236, 1208, 1217, 1217, 1217, 1205, 1237, 1210, 1206,
     1218, 1218, 1218, 1227, 1227, 1227, 1209, 1217, 1229, 1229,
     1229, 1230, 1230, 1230, 1231, 1231, 1231, 1232, 1232, 1232,
     1233, 1233, 1233, 1234, 1234, 1234, 1238, 1241, 1231, 1239,
     1239, 1239, 1240, 1240, 1240, 1242, 1242, 1242, 1243, 1243,
     1243, 1246, 1247, 1239, 1244, 1244, 1244, 1245, 1245, 1245,
     1248, 1249, 1243, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
     1257, 1245, 1258, 1259, 1261, 1262, 1263, 1264, 1275, 1264,
     1265, 1265, 1265, 1266, 1267, 1266, 1267, 1268, 1269, 1268,

     1269, 1270, 1271, 1270, 1271, 1272, 1273, 1272, 1273, 1274,
     1276, 1274, 1277, 1277, 1277, 1278, 1279, 1280, 1281, 1282,
     1266, 1283, 1284, 1264, 1268, 1285, 1286, 1288, 1289, 1269,
     1291, 1293, 1270, 1297, 1298, 1267, 1287, 1287, 1287, 1290,
     1290, 1290, 1299, 1271, 1300, 1301, 1272, 1302, 1273, 1303,
     1274, 1304, 1305, 1290, 1292, 1292, 1292, 1294, 1294, 1294,
     1295, 1295, 1295, 1296, 1296, 1296, 1303, 1308, 1309, 1310,
     1311, 1312, 1313, 1314, 1295, 1314, 1315, 1316, 1315, 1316,
     1317, 1318, 1317, 1318, 1319, 1324, 1319, 1320, 1320, 1320,
     1321, 1321, 1321, 1322, 1325, 1322, 1323, 1323, 1323, 1320,

     1320, 1320, 1321, 1321, 1321, 1317, 1326, 1319, 1323, 1323,
     1323, 1327, 1328, 1329, 1330, 1314, 1331, 1315, 1318, 1316,
     1332, 1332, 1332, 1334, 1322, 1333, 1333, 1333, 1335, 1336,
     1329, 1337, 1337, 1337, 1332, 1338, 1338, 1338, 1339, 1333,
     1340, 1341, 1341, 1341, 1342, 1337, 1343, 1345, 1346, 1348,
     1349, 1350, 1351, 1352, 1353, 1355, 1356, 1357, 1358, 1371,
     1358, 1359, 1359, 1359, 1360, 1361, 1360, 1361, 1363, 1362,
     1363, 1362, 1373, 1359, 1359, 1359, 1364, 1364, 1364, 1365,
     1365, 1365, 1366, 1366, 1366, 1367, 1367, 1367, 1364, 1364,
     1364, 1368, 1363, 1368, 1366, 1366, 1366, 1374, 1376, 1358,

     1369, 1369, 1369, 1377, 1360, 1362, 1378, 1361, 1370, 1370,
     1370, 1379, 1369, 1369, 1369, 1372, 1372, 1372, 1375, 1375,
     1375, 1380, 1380, 1380, 1381, 1381, 1381, 1384, 1368, 1372,
     1385, 1388, 1375, 1389, 1390, 1380, 1382, 1382, 1382, 1383,
     1383, 1383, 1386, 1386, 1386, 1387, 1387, 1387, 1391, 1393,
     1382, 1394, 1395, 1396, 1397, 1398, 1386, 1399, 1400, 1402,
     1403, 1403, 1403, 1404, 1404, 1404, 1405, 1405, 1405, 1406,
     1414, 1406, 1403, 1403, 1403, 1404, 1404, 1404, 1407, 1408,
     1407, 1408, 1409, 1418, 1409, 1410, 1410, 1410, 1411, 1411,
     1411, 1412, 1406, 1412, 1413, 1413, 1413, 1415, 1415, 1415,

     1416, 1416, 1416, 1417, 1417, 1417, 1420, 1420, 1420, 1407,
     1421, 1415, 1419, 1419, 1419, 1422, 1409, 1417, 1423, 1424,
     1408, 1425, 1425, 1425, 1427, 1428, 1419, 1412, 1426, 1426,
     1426, 1429, 1429, 1429, 1430, 1430, 1430, 1431, 1432, 1432,
     1432, 1433, 1435, 1436, 1437, 1429, 1438, 1439, 1440, 1441,
     1443, 1456, 1432, 1444, 1444, 1444, 1445, 1445, 1445, 1446,
     1446, 1446, 1447, 1458, 1447, 1444, 1444, 1444, 1448, 1459,
     1448, 1449, 1449, 1449, 1450, 1451, 1450, 1451, 1452, 1452,
     1452, 1460, 1461, 1449, 1449, 1449, 1453, 1453, 1453, 1454,
     1454, 1454, 1452, 1447, 1455, 1455, 1455, 1457, 1457, 1457,

     1462, 1450, 1463, 1454, 1464, 1464, 1464, 1465, 1465, 1465,
     1468, 1469, 1448, 1466, 1466, 1466, 1451, 1467, 1467, 1467,
     1470, 1465, 1471, 1472, 1473, 1474, 1475, 1466, 1476, 1477,
     1477, 1477, 1478, 1479, 1478, 1479, 1480, 1480, 1480, 1481,
     1481, 1481, 1482, 1487, 1482, 1484, 1484, 1484, 1480, 1480,
     1480, 1483, 1483, 1483, 1485, 1485, 1485, 1482, 1488, 1484,
     1479, 1489, 1490, 1483, 1483, 1483, 1491, 1492, 1478, 1486,
     1486, 1486, 1493, 1494, 1494, 1494, 1495, 1495, 1495, 1496,
     1496, 1496, 1497, 1498, 1499, 1500, 1501, 1494, 1502, 1503,
     1504, 1505, 1506, 1507, 1506, 1507, 1508, 1508, 1508, 1509,

     1513, 1509, 1510, 1510, 1510, 1511, 1511, 1511, 1507, 1512,
     1512, 1512, 1514, 1515, 1510, 1510, 1510, 1516, 1516, 1516,
     1517, 1518, 1519, 1520, 1520, 1520, 1521, 1522, 1525, 1527,
     1528, 1516, 1529, 1530, 1506, 1530, 1531, 1509, 1531, 1532,
     1534, 1532, 1533, 1533, 1533, 1539, 1541, 1516, 1530, 1535,
     1535, 1535, 1536, 1536, 1536, 1537, 1537, 1537, 1538, 1538,
     1538, 1542, 1543, 1535, 1545, 1546, 1536, 1548, 1558, 1537,
     1540, 1540, 1540, 1549, 1531, 1549, 1550, 1551, 1550, 1551,
     1561, 1532, 1563, 1564, 1540, 1552, 1552, 1552, 1553, 1553,
     1553, 1554, 1554, 1554, 1565, 1555, 1555, 1555, 1566, 1552,

     1574, 1576, 1553, 1556, 1556, 1556, 1579, 1580, 1551, 1555,
     1581, 1549, 1557, 1557, 1557, 1559, 1559, 1559, 1550, 1560,
     1560, 1560, 1562, 1562, 1562, 1567, 1568, 1567, 1568, 1559,
     1582, 1569, 1584, 1569, 1584, 1587, 1562, 1570, 1570, 1570,
     1571, 1571, 1571, 1572, 1572, 1572, 1573, 1573, 1573, 1588,
     1590, 1570, 1575, 1575, 1575, 1591, 1592, 1568, 1577, 1577,
     1577, 1578, 1578, 1578, 1583, 1593, 1583, 1567, 1569, 1584,
     1597, 1585, 1577, 1585, 1586, 1586, 1586, 1589, 1589, 1589,
     1594, 1598, 1594, 1595, 1596, 1595, 1596, 1599, 1601, 1604,
     1603, 1604, 1603, 1607, 1609, 1583, 1605, 1605, 1605, 1606,

     1606, 1606, 1608, 1608, 1608, 1616, 1619, 1585, 1605, 1605,
     1605, 1625, 1610, 1606, 1610, 1627, 1608, 1594, 1631, 1595,
     1611, 1611, 1611,  866,  864, 1596, 1603, 1612, 1612, 1612,
     1604,  863, 1611, 1611, 1611, 1613, 1613, 1613,  862, 1612,
     1612, 1612, 1614, 1614, 1614, 1615, 1615, 1615, 1617, 1617,
     1617,  861,  860, 1610,  859,  858, 1614, 1618, 1618, 1618,
      857,  856, 1617, 1620, 1620, 1620, 1621, 1621, 1621, 1622,
     1622, 1622, 1623, 1623, 1623, 1620, 1620, 1620, 1621, 1621,
     1621, 1624, 1624, 1624, 1626, 1626, 1626, 1628, 1628, 1628,
     1629, 1629, 1629, 1630, 1630, 1630, 1633, 1633, 1633, 1628,

     1628, 1628, 1634, 1634, 1634, 1635, 1635, 1635, 1636, 1636,
     1636, 1637, 1637, 1637,  855,  854, 1634,  853,  852, 1635,
     1639, 1639, 1639, 1639, 1639, 1640, 1640, 1640, 1640, 1640,
     1641, 1641, 1641, 1641, 1641, 1642, 1642, 1642, 1642, 1642,
     1643, 1643, 1643, 1643, 1643, 1644, 1644, 1644, 1644, 1644,
     1645, 1645, 1645, 1645, 1645, 1646,  851,  850, 1646, 1647,
     1647, 1647, 1647, 1648, 1648,  849, 1648, 1648, 1649, 1649,
     1649,  848, 1649,  847,  846,  842,  841,  840,  839,  838,
      836,  835,  834,  833,  827,  826,  825,  824,  823,  822,
      821,  820,  819,  816,  815,  814,  813,  812,  811,  810,

      809,  808,  807,  805,  804,  803,  802,  800,  779,  778,
      777,  776,  775,  774,  773,  772,  771,  770,  769,  768,
      767,  766,  765,  764,  763,  762,  761,  760,  759,  758,
      757,  756,  755,  754,  753,  752,  751,  750,  749,  748,
      747,  746,  743,  742,  741,  740,  739,  736,  734,  729,
      728,  727,  726,  725,  724,  723,  722,  721,  716,  714,
      713,  712,  711,  710,  709,  708,  705,  704,  703,  702,
      699,  678,  676,  675,  674,  673,  672,  671,  669,  666,
      665,  664,  663,  662,  661,  660,  659,  658,  657,  655,
      654,  653,  652,  651,  650,  649,  648,  647,  646,  645,

      644,  643,  642,  639,  638,  637,  635,  634,  632,  631,
      630,  629,  628,  626,  625,  624,  623,  622,  621,  617,
      616,  615,  614,  610,  609,  607,  591,  590,  589,  588,
      587,  585,  584,  583,  582,  581,  580,  579,  578,  577,
      576,  575,  574,  573,  572,  569,  568,  567,  566,  562,
      561,  559,  558,  557,  554,  552,  551,  550,  549,  548,
      546,  544,  540,  539,  538,  537,  535,  534,  531,  530,
      529,  528,  527,  526,  525,  524,  523,  522,  521,  504,
      503,  501,  499,  498,  497,  496,  495,  494,  492,  491,
      490,  489,  488,  486,  485,  484,  483,  482,  481,  480,

      479,  478,  477,  476,  475,  474,  473,  471,  468,  467,
      465,  464,  463,  462,  461,  460,  457,  456,  452,  451,
      449,  448,  447,  446,  445,  442,  441,  439,  438,  437,
      436,  435,  434,  433,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  392,  391,  390,
      389,  388,  387,  386,  384,  383,  381,  380,  379,  378,
      377,  376,  375,  374,  371,  369,  368,  365,  364,  363,
      362,  361,  359,  358,  357,  355,  354,  351,  350,  349,
      348,  347,  346,  343,  342,  341,  340,  339,  338,  337,
      336,  335,  334,  310,  309,  307,  306,  305,  304,  303,

      302,  301,  300,  299,  298,  297,  295,  294,  293,  292,
      291,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  276,  275,  274,  272,  271,  270,
      269,  268,  267,  266,  265,  264,  263,  262,  259,  258,
      256,  255,  254,  253,  252,  251,  250,  249,  226,  225,
      224,  223,  222,  221,  220,  219,  218,  217,  216,  215,
      214,  213,  212,  211,  210,  208,  207,  206,  205,  204,
      203,  202,  201,  200,  199,  198,  196,  195,  194,  193,
      191,  190,  189,  188,  186,  185,  184,  183,  182,  181,
      180,  179,  178,  176,  175,  174,  173,  172,  170,  148,

      147,  146,  145,  143,  142,  141,  140,  138,  137,  136,
      135,  134,  133,  132,  131,  130,  128,  127,  126,  125,
      124,  123,  122,  121,  119,  115,  114,  113,  112,  111,
      109,  108,  105,   86,   81,   80,   79,   77,   73,   72,
       71,   70,   69,   67,   64,   40,   37,   17,    8,    7,
        6,    5,    4,    3, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,

     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[184] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 
    1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "OSParseosol.l"
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin, 
 * @version 1.1, 10/07/2008
 * @since   OS1.1
 *
 * \remarks
 * Copyright (C) 2005-2008, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "OSParseosol.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSoLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"

#define PARSERDEBUG

#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;








#line 100 "OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 1848 "OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 110 "OSParseosol.l"


 
#line 2094 "OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1639 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3355 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 113 "OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 118 "OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 119 "OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 120 "OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 122 "OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 136 "OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 138 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 139 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 140 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 141 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 142 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 143 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 144 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 145 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 146 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 147 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 148 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 149 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 150 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 151 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 152 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 153 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 154 "OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 155 "OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 156 "OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 158 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 159 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 160 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 161 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 162 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 163 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 164 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 165 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 166 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 167 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 168 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 169 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 170 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 171 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 172 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 173 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 174 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 175 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 176 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 177 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 178 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 179 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 180 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 181 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 182 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 183 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 184 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 185 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 188 "OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 189 "OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 190 "OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 191 "OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 192 "OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 193 "OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 194 "OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 195 "OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 196 "OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 197 "OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 198 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 199 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 201 "OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 202 "OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 203 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 204 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 205 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 206 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 207 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 208 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 209 "OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 210 "OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 211 "OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 212 "OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 213 "OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 214 "OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 215 "OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 216 "OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 217 "OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 218 "OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 219 "OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 220 "OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 221 "OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 222 "OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 223 "OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 224 "OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 226 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 227 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 228 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZESTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 229 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZEEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 230 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 231 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 232 "OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 233 "OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 235 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 236 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 238 "OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 239 "OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 240 "OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 241 "OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 242 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 243 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 244 "OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 245 "OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 246 "OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 247 "OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 248 "OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 249 "OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 250 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 251 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 252 "OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 253 "OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 254 "OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 255 "OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 256 "OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 257 "OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 258 "OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 259 "OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 260 "OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 261 "OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 262 "OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 263 "OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 264 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 265 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 266 "OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 267 "OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 268 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 269 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 270 "OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 271 "OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 274 "OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 275 "OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 276 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 277 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 278 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 279 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 280 "OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 281 "OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 282 "OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 283 "OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 284 "OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 285 "OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 286 "OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 287 "OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 288 "OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 289 "OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 290 "OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 291 "OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 292 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 293 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 294 "OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 295 "OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 296 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 297 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 298 "OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 299 "OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 300 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 301 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 302 "OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 303 "OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 304 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 305 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 306 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 307 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 308 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 309 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 312 "OSParseosol.l"
{ YY_PRINT; /*yylval->sval = strdup( yytext);*/   yylval->sval = yytext; yyextra->errorText = yylval->sval;  return (ELEMENTTEXT); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 315 "OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 172:
#line 317 "OSParseosol.l"
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 317 "OSParseosol.l"
;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 318 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 320 "OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 176:
#line 322 "OSParseosol.l"
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 322 "OSParseosol.l"
;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 323 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 326 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 327 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;  return(ATTRIBUTETEXT);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 328 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 330 "OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 342 "OSParseosol.l"
ECHO;
	YY_BREAK
#line 3297 "OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1639 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1639 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1638);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 342 "OSParseosol.l"





