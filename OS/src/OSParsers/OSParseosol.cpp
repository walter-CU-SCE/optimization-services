#line 2 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

#line 4 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osollex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 188
#define YY_END_OF_BUFFER 189
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1662] =
    {   0,
        0,    0,  186,  186,  184,  184,  185,  185,    0,    0,
        0,    0,    0,    0,    0,    0,  189,  187,    1,    1,
        1,    2,  175,  175,    5,  175,    4,  187,    3,  175,
      186,  188,  184,  185,  177,  178,  177,  181,  182,  181,
      175,  175,  175,    0,    3,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,    5,    4,  175,
        5,  175,    6,    0,    0,  180,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  175,  186,  184,  185,    0,  183,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,

      175,  175,  175,  175,    0,  175,    5,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    5,  179,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,    0,  175,  175,  175,  175,  175,  175,
        5,  176,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  167,    0,    0,    0,

        0,    0,    0,    0,    0,   67,    0,    0,    0,  159,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      151,    0,    0,    0,  153,  175,  175,  175,  175,  175,
       23,  175,  175,  175,  175,  175,  175,  175,  175,    0,
       40,   41,  175,  175,  175,  175,  175,  175,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  113,

        0,    0,    0,    0,    0,    0,  103,    0,    0,  175,
      175,  175,    0,  175,   23,  175,  175,  175,  175,  175,
        0,  175,  175,  175,  175,  175,    0,  175,  175,  175,
        0,  175,    0,  168,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   68,    0,    0,    0,    0,
        0,    0,    0,  160,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  152,    0,    0,    0,
        0,    0,  154,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   79,    0,    0,    0,    0,    0,
        0,    0,   59,   58,   93,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  175,  175,    0,
       38,   39,  175,  175,  175,  175,  175,    0,   30,   31,
      175,  175,  175,  175,    0,   48,   49,  175,  175,    0,
       36,   37,  175,    0,  168,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   68,    0,    0,    0,    0,
        0,    0,  160,    0,    0,    0,   60,    0,    0,    0,
        0,  114,    0,    0,    0,    0,    0,    0,  152,    0,
        0,    0,  104,    0,  154,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   63,    0,    0,  175,  175,  175,
      175,  175,  175,  175,  175,  175,    0,  175,   24,  175,
      175,  175,    0,   32,   33,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   80,    0,    0,
        0,    0,    0,    0,    0,   60,    0,   94,    0,    0,
        0,  114,    0,    0,    0,    0,    0,    0,    0,    0,
      104,    0,    0,    0,   89,    0,    0,    0,   61,    0,
        0,    0,    0,    0,   83,  105,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  137,    0,    0,
       65,    0,    0,    0,    0,    0,  175,  175,  175,  175,

      175,    0,  175,  175,  175,    0,   44,   45,   24,  175,
      175,  175,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   80,    0,    0,    0,    0,    0,
        0,    0,    0,   94,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   64,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   87,  125,    0,    0,    0,    0,    0,
        0,    0,    0,   85,    0,  175,    0,  175,  175,  175,
        0,   50,   51,  175,  175,    0,  175,  175,  175,  175,

      175,  175,  175,  175,    0,   52,   53,    0,    0,   90,
        0,    0,    0,    0,    0,   62,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   84,    0,  106,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  138,    0,    0,    0,    0,   66,    0,    0,    0,
        0,    0,   64,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  139,    0,
       46,   47,  175,  175,  175,  175,    0,   42,   43,  175,

      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
        0,   90,    0,    0,    0,    0,   62,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   84,  106,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   88,
        0,  126,  138,    0,    0,    0,    0,   66,    0,    0,
        0,    0,    0,    0,   86,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  155,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   71,    0,    0,    0,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,

      175,  175,  175,  175,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   88,  126,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   86,
        0,  140,  163,    0,    0,    0,  119,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   99,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   73,
        0,    0,    0,  175,    0,  175,   25,  175,    0,  175,
      175,   21,  175,  175,  175,   19,  175,  175,  175,  175,
      175,   17,  175,  175,   16,  175,  175,  175,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       72,    0,    0,    0,  140,  109,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   75,    0,  101,   95,
        0,   69,   91,    0,    0,    0,    0,    0,    0,  173,
        0,    0,    0,   34,   35,   25,    0,   54,   55,  175,
        0,   21,  175,  175,   19,  175,  175,  175,  175,  175,
       17,  175,   16,  175,  175,    0,   56,   57,    0,  164,
        0,    0,    0,    0,  120,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  100,    0,    0,
      156,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       74,   72,    0,    0,    0,    0,  133,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   97,    0,    0,    0,
        0,    0,  115,  171,    0,    0,    0,   26,   27,  175,
      175,  175,  175,  175,  175,  175,  175,    9,  175,  175,
      175,  175,    0,  164,    0,  110,    0,    0,  120,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   76,    0,
        0,  102,  100,    0,   96,    0,    0,   70,    0,   92,
        0,    0,    0,    0,    0,    0,   74,    0,  174,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   81,    0,
      175,  175,    8,  175,  175,  175,  175,  175,  175,    9,
      175,  175,  175,    0,   28,   29,  110,    0,    0,    0,
      134,    0,    0,    0,    0,    0,    0,    0,    0,   76,
        0,  102,   96,    0,   98,   70,   92,    0,    0,    0,
        0,    0,    0,  116,  174,    0,  172,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  135,    0,    0,    0,  175,    8,  175,  175,
      175,  175,  175,  175,  175,  175,  175,    0,    0,  134,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   98,
        0,    0,    0,    0,    0,  116,  172,    0,   82,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  123,   77,
        0,    0,    0,    0,    0,    0,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      136,    0,    0,   82,    0,    0,  117,    0,    0,  169,
        0,    0,    0,    0,    0,    0,  129,    0,    0,    0,
      175,  175,  175,  175,  175,  175,  175,   10,  175,   11,
      175,  175,   12,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  124,    0,   78,    0,    0,    0,  136,
        0,    0,    0,    0,  145,    0,    0,    0,    0,    0,
        0,    0,  107,    0,    0,  175,  175,   13,  175,  175,
      175,  175,   10,   11,  175,   12,    0,    0,  118,    0,
        0,    0,  170,    0,    0,    0,    0,  124,   78,    0,
        0,    0,  130,    0,    0,    0,  131,    0,    0,    0,
        0,    0,    0,    0,  111,    0,  175,   14,   13,  175,
      175,  175,  175,  175,    0,  118,    0,  146,    0,  170,
        0,    0,    0,    0,    0,    0,  130,    0,  108,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   14,

      175,  175,  175,    7,  175,  175,    0,  132,  146,    0,
        0,    0,    0,    0,    0,    0,  108,    0,  112,    0,
        0,    0,    0,  141,    0,    0,    0,    0,  175,  175,
        7,  175,  175,   22,  132,    0,    0,    0,    0,    0,
        0,    0,  112,    0,    0,  161,  157,    0,  121,    0,
        0,    0,  175,  175,  175,   22,    0,    0,    0,    0,
      142,    0,    0,    0,    0,    0,  165,    0,    0,  127,
        0,  175,  175,  175,    0,    0,  162,    0,  158,  142,
        0,    0,  122,    0,    0,    0,    0,    0,    0,  175,
      175,  175,    0,  166,  162,  158,    0,  122,    0,    0,

      128,    0,    0,    0,    0,  175,  175,  175,  166,    0,
        0,  128,    0,    0,    0,    0,  175,  175,  175,    0,
        0,    0,  143,    0,  149,  175,  175,  175,    0,    0,
        0,    0,  175,  175,  175,   15,    0,  144,    0,    0,
      150,    0,  175,  175,   18,   15,  144,    0,  150,    0,
      175,   20,   18,    0,  147,   20,    0,    0,  148,  148,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    7,    1,    1,    8,    1,
        1,    7,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    7,    1,   14,
       15,   16,   17,    7,    7,   18,   19,   20,   21,   22,
        7,    7,   23,   24,   25,   26,   27,   28,   29,   30,
        7,   31,   32,   33,   34,   35,   36,    7,    7,    7,
        1,    7,    1,    1,    7,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,    1,   63,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[64] =
    {   0,
        1,    2,    2,    2,    1,    3,    2,    4,    1,    2,
        2,    2,    2,    2,    1,    5,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1
    } ;

static yyconst flex_int16_t yy_base[1673] =
    {   0,
        0,   63, 3428, 3427, 3436, 3435, 3432, 3431,    0,    0,
        0,    0,   15,   16,    4,   17, 3438, 3445,  125,  182,
        0, 3445,    8,   16,   29,   17,   40,  236, 3445,   21,
        0, 3445,    0,    0, 3445, 3445, 3427, 3445, 3445, 3420,
        0,   22,   30,   23, 3445,   46,   41,   71,   76,   75,
       80,   79,   83,   84,   91,   94,   87,  135,  176,   95,
      187,  144, 3445, 3425,  256, 3445, 3383,    7, 3388, 3391,
     3381, 3379, 3384,   67,  150,    4, 3387,  118, 3366, 3371,
     3388,  177,    0,    0,    0, 3408, 3445,  105,  122,  195,
      196,  199,  200,  228,  236,  220,  240,  301,  258,  229,

      254,  302,  235,  249, 3410,  307,  311, 3412, 3370,   43,
     3375, 3378, 3368, 3366, 3371,   69,  288,   80, 3374,  268,
     3353, 3358, 3375, 3361, 3358, 3355, 3360, 3357,  283, 3368,
     3366, 3344, 3353, 3356, 3345, 3349, 3355, 3342,   91, 3346,
     3343, 3341,   95, 3339, 3341, 3351, 3337,  241, 3445,  316,
      320,  317,  332,  348,  339,  344,  351,  354,  357,  361,
      358,  362,  388,  403,  368,  394,  398,  399,  403,  406,
     3377, 3445, 3339, 3336, 3333, 3338, 3335,  376, 3346, 3344,
     3322, 3331, 3334, 3323, 3327, 3333, 3320,  107, 3324, 3321,
     3319,  123, 3317, 3319, 3329, 3315,  163, 3327, 3326, 3325,

     3324, 3308, 3306, 3306, 3320, 3337, 3318, 3325,  360, 3316,
     3311, 3307, 3313, 3301, 3297, 3307, 3311, 3292, 3290, 3289,
     3311, 3289, 3303, 3289, 3297,  409,  410,  435,  413,  442,
      438,  446,  452,  453,  456,  474,  457,  465,  468,  489,
     3445, 3445,  471,  499,  480,  491,  508,  502,  517, 3300,
     3299, 3298, 3297, 3281, 3279, 3279, 3293,  525, 3292, 3299,
      374,  528, 3286, 3282, 3288, 3276, 3272, 3282, 3286, 3267,
     3265, 3264,  533, 3265, 3279, 3265,  543, 3262, 3280, 3266,
     3276, 3259, 3259, 3267, 3255, 3273, 3266, 3288, 3257, 3261,
     3275, 3259, 3262, 3263, 3252,  548, 3246, 3242, 3239, 3267,

     3255,  188, 3250, 3253, 3256, 3251, 3445, 3263, 3253,  524,
      539,  563,  554,  547,  578,  560,  571,  575,  576,  591,
      594,  585,  595,  596,  599,  615,  630,  600,  607,  638,
      655,  663,  666,  622, 3233, 3251, 3237, 3247, 3230, 3230,
     3238, 3226, 3244, 3237,  669,  641, 3259, 3228, 3232, 3246,
     3230, 3233,  672,  687, 3234, 3223,  690, 3217, 3213, 3210,
      693, 3227,  389, 3222, 3225,  696,  699, 3228, 3223,  711,
     3235,  714,  717, 3225, 3207, 3221, 3219, 3202, 3224, 3219,
     3218,  615, 3204, 3212, 3445, 3197, 3202, 3216, 3194, 3199,
     3191, 3201,  722, 3445, 3216, 3188, 3192, 3205, 3186, 3185,

     3185, 3199, 3183, 3182, 3186, 3197, 3195,  691,  670,  729,
     3445, 3445,  646,  694,  720,  725,  726,  744, 3445, 3445,
      735,  751,  754,  746,  769, 3445, 3445,  765,  766,  781,
     3445, 3445,  788,  806,  791, 3178, 3192, 3190, 3173, 3195,
     3190, 3189,  661, 3175, 3183,  813,  816, 3168, 3173, 3187,
     3165, 3170,  819, 3162, 3172,  822,  825,  831, 3160, 3164,
      837,  840, 3177, 3158, 3157, 3157, 3171, 3155,  846, 3154,
     3158,  852,  855, 3169,  859, 3167, 3167, 3147, 3161, 3150,
     3149, 3151, 3150, 3152, 3151, 3156, 3140, 3152, 3151,  415,
     3144, 3139, 3144, 3126, 3135,  766, 3132, 3140, 3129, 3127,

     3141, 3140,  617, 3135, 3445, 3130, 3130,  785,  850,  851,
      855,  870,  861,  862,  865,  885,  906,  901,  891,  782,
      904,  922,  925, 3445, 3445, 3140, 3120, 3134, 3123, 3122,
     3124, 3123, 3125, 3124, 3129, 3113,  940,  943, 3125, 3124,
      731, 3117, 3112, 3117, 3099,  946,  949,  955, 3108,  791,
     3105,  958, 3113, 3102, 3100, 3114, 3113,  869, 3108,  964,
      967, 3103, 3103, 3105, 3445, 3099, 3094,  244, 3445,  954,
     3093, 3098, 3104, 3109, 3445, 3445, 3086, 3090, 3109, 3086,
     3081, 3101, 3081, 3091, 3090, 3094, 3079, 3091, 3090, 3090,
      138, 3077, 3077, 3090, 3085, 3084,  982,  918,  961,  962,

      991, 1009,  976, 1016, 1009, 1043, 3445, 3445,  997,  866,
     1000, 1050, 1053, 3079, 1065, 3073, 3068,  327, 1068, 1056,
     3067, 3072, 3078, 3083, 1032, 1076, 1084, 3060, 3064, 3083,
     3060, 3055, 3075, 1091, 3055, 3065, 3064, 3068, 3053, 1094,
     3065, 3065, 1099, 3052, 3052, 3065, 1102, 1105, 3060, 3059,
     3049, 3059, 3052, 3055, 3058, 3057, 3042, 3035, 3053, 3053,
     3048, 3047,  893, 3050, 3037, 3044, 3032, 3022, 3041, 3025,
     3035, 3025, 3030, 3445, 3445, 3022, 3036,  959, 3038, 3043,
     3017, 3049, 3033, 3445, 3015, 1109, 1126, 1026, 1046, 1100,
     1134, 3445, 3445, 1103, 1144, 1147, 1125, 1129, 1106, 1138,

     1149, 1013, 1010, 1152, 1179, 3445, 3445, 3019, 1168, 1186,
     3029, 3022, 3025, 3028, 1191, 1194, 3027, 3012, 3005, 3023,
     3023, 3018, 3017, 1141, 3020, 1199, 1202, 1208, 1214, 3007,
     3014, 3002, 2992, 3011, 2995, 3005, 2995, 3000, 1217, 1223,
     1226, 1232, 2992, 3006, 1157, 1241, 1244, 3008, 3013, 2987,
     3019, 3003, 1247, 1250, 2985, 2983, 2993, 2996, 2988, 2988,
     2979, 2983, 2995, 2985, 2976, 2990, 2973, 2976, 2989, 2971,
     2986, 2982, 2985, 2989, 2965, 2974, 2967, 2976, 2975, 2982,
     2982, 2968, 2967, 2962, 2987, 2964, 2958, 2959, 3445, 1256,
     3445, 3445, 1224, 1247, 1251, 1254, 1269, 3445, 3445, 1262,

     1266, 1265, 1269, 1270, 1273, 1277, 1274, 1280, 1281, 1284,
     2950, 1312, 2960, 2963, 2955, 2955, 1315, 2946, 2950, 2962,
     2952, 2943, 2957, 2940, 2943, 2956, 2938, 1325, 1328, 2953,
     2949, 2952, 2956, 2932, 2941, 2934, 2943, 2942, 1333, 1336,
     1341, 1344, 1348, 2949, 2949, 2935, 2934, 1351, 2929, 2954,
     2931, 2925, 2926, 1356, 1359, 1362, 2918, 2931, 2916, 2929,
     2928, 2923, 2912, 2918, 2924, 2919, 2906, 2923, 2909, 2898,
     2864, 2867, 2866, 2866, 2807, 3445, 2800, 2796, 2806, 2788,
     2791, 2773, 2768, 2767, 2773, 3445,    8,   44,   72, 1365,
     1371, 1380, 1374, 1389, 1285, 1395, 1386, 1398, 1392, 1414,

     1405, 1431, 1406, 1435,   67,   92,  100,  154,  163,  178,
      171,  210,  236,  241,  244,  270,  302,  293,  316,  328,
      343,  347,  352, 1450,  349,  383,  409,  398, 1421, 1453,
      403,  405,  420,  432,  445, 1457,  448,  446,  484, 1465,
     1468, 1475, 3445,  479,  509,  498, 3445,  515,  515,  551,
      564,  567,  571,  596,  618,  639,  667,  657, 3445,  687,
      681,  694,  719,  749,  773,  805,  794,  796,  804, 3445,
      801,  801,  852, 1478, 1483, 1493, 1496, 1499, 1514, 1521,
     1524, 1502, 1427, 1527, 1530, 1508, 1515, 1505, 1534, 1535,
     1553, 1558, 1549, 1568, 1571, 1563, 1564, 1583, 1600, 1591,

      828,  857,  835, 1607,  842,  857,  895,  896,  902,  889,
      903,  918,  923,  945,  933, 1610,  947,  929, 1613, 1616,
      952,  948,  952,  988,  997, 1000, 1017, 1022, 1628, 1631,
     1634, 1023, 1031, 1065, 1637, 3445, 1038, 1058, 1089, 1072,
     1094, 1100, 1123, 1119, 1147, 1130, 3445, 1153, 3445, 3445,
     1158, 3445, 3445, 1157, 1162, 1169, 1168, 1184, 1176, 1177,
     1190, 1187, 1646, 3445, 3445, 1653, 1656, 3445, 3445, 1663,
     1666, 1678, 1629, 1608, 1682, 1474, 1673, 1657, 1695, 1674,
     1701, 1637, 1710, 1679, 1716, 1719, 3445, 3445, 1731, 1734,
     1737, 1204, 1215, 1740, 1746, 1237, 1248, 1268, 1251, 1272,

     1266, 1294, 1267, 1755, 1295, 1758, 1761, 1764, 1776, 1300,
     1779, 1782, 1785, 1305, 1319, 1326, 1322, 1338, 1334, 1791,
     1800, 1806, 1809, 1354, 1353, 1561, 3445, 1357, 1389, 1384,
     1395, 1400, 1417, 1413, 1420, 1426, 3445, 1421, 1515, 1504,
     1497, 1502, 3445, 3445, 1525, 1554, 1812, 3445, 3445, 1738,
     1819, 1710, 1803, 1810, 1813, 1783, 1828, 1834, 1825, 1831,
     1835, 1853, 1868, 1875, 1882, 1885, 1601, 1888, 1891, 1536,
     1559, 1553, 1580, 1579, 1597, 1595, 1616, 1897, 1903, 1627,
     1906, 1912, 1915, 1921, 1924, 1927, 1930, 1936, 1945, 1948,
     1622, 1669, 1652, 1645, 1650, 1951, 1954, 1960, 1966, 1969,

     1666, 1678, 1675, 1691, 1708, 1701, 1694, 1711, 1729, 1731,
     1715, 1725, 1749, 1746, 1745, 1752, 1772, 1755, 3445, 1790,
     1961, 1976, 1979, 1845, 1970, 1928, 1973, 1979, 1980, 1995,
     1986, 1859, 1987, 2005, 3445, 3445, 2012, 1805, 1815, 2015,
     2019, 1816, 1813, 1806, 1807, 1825, 1840, 1824, 1845, 2022,
     1856, 2033, 2036, 2039, 2042, 2045, 2048, 1857, 1861, 1872,
     1888, 1884, 2054, 2057, 2060, 2063, 2069, 2072, 1886, 1893,
     1898, 1903, 1910, 1924, 1925, 1953, 1949, 1964, 1960, 1994,
     1989, 1974, 3445, 2008, 2000, 2029, 2064, 2079, 2070, 2071,
     2075, 2076, 2079, 2080, 2083, 2084, 2087, 2021, 2030, 2102,

     2046, 2057, 2067, 2068, 2075, 2057, 2072, 2065, 2099, 2116,
     2081, 2065, 2125, 2080, 2076, 2129, 2141, 2144, 2147, 2095,
     2095, 2096, 2082, 2096, 2098, 2136, 2118, 2123, 3445, 3445,
     2103, 2103, 2118, 2112, 2117, 2119, 2150, 2153, 2154, 2158,
     2161, 2162, 2177, 2180, 2171, 2186, 2124, 2132, 2129, 2142,
     2148, 2186, 2168, 2174, 2211, 2215, 2155, 2156, 2179, 2220,
     2226, 2176, 2181, 2230, 2191, 2181, 3445, 2183, 2204, 3445,
     2189, 2204, 2194, 2192, 2207, 2212, 3445, 2205, 2206, 2203,
     2235, 2250, 2241, 2242, 2246, 2245, 2265, 2268, 2271, 2274,
     2268, 2289, 2297, 2194, 2304, 2208, 2253, 2307, 2238, 2257,

     2249, 2251, 2310, 2313, 2325, 2328, 2281, 2288, 2331, 2334,
     2281, 2283, 2280, 2298, 3445, 2303, 2285, 2295, 2287, 2318,
     2296, 2297, 3445, 2294, 2300, 2349, 2352, 2355, 2346, 2355,
     2356, 2359, 2374, 2377, 2368, 2383, 2320, 2386, 2389, 2392,
     2337, 2401, 2395, 2344, 2358, 2352, 2383, 2410, 2417, 2365,
     2365, 2420, 2423, 2426, 2376, 2382, 3445, 2385, 2384, 2378,
     2396, 2387, 2400, 2413, 3445, 2398, 2441, 2444, 2447, 2438,
     2444, 2459, 2450, 2451, 2466, 2474, 2477, 2482, 2405, 2485,
     2409, 2414, 2431, 2439, 2453, 2467, 2493, 2496, 2501, 2505,
     2458, 2453, 2471, 2472, 2459, 2457, 2472, 2466, 2482, 2520,

     2511, 2512, 2527, 2530, 2521, 2542, 2536, 2545, 2560, 2462,
     2480, 2495, 2496, 2496, 2511, 2508, 2563, 2566, 2569, 2524,
     2533, 2520, 2521, 2545, 2537, 2534, 2522, 2540, 2569, 2570,
     2585, 2576, 2591, 2594, 2598, 2550, 2548, 2549, 2606, 2570,
     2567, 2555, 2612, 2576, 2563, 3445, 3445, 2563, 3445, 2570,
     2580, 2578, 2610, 2613, 2616, 2631, 2576, 2638, 2641, 2644,
     2647, 2580, 2659, 2587, 2611, 2608, 3445, 2601, 2613, 3445,
     2615, 2650, 2653, 2654, 2674, 2677, 2680, 2684, 2692, 2701,
     2605, 2704, 2708, 2628, 2711, 2630, 2629, 2649, 2645, 2702,
     2703, 2708, 2726, 2729, 2732, 2735, 2646, 2741, 2656, 2747,

     2750, 2653, 2648, 2660, 2665, 2741, 2709, 2748, 2763, 2676,
     2699, 2766, 2685, 2703, 2702, 2701, 2757, 2760, 2761, 2718,
     2727, 2723, 3445, 2736, 3445, 2767, 2766, 2785, 2788, 2741,
     2791, 2741, 2789, 2809, 2816, 2824, 2831, 2834, 2752, 2837,
     2846, 2741, 2852, 2855, 2858, 2861, 2870, 2746, 2873, 2751,
     2876, 2879, 2882, 2754, 3445, 2885, 2891, 2894, 2897, 2900,
     3445, 2910, 2915, 2920, 2925, 2930, 2935, 2940, 2944, 2949,
     2953, 2958
    } ;

static yyconst flex_int16_t yy_def[1673] =
    {   0,
     1662, 1662, 1663, 1663, 1664, 1664, 1665, 1665, 1666, 1666,
     1666, 1666, 1667, 1667, 1668, 1668, 1661, 1661, 1669, 1669,
       20, 1661, 1669, 1669, 1669, 1669, 1669, 1661, 1661, 1669,
     1670, 1661, 1671, 1672, 1661, 1661, 1661, 1661, 1661, 1661,
       20, 1669, 1669,   28, 1661, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1669, 1670, 1671, 1672, 1661, 1661, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,

     1669, 1669, 1669, 1669, 1661, 1669, 1669, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1669, 1661, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1661, 1669, 1669, 1669, 1669, 1669, 1669,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,

     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1669, 1669, 1669, 1669, 1669,
     1661, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1661,
     1661, 1661, 1669, 1669, 1669, 1669, 1669, 1669, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,

     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1669,
     1669, 1669, 1661, 1669, 1661, 1669, 1669, 1669, 1669, 1669,
     1661, 1669, 1669, 1669, 1669, 1669, 1661, 1669, 1669, 1669,
     1661, 1669, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,

     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1669, 1669, 1661,
     1661, 1661, 1669, 1669, 1669, 1669, 1669, 1661, 1661, 1661,
     1669, 1669, 1669, 1669, 1661, 1661, 1661, 1669, 1669, 1661,
     1661, 1661, 1669, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,

     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1661, 1669, 1661, 1669,
     1669, 1669, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1669, 1669, 1669, 1669,

     1669, 1661, 1669, 1669, 1669, 1661, 1661, 1661, 1661, 1669,
     1669, 1669, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1669, 1661, 1669, 1669, 1669,
     1661, 1661, 1661, 1669, 1669, 1661, 1669, 1669, 1669, 1669,

     1669, 1669, 1669, 1669, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1669, 1669, 1669, 1669, 1661, 1661, 1661, 1669,

     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,

     1669, 1669, 1669, 1669, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1669, 1661, 1669, 1661, 1669, 1661, 1669,
     1669, 1661, 1669, 1669, 1669, 1661, 1669, 1669, 1669, 1669,
     1669, 1661, 1669, 1669, 1661, 1669, 1669, 1669, 1661, 1661,

     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1669,
     1661, 1661, 1669, 1669, 1661, 1669, 1669, 1669, 1669, 1669,
     1661, 1669, 1661, 1669, 1669, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,

     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1661, 1669, 1669,
     1669, 1669, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,

     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1669, 1669, 1661, 1669, 1669, 1669, 1669, 1669, 1669, 1661,
     1669, 1669, 1669, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1669, 1661, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1661, 1661, 1661,

     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1661, 1669, 1661,
     1669, 1669, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,

     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1669, 1669, 1661, 1669, 1669,
     1669, 1669, 1661, 1661, 1669, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1669, 1661, 1661, 1669,
     1669, 1669, 1669, 1669, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,

     1669, 1669, 1669, 1661, 1669, 1669, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1669, 1669,
     1661, 1669, 1669, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1669, 1669, 1669, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1669, 1669, 1669, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1669,
     1669, 1669, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,

     1661, 1661, 1661, 1661, 1661, 1669, 1669, 1669, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1669, 1669, 1669, 1661,
     1661, 1661, 1661, 1661, 1661, 1669, 1669, 1669, 1661, 1661,
     1661, 1661, 1669, 1669, 1669, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1669, 1669, 1661, 1661, 1661, 1661, 1661, 1661,
     1669, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
        0, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661
    } ;

static yyconst flex_int16_t yy_nxt[3509] =
    {   0,
       18,   19,   20,   21,   18,   22,   39,   22,   18,   24,
       25,   26,   27,   28,   18,   29,   18,   36,   36,   39,
       40, 1661,   30, 1661,   37,   37,   58, 1661,   59, 1661,
     1661, 1661,   63,   40, 1661, 1661, 1661, 1661,   60, 1661,
      139,   61, 1661, 1661, 1661,   63, 1661,  125,   82,   62,
       58,  126,   59, 1661, 1661, 1661, 1661,  140,  971, 1661,
       62, 1661,   22,   18,   19,   20,   21,   18,   22,   62,
       22,   18,   24,   25,   26,   27,   28,   18,   29,   18,
       62,   89,   88,  174, 1661,   30, 1661,  175, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,

     1661,  972, 1661,  132, 1661,  181, 1661, 1661, 1661, 1661,
     1661,  133,  973,  182,   92,   95,  188,   93, 1661,   96,
     1661, 1000,   82,  104,   90,   22,   41,   41,   41,   91,
       94,  102, 1001,  189,   98, 1661,   43, 1661,   44,   97,
       45,   99,  220,  103,  100,  215,  216,   61, 1661,  221,
     1661,  101,  105,  106, 1002,   62,  107, 1661,  142, 1661,
      150,  267,  268,   46,   47,  679,   48,   49,  143,   50,
      272,  680,   51,   52,   53,   62,  151,  273,  144,   54,
       55,   56,   57,   41,   41,   41,   58,  134,   59, 1661,
     1661, 1661, 1661,   43, 1003,   44,   62,   45,  148,   61,

     1661,  135, 1661, 1004,  136,  137,  138,   62, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661,   62,  278,  279,  155,
       46,   47, 1005,   48,   49, 1006,   50,   62,  400,   51,
       52,   53,  401, 1661,  156, 1661,   54,   55,   56,   57,
       64, 1661, 1661, 1661, 1661,  152,  153,   65, 1661, 1661,
     1661, 1661,   66, 1661, 1661, 1661, 1661, 1007,  154,  163,
      163,  163, 1661,  654, 1661,  165,  157, 1661,  159, 1661,
      655, 1661,  164, 1661,   67,   68, 1008,   69,   70,  169,
       71,   72,  158,   73,   74, 1009,   75,   76,  160,   77,
       78,   79,   80,   81,  109,  110,  170,  111,  112, 1010,

      113,  114, 1011,  115,  116,  166,  117,  118,  191,  119,
      120,  121,  122,  123, 1661, 1661, 1661, 1661,  192,  107,
     1661,  167, 1661,  107, 1661,  183, 1661,  202,  193, 1661,
     1661, 1661, 1661, 1661,  203, 1661,  168,  204,  205,  184,
     1012, 1013,  185,  186,  187, 1661,  713, 1661,  161,  230,
      230,  230, 1661,  714, 1661,  162,  226, 1661,  227, 1661,
     1014, 1661,  231, 1661, 1661,  228, 1661, 1661, 1015, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,  291,  292,
      233, 1661, 1016, 1661,  239, 1017,  293,  234,  229,  163,
      163,  163,  350,  351,  235,  232, 1018,  236,  237, 1021,

      352, 1661,  164, 1661,  240,  240,  240, 1661,  241, 1661,
      242, 1661, 1661, 1661, 1661,  238, 1661,  243, 1661, 1661,
      254, 1661, 1661, 1661, 1661, 1661, 1661,  255, 1661,  465,
      256,  257, 1022,  466,  244,  246,  312,  312,  312,  315,
      315,  315,  577,  230,  230,  230,  578, 1023, 1661,  313,
     1661,  310, 1024, 1025,  245, 1661,  231, 1661,  247, 1661,
     1026, 1661,  248,  311,  314, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1027,  319,  320,  320,  320, 1661, 1028,
     1661, 1661,  316, 1661, 1661, 1029, 1661, 1661,  321, 1661,
      240,  240,  240, 1661,  241, 1661,  242,  322, 1032,  317,

      326,  326,  326, 1033, 1661,  323, 1661,  324,  318,  330,
      330,  330, 1661,  327, 1661, 1661,  328, 1661,  333,  333,
      333, 1661,  331, 1661, 1034,  325,  345,  345,  345,  353,
      353,  353,  334, 1036,  366,  366,  366, 1661,  329, 1661,
      346, 1037,  332,  354,  372,  372,  372,  347,  367,  393,
      393,  393, 1661, 1038, 1661,  410,  410,  410,  373,  411,
     1661,  412, 1661,  394,  312,  312,  312,  368,  355, 1039,
     1040,  335,  336, 1661,  408, 1661, 1661,  313, 1661,  315,
      315,  315,  413,  409, 1661, 1041, 1661,  374, 1661, 1661,
     1661, 1661,  320,  320,  320,  418,  418,  418, 1661,  419,

     1661,  420, 1042, 1043, 1661,  321, 1661,  414, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661,  326,  326,  326,  416,
     1661, 1044, 1661,  435,  435,  435,  417,  415, 1661,  327,
     1661,  425,  425,  425,  484,  426,  485,  427,  421,  330,
      330,  330,  446,  446,  446,  592, 1045,  428,  422,  593,
      424, 1661,  331, 1661, 1046,  423,  430,  430,  430, 1661,
      431, 1661,  432,  429,  433,  433,  433,  333,  333,  333,
      345,  345,  345,  353,  353,  353, 1661,  434, 1661, 1047,
      533,  334,  534, 1661,  346, 1661,  510,  354,  453,  453,
      453,  456,  456,  456,  461,  461,  461,  366,  366,  366,

      469,  469,  469, 1048, 1661,  457, 1661, 1661,  462, 1661,
     1049,  367,  472,  472,  472,  372,  372,  372,  475,  475,
      475,  509,  463,  393,  393,  393,  473, 1050,  511,  373,
      410,  410,  410, 1661,  411, 1661,  412,  394, 1661, 1661,
     1661, 1661, 1051, 1052,  508,  418,  418,  418, 1661,  419,
     1661,  420,  516,  516,  516,  518,  518,  518,  628, 1661,
      512, 1661,  629,  515, 1661,  517, 1661, 1661,  519, 1661,
      425,  425,  425, 1053,  426,  513,  427,  514, 1661, 1661,
     1661, 1661,  430,  430,  430,  584,  431,  585,  432,  433,
      433,  433,  435,  435,  435, 1661,  520, 1661, 1661,  521,

     1661, 1661,  434, 1661, 1054, 1055,  522,  523,  523,  523,
      636,  524,  637,  525,  446,  446,  446,  537,  537,  537,
      453,  453,  453,  456,  456,  456,  546,  546,  546, 1056,
     1057,  538,  547,  547,  547,  610, 1058,  457,  461,  461,
      461,  552,  552,  552, 1059,  597,  548,  469,  469,  469,
     1060, 1061,  462,  472,  472,  472,  561,  561,  561,  549,
      475,  475,  475, 1661, 1661, 1661, 1661,  473, 1661, 1062,
     1661,  601,  601,  601, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1091, 1661,  602, 1661,  516,  516,  516, 1092,
     1093,  600,  609,  609,  609,  599, 1096,  644, 1661,  517,

     1661,  645,  518,  518,  518,  598,  605,  606,  606,  606,
      603,  607, 1097,  608, 1661,  519, 1661, 1661,  768, 1661,
      769,  703,  604,  612,  612,  612,  523,  523,  523, 1098,
      524, 1661,  525, 1661, 1099, 1661,  613, 1661, 1100, 1101,
      611,  537,  537,  537,  625,  625,  625,  546,  546,  546,
      547,  547,  547, 1102, 1103,  538,  634,  634,  634,  552,
      552,  552,  688, 1104,  548,  647,  647,  647,  561,  561,
      561,  656,  657,  658, 1661, 1661, 1661, 1661,  782,  648,
      783, 1105,  659,  686,  686,  686, 1106, 1109,  660, 1661,
     1110, 1661,  601,  601,  601, 1661,  687, 1661,  609,  609,

      609, 1112, 1113,  689, 1661,  602, 1661, 1114,  694,  690,
      691,  691,  691, 1661,  692, 1661,  693,  695,  695,  695,
     1115, 1116, 1661, 1661, 1661, 1661, 1661,  697, 1661, 1661,
      696, 1661,  698,  625,  625,  625, 1117,  699,  700, 1661,
      701, 1661,  809,  702,  606,  606,  606,  704,  607,  808,
      608,  612,  612,  612,  705,  705,  705, 1118,  706, 1661,
      707, 1661, 1119, 1661,  613, 1661,  709,  709,  709,  715,
      715,  715, 1123,  717,  718,  719,  793,  726,  726,  726,
      710, 1124, 1125,  716,  720,  728,  728,  728, 1126,  794,
      721,  727,  634,  634,  634,  741,  741,  741, 1127,  729,

      746,  746,  746,  647,  647,  647,  753,  753,  753,  742,
      686,  686,  686, 1661,  747, 1661, 1661,  648, 1661, 1661,
     1128, 1661, 1661,  687, 1661, 1129,  748,  790,  790,  790,
     1130,  791,  749,  792,  743,  691,  691,  691, 1661,  692,
     1661,  693, 1661,  802, 1661,  695,  695,  695,  797,  797,
      797, 1661,  798, 1661,  799, 1131,  795, 1661,  696, 1661,
     1132,  803, 1661,  796, 1661, 1661,  825, 1661,  826,  709,
      709,  709, 1133, 1134,  804,  800,  846,  806,  847,  801,
      705,  705,  705,  710,  706, 1135,  707,  812,  812,  812,
     1136,  805,  715,  715,  715,  817,  817,  817, 1137,  807,

      726,  726,  726,  828,  828,  828,  716, 1138,  810,  728,
      728,  728, 1139, 1140,  727,  829,  829,  829,  839,  839,
      839, 1141, 1142,  729,  841,  841,  841,  741,  741,  741,
     1143, 1144,  840,  843,  843,  843, 1145, 1661,  842, 1661,
     1146,  742,  746,  746,  746,  848,  848,  848,  753,  753,
      753,  854,  854,  854, 1167, 1168,  747,  790,  790,  790,
     1661,  791, 1661,  792, 1661,  855, 1661, 1661, 1170, 1661,
      797,  797,  797,  890,  798, 1661,  799, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661,  892, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,

     1661, 1171,  891,  895, 1172,  893, 1173,  984,  900, 1174,
      896,  894,  897,  812,  812,  812,  817,  817,  817, 1175,
     1176,  901, 1177,  899,  904,  898,  828,  828,  828,  829,
      829,  829, 1180,  902,  839,  839,  839,  929,  929,  929,
     1186,  903,  841,  841,  841,  930,  930,  930,  840,  843,
      843,  843,  848,  848,  848, 1191,  842,  854,  854,  854,
      940,  940,  940,  941,  941,  941,  974,  974,  974, 1192,
     1193,  855,  976,  976,  976, 1194, 1195,  942, 1661,  975,
     1661,  978,  978,  978, 1661,  977, 1661, 1661, 1196, 1661,
      981,  981,  981, 1661,  979, 1661,  985,  985,  985, 1661,

     1201, 1661, 1661,  982, 1661, 1661, 1202, 1661, 1661,  986,
     1661, 1661, 1205, 1661,  980,  991,  991,  991, 1661, 1661,
     1661, 1661,  929,  929,  929, 1206,  988, 1661,  992, 1661,
      990, 1207,  994,  994,  994,  987,  998,  998,  998, 1208,
     1661,  989, 1661,  983, 1661,  995, 1661, 1209, 1661,  999,
     1661, 1019, 1019, 1019,  930,  930,  930,  997, 1030, 1030,
     1030, 1210,  993, 1211, 1212, 1020,  940,  940,  940,  941,
      941,  941, 1031, 1213, 1214,  996, 1035, 1035, 1035,  974,
      974,  974, 1073,  942, 1063, 1063, 1063, 1661, 1064, 1661,
     1065, 1661,  975, 1661,  976,  976,  976, 1066, 1066, 1066,

      978,  978,  978, 1072, 1072, 1072, 1661,  977, 1661, 1075,
     1075, 1075, 1661,  979, 1661, 1067, 1067, 1067, 1661, 1068,
     1661, 1069, 1070, 1070, 1070,  981,  981,  981, 1661, 1152,
     1661,  985,  985,  985, 1661, 1071, 1661, 1661,  982, 1661,
     1661, 1215, 1661, 1661,  986, 1661, 1074, 1661, 1661, 1661,
     1661, 1216, 1217, 1076,  991,  991,  991, 1218, 1077, 1081,
     1081, 1081, 1661, 1078, 1661, 1219, 1661,  992, 1661,  994,
      994,  994, 1083, 1083, 1083, 1080, 1661, 1661, 1661, 1661,
     1203, 1661,  995, 1661,  998,  998,  998, 1204, 1079, 1082,
     1220, 1242, 1089, 1089, 1089, 1243, 1661,  999, 1661, 1084,

     1244, 1086, 1086, 1086, 1085, 1087, 1090, 1088, 1094, 1094,
     1094, 1107, 1107, 1107, 1019, 1019, 1019, 1111, 1111, 1111,
     1238, 1661, 1095, 1661, 1245, 1108, 1246, 1239, 1020, 1120,
     1120, 1120, 1030, 1030, 1030, 1122, 1122, 1122, 1035, 1035,
     1035, 1247, 1661, 1121, 1661, 1248, 1031, 1063, 1063, 1063,
     1661, 1064, 1661, 1065, 1066, 1066, 1066, 1067, 1067, 1067,
     1249, 1068, 1151, 1069, 1070, 1070, 1070, 1147, 1147, 1147,
     1661, 1148, 1661, 1149, 1251, 1258, 1661, 1071, 1661, 1072,
     1072, 1072, 1150, 1075, 1075, 1075, 1661, 1661, 1661, 1661,
     1160, 1153, 1661, 1156, 1661, 1259, 1157, 1157, 1157, 1260,

     1261, 1154, 1081, 1081, 1081, 1262, 1268, 1155, 1661, 1158,
     1661, 1083, 1083, 1083, 1269, 1270, 1161, 1162, 1162, 1162,
     1086, 1086, 1086, 1661, 1087, 1661, 1088, 1271, 1159, 1661,
     1163, 1661, 1089, 1089, 1089, 1164, 1164, 1164, 1165, 1165,
     1165, 1094, 1094, 1094, 1272, 1273, 1090, 1169, 1169, 1169,
     1274, 1661, 1166, 1661, 1224, 1095, 1178, 1178, 1178, 1181,
     1181, 1181, 1107, 1107, 1107, 1183, 1183, 1183, 1275, 1276,
     1179, 1277, 1278, 1182, 1221, 1279, 1108, 1184, 1184, 1184,
     1111, 1111, 1111, 1187, 1187, 1187, 1189, 1189, 1189, 1280,
     1281, 1185, 1120, 1120, 1120, 1282, 1661, 1188, 1661, 1283,

     1190, 1197, 1197, 1197, 1284, 1285, 1121, 1122, 1122, 1122,
     1198, 1198, 1198, 1147, 1147, 1147, 1661, 1148, 1661, 1149,
     1222, 1222, 1222, 1661, 1199, 1661, 1661, 1229, 1661, 1157,
     1157, 1157, 1661, 1223, 1661, 1230, 1230, 1230, 1661, 1286,
     1661, 1661, 1158, 1661, 1661, 1298, 1661, 1226, 1661, 1228,
     1661, 1299, 1301, 1225, 1162, 1162, 1162, 1302, 1661, 1232,
     1661, 1227, 1303, 1200, 1304, 1305, 1661, 1163, 1661, 1234,
     1234, 1234, 1661, 1235, 1661, 1236, 1164, 1164, 1164, 1231,
     1306, 1307, 1233, 1165, 1165, 1165, 1237, 1237, 1237, 1240,
     1240, 1240, 1169, 1169, 1169, 1308, 1309, 1166, 1178, 1178,

     1178, 1311, 1289, 1241, 1250, 1250, 1250, 1181, 1181, 1181,
     1296, 1312, 1179, 1252, 1252, 1252, 1183, 1183, 1183, 1313,
     1314, 1182, 1184, 1184, 1184, 1253, 1253, 1253, 1254, 1254,
     1254, 1187, 1187, 1187, 1315, 1320, 1185, 1256, 1256, 1256,
     1321, 1661, 1255, 1661, 1322, 1188, 1189, 1189, 1189, 1257,
     1257, 1257, 1263, 1263, 1263, 1197, 1197, 1197, 1323, 1324,
     1190, 1198, 1198, 1198, 1325, 1326, 1264, 1265, 1265, 1265,
     1266, 1266, 1266, 1291, 1661, 1199, 1661, 1222, 1222, 1222,
     1288, 1288, 1288, 1661, 1267, 1661, 1661, 1327, 1661, 1661,
     1223, 1661, 1661, 1661, 1661, 1661, 1230, 1230, 1230, 1661,

     1661, 1661, 1661, 1328, 1329, 1287, 1234, 1234, 1234, 1330,
     1235, 1331, 1236, 1237, 1237, 1237, 1240, 1240, 1240, 1290,
     1300, 1300, 1300, 1250, 1250, 1250, 1295, 1297, 1292, 1332,
     1241, 1333, 1293, 1294, 1252, 1252, 1252, 1253, 1253, 1253,
     1254, 1254, 1254, 1310, 1310, 1310, 1256, 1256, 1256, 1257,
     1257, 1257, 1334, 1335, 1255, 1263, 1263, 1263, 1316, 1316,
     1316, 1265, 1265, 1265, 1266, 1266, 1266, 1336, 1347, 1264,
     1317, 1317, 1317, 1318, 1318, 1318, 1348, 1661, 1267, 1661,
     1288, 1288, 1288, 1661, 1661, 1661, 1661, 1319, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,

     1661, 1349, 1661, 1300, 1300, 1300, 1350, 1351, 1352, 1353,
     1338, 1354, 1355, 1337, 1356, 1340, 1357, 1310, 1310, 1310,
     1341, 1358, 1359, 1342, 1362, 1339, 1360, 1360, 1360, 1363,
     1316, 1316, 1316, 1365, 1343, 1366, 1367, 1344, 1368, 1345,
     1361, 1346, 1317, 1317, 1317, 1318, 1318, 1318, 1364, 1364,
     1364, 1369, 1370, 1371, 1373, 1374, 1375, 1376, 1377, 1319,
     1378, 1379, 1380, 1661, 1394, 1661, 1661, 1661, 1661, 1661,
     1372, 1661, 1395, 1661, 1661, 1661, 1661, 1661, 1387, 1387,
     1387, 1389, 1389, 1389, 1661, 1396, 1661, 1392, 1392, 1392,
     1661, 1388, 1661, 1661, 1390, 1661, 1384, 1397, 1386, 1661,

     1393, 1661, 1398, 1399, 1401, 1381, 1402, 1382, 1407, 1383,
     1408, 1385, 1403, 1403, 1403, 1391, 1405, 1405, 1405, 1409,
     1400, 1360, 1360, 1360, 1411, 1412, 1404, 1410, 1410, 1410,
     1406, 1364, 1364, 1364, 1413, 1361, 1414, 1415, 1416, 1417,
     1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1661, 1437,
     1661, 1427, 1427, 1427, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1440, 1661, 1428, 1661, 1387, 1387, 1387, 1433,
     1433, 1433, 1389, 1389, 1389, 1434, 1434, 1434, 1661, 1388,
     1661, 1661, 1432, 1661, 1661, 1390, 1661, 1441, 1444, 1426,
     1392, 1392, 1392, 1445, 1429, 1431, 1446, 1430, 1436, 1436,

     1436, 1447, 1661, 1393, 1661, 1438, 1438, 1438, 1442, 1442,
     1442, 1403, 1403, 1403, 1448, 1448, 1448, 1450, 1435, 1439,
     1451, 1454, 1443, 1455, 1456, 1404, 1405, 1405, 1405, 1449,
     1449, 1449, 1452, 1452, 1452, 1410, 1410, 1410, 1457, 1458,
     1406, 1459, 1460, 1461, 1462, 1463, 1453, 1464, 1465, 1466,
     1467, 1467, 1467, 1427, 1427, 1427, 1469, 1469, 1469, 1661,
     1475, 1661, 1661, 1468, 1661, 1661, 1428, 1661, 1661, 1661,
     1661, 1661, 1661, 1479, 1661, 1433, 1433, 1433, 1434, 1434,
     1434, 1661, 1470, 1661, 1436, 1436, 1436, 1438, 1438, 1438,
     1476, 1476, 1476, 1477, 1477, 1477, 1480, 1480, 1480, 1471,

     1481, 1439, 1442, 1442, 1442, 1482, 1473, 1478, 1483, 1484,
     1472, 1448, 1448, 1448, 1485, 1486, 1443, 1474, 1449, 1449,
     1449, 1452, 1452, 1452, 1487, 1487, 1487, 1488, 1488, 1488,
     1490, 1491, 1492, 1493, 1494, 1453, 1495, 1496, 1497, 1498,
     1499, 1489, 1467, 1467, 1467, 1500, 1500, 1500, 1469, 1469,
     1469, 1661, 1510, 1661, 1661, 1468, 1661, 1661, 1511, 1661,
     1503, 1503, 1503, 1661, 1661, 1661, 1661, 1507, 1507, 1507,
     1512, 1513, 1661, 1504, 1661, 1476, 1476, 1476, 1477, 1477,
     1477, 1508, 1501, 1509, 1509, 1509, 1480, 1480, 1480, 1514,
     1505, 1515, 1478, 1516, 1487, 1487, 1487, 1488, 1488, 1488,

     1520, 1502, 1517, 1517, 1517, 1506, 1518, 1518, 1518, 1521,
     1522, 1489, 1523, 1524, 1525, 1526, 1527, 1528, 1536, 1537,
     1519, 1500, 1500, 1500, 1661, 1661, 1661, 1661, 1503, 1503,
     1503, 1531, 1531, 1531, 1661, 1538, 1661, 1507, 1507, 1507,
     1661, 1504, 1661, 1533, 1533, 1533, 1535, 1535, 1535, 1532,
     1539, 1508, 1530, 1540, 1541, 1661, 1534, 1661, 1542, 1544,
     1529, 1509, 1509, 1509, 1517, 1517, 1517, 1518, 1518, 1518,
     1543, 1543, 1543, 1545, 1546, 1547, 1548, 1549, 1550, 1551,
     1552, 1519, 1661, 1661, 1661, 1661, 1531, 1531, 1531, 1661,
     1557, 1661, 1533, 1533, 1533, 1556, 1556, 1556, 1554, 1535,

     1535, 1535, 1558, 1559, 1661, 1534, 1661, 1560, 1560, 1560,
     1563, 1564, 1565, 1543, 1543, 1543, 1566, 1567, 1568, 1569,
     1570, 1561, 1571, 1661, 1553, 1661, 1661, 1555, 1661, 1661,
     1575, 1661, 1556, 1556, 1556, 1581, 1584, 1562, 1572, 1576,
     1576, 1576, 1578, 1578, 1578, 1560, 1560, 1560, 1580, 1580,
     1580, 1585, 1586, 1577, 1587, 1588, 1579, 1589, 1597, 1561,
     1582, 1582, 1582, 1661, 1573, 1661, 1661, 1661, 1661, 1661,
     1599, 1574, 1602, 1603, 1583, 1593, 1593, 1593, 1576, 1576,
     1576, 1595, 1595, 1595, 1604, 1578, 1578, 1578, 1605, 1594,
     1610, 1611, 1577, 1596, 1596, 1596, 1613, 1614, 1592, 1579,

     1615, 1590, 1580, 1580, 1580, 1582, 1582, 1582, 1591, 1598,
     1598, 1598, 1600, 1600, 1600, 1661, 1661, 1661, 1661, 1583,
     1616, 1661, 1661, 1661, 1661, 1620, 1601, 1593, 1593, 1593,
     1609, 1609, 1609, 1595, 1595, 1595, 1596, 1596, 1596, 1621,
     1622, 1594, 1598, 1598, 1598, 1623, 1624, 1607, 1600, 1600,
     1600, 1612, 1612, 1612, 1661, 1625, 1661, 1606, 1608, 1618,
     1629, 1661, 1601, 1661, 1609, 1609, 1609, 1612, 1612, 1612,
     1661, 1630, 1661, 1661, 1661, 1661, 1661, 1631, 1632, 1661,
     1661, 1661, 1661, 1639, 1642, 1617, 1635, 1635, 1635, 1637,
     1637, 1637, 1640, 1640, 1640, 1648, 1650, 1619, 1661, 1636,

     1661, 1654, 1661, 1638, 1661, 1655, 1641, 1626, 1657, 1627,
     1644, 1644, 1644,  970,  969, 1628, 1633, 1635, 1635, 1635,
     1634,  968, 1661, 1645, 1661, 1646, 1646, 1646,  967, 1661,
     1636, 1661, 1637, 1637, 1637, 1647, 1647, 1647, 1640, 1640,
     1640,  966,  965, 1643,  964,  963, 1638, 1649, 1649, 1649,
      962,  961, 1641, 1651, 1651, 1651, 1644, 1644, 1644, 1653,
     1653, 1653, 1646, 1646, 1646, 1661, 1652, 1661, 1661, 1645,
     1661, 1647, 1647, 1647, 1649, 1649, 1649, 1651, 1651, 1651,
     1656, 1656, 1656, 1653, 1653, 1653, 1656, 1656, 1656, 1661,
     1652, 1661, 1658, 1658, 1658, 1658, 1658, 1658, 1660, 1660,

     1660, 1660, 1660, 1660,  960,  959, 1659,  958,  957, 1659,
       23,   23,   23,   23,   23,   31,   31,   31,   31,   31,
       33,   33,   33,   33,   33,   34,   34,   34,   34,   34,
       32,   32,   32,   32,   32,   35,   35,   35,   35,   35,
       38,   38,   38,   38,   38,   42,  956,  955,   42,   83,
       83,   83,   83,   84,   84,  954,   84,   84,   85,   85,
       85,  953,   85,  952,  951,  950,  949,  948,  947,  946,
      945,  944,  943,  939,  938,  937,  936,  935,  934,  933,
      932,  931,  928,  927,  926,  925,  924,  923,  922,  921,
      920,  919,  918,  917,  916,  915,  914,  913,  912,  911,

      910,  909,  908,  907,  906,  905,  889,  888,  887,  886,
      885,  884,  883,  882,  881,  880,  879,  878,  877,  876,
      875,  874,  873,  872,  871,  870,  869,  868,  867,  866,
      865,  864,  863,  862,  861,  860,  859,  858,  857,  856,
      853,  852,  851,  850,  849,  845,  844,  838,  837,  836,
      835,  834,  833,  832,  831,  830,  827,  824,  823,  822,
      821,  820,  819,  818,  816,  815,  814,  813,  811,  789,
      788,  787,  786,  785,  784,  781,  780,  779,  778,  777,
      776,  775,  774,  773,  772,  771,  770,  767,  766,  765,
      764,  763,  762,  761,  760,  759,  758,  757,  756,  755,

      754,  752,  751,  750,  745,  744,  740,  739,  738,  737,
      736,  735,  734,  733,  732,  731,  730,  725,  724,  723,
      722,  712,  711,  708,  685,  684,  683,  682,  681,  678,
      677,  676,  675,  674,  673,  672,  671,  670,  669,  668,
      667,  666,  665,  664,  663,  662,  661,  653,  652,  651,
      650,  649,  646,  643,  642,  641,  640,  639,  638,  635,
      633,  632,  631,  630,  627,  626,  624,  623,  622,  621,
      620,  619,  618,  617,  616,  615,  614,  596,  595,  594,
      591,  590,  589,  588,  587,  586,  583,  582,  581,  580,
      579,  576,  575,  574,  573,  572,  571,  570,  569,  568,

      567,  566,  565,  564,  563,  562,  560,  559,  558,  557,
      556,  555,  554,  553,  551,  550,  545,  544,  543,  542,
      541,  540,  539,  536,  535,  532,  531,  530,  529,  528,
      527,  526,  507,  506,  505,  504,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  483,  482,  481,  480,  479,  478,
      477,  476,  474,  471,  470,  468,  467,  464,  460,  459,
      458,  455,  454,  452,  451,  450,  449,  448,  447,  445,
      444,  443,  442,  441,  440,  439,  438,  437,  436,  407,
      406,  405,  404,  403,  402,  399,  398,  397,  396,  395,

      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  371,  370,
      369,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      356,  349,  348,  344,  343,  342,  341,  340,  339,  338,
      337,  309,  308,  307,  306,  305,  304,  303,  302,  301,
      300,  299,  298,  297,  296,  295,  294,  290,  289,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  277,  276,
      275,  274,  271,  270,  269,  266,  265,  264,  263,  262,
      261,  260,  259,  258,  253,  252,  251,  250,  249,  171,
      225,  224,  223,  222,  219,  218,  217,  214,  213,  212,

      211,  210,  209,  208,  207,  206,  201,  200,  199,  198,
      197,  196,  195,  194,  190,  180,  179,  178,  177,  176,
      173,  172,  171,  149,  147,  146,  145,  141,  131,  130,
      129,  128,  127,  124,  108,   87,   86, 1661,   32,   32,
       32,   32,   32,   32,   17, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,

     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661
    } ;

static yyconst flex_int16_t yy_chk[3509] =
    {   0,
        1,    1,    1,    1,    1,    1,   15,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   13,   14,   16,
       15,   23,    1,   23,   13,   14,   24,   44,   24,   24,
       26,   24,   26,   16,   30,   42,   30,   42,   24,   44,
       76,   25,   25,   43,   25,   43,    0,   68,   30,   25,
       27,   68,   27,   27,   47,   27,   47,   76,  887,   46,
       27,   46,    1,    2,    2,    2,    2,    2,    2,   25,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       27,   47,   46,  110,   48,    2,   48,  110,   50,   49,
       50,   49,   52,   51,   52,   51,   53,   54,   53,   54,

       57,  888,   57,   74,   55,  116,   55,   56,   60,   56,
       60,   74,  889,  116,   50,   52,  118,   51,   88,   53,
       88,  905,   60,   57,   48,    2,   19,   19,   19,   49,
       51,   56,  906,  118,   54,   89,   19,   89,   19,   53,
       19,   55,  143,   56,   55,  139,  139,   58,   58,  143,
       58,   55,   62,   62,  907,   58,   62,   62,   78,   62,
       88,  188,  188,   19,   19,  591,   19,   19,   78,   19,
      192,  591,   19,   19,   19,   58,   89,  192,   78,   19,
       19,   19,   19,   20,   20,   20,   59,   75,   59,   59,
       82,   59,   82,   20,  908,   20,   59,   20,   82,   61,

       61,   75,   61,  909,   75,   75,   75,   61,   90,   91,
       90,   91,   92,   93,   92,   93,   59,  197,  197,   93,
       20,   20,  910,   20,   20,  911,   20,   61,  302,   20,
       20,   20,  302,   96,   93,   96,   20,   20,   20,   20,
       28,   94,  100,   94,  100,   90,   91,   28,  103,   95,
      103,   95,   28,   97,  148,   97,  148,  912,   92,   99,
       99,   99,  104,  568,  104,  100,   94,  101,   96,  101,
      568,   99,   99,   99,   28,   28,  913,   28,   28,  103,
       28,   28,   95,   28,   28,  914,   28,   28,   97,   28,
       28,   28,   28,   28,   65,   65,  104,   65,   65,  915,

       65,   65,  916,   65,   65,  101,   65,   65,  120,   65,
       65,   65,   65,   65,   98,  102,   98,  102,  120,  106,
      106,  102,  106,  107,  107,  117,  107,  129,  120,  150,
      152,  150,  152,  151,  129,  151,  102,  129,  129,  117,
      917,  918,  117,  117,  117,  153,  618,  153,   98,  154,
      154,  154,  155,  618,  155,   98,  150,  156,  151,  156,
      919,  154,  154,  154,  157,  152,  157,  158,  920,  158,
      159,  161,  159,  161,  160,  162,  160,  162,  209,  209,
      156,  165,  921,  165,  162,  922,  209,  157,  153,  163,
      163,  163,  261,  261,  158,  155,  923,  159,  160,  925,

      261,  163,  163,  163,  164,  164,  164,  166,  164,  166,
      164,  167,  168,  167,  168,  161,  169,  165,  169,  170,
      178,  170,  226,  227,  226,  227,  229,  178,  229,  363,
      178,  178,  926,  363,  166,  168,  228,  228,  228,  231,
      231,  231,  490,  230,  230,  230,  490,  927,  228,  228,
      228,  226,  928,  931,  167,  230,  230,  230,  169,  232,
      932,  232,  170,  227,  229,  233,  234,  233,  234,  235,
      237,  235,  237,  933,  235,  236,  236,  236,  238,  934,
      238,  239,  232,  239,  243,  935,  243,  236,  236,  236,
      240,  240,  240,  245,  240,  245,  240,  237,  937,  233,

      244,  244,  244,  938,  246,  238,  246,  239,  234,  247,
      247,  247,  244,  244,  244,  248,  245,  248,  249,  249,
      249,  247,  247,  247,  939,  243,  258,  258,  258,  262,
      262,  262,  249,  944,  273,  273,  273,  310,  246,  310,
      258,  945,  248,  262,  277,  277,  277,  258,  273,  296,
      296,  296,  311,  946,  311,  313,  313,  313,  277,  313,
      314,  313,  314,  296,  312,  312,  312,  273,  262,  948,
      949,  249,  249,  316,  310,  316,  312,  312,  312,  315,
      315,  315,  314,  311,  317,  950,  317,  277,  318,  319,
      318,  319,  320,  320,  320,  321,  321,  321,  322,  321,

      322,  321,  951,  952,  320,  320,  320,  316,  323,  324,
      323,  324,  325,  328,  325,  328,  326,  326,  326,  318,
      329,  953,  329,  334,  334,  334,  319,  317,  326,  326,
      326,  327,  327,  327,  382,  327,  382,  327,  322,  330,
      330,  330,  346,  346,  346,  503,  954,  328,  323,  503,
      325,  330,  330,  330,  955,  324,  331,  331,  331,  413,
      331,  413,  331,  329,  332,  332,  332,  333,  333,  333,
      345,  345,  345,  353,  353,  353,  332,  332,  332,  956,
      443,  333,  443,  409,  345,  409,  413,  353,  354,  354,
      354,  357,  357,  357,  361,  361,  361,  366,  366,  366,

      367,  367,  367,  957,  408,  357,  408,  414,  361,  414,
      958,  366,  370,  370,  370,  372,  372,  372,  373,  373,
      373,  409,  361,  393,  393,  393,  370,  960,  414,  372,
      410,  410,  410,  415,  410,  415,  410,  393,  416,  417,
      416,  417,  961,  962,  408,  418,  418,  418,  421,  418,
      421,  418,  422,  422,  422,  423,  423,  423,  541,  424,
      415,  424,  541,  421,  422,  422,  422,  423,  423,  423,
      425,  425,  425,  963,  425,  416,  425,  417,  428,  429,
      428,  429,  430,  430,  430,  496,  430,  496,  430,  433,
      433,  433,  435,  435,  435,  520,  424,  520,  508,  428,

      508,  433,  433,  433,  964,  965,  429,  434,  434,  434,
      550,  434,  550,  434,  446,  446,  446,  447,  447,  447,
      453,  453,  453,  456,  456,  456,  457,  457,  457,  966,
      967,  447,  458,  458,  458,  520,  968,  456,  461,  461,
      461,  462,  462,  462,  969,  508,  458,  469,  469,  469,
      971,  972,  461,  472,  472,  472,  473,  473,  473,  458,
      475,  475,  475,  509,  510,  509,  510,  472,  511,  973,
      511,  512,  512,  512,  513,  514,  513,  514,  515,  610,
      515,  610, 1001,  512,  512,  512,  516,  516,  516, 1002,
     1003,  511,  519,  519,  519,  510, 1005,  558,  516,  516,

      516,  558,  518,  518,  518,  509,  515,  517,  517,  517,
      513,  517, 1006,  517,  518,  518,  518,  521,  663,  521,
      663,  610,  514,  522,  522,  522,  523,  523,  523, 1007,
      523,  598,  523,  598, 1008,  522,  522,  522, 1009, 1010,
      521,  537,  537,  537,  538,  538,  538,  546,  546,  546,
      547,  547,  547, 1011, 1012,  537,  548,  548,  548,  552,
      552,  552,  598, 1013,  547,  560,  560,  560,  561,  561,
      561,  570,  570,  570,  599,  600,  599,  600,  678,  560,
      678, 1014,  570,  597,  597,  597, 1015, 1017,  570,  603,
     1018,  603,  601,  601,  601,  597,  597,  597,  609,  609,

      609, 1021, 1022,  599,  601,  601,  601, 1023,  603,  600,
      602,  602,  602,  611,  602,  611,  602,  604,  604,  604,
     1024, 1025,  605,  703,  605,  703,  702,  605,  702,  604,
      604,  604,  605,  625,  625,  625, 1026,  605,  605,  688,
      605,  688,  703,  605,  606,  606,  606,  611,  606,  702,
      606,  612,  612,  612,  613,  613,  613, 1027,  613,  689,
      613,  689, 1028,  612,  612,  612,  615,  615,  615,  619,
      619,  619, 1032,  620,  620,  620,  688,  626,  626,  626,
      615, 1033, 1034,  619,  620,  627,  627,  627, 1037,  689,
      620,  626,  634,  634,  634,  640,  640,  640, 1038,  627,

      643,  643,  643,  647,  647,  647,  648,  648,  648,  640,
      686,  686,  686,  690,  643,  690,  694,  647,  694,  699,
     1039,  699,  686,  686,  686, 1040,  643,  687,  687,  687,
     1041,  687,  643,  687,  640,  691,  691,  691,  697,  691,
      697,  691,  698,  699,  698,  695,  695,  695,  696,  696,
      696,  700,  696,  700,  696, 1042,  690,  695,  695,  695,
     1043,  699,  701,  694,  701,  704,  724,  704,  724,  709,
      709,  709, 1044, 1045,  700,  697,  745,  701,  745,  698,
      705,  705,  705,  709,  705, 1046,  705,  710,  710,  710,
     1048,  700,  715,  715,  715,  716,  716,  716, 1051,  701,

      726,  726,  726,  727,  727,  727,  715, 1054,  704,  728,
      728,  728, 1055, 1056,  726,  729,  729,  729,  739,  739,
      739, 1057, 1058,  728,  740,  740,  740,  741,  741,  741,
     1059, 1060,  739,  742,  742,  742, 1061,  793,  740,  793,
     1062,  741,  746,  746,  746,  747,  747,  747,  753,  753,
      753,  754,  754,  754, 1092, 1093,  746,  790,  790,  790,
      794,  790,  794,  790,  795,  754,  795,  796, 1096,  796,
      797,  797,  797,  793,  797,  800,  797,  800,  802,  801,
      802,  801,  803,  804,  803,  804,  805,  807,  805,  807,
      806,  795,  806,  808,  809,  808,  809,  810,  895,  810,

      895, 1097,  794,  801, 1098,  796, 1099,  895,  806, 1100,
      802,  800,  803,  812,  812,  812,  817,  817,  817, 1101,
     1102,  807, 1103,  805,  810,  804,  828,  828,  828,  829,
      829,  829, 1105,  808,  839,  839,  839,  840,  840,  840,
     1110,  809,  841,  841,  841,  842,  842,  842,  839,  843,
      843,  843,  848,  848,  848, 1114,  841,  854,  854,  854,
      855,  855,  855,  856,  856,  856,  890,  890,  890, 1115,
     1116,  854,  891,  891,  891, 1117, 1118,  856,  890,  890,
      890,  892,  892,  892,  891,  891,  891,  893, 1119,  893,
      894,  894,  894,  892,  892,  892,  896,  896,  896,  897,

     1124,  897,  894,  894,  894,  899, 1125,  899,  896,  896,
      896,  898, 1128,  898,  893,  900,  900,  900,  901,  903,
      901,  903,  929,  929,  929, 1129,  897,  900,  900,  900,
      899, 1130,  902,  902,  902,  896,  904,  904,  904, 1131,
      983,  898,  983,  894,  902,  902,  902, 1132,  904,  904,
      904,  924,  924,  924,  930,  930,  930,  903,  936,  936,
      936, 1133,  901, 1134, 1135,  924,  940,  940,  940,  941,
      941,  941,  936, 1136, 1138,  902,  942,  942,  942,  974,
      974,  974,  983,  941,  975,  975,  975, 1076,  975, 1076,
      975,  974,  974,  974,  976,  976,  976,  977,  977,  977,

      978,  978,  978,  982,  982,  982,  976,  976,  976,  986,
      986,  986,  978,  978,  978,  979,  979,  979,  988,  979,
      988,  979,  980,  980,  980,  981,  981,  981,  987, 1076,
      987,  985,  985,  985,  980,  980,  980,  981,  981,  981,
      984, 1139,  984,  985,  985,  985,  984,  989,  990,  989,
      990, 1140, 1141,  987,  991,  991,  991, 1142,  988,  992,
      992,  992,  993,  989,  993, 1145,  991,  991,  991,  994,
      994,  994,  995,  995,  995,  990,  996,  997,  996,  997,
     1126,  994,  994,  994,  998,  998,  998, 1126,  989,  993,
     1146, 1170, 1000, 1000, 1000, 1171,  998,  998,  998,  996,

     1172,  999,  999,  999,  997,  999, 1000,  999, 1004, 1004,
     1004, 1016, 1016, 1016, 1019, 1019, 1019, 1020, 1020, 1020,
     1167, 1074, 1004, 1074, 1173, 1016, 1174, 1167, 1019, 1029,
     1029, 1029, 1030, 1030, 1030, 1031, 1031, 1031, 1035, 1035,
     1035, 1175, 1073, 1029, 1073, 1176, 1030, 1063, 1063, 1063,
     1082, 1063, 1082, 1063, 1066, 1066, 1066, 1067, 1067, 1067,
     1177, 1067, 1074, 1067, 1070, 1070, 1070, 1071, 1071, 1071,
     1078, 1071, 1078, 1071, 1180, 1191, 1070, 1070, 1070, 1072,
     1072, 1072, 1073, 1075, 1075, 1075, 1077, 1080, 1077, 1080,
     1082, 1077, 1084, 1078, 1084, 1192, 1079, 1079, 1079, 1193,

     1194, 1077, 1081, 1081, 1081, 1195, 1201, 1077, 1079, 1079,
     1079, 1083, 1083, 1083, 1202, 1203, 1084, 1085, 1085, 1085,
     1086, 1086, 1086, 1152, 1086, 1152, 1086, 1204, 1080, 1085,
     1085, 1085, 1089, 1089, 1089, 1090, 1090, 1090, 1091, 1091,
     1091, 1094, 1094, 1094, 1205, 1206, 1089, 1095, 1095, 1095,
     1207, 1150, 1091, 1150, 1152, 1094, 1104, 1104, 1104, 1106,
     1106, 1106, 1107, 1107, 1107, 1108, 1108, 1108, 1208, 1209,
     1104, 1210, 1211, 1106, 1150, 1212, 1107, 1109, 1109, 1109,
     1111, 1111, 1111, 1112, 1112, 1112, 1113, 1113, 1113, 1213,
     1214, 1109, 1120, 1120, 1120, 1215, 1156, 1112, 1156, 1216,

     1113, 1121, 1121, 1121, 1217, 1218, 1120, 1122, 1122, 1122,
     1123, 1123, 1123, 1147, 1147, 1147, 1153, 1147, 1153, 1147,
     1151, 1151, 1151, 1154, 1123, 1154, 1155, 1156, 1155, 1157,
     1157, 1157, 1151, 1151, 1151, 1158, 1158, 1158, 1159, 1220,
     1159, 1157, 1157, 1157, 1160, 1238, 1160, 1154, 1161, 1155,
     1161, 1239, 1242, 1153, 1162, 1162, 1162, 1243, 1224, 1160,
     1224, 1154, 1244, 1123, 1245, 1246, 1162, 1162, 1162, 1163,
     1163, 1163, 1232, 1163, 1232, 1163, 1164, 1164, 1164, 1159,
     1247, 1248, 1161, 1165, 1165, 1165, 1166, 1166, 1166, 1168,
     1168, 1168, 1169, 1169, 1169, 1249, 1251, 1165, 1178, 1178,

     1178, 1258, 1224, 1168, 1179, 1179, 1179, 1181, 1181, 1181,
     1232, 1259, 1178, 1182, 1182, 1182, 1183, 1183, 1183, 1260,
     1261, 1181, 1184, 1184, 1184, 1185, 1185, 1185, 1186, 1186,
     1186, 1187, 1187, 1187, 1262, 1269, 1184, 1188, 1188, 1188,
     1270, 1226, 1186, 1226, 1271, 1187, 1189, 1189, 1189, 1190,
     1190, 1190, 1196, 1196, 1196, 1197, 1197, 1197, 1272, 1273,
     1189, 1198, 1198, 1198, 1274, 1275, 1196, 1199, 1199, 1199,
     1200, 1200, 1200, 1226, 1221, 1198, 1221, 1222, 1222, 1222,
     1223, 1223, 1223, 1225, 1200, 1225, 1227, 1276, 1227, 1222,
     1222, 1222, 1228, 1229, 1228, 1229, 1230, 1230, 1230, 1231,

     1233, 1231, 1233, 1277, 1278, 1221, 1234, 1234, 1234, 1279,
     1234, 1280, 1234, 1237, 1237, 1237, 1240, 1240, 1240, 1225,
     1241, 1241, 1241, 1250, 1250, 1250, 1231, 1233, 1227, 1281,
     1240, 1282, 1228, 1229, 1252, 1252, 1252, 1253, 1253, 1253,
     1254, 1254, 1254, 1255, 1255, 1255, 1256, 1256, 1256, 1257,
     1257, 1257, 1284, 1285, 1254, 1263, 1263, 1263, 1264, 1264,
     1264, 1265, 1265, 1265, 1266, 1266, 1266, 1286, 1298, 1263,
     1267, 1267, 1267, 1268, 1268, 1268, 1299, 1287, 1266, 1287,
     1288, 1288, 1288, 1289, 1290, 1289, 1290, 1268, 1291, 1292,
     1291, 1292, 1293, 1294, 1293, 1294, 1295, 1296, 1295, 1296,

     1297, 1301, 1297, 1300, 1300, 1300, 1302, 1303, 1304, 1305,
     1289, 1306, 1307, 1287, 1308, 1291, 1309, 1310, 1310, 1310,
     1292, 1311, 1312, 1293, 1314, 1290, 1313, 1313, 1313, 1315,
     1316, 1316, 1316, 1320, 1294, 1321, 1322, 1295, 1323, 1296,
     1313, 1297, 1317, 1317, 1317, 1318, 1318, 1318, 1319, 1319,
     1319, 1324, 1325, 1326, 1327, 1328, 1331, 1332, 1333, 1318,
     1334, 1335, 1336, 1337, 1347, 1337, 1338, 1339, 1338, 1339,
     1326, 1340, 1348, 1340, 1341, 1342, 1341, 1342, 1343, 1343,
     1343, 1344, 1344, 1344, 1345, 1349, 1345, 1346, 1346, 1346,
     1343, 1343, 1343, 1344, 1344, 1344, 1340, 1350, 1342, 1346,

     1346, 1346, 1351, 1352, 1353, 1337, 1354, 1338, 1357, 1339,
     1358, 1341, 1355, 1355, 1355, 1345, 1356, 1356, 1356, 1359,
     1352, 1360, 1360, 1360, 1362, 1363, 1355, 1361, 1361, 1361,
     1356, 1364, 1364, 1364, 1365, 1360, 1366, 1368, 1369, 1371,
     1372, 1373, 1374, 1375, 1376, 1378, 1379, 1380, 1381, 1394,
     1381, 1382, 1382, 1382, 1383, 1384, 1383, 1384, 1386, 1385,
     1386, 1385, 1396, 1382, 1382, 1382, 1387, 1387, 1387, 1388,
     1388, 1388, 1389, 1389, 1389, 1390, 1390, 1390, 1387, 1387,
     1387, 1391, 1386, 1391, 1389, 1389, 1389, 1397, 1399, 1381,
     1392, 1392, 1392, 1400, 1383, 1385, 1401, 1384, 1393, 1393,

     1393, 1402, 1392, 1392, 1392, 1395, 1395, 1395, 1398, 1398,
     1398, 1403, 1403, 1403, 1404, 1404, 1404, 1407, 1391, 1395,
     1408, 1411, 1398, 1412, 1413, 1403, 1405, 1405, 1405, 1406,
     1406, 1406, 1409, 1409, 1409, 1410, 1410, 1410, 1414, 1416,
     1405, 1417, 1418, 1419, 1420, 1421, 1409, 1422, 1424, 1425,
     1426, 1426, 1426, 1427, 1427, 1427, 1428, 1428, 1428, 1429,
     1437, 1429, 1426, 1426, 1426, 1427, 1427, 1427, 1430, 1431,
     1430, 1431, 1432, 1441, 1432, 1433, 1433, 1433, 1434, 1434,
     1434, 1435, 1429, 1435, 1436, 1436, 1436, 1438, 1438, 1438,
     1439, 1439, 1439, 1440, 1440, 1440, 1443, 1443, 1443, 1430,

     1444, 1438, 1442, 1442, 1442, 1445, 1432, 1440, 1446, 1447,
     1431, 1448, 1448, 1448, 1450, 1451, 1442, 1435, 1449, 1449,
     1449, 1452, 1452, 1452, 1453, 1453, 1453, 1454, 1454, 1454,
     1455, 1456, 1458, 1459, 1460, 1452, 1461, 1462, 1463, 1464,
     1466, 1454, 1467, 1467, 1467, 1468, 1468, 1468, 1469, 1469,
     1469, 1470, 1479, 1470, 1467, 1467, 1467, 1471, 1481, 1471,
     1472, 1472, 1472, 1473, 1474, 1473, 1474, 1475, 1475, 1475,
     1482, 1483, 1472, 1472, 1472, 1476, 1476, 1476, 1477, 1477,
     1477, 1475, 1470, 1478, 1478, 1478, 1480, 1480, 1480, 1484,
     1473, 1485, 1477, 1486, 1487, 1487, 1487, 1488, 1488, 1488,

     1491, 1471, 1489, 1489, 1489, 1474, 1490, 1490, 1490, 1492,
     1493, 1488, 1494, 1495, 1496, 1497, 1498, 1499, 1510, 1511,
     1490, 1500, 1500, 1500, 1501, 1502, 1501, 1502, 1503, 1503,
     1503, 1504, 1504, 1504, 1505, 1512, 1505, 1507, 1507, 1507,
     1503, 1503, 1503, 1506, 1506, 1506, 1508, 1508, 1508, 1505,
     1513, 1507, 1502, 1514, 1515, 1506, 1506, 1506, 1516, 1520,
     1501, 1509, 1509, 1509, 1517, 1517, 1517, 1518, 1518, 1518,
     1519, 1519, 1519, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
     1528, 1518, 1529, 1530, 1529, 1530, 1531, 1531, 1531, 1532,
     1536, 1532, 1533, 1533, 1533, 1534, 1534, 1534, 1530, 1535,

     1535, 1535, 1537, 1538, 1533, 1533, 1533, 1539, 1539, 1539,
     1540, 1541, 1542, 1543, 1543, 1543, 1544, 1545, 1548, 1550,
     1551, 1539, 1552, 1553, 1529, 1553, 1554, 1532, 1554, 1555,
     1557, 1555, 1556, 1556, 1556, 1562, 1564, 1539, 1553, 1558,
     1558, 1558, 1559, 1559, 1559, 1560, 1560, 1560, 1561, 1561,
     1561, 1565, 1566, 1558, 1568, 1569, 1559, 1571, 1581, 1560,
     1563, 1563, 1563, 1572, 1554, 1572, 1573, 1574, 1573, 1574,
     1584, 1555, 1586, 1587, 1563, 1575, 1575, 1575, 1576, 1576,
     1576, 1577, 1577, 1577, 1588, 1578, 1578, 1578, 1589, 1575,
     1597, 1599, 1576, 1579, 1579, 1579, 1602, 1603, 1574, 1578,

     1604, 1572, 1580, 1580, 1580, 1582, 1582, 1582, 1573, 1583,
     1583, 1583, 1585, 1585, 1585, 1590, 1591, 1590, 1591, 1582,
     1605, 1592, 1607, 1592, 1607, 1610, 1585, 1593, 1593, 1593,
     1594, 1594, 1594, 1595, 1595, 1595, 1596, 1596, 1596, 1611,
     1613, 1593, 1598, 1598, 1598, 1614, 1615, 1591, 1600, 1600,
     1600, 1601, 1601, 1601, 1606, 1616, 1606, 1590, 1592, 1607,
     1620, 1608, 1600, 1608, 1609, 1609, 1609, 1612, 1612, 1612,
     1617, 1621, 1617, 1618, 1619, 1618, 1619, 1622, 1624, 1627,
     1626, 1627, 1626, 1630, 1632, 1606, 1628, 1628, 1628, 1629,
     1629, 1629, 1631, 1631, 1631, 1639, 1642, 1608, 1628, 1628,

     1628, 1648, 1633, 1629, 1633, 1650, 1631, 1617, 1654, 1618,
     1634, 1634, 1634,  885,  884, 1619, 1626, 1635, 1635, 1635,
     1627,  883, 1634, 1634, 1634, 1636, 1636, 1636,  882, 1635,
     1635, 1635, 1637, 1637, 1637, 1638, 1638, 1638, 1640, 1640,
     1640,  881,  880, 1633,  879,  878, 1637, 1641, 1641, 1641,
      877,  875, 1640, 1643, 1643, 1643, 1644, 1644, 1644, 1645,
     1645, 1645, 1646, 1646, 1646, 1643, 1643, 1643, 1644, 1644,
     1644, 1647, 1647, 1647, 1649, 1649, 1649, 1651, 1651, 1651,
     1652, 1652, 1652, 1653, 1653, 1653, 1656, 1656, 1656, 1651,
     1651, 1651, 1657, 1657, 1657, 1658, 1658, 1658, 1659, 1659,

     1659, 1660, 1660, 1660,  874,  873, 1657,  872,  871, 1658,
     1662, 1662, 1662, 1662, 1662, 1663, 1663, 1663, 1663, 1663,
     1664, 1664, 1664, 1664, 1664, 1665, 1665, 1665, 1665, 1665,
     1666, 1666, 1666, 1666, 1666, 1667, 1667, 1667, 1667, 1667,
     1668, 1668, 1668, 1668, 1668, 1669,  870,  869, 1669, 1670,
     1670, 1670, 1670, 1671, 1671,  868, 1671, 1671, 1672, 1672,
     1672,  867, 1672,  866,  865,  864,  863,  862,  861,  860,
      859,  858,  857,  853,  852,  851,  850,  849,  847,  846,
      845,  844,  838,  837,  836,  835,  834,  833,  832,  831,
      830,  827,  826,  825,  824,  823,  822,  821,  820,  819,

      818,  816,  815,  814,  813,  811,  788,  787,  786,  785,
      784,  783,  782,  781,  780,  779,  778,  777,  776,  775,
      774,  773,  772,  771,  770,  769,  768,  767,  766,  765,
      764,  763,  762,  761,  760,  759,  758,  757,  756,  755,
      752,  751,  750,  749,  748,  744,  743,  738,  737,  736,
      735,  734,  733,  732,  731,  730,  725,  723,  722,  721,
      720,  719,  718,  717,  714,  713,  712,  711,  708,  685,
      683,  682,  681,  680,  679,  677,  676,  673,  672,  671,
      670,  669,  668,  667,  666,  665,  664,  662,  661,  660,
      659,  658,  657,  656,  655,  654,  653,  652,  651,  650,

      649,  646,  645,  644,  642,  641,  639,  638,  637,  636,
      635,  633,  632,  631,  630,  629,  628,  624,  623,  622,
      621,  617,  616,  614,  596,  595,  594,  593,  592,  590,
      589,  588,  587,  586,  585,  584,  583,  582,  581,  580,
      579,  578,  577,  574,  573,  572,  571,  567,  566,  564,
      563,  562,  559,  557,  556,  555,  554,  553,  551,  549,
      545,  544,  543,  542,  540,  539,  536,  535,  534,  533,
      532,  531,  530,  529,  528,  527,  526,  507,  506,  504,
      502,  501,  500,  499,  498,  497,  495,  494,  493,  492,
      491,  489,  488,  487,  486,  485,  484,  483,  482,  481,

      480,  479,  478,  477,  476,  474,  471,  470,  468,  467,
      466,  465,  464,  463,  460,  459,  455,  454,  452,  451,
      450,  449,  448,  445,  444,  442,  441,  440,  439,  438,
      437,  436,  407,  406,  405,  404,  403,  402,  401,  400,
      399,  398,  397,  396,  395,  392,  391,  390,  389,  388,
      387,  386,  384,  383,  381,  380,  379,  378,  377,  376,
      375,  374,  371,  369,  368,  365,  364,  362,  360,  359,
      358,  356,  355,  352,  351,  350,  349,  348,  347,  344,
      343,  342,  341,  340,  339,  338,  337,  336,  335,  309,
      308,  306,  305,  304,  303,  301,  300,  299,  298,  297,

      295,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  276,  275,
      274,  272,  271,  270,  269,  268,  267,  266,  265,  264,
      263,  260,  259,  257,  256,  255,  254,  253,  252,  251,
      250,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  211,  210,  208,  207,  206,
      205,  204,  203,  202,  201,  200,  199,  198,  196,  195,
      194,  193,  191,  190,  189,  187,  186,  185,  184,  183,
      182,  181,  180,  179,  177,  176,  175,  174,  173,  171,
      147,  146,  145,  144,  142,  141,  140,  138,  137,  136,

      135,  134,  133,  132,  131,  130,  128,  127,  126,  125,
      124,  123,  122,  121,  119,  115,  114,  113,  112,  111,
      109,  108,  105,   86,   81,   80,   79,   77,   73,   72,
       71,   70,   69,   67,   64,   40,   37,   17,    8,    7,
        6,    5,    4,    3, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,

     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[189] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 
    0, 0, 1, 0, 1, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin, 
 * @version 1.1, 10/07/2008
 * @since   OS1.1
 *
 * \remarks
 * Copyright (C) 2005-2008, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSoLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"



#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;








#line 100 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 1877 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 110 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"


 
#line 2123 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1662 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3445 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 113 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 118 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 119 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 120 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 122 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 136 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 138 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 139 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 140 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 141 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 142 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 143 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 144 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 145 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 146 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 147 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 148 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 149 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 150 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 151 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 152 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 153 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 154 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 155 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 156 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 158 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 159 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 160 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 161 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 162 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 163 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 164 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 165 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 166 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 167 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 168 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 169 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 170 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 171 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 172 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 173 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 174 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 175 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 176 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 177 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 178 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 179 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 180 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 181 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 182 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 183 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 184 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 185 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 187 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBDUALVALUEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 188 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBDUALVALUEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 189 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBDUALVALUEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 190 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBDUALVALUEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 193 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 194 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 196 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 197 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 198 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 199 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 200 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 201 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 202 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 203 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 204 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 205 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 206 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 208 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 209 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 210 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 211 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 212 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 213 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 214 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 215 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 216 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 217 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 218 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 219 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 220 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 221 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 222 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 223 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 224 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 225 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 226 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 227 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 228 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 229 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 230 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 231 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 233 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 234 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 235 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZESTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 236 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZEEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 237 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 238 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 239 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 240 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 242 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 243 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 245 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 246 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 247 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 248 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 249 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 250 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 251 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 252 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 253 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 254 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 255 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 256 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 257 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 258 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 259 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 260 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 261 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 262 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 263 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 264 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 265 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 266 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 267 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 268 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 269 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 270 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 271 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 272 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 273 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 274 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 275 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 276 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 277 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 278 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 281 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 282 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 283 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 284 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 285 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 286 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 287 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 288 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 289 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 290 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 291 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 292 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 293 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 294 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 295 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 296 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 297 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 298 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 299 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 300 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 301 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 302 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 303 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 304 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 305 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 306 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 307 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 308 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 309 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 310 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 311 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 312 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 313 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 314 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 315 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 316 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 319 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; /*yylval->sval = strdup( yytext);*/   yylval->sval = yytext; yyextra->errorText = yylval->sval;  return (ELEMENTTEXT); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 322 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 177:
#line 324 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 324 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 325 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 327 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 181:
#line 329 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 329 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 330 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 333 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 334 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;  return(ATTRIBUTETEXT);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 335 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 337 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 349 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 3356 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1662 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1662 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1661);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 349 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"





