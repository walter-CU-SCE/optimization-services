#line 2 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

#line 4 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osollex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 187
#define YY_END_OF_BUFFER 188
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1667] =
    {   0,
        0,    0,  185,  185,  183,  183,  184,  184,    0,    0,
        0,    0,    0,    0,    0,    0,  188,  186,    1,    1,
        1,    2,  174,  174,    5,  174,    4,  186,    3,  174,
      185,  187,  183,  184,  176,  177,  176,  180,  181,  180,
      174,  174,  174,    0,    3,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,    5,    4,  174,
        5,  174,    6,    0,    0,  179,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  174,  185,  183,  184,    0,  182,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,    0,  174,    5,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    5,  178,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,    0,  174,  174,  174,  174,  174,
      174,    5,  175,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  166,    0,

        0,    0,    0,    0,    0,    0,    0,   66,    0,    0,
        0,  158,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  150,    0,    0,    0,  152,  174,  174,
      174,  174,  174,   23,  174,  174,  174,  174,  174,  174,
      174,  174,    0,   40,   41,  174,  174,  174,  174,  174,
      174,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  112,    0,    0,    0,    0,    0,    0,
        0,  102,    0,    0,  174,  174,  174,    0,  174,   23,
      174,  174,  174,  174,  174,    0,  174,  174,  174,  174,
      174,    0,  174,  174,  174,    0,  174,    0,  167,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       67,    0,    0,    0,    0,    0,    0,    0,  159,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  151,    0,    0,    0,    0,    0,  153,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       78,    0,    0,    0,    0,    0,    0,    0,   58,   92,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  174,  174,    0,   38,   39,  174,  174,  174,
      174,  174,    0,   30,   31,  174,  174,  174,  174,    0,
       48,   49,  174,  174,    0,   36,   37,  174,    0,  167,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       67,    0,    0,    0,    0,    0,    0,  159,    0,    0,
        0,   59,    0,    0,    0,    0,  113,    0,    0,    0,
        0,    0,    0,  151,    0,    0,    0,  103,    0,  153,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   62,
        0,    0,  174,  174,  174,  174,  174,  174,  174,  174,
      174,    0,  174,   24,  174,  174,  174,    0,   32,   33,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   79,    0,    0,    0,    0,    0,    0,    0,
       59,    0,   93,    0,    0,    0,  113,    0,    0,    0,
        0,    0,    0,    0,    0,  103,    0,    0,    0,   88,
        0,    0,    0,   60,    0,    0,    0,    0,    0,   82,
      104,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  136,    0,    0,   64,    0,    0,    0,    0,

        0,  174,  174,  174,  174,  174,    0,  174,  174,  174,
        0,   44,   45,   24,  174,  174,  174,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   79,
        0,    0,    0,    0,    0,    0,    0,    0,   93,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   63,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   86,  124,
        0,    0,    0,    0,    0,    0,    0,    0,   84,    0,
      174,    0,  174,  174,  174,    0,   50,   51,  174,  174,

        0,  174,  174,  174,  174,  174,  174,  174,  174,    0,
       52,   53,    0,    0,   89,    0,    0,    0,    0,    0,
       61,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   83,    0,  105,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  137,    0,    0,    0,
        0,   65,    0,    0,    0,    0,    0,   63,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  138,    0,   46,   47,  174,  174,  174,

      174,    0,   42,   43,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,    0,   89,    0,    0,    0,
        0,   61,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   83,  105,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   87,    0,  125,  137,    0,    0,
        0,    0,   65,    0,    0,    0,    0,    0,    0,   85,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      154,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       70,    0,    0,    0,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   87,  125,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   85,    0,  139,  162,    0,    0,
        0,  118,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   98,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   72,    0,    0,    0,  174,    0,
      174,   25,  174,    0,  174,  174,   21,  174,  174,  174,
       19,  174,  174,  174,  174,  174,   17,  174,  174,   16,

      174,  174,  174,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  155,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   71,    0,    0,    0,  139,
      108,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   74,    0,  100,   94,    0,   68,   90,    0,    0,
        0,    0,    0,    0,  172,    0,    0,    0,   34,   35,
       25,    0,   54,   55,  174,    0,   21,  174,  174,   19,
      174,  174,  174,  174,  174,   17,  174,   16,  174,  174,
        0,   56,   57,    0,  163,    0,    0,    0,    0,  119,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   99,    0,    0,  155,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   73,   71,    0,    0,    0,
        0,  132,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   96,    0,    0,    0,    0,  114,    0,  170,    0,
        0,    0,   26,   27,  174,  174,  174,  174,  174,  174,
      174,  174,    9,  174,  174,  174,  174,    0,  163,    0,
      109,    0,    0,  119,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   75,    0,    0,  101,   99,    0,   95,
        0,    0,   69,    0,   91,    0,    0,    0,    0,    0,

        0,   73,    0,  173,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   80,    0,  174,  174,    8,  174,  174,
      174,  174,  174,  174,    9,  174,  174,  174,    0,   28,
       29,  109,    0,    0,    0,  133,    0,    0,    0,    0,
        0,    0,    0,    0,   75,    0,  101,   95,    0,   97,
       69,   91,    0,    0,    0,    0,    0,  115,    0,  173,
        0,  171,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  134,    0,    0,
        0,  174,    8,  174,  174,  174,  174,  174,  174,  174,

      174,  174,    0,    0,  133,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   97,    0,    0,    0,    0,  115,
        0,  171,    0,   81,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  122,   76,    0,    0,    0,    0,    0,
        0,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  135,    0,    0,   81,    0,
        0,  116,    0,    0,  168,    0,    0,    0,    0,    0,
        0,  128,    0,    0,    0,  174,  174,  174,  174,  174,
      174,  174,   10,  174,   11,  174,  174,   12,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  123,    0,
       77,    0,    0,    0,  135,    0,    0,    0,    0,  144,
        0,    0,    0,    0,    0,    0,    0,    0,  106,    0,
      174,  174,   13,  174,  174,  174,  174,   10,   11,  174,
       12,    0,    0,  117,    0,    0,    0,  169,    0,    0,
        0,    0,  123,   77,    0,    0,    0,  129,    0,    0,
        0,  130,    0,    0,    0,    0,    0,    0,    0,  110,
        0,  174,   14,   13,  174,  174,  174,  174,  174,    0,
      117,    0,  145,    0,  169,    0,    0,    0,    0,    0,
        0,  129,    0,    0,  107,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   14,  174,  174,  174,    7,  174,
      174,    0,  131,  145,    0,    0,    0,    0,    0,    0,
        0,    0,  111,  107,    0,    0,    0,    0,  140,    0,
        0,    0,    0,  174,  174,    7,  174,  174,   22,  131,
        0,    0,    0,    0,    0,    0,    0,  111,    0,    0,
      160,  156,    0,  120,    0,    0,    0,  174,  174,  174,
       22,    0,    0,    0,    0,  141,    0,    0,    0,    0,
        0,  164,    0,    0,  126,    0,  174,  174,  174,    0,
        0,  161,    0,  157,  141,    0,    0,  121,    0,    0,
        0,    0,    0,    0,  174,  174,  174,    0,  165,  161,

      157,    0,  121,    0,    0,  127,    0,    0,    0,    0,
      174,  174,  174,  165,    0,    0,  127,    0,    0,    0,
        0,  174,  174,  174,    0,    0,    0,  142,    0,  148,
      174,  174,  174,    0,    0,    0,    0,  174,  174,  174,
       15,    0,  143,    0,    0,  149,    0,  174,  174,   18,
       15,  143,    0,  149,    0,  174,   20,   18,    0,  146,
       20,    0,    0,  147,  147,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    7,    1,    1,    8,    1,
        1,    7,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    7,    1,   14,
       15,   16,   17,    7,    7,   18,   19,   20,   21,   22,
        7,    7,   23,   24,   25,   26,   27,   28,   29,   30,
        7,   31,   32,   33,   34,   35,   36,    7,    7,    7,
        1,    7,    1,    1,    7,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,    1,   63,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[64] =
    {   0,
        1,    2,    2,    2,    1,    3,    2,    4,    1,    2,
        2,    2,    2,    2,    1,    5,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1
    } ;

static yyconst flex_int16_t yy_base[1678] =
    {   0,
        0,   63, 3432, 3431, 3440, 3439, 3436, 3435,    0,    0,
        0,    0,   15,   16,    4,   17, 3442, 3449,  125,  182,
        0, 3449,    8,   16,   29,   17,   40,  236, 3449,   21,
        0, 3449,    0,    0, 3449, 3449, 3431, 3449, 3449, 3424,
        0,   22,   30,   23, 3449,   46,   41,   71,   76,   75,
       80,   79,   83,   84,   91,   94,   87,  135,  176,   95,
      187,  144, 3449, 3429,  256, 3449, 3387,    7, 3392, 3395,
     3385, 3383, 3388,   67,  150,    4, 3391,  172, 3370, 3375,
     3392,  147,    0,    0,    0, 3412, 3449,  103,  122,  196,
      200,  204,  230,  220,  179,  240,  254,  301,  258,  229,

      302,  305,  241,  310, 3414,  314,  318, 3416, 3374,   43,
     3379, 3382, 3372, 3370, 3375,   69,  291,   96, 3378,  294,
     3357, 3362, 3379, 3365, 3362, 3359, 3364, 3361,  305, 3372,
     3370, 3348, 3357, 3360, 3349, 3353, 3359, 3346,   66, 3350,
     3347, 3355, 3344,  107, 3342, 3344, 3354, 3340,  253, 3449,
      322,  323,  328,  337,  364,  355,  356,  359,  360,  367,
      368,  306,  372,  388,  407,  371,  383,  384,  391,  400,
      403, 3380, 3449, 3342, 3339, 3336, 3341, 3338,  375, 3349,
     3347, 3325, 3334, 3337, 3326, 3330, 3336, 3323,   91, 3327,
     3324, 3332, 3321,  123, 3319, 3321, 3331, 3317,  367, 3329,

     3328, 3327, 3326, 3310, 3308, 3308, 3322, 3339, 3320, 3327,
      406, 3318, 3313, 3309, 3315, 3303, 3299, 3309, 3313, 3294,
     3309, 3291, 3290, 3312, 3290, 3304, 3290, 3298,  418,  421,
      436,  428,  443,  451,  448,  449,  452,  453,  474,  457,
      465,  470,  497, 3449, 3449,  477,  509,  478,  488,  514,
      493,  517, 3301, 3300, 3299, 3298, 3282, 3280, 3280, 3294,
      535, 3293, 3300,  521,  540, 3287, 3283, 3289, 3277, 3273,
     3283, 3287, 3268, 3283, 3265, 3264,  543, 3265, 3279, 3265,
      550, 3262, 3280, 3266, 3276, 3259, 3259, 3267, 3255, 3273,
     3266, 3288, 3257, 3261, 3275, 3259, 3262, 3263, 3252,  558,

     3246, 3242, 3239, 3267, 3255, 3250, 3254, 3248, 3251, 3254,
     3249, 3449, 3261, 3251,  541,  549,  572,  594,  553,  580,
      563,  577,  554,  587,  602,  606,  599,  605,  606,  609,
      625,  629,  610,  628,  648,  665,  672,  644,  652, 3231,
     3249, 3235, 3245, 3228, 3228, 3236, 3224, 3242, 3235,  675,
      678, 3257, 3226, 3230, 3244, 3228, 3231,  690,  693, 3232,
     3221,  696, 3215, 3211, 3208,  699, 3225, 3220, 3224, 3218,
     3221,  705,  714, 3224, 3219,  720, 3231,  723,  728, 3221,
     3203, 3217, 3215, 3198, 3220, 3215, 3214,  623, 3200, 3208,
     3449, 3193, 3198, 3212, 3190, 3195, 3187, 3197,  731, 3212,

     3184, 3188, 3201, 3182, 3182, 3178, 3195, 3179, 3178, 3182,
     3193, 3191,  656,  697,  738, 3449, 3449,  729,  734,  737,
      738,  741,  756, 3449, 3449,  747,  769,  784,  751,  788,
     3449, 3449,  766,  763,  803, 3449, 3449,  810,  813,  825,
     3174, 3188, 3186, 3169, 3191, 3186, 3185,  746, 3171, 3179,
      828,  831, 3164, 3169, 3183, 3161, 3166,  834, 3158, 3168,
      837,  840,  846, 3156, 3160,  852,  855, 3173, 3154, 3154,
     3150, 3167, 3151,  861, 3150, 3154,  867,  870, 3165,  874,
     3163, 3163, 3143, 3157, 3146, 3145, 3147, 3146, 3148, 3147,
     3152, 3136, 3148, 3147,  187, 3140, 3135, 3140, 3122, 3131,

      775, 3128, 3136, 3125, 3138, 3130, 3136,  441, 3131, 3449,
     3126, 3126,  806,  865,  866,  870,  885,  876,  877,  880,
      900,  921,  916,  906,  881,  920,  937,  940, 3449, 3449,
     3136, 3116, 3130, 3119, 3118, 3120, 3119, 3121, 3120, 3125,
     3109,  952,  956, 3121, 3120,  455, 3113, 3108, 3113, 3095,
      959,  962,  967, 3104,  788, 3101,  970, 3109, 3098, 3111,
     3103, 3109,  493, 3104,  973,  977, 3099, 3099, 3101, 3449,
     3095, 3090,  152, 3449,  964, 3089, 3094, 3100, 3105, 3449,
     3449, 3082, 3086, 3105, 3082, 3077, 3097, 3077, 3087, 3086,
     3090, 3075, 3087, 3087, 3085,  201, 3073, 3073, 3086, 3081,

     3080,  988,  971,  972,  980, 1003, 1006,  997, 1018, 1021,
     1021, 3449, 3449, 1039, 1022, 1032, 1055, 1058, 3075, 1070,
     3069, 3064,  222, 1073, 1063, 3063, 3068, 3074, 3079, 1091,
     1097, 1100, 3056, 3060, 3079, 3056, 3051, 3071, 1103, 3051,
     3061, 3060, 3064, 3049, 1106, 3062, 3060, 1115, 3048, 3048,
     3061, 1121, 1124, 3056, 3055, 3045, 3055, 3048, 3051, 3054,
     3053, 3038, 3031, 3049, 3049, 3044, 3043,  919, 3046, 3033,
     3040, 3028, 3018, 3037, 3021, 3031, 3021, 3026, 3449, 3449,
     3018,  975, 3032, 3034, 3039, 3013, 3045, 3029, 3449, 3011,
     1130, 1148, 1033, 1071, 1098, 1155, 3449, 3449, 1074, 1162,

     1165, 1124, 1146, 1156, 1165, 1166, 1169, 1170, 1173, 1205,
     3449, 3449, 3015, 1188, 1196, 3025, 3018, 3021, 3024, 1212,
     1218, 3023, 3008, 3001, 3019, 3019, 3014, 3013,  972, 3016,
     1221, 1229, 1232, 1236, 3003, 3010, 2998, 2988, 3007, 2991,
     3001, 2991, 2996, 1239, 1242, 1247, 1250, 2988, 1032, 3002,
     1257, 1262, 3004, 3009, 2983, 3015, 2999, 1265, 1268, 2981,
     2979, 2989, 2992, 2984, 2984, 2975, 2979, 2991, 2981, 2972,
     2986, 2969, 2972, 2985, 2967, 2982, 2978, 2981, 2985, 2961,
     2970, 2963, 2972, 2971, 2978, 2965, 2964, 2976, 2958, 2983,
     2960, 2954, 2955, 3449, 1272, 3449, 3449, 1263, 1267, 1271,

     1272, 1287, 3449, 3449, 1278, 1282, 1051, 1213, 1283, 1286,
     1287, 1290, 1291, 1294, 1295, 2946, 1312, 2956, 2959, 2951,
     2951, 1323, 2942, 2946, 2958, 2948, 2939, 2953, 2936, 2939,
     2952, 2934, 1327, 1330, 2949, 2945, 2948, 2952, 2928, 2937,
     2930, 2939, 2938, 1338, 1344, 1347, 1354, 1357, 2945, 2932,
     2931, 2943, 1362, 2925, 2950, 2927, 2921, 2922, 1365, 1368,
     1371, 2914, 2927, 2911, 2919, 2911, 2906, 2858, 2864, 2869,
     2864, 2800, 2822, 2811, 2800, 2802, 2805, 2793, 2787, 2774,
     3449, 2767,    9,   63,   58,   83,   89,  118,  135,  158,
     3449,  153,  151,  211, 1374, 1380, 1389, 1383, 1398, 1125,

     1404, 1395, 1407, 1401, 1423, 1414, 1440, 1415, 1444,  203,
      222,  216,  236,  239,  238,  242,  252,  265,  264,  267,
      308,  313,  310,  320,  348,  378,  390,  391, 1459,  392,
      398,  410,  427, 1430, 1462,  444,  442,  466,  471,  490,
     1466,  484,  491,  509, 1474, 1477, 1484, 3449,  509,  538,
      524, 3449,  530,  534,  572,  591,  599,  598,  606,  628,
      642,  647,  635, 3449,  649,  642,  655,  659,  663,  687,
      703,  696,  697,  710, 3449,  706,  723,  757, 1487, 1492,
     1502, 1505, 1508, 1523, 1530, 1533, 1511, 1436, 1536, 1539,
     1517, 1524, 1514, 1543, 1544, 1562, 1567, 1558, 1577, 1580,

     1572, 1573, 1592, 1609, 1600,  726,  770,  762, 1616,  768,
      789,  811,  812,  815,  809,  810,  829,  844,  861,  851,
     1619,  865,  850, 1622, 1625,  863,  862,  872,  900,  912,
      908,  909,  930, 1637, 1640, 1643,  951,  975, 1013, 1646,
     3449,  988, 1003, 1023, 1009, 1031, 1023, 1053, 1042, 1084,
     1064, 3449, 1083, 3449, 3449, 1088, 3449, 3449, 1079, 1085,
     1097, 1114, 1119, 1134, 1138, 1149, 1147, 1655, 3449, 3449,
     1662, 1665, 3449, 3449, 1672, 1675, 1687, 1638, 1617, 1691,
     1483, 1682, 1666, 1704, 1683, 1710, 1646, 1719, 1688, 1725,
     1728, 3449, 3449, 1740, 1743, 1746, 1154, 1169, 1749, 1755,

     1186, 1172, 1210, 1200, 1224, 1228, 1290, 1262, 1764, 1283,
     1767, 1770, 1773, 1785, 1281, 1788, 1791, 1794, 1284, 1292,
     1299, 1313, 1298, 1308, 1800, 1809, 1815, 1818, 1332, 1326,
     1570, 3449, 1329, 1349, 1350, 1365, 1368, 1377, 1384, 1396,
     1401, 3449, 1403, 1444, 1425, 1418, 3449, 1427, 3449, 1443,
     1514, 1821, 3449, 3449, 1747, 1828, 1719, 1812, 1819, 1822,
     1792, 1837, 1843, 1834, 1840, 1844, 1862, 1877, 1884, 1891,
     1894, 1610, 1897, 1900, 1505, 1525, 1519, 1530, 1552, 1556,
     1554, 1565, 1906, 1912, 1586, 1915, 1921, 1924, 1930, 1933,
     1936, 1939, 1945, 1954, 1957, 1582, 1624, 1607, 1614, 1960,

     1628, 1963, 1969, 1975, 1978, 1644, 1668, 1668, 1673, 1678,
     1671, 1667, 1667, 1696, 1713, 1697, 1709, 1737, 1734, 1730,
     1734, 1734, 1766, 3449, 1750, 1970, 1985, 1988, 1854, 1979,
     1937, 1982, 1988, 1989, 2004, 1995, 1868, 1996, 2014, 3449,
     3449, 2021, 1764, 1772, 2024, 2028, 1777, 1770, 1792, 1797,
     1820, 1821, 1809, 1821, 2031, 1833, 2042, 2045, 2048, 2051,
     2054, 2057, 1830, 1839, 1843, 1854, 2063, 2066, 1873, 2069,
     2072, 2078, 2081, 1861, 1873, 1882, 1874, 1894, 1904, 1909,
     1919, 1913, 1928, 1924, 1957, 1956, 1955, 3449, 1960, 1974,
     1982, 2073, 2088, 2079, 2080, 2084, 2085, 2088, 2089, 2092,

     2093, 2096, 1991, 1994, 2111, 2006, 2013, 2036, 2037, 2051,
     2056, 2075, 2067, 2100, 2124, 2078, 2063, 2134, 2068, 2137,
     2079, 2150, 2153, 2156, 2090, 2090, 2091, 2077, 2086, 2088,
     2127, 2109, 2115, 3449, 3449, 2107, 2108, 2123, 2120, 2117,
     2123, 2154, 2157, 2158, 2161, 2162, 2165, 2180, 2183, 2174,
     2189, 2139, 2148, 2144, 2150, 2152, 2190, 2172, 2178, 2213,
     2218, 2164, 2168, 2183, 2224, 2228, 2188, 2186, 2234, 2195,
     2185, 3449, 2187, 2208, 3449, 2193, 2208, 2198, 2196, 2211,
     2216, 3449, 2209, 2210, 2207, 2239, 2254, 2245, 2246, 2250,
     2249, 2269, 2272, 2275, 2278, 2272, 2293, 2301, 2198, 2308,

     2212, 2257, 2311, 2242, 2261, 2253, 2255, 2314, 2317, 2329,
     2332, 2285, 2292, 2335, 2338, 2285, 2287, 2284, 2302, 3449,
     2307, 2289, 2299, 2291, 2322, 2300, 2301, 2298, 3449, 2304,
     2353, 2356, 2359, 2350, 2359, 2360, 2363, 2378, 2381, 2372,
     2387, 2324, 2390, 2393, 2396, 2341, 2405, 2399, 2348, 2362,
     2356, 2387, 2414, 2421, 2369, 2369, 2424, 2427, 2377, 2431,
     2386, 3449, 2389, 2388, 2382, 2400, 2391, 2404, 2417, 3449,
     2402, 2446, 2449, 2452, 2443, 2449, 2464, 2455, 2456, 2471,
     2479, 2482, 2487, 2398, 2490, 2408, 2407, 2435, 2426, 2456,
     2470, 2497, 2500, 2506, 2510, 2462, 2449, 2475, 2476, 2463,

     2461, 2476, 2470, 2487, 2522, 2513, 2514, 2529, 2532, 2523,
     2544, 2538, 2547, 2562, 2481, 2513, 2515, 2502, 2503, 2518,
     2516, 2566, 2569, 2572, 2541, 2537, 2524, 2525, 2549, 2542,
     2539, 2527, 2545, 2573, 2574, 2589, 2580, 2595, 2598, 2602,
     2554, 2552, 2553, 2610, 2574, 2571, 2559, 2616, 2580, 2567,
     3449, 3449, 2567, 3449, 2574, 2584, 2582, 2614, 2617, 2620,
     2635, 2580, 2642, 2645, 2648, 2651, 2584, 2663, 2591, 2615,
     2612, 3449, 2605, 2617, 3449, 2619, 2654, 2657, 2658, 2678,
     2681, 2684, 2688, 2696, 2705, 2609, 2708, 2712, 2632, 2715,
     2634, 2633, 2653, 2649, 2706, 2707, 2712, 2730, 2733, 2736,

     2739, 2650, 2745, 2660, 2751, 2754, 2657, 2652, 2664, 2669,
     2745, 2713, 2752, 2767, 2680, 2703, 2770, 2689, 2707, 2706,
     2705, 2761, 2764, 2765, 2722, 2731, 2727, 3449, 2740, 3449,
     2771, 2770, 2789, 2792, 2745, 2795, 2745, 2793, 2813, 2820,
     2828, 2835, 2838, 2756, 2841, 2850, 2745, 2856, 2859, 2862,
     2865, 2874, 2750, 2877, 2755, 2880, 2883, 2886, 2758, 3449,
     2889, 2895, 2898, 2901, 2904, 3449, 2914, 2919, 2924, 2929,
     2934, 2939, 2944, 2948, 2953, 2957, 2962
    } ;

static yyconst flex_int16_t yy_def[1678] =
    {   0,
     1667, 1667, 1668, 1668, 1669, 1669, 1670, 1670, 1671, 1671,
     1671, 1671, 1672, 1672, 1673, 1673, 1666, 1666, 1674, 1674,
       20, 1666, 1674, 1674, 1674, 1674, 1674, 1666, 1666, 1674,
     1675, 1666, 1676, 1677, 1666, 1666, 1666, 1666, 1666, 1666,
       20, 1674, 1674,   28, 1666, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1674, 1675, 1676, 1677, 1666, 1666, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,

     1674, 1674, 1674, 1674, 1666, 1674, 1674, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1674, 1666,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1666, 1674, 1674, 1674, 1674, 1674,
     1674, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,

     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1674, 1674,
     1674, 1674, 1674, 1666, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1666, 1666, 1666, 1674, 1674, 1674, 1674, 1674,
     1674, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,

     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1674, 1674, 1674, 1666, 1674, 1666,
     1674, 1674, 1674, 1674, 1674, 1666, 1674, 1674, 1674, 1674,
     1674, 1666, 1674, 1674, 1674, 1666, 1674, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,

     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1674, 1674, 1666, 1666, 1666, 1674, 1674, 1674,
     1674, 1674, 1666, 1666, 1666, 1674, 1674, 1674, 1674, 1666,
     1666, 1666, 1674, 1674, 1666, 1666, 1666, 1674, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,

     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1666, 1674, 1666, 1674, 1674, 1674, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,

     1666, 1674, 1674, 1674, 1674, 1674, 1666, 1674, 1674, 1674,
     1666, 1666, 1666, 1666, 1674, 1674, 1674, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1674, 1666, 1674, 1674, 1674, 1666, 1666, 1666, 1674, 1674,

     1666, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1674, 1674, 1674,

     1674, 1666, 1666, 1666, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1674, 1674, 1674, 1674, 1674, 1674,

     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1674, 1666,
     1674, 1666, 1674, 1666, 1674, 1674, 1666, 1674, 1674, 1674,
     1666, 1674, 1674, 1674, 1674, 1674, 1666, 1674, 1674, 1666,

     1674, 1674, 1674, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1674, 1666, 1666, 1674, 1674, 1666,
     1674, 1674, 1674, 1674, 1674, 1666, 1674, 1666, 1674, 1674,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,

     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1666, 1674, 1674, 1674, 1674, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,

     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1674, 1674, 1666, 1674, 1674,
     1674, 1674, 1674, 1674, 1666, 1674, 1674, 1674, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1674, 1666, 1674, 1674, 1674, 1674, 1674, 1674, 1674,

     1674, 1674, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1666, 1674, 1666, 1674, 1674, 1666, 1666, 1666,

     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1674, 1674, 1666, 1674, 1674, 1674, 1674, 1666, 1666, 1674,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1674, 1666, 1666, 1674, 1674, 1674, 1674, 1674, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,

     1666, 1666, 1666, 1666, 1666, 1674, 1674, 1674, 1666, 1674,
     1674, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1674, 1674, 1666, 1674, 1674, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1674, 1674, 1674,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1674, 1674, 1674, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1674, 1674, 1674, 1666, 1666, 1666,

     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1674, 1674, 1674, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1674, 1674, 1674, 1666, 1666, 1666, 1666, 1666, 1666,
     1674, 1674, 1674, 1666, 1666, 1666, 1666, 1674, 1674, 1674,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1674, 1674, 1666,
     1666, 1666, 1666, 1666, 1666, 1674, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666,    0, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666
    } ;

static yyconst flex_int16_t yy_nxt[3513] =
    {   0,
       18,   19,   20,   21,   18,   22,   39,   22,   18,   24,
       25,   26,   27,   28,   18,   29,   18,   36,   36,   39,
       40, 1666,   30, 1666,   37,   37,   58, 1666,   59, 1666,
     1666, 1666,   63,   40, 1666, 1666, 1666, 1666,   60, 1666,
      139,   61, 1666, 1666, 1666,   63, 1666,  125,   82,   62,
       58,  126,   59, 1666, 1666, 1666, 1666,  140,  968, 1666,
       62, 1666,   22,   18,   19,   20,   21,   18,   22,   62,
       22,   18,   24,   25,   26,   27,   28,   18,   29,   18,
       62,   89,   88,  175, 1666,   30, 1666,  176, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,

     1666,  969, 1666,  132, 1666,  182, 1666, 1666, 1666, 1666,
     1666,  133,  970,  183,   92,   95, 1666,   93, 1666,   96,
      217,  218,   82,  104,   90,   22,   41,   41,   41,   91,
       94,  102,  189,  971,   98, 1666,   43, 1666,   44,   97,
       45,   99,  972,  103,  100,  270,  271,   61, 1666,  190,
     1666,  101,  105,  106,  223,   62,  107, 1666,  151, 1666,
     1666,  224, 1666,   46,   47,  973,   48,   49,  149,   50,
      276,  659,   51,   52,   53,   62,  152,  277,  660,   54,
       55,   56,   57,   41,   41,   41,   58,  134,   59, 1666,
      974, 1666, 1666,   43, 1666,   44,   62,   45,  975,   61,

     1666,  135, 1666,  976,  136,  137,  138,   62,  977, 1666,
      142, 1666,  143, 1666,  582, 1666,   62, 1666,  583, 1666,
       46,   47,  144,   48,   49,  159,   50,   62,  684,   51,
       52,   53,  145, 1666,  685, 1666,   54,   55,   56,   57,
       64,  718, 1666, 1666, 1666, 1666,  153,   65,  719,  156,
      154,  978,   66, 1666, 1666, 1666, 1666, 1005,  158,  164,
      164,  164, 1006,  155,  157,  166, 1666, 1666, 1666, 1666,
     1007, 1666,  165, 1666,   67,   68, 1008,   69,   70, 1009,
       71,   72, 1010,   73,   74,  170,   75,   76,  160,   77,
       78,   79,   80,   81,  109,  110, 1011,  111,  112, 1012,

      113,  114,  161,  115,  116, 1013,  117,  118, 1014,  119,
      120,  121,  122,  123, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1015, 1666,  168, 1666,  107, 1666,  184, 1666,
      107, 1666,  192, 1666,  193, 1666, 1666, 1666, 1666,  169,
     1016, 1666,  185, 1666,  194,  186,  187,  188,  162,  204,
     1666, 1017, 1666,  167,  195,  163,  205,  171, 1018,  206,
      207,  230,  229,  241, 1019,  233,  233,  233, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666,  231, 1666,  234, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1020,  164,
      164,  164,  236,  232,  242,  237, 1666, 1666, 1666, 1666,

      238, 1666,  165, 1666, 1666,  240, 1666,  239,  243,  243,
      243,  235,  244, 1666,  245, 1666, 1666, 1021, 1666,  257,
      246,  282,  283,  247,  295,  296,  258,  249, 1022,  259,
      260, 1666,  297, 1666, 1666, 1023, 1666,  317,  317,  317,
      248, 1666, 1026, 1666,  233,  233,  233, 1027, 1028, 1666,
      318, 1666,  320,  320,  320,  250, 1666,  234, 1666,  251,
      315, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,  597,
     1666,  324, 1666,  598,  316,  325,  325,  325, 1666,  319,
     1666, 1029,  633, 1666,  321, 1666,  634, 1666,  326, 1666,
     1666, 1666, 1666, 1666, 1030, 1031,  322,  327,  243,  243,

      243, 1666,  244, 1666,  245,  328, 1666,  323, 1666,  329,
      331,  331,  331, 1032,  333,  335,  335,  335,  338,  338,
      338,  649, 1666,  332, 1666,  650, 1033, 1666,  336, 1666,
     1034,  330,  339,  337, 1037,  334,  350,  350,  350,  355,
      356,  358,  358,  358,  372,  372,  372,  357, 1038, 1039,
      351,  378,  378,  378, 1666,  359, 1666,  352,  373,  399,
      399,  399, 1666, 1041, 1666,  379, 1666, 1666, 1666, 1666,
     1042,  340,  341,  317,  317,  317, 1666,  374, 1666, 1043,
      360,  320,  320,  320, 1044, 1666,  318, 1666,  418, 1045,
     1666,  413, 1666,  414,  380,  415,  415,  415,  421,  416,

     1666,  417, 1666,  325,  325,  325, 1046,  423,  423,  423,
      419,  424, 1666,  425, 1666, 1666,  326, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666,  331,  331,  331, 1047,
      430,  430,  430,  420,  431, 1048,  432,  422, 1666,  332,
     1666, 1666,  489, 1666,  490,  338,  338,  338, 1049,  335,
      335,  335,  426,  440,  440,  440, 1050,  433,  427,  339,
      429, 1666,  336, 1666, 1051,  428,  435,  435,  435, 1666,
      436, 1666,  437,  438,  438,  438,  350,  350,  350,  451,
      451,  451, 1052, 1053,  434, 1666,  439, 1666, 1054, 1055,
      351,  358,  358,  358,  458,  458,  458,  461,  461,  461,

      466,  466,  466, 1056, 1057,  359,  372,  372,  372,  513,
     1666,  462, 1666, 1058,  467,  474,  474,  474, 1059, 1060,
      373,  477,  477,  477,  378,  378,  378, 1061,  468,  480,
      480,  480,  399,  399,  399,  478, 1062, 1063,  379,  415,
      415,  415, 1666,  416, 1666,  417, 1064, 1666,  514, 1666,
     1666, 1666, 1666, 1666, 1666, 1065, 1666,  423,  423,  423,
     1666,  424, 1666,  425, 1666,  538, 1666,  539,  516,  515,
      521,  521,  521, 1066, 1067,  520, 1666,  517, 1666, 1666,
     1096, 1666, 1666,  522, 1666,  523,  523,  523,  518,  430,
      430,  430,  519,  431,  589,  432,  590, 1666,  524, 1666,

      526,  525, 1097,  527,  435,  435,  435,  641,  436,  642,
      437,  438,  438,  438,  528,  528,  528, 1098,  529, 1666,
      530, 1666, 1101, 1666,  439, 1666,  440,  440,  440,  451,
      451,  451,  542,  542,  542,  458,  458,  458,  461,  461,
      461,  551,  551,  551, 1102, 1103,  543,  552,  552,  552,
     1104, 1105,  462,  466,  466,  466,  557,  557,  557, 1106,
     1107,  553,  474,  474,  474, 1108,  602,  467,  477,  477,
      477,  566,  566,  566,  554,  480,  480,  480, 1666, 1666,
     1666, 1666,  478, 1666, 1109, 1666,  606,  606,  606, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1110, 1666,  607,

     1666,  521,  521,  521, 1111, 1114,  605,  614,  614,  614,
      604, 1115, 1117, 1666,  522, 1666, 1118,  523,  523,  523,
      603,  610,  611,  611,  611,  608,  612, 1119,  613, 1666,
      524, 1666, 1120, 1666,  615, 1666, 1121,  609,  617,  617,
      617,  528,  528,  528,  773,  529,  774,  530, 1122, 1123,
     1666,  618, 1666,  542,  542,  542,  616,  630,  630,  630,
      551,  551,  551,  552,  552,  552, 1124,  543,  639,  639,
      639,  557,  557,  557,  652,  652,  652,  553,  566,  566,
      566,  661,  662,  663, 1666, 1666, 1666, 1666,  653,  691,
      691,  691,  664, 1666,  786, 1666,  787,  830,  665,  831,

     1128, 1666,  692, 1666,  606,  606,  606,  696,  696,  696,
     1666,  697, 1666,  698,  694,  693, 1666,  607, 1666,  700,
      700,  700,  611,  611,  611, 1129,  612,  695,  613,  699,
     1130, 1666,  701, 1666, 1666, 1666, 1666, 1666, 1131,  702,
      614,  614,  614, 1132,  703, 1666, 1666, 1666, 1666,  704,
      705,  850,  706,  851, 1133,  707,  617,  617,  617,  710,
      710,  710, 1134,  711, 1666,  712, 1666, 1135, 1666,  618,
     1666,  714,  714,  714,  720,  720,  720,  708, 1136,  709,
      722,  723,  724,  798, 1666,  715, 1666, 1666,  721, 1666,
     1137,  725,  630,  630,  630, 1138,  901,  726,  731,  731,

      731,  733,  733,  733,  639,  639,  639,  746,  746,  746,
     1139, 1666,  732, 1666,  799,  734,  751,  751,  751, 1140,
     1141,  747,  652,  652,  652,  758,  758,  758, 1142, 1143,
      752,  691,  691,  691,  801, 1144,  653, 1666, 1666, 1666,
     1666, 1145,  753, 1666,  692, 1666,  748,  989,  754,  795,
      795,  795, 1146,  796,  800,  797,  696,  696,  696, 1666,
      697, 1666,  698,  700,  700,  700,  802,  802,  802, 1666,
      803, 1666,  804, 1147,  805, 1666,  701, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1148, 1666,  714,
      714,  714, 1149,  807,  811, 1150,  806,  817,  817,  817,

     1151,  809,  814,  715, 1172,  813,  710,  710,  710, 1173,
      711,  808,  712,  720,  720,  720,  812, 1175,  810,  822,
      822,  822,  731,  731,  731, 1176, 1666,  721, 1666,  815,
      833,  833,  833,  733,  733,  733,  732,  834,  834,  834,
      844,  844,  844,  846,  846,  846, 1177,  734,  746,  746,
      746,  848,  848,  848,  845, 1178,  902,  847,  751,  751,
      751, 1179,  747,  853,  853,  853,  758,  758,  758,  859,
      859,  859,  752,  795,  795,  795, 1666,  796, 1666,  797,
     1666, 1180, 1666,  860, 1666, 1666, 1666, 1666,  802,  802,
      802, 1666,  803, 1666,  804, 1666, 1666, 1666, 1666, 1666,

     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666,  897,  895,  817,  817,  817, 1181, 1182,  905,  900,
     1185, 1191,  896,  898,  822,  822,  822,  899,  833,  833,
      833,  834,  834,  834, 1196,  909,  904,  906,  903,  844,
      844,  844, 1197, 1198,  907,  934,  934,  934,  846,  846,
      846, 1199, 1200,  845,  908,  935,  935,  935,  848,  848,
      848, 1201,  847,  853,  853,  853,  859,  859,  859,  945,
      945,  945,  946,  946,  946,  979,  979,  979, 1206, 1207,
      860,  981,  981,  981, 1210, 1211,  947, 1666,  980, 1666,
      983,  983,  983, 1666,  982, 1666, 1666, 1212, 1666,  986,

      986,  986, 1666,  984, 1666,  990,  990,  990, 1666, 1213,
     1666, 1666,  987, 1666, 1666, 1214, 1666, 1666,  991, 1666,
     1666, 1215, 1666,  985,  996,  996,  996, 1666, 1666, 1666,
     1666,  934,  934,  934, 1216,  993, 1666,  997, 1666,  995,
     1217,  999,  999,  999,  992, 1003, 1003, 1003, 1218, 1666,
      994, 1666,  988, 1666, 1000, 1666, 1219, 1666, 1004, 1666,
     1024, 1024, 1024,  935,  935,  935, 1002, 1035, 1035, 1035,
     1220,  998, 1221, 1222, 1025,  945,  945,  945,  946,  946,
      946, 1036, 1223, 1224, 1001, 1040, 1040, 1040,  979,  979,
      979, 1078,  947, 1068, 1068, 1068, 1666, 1069, 1666, 1070,

     1666,  980, 1666,  981,  981,  981, 1071, 1071, 1071,  983,
      983,  983, 1077, 1077, 1077, 1666,  982, 1666, 1080, 1080,
     1080, 1666,  984, 1666, 1072, 1072, 1072, 1666, 1073, 1666,
     1074, 1075, 1075, 1075,  986,  986,  986, 1666, 1157, 1666,
      990,  990,  990, 1666, 1076, 1666, 1666,  987, 1666, 1666,
     1225, 1666, 1666,  991, 1666, 1079, 1666, 1666, 1666, 1666,
     1247, 1248, 1081,  996,  996,  996, 1249, 1082, 1086, 1086,
     1086, 1666, 1083, 1666, 1250, 1666,  997, 1666,  999,  999,
      999, 1088, 1088, 1088, 1085, 1666, 1666, 1666, 1666, 1208,
     1666, 1000, 1666, 1003, 1003, 1003, 1209, 1084, 1087, 1251,

     1252, 1094, 1094, 1094, 1253, 1666, 1004, 1666, 1089, 1254,
     1091, 1091, 1091, 1090, 1092, 1095, 1093, 1099, 1099, 1099,
     1112, 1112, 1112, 1024, 1024, 1024, 1116, 1116, 1116, 1243,
     1666, 1100, 1666, 1256, 1113, 1263, 1244, 1025, 1125, 1125,
     1125, 1035, 1035, 1035, 1127, 1127, 1127, 1040, 1040, 1040,
     1264, 1666, 1126, 1666, 1265, 1036, 1068, 1068, 1068, 1666,
     1069, 1666, 1070, 1071, 1071, 1071, 1072, 1072, 1072, 1266,
     1073, 1156, 1074, 1075, 1075, 1075, 1152, 1152, 1152, 1666,
     1153, 1666, 1154, 1269, 1273, 1666, 1076, 1666, 1077, 1077,
     1077, 1155, 1080, 1080, 1080, 1666, 1666, 1666, 1666, 1165,

     1158, 1666, 1161, 1666, 1274, 1162, 1162, 1162, 1275, 1276,
     1159, 1086, 1086, 1086, 1277, 1278, 1160, 1666, 1163, 1666,
     1088, 1088, 1088, 1279, 1280, 1166, 1167, 1167, 1167, 1091,
     1091, 1091, 1666, 1092, 1666, 1093, 1281, 1164, 1666, 1168,
     1666, 1094, 1094, 1094, 1169, 1169, 1169, 1170, 1170, 1170,
     1099, 1099, 1099, 1282, 1283, 1095, 1174, 1174, 1174, 1284,
     1666, 1171, 1666, 1229, 1100, 1183, 1183, 1183, 1186, 1186,
     1186, 1112, 1112, 1112, 1188, 1188, 1188, 1285, 1286, 1184,
     1287, 1288, 1187, 1226, 1289, 1113, 1189, 1189, 1189, 1116,
     1116, 1116, 1192, 1192, 1192, 1194, 1194, 1194, 1290, 1291,

     1190, 1125, 1125, 1125, 1303, 1666, 1193, 1666, 1304, 1195,
     1202, 1202, 1202, 1306, 1307, 1126, 1127, 1127, 1127, 1203,
     1203, 1203, 1152, 1152, 1152, 1666, 1153, 1666, 1154, 1227,
     1227, 1227, 1666, 1204, 1666, 1666, 1234, 1666, 1162, 1162,
     1162, 1666, 1228, 1666, 1235, 1235, 1235, 1666, 1308, 1666,
     1666, 1163, 1666, 1666, 1309, 1666, 1231, 1666, 1233, 1666,
     1310, 1311, 1230, 1167, 1167, 1167, 1312, 1666, 1237, 1666,
     1232, 1313, 1205, 1314, 1316, 1666, 1168, 1666, 1239, 1239,
     1239, 1666, 1240, 1666, 1241, 1169, 1169, 1169, 1236, 1317,
     1318, 1238, 1170, 1170, 1170, 1242, 1242, 1242, 1245, 1245,

     1245, 1174, 1174, 1174, 1319, 1321, 1171, 1183, 1183, 1183,
     1325, 1294, 1246, 1255, 1255, 1255, 1186, 1186, 1186, 1301,
     1326, 1184, 1257, 1257, 1257, 1188, 1188, 1188, 1327, 1328,
     1187, 1189, 1189, 1189, 1258, 1258, 1258, 1259, 1259, 1259,
     1192, 1192, 1192, 1329, 1330, 1190, 1261, 1261, 1261, 1331,
     1666, 1260, 1666, 1332, 1193, 1194, 1194, 1194, 1262, 1262,
     1262, 1267, 1267, 1267, 1202, 1202, 1202, 1333, 1334, 1195,
     1203, 1203, 1203, 1335, 1336, 1268, 1270, 1270, 1270, 1271,
     1271, 1271, 1296, 1666, 1204, 1666, 1227, 1227, 1227, 1293,
     1293, 1293, 1666, 1272, 1666, 1666, 1337, 1666, 1666, 1228,

     1666, 1666, 1666, 1666, 1666, 1235, 1235, 1235, 1666, 1666,
     1666, 1666, 1338, 1339, 1292, 1239, 1239, 1239, 1340, 1240,
     1341, 1241, 1242, 1242, 1242, 1245, 1245, 1245, 1295, 1305,
     1305, 1305, 1255, 1255, 1255, 1300, 1302, 1297, 1352, 1246,
     1353, 1298, 1299, 1257, 1257, 1257, 1258, 1258, 1258, 1259,
     1259, 1259, 1315, 1315, 1315, 1261, 1261, 1261, 1262, 1262,
     1262, 1354, 1355, 1260, 1267, 1267, 1267, 1320, 1320, 1320,
     1270, 1270, 1270, 1271, 1271, 1271, 1356, 1357, 1268, 1322,
     1322, 1322, 1323, 1323, 1323, 1358, 1666, 1272, 1666, 1293,
     1293, 1293, 1666, 1666, 1666, 1666, 1324, 1666, 1666, 1666,

     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1359, 1666, 1305, 1305, 1305, 1360, 1361, 1362, 1363, 1343,
     1364, 1367, 1342, 1368, 1345, 1315, 1315, 1315, 1370, 1346,
     1371, 1372, 1347, 1373, 1344, 1365, 1365, 1365, 1320, 1320,
     1320, 1374, 1375, 1348, 1376, 1378, 1349, 1379, 1350, 1366,
     1351, 1322, 1322, 1322, 1323, 1323, 1323, 1369, 1369, 1369,
     1380, 1377, 1381, 1382, 1383, 1384, 1385, 1666, 1324, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1399,
     1666, 1392, 1392, 1392, 1394, 1394, 1394, 1666, 1400, 1666,
     1397, 1397, 1397, 1666, 1393, 1666, 1666, 1395, 1666, 1389,

     1401, 1391, 1666, 1398, 1666, 1402, 1403, 1404, 1406, 1386,
     1407, 1387, 1390, 1388, 1408, 1408, 1408, 1412, 1396, 1410,
     1410, 1410, 1413, 1414, 1405, 1365, 1365, 1365, 1409, 1415,
     1415, 1415, 1416, 1411, 1417, 1369, 1369, 1369, 1418, 1366,
     1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
     1429, 1430, 1666, 1442, 1666, 1432, 1432, 1432, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1445, 1666, 1433, 1666,
     1392, 1392, 1392, 1438, 1438, 1438, 1394, 1394, 1394, 1439,
     1439, 1439, 1666, 1393, 1666, 1666, 1437, 1666, 1666, 1395,
     1666, 1446, 1449, 1431, 1397, 1397, 1397, 1450, 1434, 1436,

     1451, 1435, 1441, 1441, 1441, 1452, 1666, 1398, 1666, 1443,
     1443, 1443, 1447, 1447, 1447, 1408, 1408, 1408, 1453, 1453,
     1453, 1455, 1440, 1444, 1456, 1459, 1448, 1460, 1461, 1409,
     1410, 1410, 1410, 1454, 1454, 1454, 1457, 1457, 1457, 1415,
     1415, 1415, 1462, 1463, 1411, 1464, 1465, 1466, 1467, 1468,
     1458, 1469, 1470, 1471, 1472, 1472, 1472, 1432, 1432, 1432,
     1474, 1474, 1474, 1666, 1480, 1666, 1666, 1473, 1666, 1666,
     1433, 1666, 1666, 1666, 1666, 1666, 1666, 1484, 1666, 1438,
     1438, 1438, 1439, 1439, 1439, 1666, 1475, 1666, 1441, 1441,
     1441, 1443, 1443, 1443, 1481, 1481, 1481, 1482, 1482, 1482,

     1485, 1485, 1485, 1476, 1486, 1444, 1447, 1447, 1447, 1487,
     1478, 1483, 1488, 1489, 1477, 1453, 1453, 1453, 1490, 1491,
     1448, 1479, 1454, 1454, 1454, 1457, 1457, 1457, 1492, 1492,
     1492, 1493, 1494, 1494, 1494, 1496, 1497, 1498, 1499, 1458,
     1500, 1501, 1502, 1503, 1504, 1515, 1495, 1472, 1472, 1472,
     1505, 1505, 1505, 1474, 1474, 1474, 1666, 1516, 1666, 1666,
     1473, 1666, 1666, 1517, 1666, 1508, 1508, 1508, 1666, 1666,
     1666, 1666, 1512, 1512, 1512, 1518, 1519, 1666, 1509, 1666,
     1481, 1481, 1481, 1482, 1482, 1482, 1513, 1506, 1514, 1514,
     1514, 1485, 1485, 1485, 1520, 1510, 1521, 1483, 1492, 1492,

     1492, 1522, 1522, 1522, 1525, 1526, 1507, 1494, 1494, 1494,
     1511, 1524, 1524, 1524, 1527, 1523, 1528, 1529, 1530, 1531,
     1532, 1495, 1533, 1505, 1505, 1505, 1666, 1666, 1666, 1666,
     1508, 1508, 1508, 1536, 1536, 1536, 1666, 1541, 1666, 1512,
     1512, 1512, 1666, 1509, 1666, 1538, 1538, 1538, 1540, 1540,
     1540, 1537, 1542, 1513, 1535, 1543, 1544, 1666, 1539, 1666,
     1545, 1546, 1534, 1514, 1514, 1514, 1547, 1522, 1522, 1522,
     1548, 1548, 1548, 1524, 1524, 1524, 1549, 1550, 1551, 1552,
     1553, 1523, 1554, 1555, 1556, 1557, 1666, 1666, 1666, 1666,
     1536, 1536, 1536, 1666, 1562, 1666, 1538, 1538, 1538, 1561,

     1561, 1561, 1559, 1540, 1540, 1540, 1563, 1564, 1666, 1539,
     1666, 1565, 1565, 1565, 1568, 1569, 1570, 1548, 1548, 1548,
     1571, 1572, 1573, 1574, 1575, 1566, 1576, 1666, 1558, 1666,
     1666, 1560, 1666, 1666, 1580, 1666, 1561, 1561, 1561, 1586,
     1589, 1567, 1577, 1581, 1581, 1581, 1583, 1583, 1583, 1565,
     1565, 1565, 1585, 1585, 1585, 1590, 1591, 1582, 1592, 1593,
     1584, 1594, 1602, 1566, 1587, 1587, 1587, 1666, 1578, 1666,
     1666, 1666, 1666, 1666, 1604, 1579, 1607, 1608, 1588, 1598,
     1598, 1598, 1581, 1581, 1581, 1600, 1600, 1600, 1609, 1583,
     1583, 1583, 1610, 1599, 1615, 1616, 1582, 1601, 1601, 1601,

     1618, 1619, 1597, 1584, 1620, 1595, 1585, 1585, 1585, 1587,
     1587, 1587, 1596, 1603, 1603, 1603, 1605, 1605, 1605, 1666,
     1666, 1666, 1666, 1588, 1621, 1666, 1666, 1666, 1666, 1625,
     1606, 1598, 1598, 1598, 1614, 1614, 1614, 1600, 1600, 1600,
     1601, 1601, 1601, 1626, 1627, 1599, 1603, 1603, 1603, 1628,
     1629, 1612, 1605, 1605, 1605, 1617, 1617, 1617, 1666, 1630,
     1666, 1611, 1613, 1623, 1634, 1666, 1606, 1666, 1614, 1614,
     1614, 1617, 1617, 1617, 1666, 1635, 1666, 1666, 1666, 1666,
     1666, 1636, 1637, 1666, 1666, 1666, 1666, 1644, 1647, 1622,
     1640, 1640, 1640, 1642, 1642, 1642, 1645, 1645, 1645, 1653,

     1655, 1624, 1666, 1641, 1666, 1659, 1666, 1643, 1666, 1660,
     1646, 1631, 1662, 1632, 1649, 1649, 1649,  967,  966, 1633,
     1638, 1640, 1640, 1640, 1639,  965, 1666, 1650, 1666, 1651,
     1651, 1651,  964, 1666, 1641, 1666, 1642, 1642, 1642, 1652,
     1652, 1652, 1645, 1645, 1645,  963,  962, 1648,  961,  960,
     1643, 1654, 1654, 1654,  959,  958, 1646, 1656, 1656, 1656,
     1649, 1649, 1649, 1658, 1658, 1658, 1651, 1651, 1651, 1666,
     1657, 1666, 1666, 1650, 1666, 1652, 1652, 1652, 1654, 1654,
     1654, 1656, 1656, 1656, 1661, 1661, 1661, 1658, 1658, 1658,
     1661, 1661, 1661, 1666, 1657, 1666, 1663, 1663, 1663, 1663,

     1663, 1663, 1665, 1665, 1665, 1665, 1665, 1665,  957,  956,
     1664,  955,  954, 1664,   23,   23,   23,   23,   23,   31,
       31,   31,   31,   31,   33,   33,   33,   33,   33,   34,
       34,   34,   34,   34,   32,   32,   32,   32,   32,   35,
       35,   35,   35,   35,   38,   38,   38,   38,   38,   42,
      953,  952,   42,   83,   83,   83,   83,   84,   84,  951,
       84,   84,   85,   85,   85,  950,   85,  949,  948,  944,
      943,  942,  941,  940,  939,  938,  937,  936,  933,  932,
      931,  930,  929,  928,  927,  926,  925,  924,  923,  922,
      921,  920,  919,  918,  917,  916,  915,  914,  913,  912,

      911,  910,  894,  893,  892,  891,  890,  889,  888,  887,
      886,  885,  884,  883,  882,  881,  880,  879,  878,  877,
      876,  875,  874,  873,  872,  871,  870,  869,  868,  867,
      866,  865,  864,  863,  862,  861,  858,  857,  856,  855,
      854,  852,  849,  843,  842,  841,  840,  839,  838,  837,
      836,  835,  832,  829,  828,  827,  826,  825,  824,  823,
      821,  820,  819,  818,  816,  794,  793,  792,  791,  790,
      789,  788,  785,  784,  783,  782,  781,  780,  779,  778,
      777,  776,  775,  772,  771,  770,  769,  768,  767,  766,
      765,  764,  763,  762,  761,  760,  759,  757,  756,  755,

      750,  749,  745,  744,  743,  742,  741,  740,  739,  738,
      737,  736,  735,  730,  729,  728,  727,  717,  716,  713,
      690,  689,  688,  687,  686,  683,  682,  681,  680,  679,
      678,  677,  676,  675,  674,  673,  672,  671,  670,  669,
      668,  667,  666,  658,  657,  656,  655,  654,  651,  648,
      647,  646,  645,  644,  643,  640,  638,  637,  636,  635,
      632,  631,  629,  628,  627,  626,  625,  624,  623,  622,
      621,  620,  619,  601,  600,  599,  596,  595,  594,  593,
      592,  591,  588,  587,  586,  585,  584,  581,  580,  579,
      578,  577,  576,  575,  574,  573,  572,  571,  570,  569,

      568,  567,  565,  564,  563,  562,  561,  560,  559,  558,
      556,  555,  550,  549,  548,  547,  546,  545,  544,  541,
      540,  537,  536,  535,  534,  533,  532,  531,  512,  511,
      510,  509,  508,  507,  506,  505,  504,  503,  502,  501,
      500,  499,  498,  497,  496,  495,  494,  493,  492,  491,
      488,  487,  486,  485,  484,  483,  482,  481,  479,  476,
      475,  473,  472,  471,  470,  469,  465,  464,  463,  460,
      459,  457,  456,  455,  454,  453,  452,  450,  449,  448,
      447,  446,  445,  444,  443,  442,  441,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  403,  402,  401,  400,

      398,  397,  396,  395,  394,  393,  392,  391,  390,  389,
      388,  387,  386,  385,  384,  383,  382,  381,  377,  376,
      375,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  354,  353,  349,  348,  347,  346,  345,  344,
      343,  342,  314,  313,  312,  311,  310,  309,  308,  307,
      306,  305,  304,  303,  302,  301,  300,  299,  298,  294,
      293,  292,  291,  290,  289,  288,  287,  286,  285,  284,
      281,  280,  279,  278,  275,  274,  273,  272,  269,  268,
      267,  266,  265,  264,  263,  262,  261,  256,  255,  254,
      253,  252,  172,  228,  227,  226,  225,  222,  221,  220,

      219,  216,  215,  214,  213,  212,  211,  210,  209,  208,
      203,  202,  201,  200,  199,  198,  197,  196,  191,  181,
      180,  179,  178,  177,  174,  173,  172,  150,  148,  147,
      146,  141,  131,  130,  129,  128,  127,  124,  108,   87,
       86, 1666,   32,   32,   32,   32,   32,   32,   17, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,

     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666
    } ;

static yyconst flex_int16_t yy_chk[3513] =
    {   0,
        1,    1,    1,    1,    1,    1,   15,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   13,   14,   16,
       15,   23,    1,   23,   13,   14,   24,   44,   24,   24,
       26,   24,   26,   16,   30,   42,   30,   42,   24,   44,
       76,   25,   25,   43,   25,   43,    0,   68,   30,   25,
       27,   68,   27,   27,   47,   27,   47,   76,  883,   46,
       27,   46,    1,    2,    2,    2,    2,    2,    2,   25,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       27,   47,   46,  110,   48,    2,   48,  110,   50,   49,
       50,   49,   52,   51,   52,   51,   53,   54,   53,   54,

       57,  884,   57,   74,   55,  116,   55,   56,   60,   56,
       60,   74,  885,  116,   50,   52,   88,   51,   88,   53,
      139,  139,   60,   57,   48,    2,   19,   19,   19,   49,
       51,   56,  118,  886,   54,   89,   19,   89,   19,   53,
       19,   55,  887,   56,   55,  189,  189,   58,   58,  118,
       58,   55,   62,   62,  144,   58,   62,   62,   88,   62,
       82,  144,   82,   19,   19,  888,   19,   19,   82,   19,
      194,  573,   19,   19,   19,   58,   89,  194,  573,   19,
       19,   19,   19,   20,   20,   20,   59,   75,   59,   59,
      889,   59,   95,   20,   95,   20,   59,   20,  890,   61,

       61,   75,   61,  892,   75,   75,   75,   61,  893,   90,
       78,   90,   78,   91,  495,   91,   59,   92,  495,   92,
       20,   20,   78,   20,   20,   95,   20,   61,  596,   20,
       20,   20,   78,   94,  596,   94,   20,   20,   20,   20,
       28,  623,  100,   93,  100,   93,   90,   28,  623,   93,
       91,  894,   28,   96,  103,   96,  103,  910,   94,   99,
       99,   99,  911,   92,   93,  100,  149,   97,  149,   97,
      912,   99,   99,   99,   28,   28,  913,   28,   28,  914,
       28,   28,  915,   28,   28,  103,   28,   28,   96,   28,
       28,   28,   28,   28,   65,   65,  916,   65,   65,  917,

       65,   65,   97,   65,   65,  918,   65,   65,  919,   65,
       65,   65,   65,   65,   98,  101,   98,  101,  102,  162,
      102,  162,  920,  104,  102,  104,  106,  106,  117,  106,
      107,  107,  120,  107,  120,  151,  152,  151,  152,  102,
      921,  153,  117,  153,  120,  117,  117,  117,   98,  129,
      154,  922,  154,  101,  120,   98,  129,  104,  923,  129,
      129,  152,  151,  162,  924,  155,  155,  155,  156,  157,
      156,  157,  158,  159,  158,  159,  153,  155,  155,  155,
      160,  161,  160,  161,  166,  163,  166,  163,  925,  164,
      164,  164,  157,  154,  163,  158,  167,  168,  167,  168,

      159,  164,  164,  164,  169,  161,  169,  160,  165,  165,
      165,  156,  165,  170,  165,  170,  171,  926,  171,  179,
      166,  199,  199,  167,  211,  211,  179,  169,  927,  179,
      179,  229,  211,  229,  230,  928,  230,  231,  231,  231,
      168,  232,  930,  232,  233,  233,  233,  931,  932,  231,
      231,  231,  234,  234,  234,  170,  233,  233,  233,  171,
      229,  235,  236,  235,  236,  237,  238,  237,  238,  508,
      240,  238,  240,  508,  230,  239,  239,  239,  241,  232,
      241,  933,  546,  242,  235,  242,  546,  239,  239,  239,
      246,  248,  246,  248,  936,  937,  236,  240,  243,  243,

      243,  249,  243,  249,  243,  241,  251,  237,  251,  242,
      247,  247,  247,  938,  248,  250,  250,  250,  252,  252,
      252,  563,  247,  247,  247,  563,  939,  250,  250,  250,
      940,  246,  252,  251,  942,  249,  261,  261,  261,  264,
      264,  265,  265,  265,  277,  277,  277,  264,  943,  944,
      261,  281,  281,  281,  315,  265,  315,  261,  277,  300,
      300,  300,  316,  949,  316,  281,  319,  323,  319,  323,
      950,  252,  252,  317,  317,  317,  321,  277,  321,  951,
      265,  320,  320,  320,  953,  317,  317,  317,  319,  954,
      322,  315,  322,  316,  281,  318,  318,  318,  323,  318,

      324,  318,  324,  325,  325,  325,  955,  326,  326,  326,
      321,  326,  327,  326,  327,  325,  325,  325,  328,  329,
      328,  329,  330,  333,  330,  333,  331,  331,  331,  956,
      332,  332,  332,  322,  332,  957,  332,  324,  331,  331,
      331,  334,  388,  334,  388,  338,  338,  338,  958,  335,
      335,  335,  327,  339,  339,  339,  959,  333,  328,  338,
      330,  335,  335,  335,  960,  329,  336,  336,  336,  413,
      336,  413,  336,  337,  337,  337,  350,  350,  350,  351,
      351,  351,  961,  962,  334,  337,  337,  337,  963,  965,
      350,  358,  358,  358,  359,  359,  359,  362,  362,  362,

      366,  366,  366,  966,  967,  358,  372,  372,  372,  413,
      414,  362,  414,  968,  366,  373,  373,  373,  969,  970,
      372,  376,  376,  376,  378,  378,  378,  971,  366,  379,
      379,  379,  399,  399,  399,  376,  972,  973,  378,  415,
      415,  415,  418,  415,  418,  415,  974,  419,  414,  419,
      420,  421,  420,  421,  422,  976,  422,  423,  423,  423,
      426,  423,  426,  423,  429,  448,  429,  448,  419,  418,
      427,  427,  427,  977,  978,  426,  434,  420,  434,  433,
     1006,  433,  427,  427,  427,  428,  428,  428,  421,  430,
      430,  430,  422,  430,  501,  430,  501,  428,  428,  428,

      433,  429, 1007,  434,  435,  435,  435,  555,  435,  555,
      435,  438,  438,  438,  439,  439,  439, 1008,  439,  513,
      439,  513, 1010,  438,  438,  438,  440,  440,  440,  451,
      451,  451,  452,  452,  452,  458,  458,  458,  461,  461,
      461,  462,  462,  462, 1011, 1012,  452,  463,  463,  463,
     1013, 1014,  461,  466,  466,  466,  467,  467,  467, 1015,
     1016,  463,  474,  474,  474, 1017,  513,  466,  477,  477,
      477,  478,  478,  478,  463,  480,  480,  480,  514,  515,
      514,  515,  477,  516, 1018,  516,  517,  517,  517,  518,
      519,  518,  519,  520,  525,  520,  525, 1019,  517,  517,

      517,  521,  521,  521, 1020, 1022,  516,  524,  524,  524,
      515, 1023, 1026,  521,  521,  521, 1027,  523,  523,  523,
      514,  520,  522,  522,  522,  518,  522, 1028,  522,  523,
      523,  523, 1029,  526,  525,  526, 1030,  519,  527,  527,
      527,  528,  528,  528,  668,  528,  668,  528, 1031, 1032,
      527,  527,  527,  542,  542,  542,  526,  543,  543,  543,
      551,  551,  551,  552,  552,  552, 1033,  542,  553,  553,
      553,  557,  557,  557,  565,  565,  565,  552,  566,  566,
      566,  575,  575,  575,  603,  604,  603,  604,  565,  602,
      602,  602,  575,  605,  682,  605,  682,  729,  575,  729,

     1037,  602,  602,  602,  606,  606,  606,  607,  607,  607,
      608,  607,  608,  607,  604,  603,  606,  606,  606,  609,
      609,  609,  611,  611,  611, 1038,  611,  605,  611,  608,
     1039,  609,  609,  609,  610,  615,  610,  615, 1042,  610,
      614,  614,  614, 1043,  610,  616,  693,  616,  693,  610,
      610,  749,  610,  749, 1044,  610,  617,  617,  617,  618,
      618,  618, 1045,  618,  807,  618,  807, 1046,  617,  617,
      617,  620,  620,  620,  624,  624,  624,  615, 1047,  616,
      625,  625,  625,  693,  694,  620,  694,  699,  624,  699,
     1048,  625,  630,  630,  630, 1049,  807,  625,  631,  631,

      631,  632,  632,  632,  639,  639,  639,  645,  645,  645,
     1050,  695,  631,  695,  694,  632,  648,  648,  648, 1051,
     1053,  645,  652,  652,  652,  653,  653,  653, 1056, 1059,
      648,  691,  691,  691,  699, 1060,  652,  702,  900,  702,
      900, 1061,  648,  691,  691,  691,  645,  900,  648,  692,
      692,  692, 1062,  692,  695,  692,  696,  696,  696,  703,
      696,  703,  696,  700,  700,  700,  701,  701,  701,  704,
      701,  704,  701, 1063,  702,  700,  700,  700,  705,  706,
      705,  706,  707,  708,  707,  708,  709, 1064,  709,  714,
      714,  714, 1065,  704,  706, 1066,  703,  715,  715,  715,

     1067,  705,  708,  714, 1097,  707,  710,  710,  710, 1098,
      710,  704,  710,  720,  720,  720,  706, 1101,  705,  721,
      721,  721,  731,  731,  731, 1102,  808,  720,  808,  709,
      732,  732,  732,  733,  733,  733,  731,  734,  734,  734,
      744,  744,  744,  745,  745,  745, 1103,  733,  746,  746,
      746,  747,  747,  747,  744, 1104,  808,  745,  751,  751,
      751, 1105,  746,  752,  752,  752,  758,  758,  758,  759,
      759,  759,  751,  795,  795,  795,  798,  795,  798,  795,
      799, 1106,  799,  759,  800,  801,  800,  801,  802,  802,
      802,  805,  802,  805,  802,  806,  809,  806,  809,  810,

      811,  810,  811,  812,  813,  812,  813,  814,  815,  814,
      815,  800,  798,  817,  817,  817, 1107, 1108,  811,  806,
     1110, 1115,  799,  801,  822,  822,  822,  805,  833,  833,
      833,  834,  834,  834, 1119,  815,  810,  812,  809,  844,
      844,  844, 1120, 1121,  813,  845,  845,  845,  846,  846,
      846, 1122, 1123,  844,  814,  847,  847,  847,  848,  848,
      848, 1124,  846,  853,  853,  853,  859,  859,  859,  860,
      860,  860,  861,  861,  861,  895,  895,  895, 1129, 1130,
      859,  896,  896,  896, 1133, 1134,  861,  895,  895,  895,
      897,  897,  897,  896,  896,  896,  898, 1135,  898,  899,

      899,  899,  897,  897,  897,  901,  901,  901,  902, 1136,
      902,  899,  899,  899,  904, 1137,  904,  901,  901,  901,
      903, 1138,  903,  898,  905,  905,  905,  906,  908,  906,
      908,  934,  934,  934, 1139,  902,  905,  905,  905,  904,
     1140,  907,  907,  907,  901,  909,  909,  909, 1141,  988,
      903,  988,  899,  907,  907,  907, 1143,  909,  909,  909,
      929,  929,  929,  935,  935,  935,  908,  941,  941,  941,
     1144,  906, 1145, 1146,  929,  945,  945,  945,  946,  946,
      946,  941, 1148, 1150,  907,  947,  947,  947,  979,  979,
      979,  988,  946,  980,  980,  980, 1081,  980, 1081,  980,

      979,  979,  979,  981,  981,  981,  982,  982,  982,  983,
      983,  983,  987,  987,  987,  981,  981,  981,  991,  991,
      991,  983,  983,  983,  984,  984,  984,  993,  984,  993,
      984,  985,  985,  985,  986,  986,  986,  992, 1081,  992,
      990,  990,  990,  985,  985,  985,  986,  986,  986,  989,
     1151,  989,  990,  990,  990,  989,  994,  995,  994,  995,
     1175, 1176,  992,  996,  996,  996, 1177,  993,  997,  997,
      997,  998,  994,  998, 1178,  996,  996,  996,  999,  999,
      999, 1000, 1000, 1000,  995, 1001, 1002, 1001, 1002, 1131,
      999,  999,  999, 1003, 1003, 1003, 1131,  994,  998, 1179,

     1180, 1005, 1005, 1005, 1181, 1003, 1003, 1003, 1001, 1182,
     1004, 1004, 1004, 1002, 1004, 1005, 1004, 1009, 1009, 1009,
     1021, 1021, 1021, 1024, 1024, 1024, 1025, 1025, 1025, 1172,
     1079, 1009, 1079, 1185, 1021, 1196, 1172, 1024, 1034, 1034,
     1034, 1035, 1035, 1035, 1036, 1036, 1036, 1040, 1040, 1040,
     1197, 1078, 1034, 1078, 1198, 1035, 1068, 1068, 1068, 1087,
     1068, 1087, 1068, 1071, 1071, 1071, 1072, 1072, 1072, 1199,
     1072, 1079, 1072, 1075, 1075, 1075, 1076, 1076, 1076, 1083,
     1076, 1083, 1076, 1201, 1206, 1075, 1075, 1075, 1077, 1077,
     1077, 1078, 1080, 1080, 1080, 1082, 1085, 1082, 1085, 1087,

     1082, 1089, 1083, 1089, 1207, 1084, 1084, 1084, 1208, 1209,
     1082, 1086, 1086, 1086, 1210, 1211, 1082, 1084, 1084, 1084,
     1088, 1088, 1088, 1212, 1213, 1089, 1090, 1090, 1090, 1091,
     1091, 1091, 1157, 1091, 1157, 1091, 1214, 1085, 1090, 1090,
     1090, 1094, 1094, 1094, 1095, 1095, 1095, 1096, 1096, 1096,
     1099, 1099, 1099, 1215, 1216, 1094, 1100, 1100, 1100, 1217,
     1155, 1096, 1155, 1157, 1099, 1109, 1109, 1109, 1111, 1111,
     1111, 1112, 1112, 1112, 1113, 1113, 1113, 1218, 1219, 1109,
     1220, 1221, 1111, 1155, 1222, 1112, 1114, 1114, 1114, 1116,
     1116, 1116, 1117, 1117, 1117, 1118, 1118, 1118, 1223, 1225,

     1114, 1125, 1125, 1125, 1243, 1161, 1117, 1161, 1244, 1118,
     1126, 1126, 1126, 1247, 1248, 1125, 1127, 1127, 1127, 1128,
     1128, 1128, 1152, 1152, 1152, 1158, 1152, 1158, 1152, 1156,
     1156, 1156, 1159, 1128, 1159, 1160, 1161, 1160, 1162, 1162,
     1162, 1156, 1156, 1156, 1163, 1163, 1163, 1164, 1249, 1164,
     1162, 1162, 1162, 1165, 1250, 1165, 1159, 1166, 1160, 1166,
     1251, 1252, 1158, 1167, 1167, 1167, 1253, 1229, 1165, 1229,
     1159, 1254, 1128, 1256, 1263, 1167, 1167, 1167, 1168, 1168,
     1168, 1237, 1168, 1237, 1168, 1169, 1169, 1169, 1164, 1264,
     1265, 1166, 1170, 1170, 1170, 1171, 1171, 1171, 1173, 1173,

     1173, 1174, 1174, 1174, 1266, 1269, 1170, 1183, 1183, 1183,
     1274, 1229, 1173, 1184, 1184, 1184, 1186, 1186, 1186, 1237,
     1275, 1183, 1187, 1187, 1187, 1188, 1188, 1188, 1276, 1277,
     1186, 1189, 1189, 1189, 1190, 1190, 1190, 1191, 1191, 1191,
     1192, 1192, 1192, 1278, 1279, 1189, 1193, 1193, 1193, 1280,
     1231, 1191, 1231, 1281, 1192, 1194, 1194, 1194, 1195, 1195,
     1195, 1200, 1200, 1200, 1202, 1202, 1202, 1282, 1283, 1194,
     1203, 1203, 1203, 1284, 1285, 1200, 1204, 1204, 1204, 1205,
     1205, 1205, 1231, 1226, 1203, 1226, 1227, 1227, 1227, 1228,
     1228, 1228, 1230, 1205, 1230, 1232, 1286, 1232, 1227, 1227,

     1227, 1233, 1234, 1233, 1234, 1235, 1235, 1235, 1236, 1238,
     1236, 1238, 1287, 1289, 1226, 1239, 1239, 1239, 1290, 1239,
     1291, 1239, 1242, 1242, 1242, 1245, 1245, 1245, 1230, 1246,
     1246, 1246, 1255, 1255, 1255, 1236, 1238, 1232, 1303, 1245,
     1304, 1233, 1234, 1257, 1257, 1257, 1258, 1258, 1258, 1259,
     1259, 1259, 1260, 1260, 1260, 1261, 1261, 1261, 1262, 1262,
     1262, 1306, 1307, 1259, 1267, 1267, 1267, 1268, 1268, 1268,
     1270, 1270, 1270, 1271, 1271, 1271, 1308, 1309, 1267, 1272,
     1272, 1272, 1273, 1273, 1273, 1310, 1292, 1271, 1292, 1293,
     1293, 1293, 1294, 1295, 1294, 1295, 1273, 1296, 1297, 1296,

     1297, 1298, 1299, 1298, 1299, 1300, 1301, 1300, 1301, 1302,
     1311, 1302, 1305, 1305, 1305, 1312, 1313, 1314, 1316, 1294,
     1317, 1319, 1292, 1321, 1296, 1315, 1315, 1315, 1325, 1297,
     1326, 1327, 1298, 1328, 1295, 1318, 1318, 1318, 1320, 1320,
     1320, 1329, 1330, 1299, 1331, 1332, 1300, 1333, 1301, 1318,
     1302, 1322, 1322, 1322, 1323, 1323, 1323, 1324, 1324, 1324,
     1336, 1331, 1337, 1338, 1339, 1340, 1341, 1342, 1323, 1342,
     1343, 1344, 1343, 1344, 1345, 1346, 1345, 1346, 1347, 1352,
     1347, 1348, 1348, 1348, 1349, 1349, 1349, 1350, 1353, 1350,
     1351, 1351, 1351, 1348, 1348, 1348, 1349, 1349, 1349, 1345,

     1354, 1347, 1351, 1351, 1351, 1355, 1356, 1357, 1358, 1342,
     1359, 1343, 1346, 1344, 1360, 1360, 1360, 1362, 1350, 1361,
     1361, 1361, 1363, 1364, 1357, 1365, 1365, 1365, 1360, 1366,
     1366, 1366, 1367, 1361, 1368, 1369, 1369, 1369, 1370, 1365,
     1371, 1373, 1374, 1376, 1377, 1378, 1379, 1380, 1381, 1383,
     1384, 1385, 1386, 1399, 1386, 1387, 1387, 1387, 1388, 1389,
     1388, 1389, 1391, 1390, 1391, 1390, 1401, 1387, 1387, 1387,
     1392, 1392, 1392, 1393, 1393, 1393, 1394, 1394, 1394, 1395,
     1395, 1395, 1392, 1392, 1392, 1396, 1391, 1396, 1394, 1394,
     1394, 1402, 1404, 1386, 1397, 1397, 1397, 1405, 1388, 1390,

     1406, 1389, 1398, 1398, 1398, 1407, 1397, 1397, 1397, 1400,
     1400, 1400, 1403, 1403, 1403, 1408, 1408, 1408, 1409, 1409,
     1409, 1412, 1396, 1400, 1413, 1416, 1403, 1417, 1418, 1408,
     1410, 1410, 1410, 1411, 1411, 1411, 1414, 1414, 1414, 1415,
     1415, 1415, 1419, 1421, 1410, 1422, 1423, 1424, 1425, 1426,
     1414, 1427, 1428, 1430, 1431, 1431, 1431, 1432, 1432, 1432,
     1433, 1433, 1433, 1434, 1442, 1434, 1431, 1431, 1431, 1432,
     1432, 1432, 1435, 1436, 1435, 1436, 1437, 1446, 1437, 1438,
     1438, 1438, 1439, 1439, 1439, 1440, 1434, 1440, 1441, 1441,
     1441, 1443, 1443, 1443, 1444, 1444, 1444, 1445, 1445, 1445,

     1448, 1448, 1448, 1435, 1449, 1443, 1447, 1447, 1447, 1450,
     1437, 1445, 1451, 1452, 1436, 1453, 1453, 1453, 1455, 1456,
     1447, 1440, 1454, 1454, 1454, 1457, 1457, 1457, 1458, 1458,
     1458, 1459, 1460, 1460, 1460, 1461, 1463, 1464, 1465, 1457,
     1466, 1467, 1468, 1469, 1471, 1484, 1460, 1472, 1472, 1472,
     1473, 1473, 1473, 1474, 1474, 1474, 1475, 1486, 1475, 1472,
     1472, 1472, 1476, 1487, 1476, 1477, 1477, 1477, 1478, 1479,
     1478, 1479, 1480, 1480, 1480, 1488, 1489, 1477, 1477, 1477,
     1481, 1481, 1481, 1482, 1482, 1482, 1480, 1475, 1483, 1483,
     1483, 1485, 1485, 1485, 1490, 1478, 1491, 1482, 1492, 1492,

     1492, 1493, 1493, 1493, 1496, 1497, 1476, 1494, 1494, 1494,
     1479, 1495, 1495, 1495, 1498, 1493, 1499, 1500, 1501, 1502,
     1503, 1494, 1504, 1505, 1505, 1505, 1506, 1507, 1506, 1507,
     1508, 1508, 1508, 1509, 1509, 1509, 1510, 1515, 1510, 1512,
     1512, 1512, 1508, 1508, 1508, 1511, 1511, 1511, 1513, 1513,
     1513, 1510, 1516, 1512, 1507, 1517, 1518, 1511, 1511, 1511,
     1519, 1520, 1506, 1514, 1514, 1514, 1521, 1522, 1522, 1522,
     1523, 1523, 1523, 1524, 1524, 1524, 1525, 1526, 1527, 1528,
     1529, 1522, 1530, 1531, 1532, 1533, 1534, 1535, 1534, 1535,
     1536, 1536, 1536, 1537, 1541, 1537, 1538, 1538, 1538, 1539,

     1539, 1539, 1535, 1540, 1540, 1540, 1542, 1543, 1538, 1538,
     1538, 1544, 1544, 1544, 1545, 1546, 1547, 1548, 1548, 1548,
     1549, 1550, 1553, 1555, 1556, 1544, 1557, 1558, 1534, 1558,
     1559, 1537, 1559, 1560, 1562, 1560, 1561, 1561, 1561, 1567,
     1569, 1544, 1558, 1563, 1563, 1563, 1564, 1564, 1564, 1565,
     1565, 1565, 1566, 1566, 1566, 1570, 1571, 1563, 1573, 1574,
     1564, 1576, 1586, 1565, 1568, 1568, 1568, 1577, 1559, 1577,
     1578, 1579, 1578, 1579, 1589, 1560, 1591, 1592, 1568, 1580,
     1580, 1580, 1581, 1581, 1581, 1582, 1582, 1582, 1593, 1583,
     1583, 1583, 1594, 1580, 1602, 1604, 1581, 1584, 1584, 1584,

     1607, 1608, 1579, 1583, 1609, 1577, 1585, 1585, 1585, 1587,
     1587, 1587, 1578, 1588, 1588, 1588, 1590, 1590, 1590, 1595,
     1596, 1595, 1596, 1587, 1610, 1597, 1612, 1597, 1612, 1615,
     1590, 1598, 1598, 1598, 1599, 1599, 1599, 1600, 1600, 1600,
     1601, 1601, 1601, 1616, 1618, 1598, 1603, 1603, 1603, 1619,
     1620, 1596, 1605, 1605, 1605, 1606, 1606, 1606, 1611, 1621,
     1611, 1595, 1597, 1612, 1625, 1613, 1605, 1613, 1614, 1614,
     1614, 1617, 1617, 1617, 1622, 1626, 1622, 1623, 1624, 1623,
     1624, 1627, 1629, 1632, 1631, 1632, 1631, 1635, 1637, 1611,
     1633, 1633, 1633, 1634, 1634, 1634, 1636, 1636, 1636, 1644,

     1647, 1613, 1633, 1633, 1633, 1653, 1638, 1634, 1638, 1655,
     1636, 1622, 1659, 1623, 1639, 1639, 1639,  882,  880, 1624,
     1631, 1640, 1640, 1640, 1632,  879, 1639, 1639, 1639, 1641,
     1641, 1641,  878, 1640, 1640, 1640, 1642, 1642, 1642, 1643,
     1643, 1643, 1645, 1645, 1645,  877,  876, 1638,  875,  874,
     1642, 1646, 1646, 1646,  873,  872, 1645, 1648, 1648, 1648,
     1649, 1649, 1649, 1650, 1650, 1650, 1651, 1651, 1651, 1648,
     1648, 1648, 1649, 1649, 1649, 1652, 1652, 1652, 1654, 1654,
     1654, 1656, 1656, 1656, 1657, 1657, 1657, 1658, 1658, 1658,
     1661, 1661, 1661, 1656, 1656, 1656, 1662, 1662, 1662, 1663,

     1663, 1663, 1664, 1664, 1664, 1665, 1665, 1665,  871,  870,
     1662,  869,  868, 1663, 1667, 1667, 1667, 1667, 1667, 1668,
     1668, 1668, 1668, 1668, 1669, 1669, 1669, 1669, 1669, 1670,
     1670, 1670, 1670, 1670, 1671, 1671, 1671, 1671, 1671, 1672,
     1672, 1672, 1672, 1672, 1673, 1673, 1673, 1673, 1673, 1674,
      867,  866, 1674, 1675, 1675, 1675, 1675, 1676, 1676,  865,
     1676, 1676, 1677, 1677, 1677,  864, 1677,  863,  862,  858,
      857,  856,  855,  854,  852,  851,  850,  849,  843,  842,
      841,  840,  839,  838,  837,  836,  835,  832,  831,  830,
      829,  828,  827,  826,  825,  824,  823,  821,  820,  819,

      818,  816,  793,  792,  791,  790,  789,  788,  787,  786,
      785,  784,  783,  782,  781,  780,  779,  778,  777,  776,
      775,  774,  773,  772,  771,  770,  769,  768,  767,  766,
      765,  764,  763,  762,  761,  760,  757,  756,  755,  754,
      753,  750,  748,  743,  742,  741,  740,  739,  738,  737,
      736,  735,  730,  728,  727,  726,  725,  724,  723,  722,
      719,  718,  717,  716,  713,  690,  688,  687,  686,  685,
      684,  683,  681,  678,  677,  676,  675,  674,  673,  672,
      671,  670,  669,  667,  666,  665,  664,  663,  662,  661,
      660,  659,  658,  657,  656,  655,  654,  651,  650,  649,

      647,  646,  644,  643,  642,  641,  640,  638,  637,  636,
      635,  634,  633,  629,  628,  627,  626,  622,  621,  619,
      601,  600,  599,  598,  597,  595,  594,  593,  592,  591,
      590,  589,  588,  587,  586,  585,  584,  583,  582,  579,
      578,  577,  576,  572,  571,  569,  568,  567,  564,  562,
      561,  560,  559,  558,  556,  554,  550,  549,  548,  547,
      545,  544,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  512,  511,  509,  507,  506,  505,  504,
      503,  502,  500,  499,  498,  497,  496,  494,  493,  492,
      491,  490,  489,  488,  487,  486,  485,  484,  483,  482,

      481,  479,  476,  475,  473,  472,  471,  470,  469,  468,
      465,  464,  460,  459,  457,  456,  455,  454,  453,  450,
      449,  447,  446,  445,  444,  443,  442,  441,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  398,  397,  396,  395,  394,  393,  392,  390,  389,
      387,  386,  385,  384,  383,  382,  381,  380,  377,  375,
      374,  371,  370,  369,  368,  367,  365,  364,  363,  361,
      360,  357,  356,  355,  354,  353,  352,  349,  348,  347,
      346,  345,  344,  343,  342,  341,  340,  314,  313,  311,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  301,

      299,  298,  297,  296,  295,  294,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  284,  283,  282,  280,  279,
      278,  276,  275,  274,  273,  272,  271,  270,  269,  268,
      267,  266,  263,  262,  260,  259,  258,  257,  256,  255,
      254,  253,  228,  227,  226,  225,  224,  223,  222,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  212,  210,
      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,
      198,  197,  196,  195,  193,  192,  191,  190,  188,  187,
      186,  185,  184,  183,  182,  181,  180,  178,  177,  176,
      175,  174,  172,  148,  147,  146,  145,  143,  142,  141,

      140,  138,  137,  136,  135,  134,  133,  132,  131,  130,
      128,  127,  126,  125,  124,  123,  122,  121,  119,  115,
      114,  113,  112,  111,  109,  108,  105,   86,   81,   80,
       79,   77,   73,   72,   71,   70,   69,   67,   64,   40,
       37,   17,    8,    7,    6,    5,    4,    3, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,

     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,
     1666, 1666
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[188] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 
    0, 1, 0, 1, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin, 
 * @version 1.1, 10/07/2008
 * @since   OS1.1
 *
 * \remarks
 * Copyright (C) 2005-2008, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSoLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"

#define PARSERDEBUG

#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;








#line 100 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 1879 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 110 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"


 
#line 2125 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1667 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3449 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 113 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 118 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 119 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 120 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 122 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 136 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 138 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 139 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 140 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 141 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 142 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 143 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 144 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 145 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 146 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 147 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 148 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 149 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 150 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 151 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 152 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 153 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 154 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 155 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 156 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 158 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 159 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 160 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 161 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 162 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 163 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 164 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 165 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 166 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 167 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 168 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 169 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 170 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 171 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 172 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 173 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 174 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 175 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 176 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 177 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 178 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 179 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 180 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 181 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 182 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 183 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 184 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 185 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 187 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBDUALVALUEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 188 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBDUALVALUEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 189 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBDUALVALUEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 190 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBDUALVALUEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 192 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 193 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 194 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 195 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 196 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 197 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 198 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 199 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 200 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 201 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 202 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 203 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 205 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 206 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 207 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 208 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 209 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 210 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 211 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 212 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 213 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 214 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 215 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 216 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 217 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 218 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 219 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 220 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 221 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 222 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 223 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 224 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 225 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 226 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 227 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 228 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 230 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 231 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 232 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZESTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 233 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZEEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 234 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 235 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 236 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 237 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 239 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 240 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 242 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 243 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 244 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 245 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 246 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 247 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 248 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 249 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 250 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 251 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 252 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 253 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 254 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 255 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 256 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 257 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 258 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 259 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 260 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 261 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 262 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 263 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 264 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 265 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 266 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 267 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 268 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 269 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 270 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 271 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 272 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 273 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 274 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 275 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 278 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 279 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 280 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 281 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 282 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 283 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 284 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 285 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 286 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 287 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 288 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 289 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 290 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 291 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 292 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 293 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 294 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 295 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 296 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 297 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 298 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 299 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 300 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 301 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 302 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 303 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 304 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 305 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 306 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 307 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 308 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 309 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 310 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 311 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 312 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 313 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 316 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; /*yylval->sval = strdup( yytext);*/   yylval->sval = yytext; yyextra->errorText = yylval->sval;  return (ELEMENTTEXT); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 319 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 176:
#line 321 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 321 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 322 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 324 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 180:
#line 326 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 326 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 327 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 330 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 331 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;  return(ATTRIBUTETEXT);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 332 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 334 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 346 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 3352 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1667 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1667 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1666);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 346 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"





