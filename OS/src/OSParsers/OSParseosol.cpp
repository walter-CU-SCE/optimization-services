#line 2 "OSParseosol.cpp"

#line 4 "OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osollex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 188
#define YY_END_OF_BUFFER 189
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1668] =
    {   0,
        0,    0,  186,  186,  184,  184,  185,  185,    0,    0,
        0,    0,    0,    0,    0,    0,  189,  187,    1,    1,
        1,    2,  175,  175,    5,  175,    4,  187,    3,  175,
      186,  188,  184,  185,  177,  178,  177,  181,  182,  181,
      175,  175,  175,    0,    3,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,    5,    4,  175,
        5,  175,    6,    0,    0,  180,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  175,  186,  184,  185,    0,  183,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,

      175,  175,  175,  175,    0,  175,    5,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    5,  179,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,    0,  175,  175,  175,  175,  175,
      175,    5,  176,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  167,    0,

        0,    0,    0,    0,    0,    0,    0,   67,    0,    0,
        0,  159,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  151,    0,    0,    0,  153,  175,  175,
      175,  175,  175,   23,  175,  175,  175,  175,  175,  175,
      175,  175,    0,   40,   41,  175,  175,  175,  175,  175,
      175,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  113,    0,    0,    0,    0,    0,    0,
        0,  103,    0,    0,  175,  175,  175,    0,  175,   23,
      175,  175,  175,  175,  175,    0,  175,  175,  175,  175,
      175,    0,  175,  175,  175,    0,  175,    0,  168,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       68,    0,    0,    0,    0,    0,    0,    0,  160,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  152,    0,    0,    0,    0,    0,  154,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       79,    0,    0,    0,    0,    0,    0,    0,   59,   58,

       93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  175,  175,    0,   38,   39,  175,  175,
      175,  175,  175,    0,   30,   31,  175,  175,  175,  175,
        0,   48,   49,  175,  175,    0,   36,   37,  175,    0,
      168,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   68,    0,    0,    0,    0,    0,    0,  160,    0,
        0,    0,   60,    0,    0,    0,    0,  114,    0,    0,
        0,    0,    0,    0,  152,    0,    0,    0,  104,    0,
      154,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       63,    0,    0,  175,  175,  175,  175,  175,  175,  175,
      175,  175,    0,  175,   24,  175,  175,  175,    0,   32,
       33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   80,    0,    0,    0,    0,    0,    0,
        0,   60,    0,   94,    0,    0,    0,  114,    0,    0,
        0,    0,    0,    0,    0,    0,  104,    0,    0,    0,
       89,    0,    0,    0,   61,    0,    0,    0,    0,    0,
       83,  105,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  137,    0,    0,   65,    0,    0,    0,

        0,    0,  175,  175,  175,  175,  175,    0,  175,  175,
      175,    0,   44,   45,   24,  175,  175,  175,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       80,    0,    0,    0,    0,    0,    0,    0,    0,   94,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   64,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   87,
      125,    0,    0,    0,    0,    0,    0,    0,    0,   85,
        0,  175,    0,  175,  175,  175,    0,   50,   51,  175,

      175,    0,  175,  175,  175,  175,  175,  175,  175,  175,
        0,   52,   53,    0,    0,   90,    0,    0,    0,    0,
        0,   62,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   84,    0,  106,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  138,    0,    0,
        0,    0,   66,    0,    0,    0,    0,    0,   64,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  139,    0,   46,   47,  175,  175,

      175,  175,    0,   42,   43,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,    0,   90,    0,    0,
        0,    0,   62,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   84,  106,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   88,    0,  126,  138,    0,
        0,    0,    0,   66,    0,    0,    0,    0,    0,    0,
       86,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  155,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   71,    0,    0,    0,  175,  175,  175,  175,  175,

      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   88,  126,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   86,    0,  140,  163,    0,
        0,    0,  119,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   99,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   73,    0,    0,    0,  175,
        0,  175,   25,  175,    0,  175,  175,   21,  175,  175,
      175,   19,  175,  175,  175,  175,  175,   17,  175,  175,

       16,  175,  175,  175,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  156,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   72,    0,    0,    0,
      140,  109,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   75,    0,  101,   95,    0,   69,   91,    0,
        0,    0,    0,    0,    0,  173,    0,    0,    0,   34,
       35,   25,    0,   54,   55,  175,    0,   21,  175,  175,
       19,  175,  175,  175,  175,  175,   17,  175,   16,  175,
      175,    0,   56,   57,    0,  164,    0,    0,    0,    0,

      120,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  100,    0,    0,  156,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   74,   72,    0,    0,
        0,    0,  133,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   97,    0,    0,    0,    0,  115,    0,  171,
        0,    0,    0,   26,   27,  175,  175,  175,  175,  175,
      175,  175,  175,    9,  175,  175,  175,  175,    0,  164,
        0,  110,    0,    0,  120,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   76,    0,    0,  102,  100,    0,
       96,    0,    0,   70,    0,   92,    0,    0,    0,    0,

        0,    0,   74,    0,  174,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   81,    0,  175,  175,    8,  175,
      175,  175,  175,  175,  175,    9,  175,  175,  175,    0,
       28,   29,  110,    0,    0,    0,  134,    0,    0,    0,
        0,    0,    0,    0,    0,   76,    0,  102,   96,    0,
       98,   70,   92,    0,    0,    0,    0,    0,  116,    0,
      174,    0,  172,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  135,    0,
        0,    0,  175,    8,  175,  175,  175,  175,  175,  175,

      175,  175,  175,    0,    0,  134,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   98,    0,    0,    0,    0,
      116,    0,  172,    0,   82,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  123,   77,    0,    0,    0,    0,
        0,    0,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  136,    0,    0,   82,
        0,    0,  117,    0,    0,  169,    0,    0,    0,    0,
        0,    0,  129,    0,    0,    0,  175,  175,  175,  175,
      175,  175,  175,   10,  175,   11,  175,  175,   12,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  124,
        0,   78,    0,    0,    0,  136,    0,    0,    0,    0,
      145,    0,    0,    0,    0,    0,    0,    0,    0,  107,
        0,  175,  175,   13,  175,  175,  175,  175,   10,   11,
      175,   12,    0,    0,  118,    0,    0,    0,  170,    0,
        0,    0,    0,  124,   78,    0,    0,    0,  130,    0,
        0,    0,  131,    0,    0,    0,    0,    0,    0,    0,
      111,    0,  175,   14,   13,  175,  175,  175,  175,  175,
        0,  118,    0,  146,    0,  170,    0,    0,    0,    0,
        0,    0,  130,    0,    0,  108,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   14,  175,  175,  175,    7,
      175,  175,    0,  132,  146,    0,    0,    0,    0,    0,
        0,    0,    0,  112,  108,    0,    0,    0,    0,  141,
        0,    0,    0,    0,  175,  175,    7,  175,  175,   22,
      132,    0,    0,    0,    0,    0,    0,    0,  112,    0,
        0,  161,  157,    0,  121,    0,    0,    0,  175,  175,
      175,   22,    0,    0,    0,    0,  142,    0,    0,    0,
        0,    0,  165,    0,    0,  127,    0,  175,  175,  175,
        0,    0,  162,    0,  158,  142,    0,    0,  122,    0,
        0,    0,    0,    0,    0,  175,  175,  175,    0,  166,

      162,  158,    0,  122,    0,    0,  128,    0,    0,    0,
        0,  175,  175,  175,  166,    0,    0,  128,    0,    0,
        0,    0,  175,  175,  175,    0,    0,    0,  143,    0,
      149,  175,  175,  175,    0,    0,    0,    0,  175,  175,
      175,   15,    0,  144,    0,    0,  150,    0,  175,  175,
       18,   15,  144,    0,  150,    0,  175,   20,   18,    0,
      147,   20,    0,    0,  148,  148,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    7,    1,    1,    8,    1,
        1,    7,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    7,    1,   14,
       15,   16,   17,    7,    7,   18,   19,   20,   21,   22,
        7,    7,   23,   24,   25,   26,   27,   28,   29,   30,
        7,   31,   32,   33,   34,   35,   36,    7,    7,    7,
        1,    7,    1,    1,    7,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,    1,   63,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[64] =
    {   0,
        1,    2,    2,    2,    1,    3,    2,    4,    1,    2,
        2,    2,    2,    2,    1,    5,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1
    } ;

static yyconst flex_int16_t yy_base[1679] =
    {   0,
        0,   63, 3434, 3433, 3442, 3441, 3438, 3437,    0,    0,
        0,    0,   15,   16,    4,   17, 3444, 3451,  125,  182,
        0, 3451,    8,   16,   29,   17,   40,  236, 3451,   21,
        0, 3451,    0,    0, 3451, 3451, 3433, 3451, 3451, 3426,
        0,   22,   30,   23, 3451,   46,   41,   71,   76,   75,
       80,   79,   83,   84,   91,   94,   87,  135,  176,   95,
      187,  144, 3451, 3431,  256, 3451, 3389,    7, 3394, 3397,
     3387, 3385, 3390,   67,  150,    4, 3393,  172, 3372, 3377,
     3394,  147,    0,    0,    0, 3414, 3451,  103,  122,  196,
      200,  204,  230,  220,  179,  240,  254,  301,  258,  229,

      302,  305,  241,  310, 3416,  314,  318, 3418, 3376,   43,
     3381, 3384, 3374, 3372, 3377,   69,  291,   96, 3380,  294,
     3359, 3364, 3381, 3367, 3364, 3361, 3366, 3363,  305, 3374,
     3372, 3350, 3359, 3362, 3351, 3355, 3361, 3348,   66, 3352,
     3349, 3357, 3346,  107, 3344, 3346, 3356, 3342,  253, 3451,
      322,  323,  328,  337,  364,  355,  356,  359,  360,  367,
      368,  306,  372,  388,  407,  371,  383,  384,  391,  400,
      403, 3382, 3451, 3344, 3341, 3338, 3343, 3340,  375, 3351,
     3349, 3327, 3336, 3339, 3328, 3332, 3338, 3325,   91, 3329,
     3326, 3334, 3323,  123, 3321, 3323, 3333, 3319,  367, 3331,

     3330, 3329, 3328, 3312, 3310, 3310, 3324, 3341, 3322, 3329,
      406, 3320, 3315, 3311, 3317, 3305, 3301, 3311, 3315, 3296,
     3311, 3293, 3292, 3314, 3292, 3306, 3292, 3300,  418,  421,
      436,  428,  443,  451,  448,  449,  452,  453,  474,  457,
      465,  470,  497, 3451, 3451,  477,  509,  478,  488,  514,
      493,  517, 3303, 3302, 3301, 3300, 3284, 3282, 3282, 3296,
      535, 3295, 3302,  521,  540, 3289, 3285, 3291, 3279, 3275,
     3285, 3289, 3270, 3285, 3267, 3266,  543, 3267, 3281, 3267,
      550, 3264, 3282, 3268, 3278, 3261, 3261, 3269, 3257, 3275,
     3268, 3290, 3259, 3263, 3277, 3261, 3264, 3265, 3254,  558,

     3248, 3244, 3241, 3269, 3257, 3252, 3256, 3250, 3253, 3256,
     3251, 3451, 3263, 3253,  541,  549,  573,  594,  554,  580,
      553,  577,  590,  589,  605,  608,  599,  608,  609,  612,
      627,  642,  622,  623,  652,  655,  669,  672,  675, 3233,
     3251, 3237, 3247, 3230, 3230, 3238, 3226, 3244, 3237,  687,
      690, 3259, 3228, 3232, 3246, 3230, 3233,  693,  696, 3234,
     3223,  702, 3217, 3213, 3210,  708, 3227, 3222, 3226, 3220,
     3223,  711,  717, 3226, 3221,  726, 3233,  729,  732, 3223,
     3205, 3219, 3217, 3200, 3222, 3217, 3216,  627, 3202, 3210,
     3451, 3195, 3200, 3214, 3192, 3197, 3189, 3199,  737, 3451,

     3214, 3186, 3190, 3203, 3184, 3184, 3180, 3197, 3181, 3180,
     3184, 3195, 3193,  709,  730,  746, 3451, 3451,  742,  741,
      745,  746,  750,  765, 3451, 3451,  756,  775,  790,  782,
      805, 3451, 3451,  785,  796,  813, 3451, 3451,  820,  823,
      836, 3176, 3190, 3188, 3171, 3193, 3188, 3187,  808, 3173,
     3181,  839,  842, 3166, 3171, 3185, 3163, 3168,  845, 3160,
     3170,  848,  851,  857, 3158, 3162,  863,  866, 3175, 3156,
     3156, 3152, 3169, 3153,  872, 3152, 3156,  878,  881, 3167,
      885, 3165, 3165, 3145, 3159, 3148, 3147, 3149, 3148, 3150,
     3149, 3154, 3138, 3150, 3149,  187, 3142, 3137, 3142, 3124,

     3133,  870, 3130, 3138, 3127, 3140, 3132, 3138,  441, 3133,
     3451, 3128, 3128,  877,  881,  882,  885,  900,  891,  892,
      897,  915,  940,  947,  921,  912,  896,  953,  968, 3451,
     3451, 3138, 3118, 3132, 3121, 3120, 3122, 3121, 3123, 3122,
     3127, 3111,  975,  932, 3123, 3122,  455, 3115, 3110, 3115,
     3097,  956,  978,  981, 3106,  925, 3103,  984, 3111, 3100,
     3113, 3105, 3111,  493, 3106,  993,  996, 3101, 3101, 3103,
     3451, 3097, 3092,  152, 3451,  983, 3091, 3096, 3102, 3107,
     3451, 3451, 3084, 3088, 3107, 3084, 3079, 3099, 3079, 3089,
     3088, 3092, 3077, 3089, 3089, 3087,  201, 3075, 3075, 3088,

     3083, 3082, 1011,  959,  976,  991, 1018, 1034, 1014, 1041,
     1034, 1068, 3451, 3451, 1057, 1035, 1038, 1078, 1081, 3077,
     1093, 3071, 3066,  222, 1096, 1084, 3065, 3070, 3076, 3081,
     1075, 1104, 1112, 3058, 3062, 3081, 3058, 3053, 3073, 1119,
     3053, 3063, 3062, 3066, 3051, 1122, 3064, 3062, 1127, 3050,
     3050, 3063, 1130, 1133, 3058, 3057, 3047, 3057, 3050, 3053,
     3056, 3055, 3040, 3033, 3051, 3051, 3046, 3045,  926, 3048,
     3035, 3042, 3030, 3020, 3039, 3023, 3033, 3023, 3028, 3451,
     3451, 3020,  986, 3034, 3036, 3041, 3015, 3047, 3031, 3451,
     3013, 1137, 1154, 1059, 1074, 1128, 1162, 3451, 3451, 1131,

     1172, 1175, 1153, 1157, 1134, 1166, 1177, 1180, 1181, 1184,
     1207, 3451, 3451, 3017, 1219, 1222, 3027, 3020, 3023, 3026,
     1227, 1230, 3025, 3010, 3003, 3021, 3021, 3016, 3015, 1003,
     3018, 1234, 1242, 1245, 1249, 3005, 3012, 3000, 2990, 3009,
     2993, 3003, 2993, 2998, 1252, 1255, 1260, 1263, 2990, 1045,
     3004, 1270, 1275, 3006, 3011, 2985, 3017, 3001, 1278, 1281,
     2983, 2981, 2991, 2994, 2986, 2986, 2977, 2981, 2993, 2983,
     2974, 2988, 2971, 2974, 2987, 2969, 2984, 2980, 2983, 2987,
     2963, 2972, 2965, 2974, 2973, 2980, 2967, 2966, 2978, 2960,
     2985, 2962, 2956, 2957, 3451, 1285, 3451, 3451, 1276, 1280,

     1284, 1285, 1300, 3451, 3451, 1291, 1202, 1296, 1295, 1299,
     1191, 1300, 1303, 1185, 1304, 1307, 2948, 1325, 2958, 2961,
     2953, 2953, 1331, 2944, 2948, 2960, 2950, 2941, 2955, 2938,
     2941, 2954, 2936, 1341, 1350, 2951, 2947, 2950, 2954, 2930,
     2939, 2932, 2941, 2940, 1354, 1357, 1360, 1364, 1369, 2947,
     2934, 2933, 2945, 1375, 2927, 2952, 2929, 2923, 2924, 1378,
     1381, 1384, 2916, 2929, 2913, 2921, 2913, 2908, 2860, 2866,
     2871, 2866, 2802, 2824, 2813, 2802, 2804, 2807, 2795, 2789,
     2776, 3451, 2769,    9,   63,   58,   83,   89,  118,  135,
      158, 3451,  153,  151,  211, 1387, 1393, 1402, 1308, 1408,

     1324, 1411, 1405, 1414, 1415, 1433, 1418, 1441, 1425, 1457,
      203,  222,  216,  236,  239,  238,  242,  252,  265,  264,
      267,  308,  313,  310,  320,  348,  378,  390,  391, 1462,
      392,  398,  410,  427, 1465, 1477,  444,  442,  466,  471,
      490, 1480,  484,  491,  509, 1485, 1488, 1491, 3451,  509,
      538,  523, 3451,  525,  529,  551,  560,  580,  567,  576,
      595,  592,  614,  598, 3451,  619,  603,  631,  627,  630,
      654,  676,  661,  666,  671, 3451,  666,  666,  704, 1495,
     1499, 1510, 1513, 1516, 1531, 1538, 1541, 1519, 1492, 1544,
     1547, 1525, 1551, 1522, 1552, 1555, 1570, 1575, 1567, 1585,

     1589, 1437, 1581, 1600, 1615, 1608,  671,  704,  687, 1623,
      692,  695,  730,  735,  738,  729,  730,  747,  746,  751,
      741, 1626,  759,  741, 1629, 1632,  764,  763,  776,  823,
      832,  821,  822,  834, 1644, 1647, 1650,  822,  826,  860,
     1653, 3451,  849,  868,  888,  867,  895,  884,  926,  911,
      962,  937, 3451,  972, 3451, 3451,  970, 3451, 3451,  965,
      966,  978,  985,  980,  987,  991, 1015, 1014, 1662, 3451,
     3451, 1669, 1672, 3451, 3451, 1679, 1682, 1694, 1645, 1624,
     1698, 1653, 1689, 1673, 1711, 1690, 1717, 1714, 1729, 1424,
     1732, 1735, 3451, 3451, 1747, 1750, 1753, 1050, 1064, 1756,

     1762, 1079, 1063, 1090, 1093, 1116, 1105, 1157, 1133, 1771,
     1164, 1774, 1777, 1780, 1792, 1171, 1795, 1798, 1801, 1168,
     1176, 1215, 1230, 1215, 1221, 1807, 1816, 1822, 1825, 1248,
     1276, 1372, 3451, 1275, 1309, 1302, 1324, 1326, 1330, 1342,
     1353, 1372, 3451, 1379, 1415, 1402, 1414, 3451, 1419, 3451,
     1444, 1463, 1828, 3451, 3451, 1775, 1835, 1726, 1819, 1826,
     1829, 1799, 1844, 1850, 1841, 1847, 1851, 1869, 1884, 1891,
     1898, 1901, 1578, 1904, 1907, 1490, 1510, 1511, 1525, 1527,
     1535, 1543, 1561, 1913, 1919, 1561, 1922, 1928, 1931, 1937,
     1940, 1943, 1946, 1952, 1961, 1964, 1559, 1593, 1589, 1585,

     1967, 1587, 1970, 1976, 1982, 1985, 1603, 1621, 1621, 1640,
     1654, 1647, 1650, 1653, 1671, 1675, 1659, 1671, 1682, 1684,
     1693, 1713, 1711, 1734, 3451, 1720, 1977, 1992, 1995, 1861,
     1772, 1944, 1986, 1989, 1995, 2010, 2003, 1875, 2004, 2021,
     3451, 3451, 2028, 1744, 1755, 2031, 2034, 1769, 1762, 1759,
     1763, 1815, 1821, 1810, 1818, 2037, 1833, 2048, 2051, 2054,
     2057, 2060, 2063, 1834, 1830, 1834, 1846, 2069, 2072, 1865,
     2075, 2078, 2084, 2087, 1862, 1865, 1871, 1872, 1886, 1896,
     1910, 1917, 1902, 1920, 1925, 1958, 1940, 1924, 3451, 1950,
     1965, 1976, 2079, 2094, 2085, 2086, 2090, 2091, 2094, 2095,

     2098, 2012, 2099, 1968, 1974, 2114, 1990, 1998, 2028, 2042,
     2049, 2037, 2078, 2070, 2103, 2120, 2084, 2069, 2130, 2074,
     2140, 2085, 2145, 2153, 2156, 2096, 2096, 2097, 2083, 2089,
     2096, 2143, 2115, 2129, 3451, 3451, 2109, 2109, 2124, 2121,
     2118, 2124, 2156, 2159, 2160, 2163, 2166, 2167, 2182, 2185,
     2176, 2191, 2130, 2150, 2146, 2152, 2154, 2192, 2174, 2180,
     2216, 2220, 2161, 2170, 2185, 2226, 2231, 2186, 2188, 2236,
     2197, 2187, 3451, 2189, 2210, 3451, 2195, 2210, 2200, 2198,
     2213, 2218, 3451, 2211, 2212, 2209, 2241, 2256, 2247, 2248,
     2252, 2251, 2271, 2274, 2277, 2280, 2274, 2295, 2303, 2200,

     2310, 2214, 2259, 2313, 2244, 2263, 2255, 2257, 2316, 2319,
     2331, 2334, 2287, 2294, 2337, 2340, 2287, 2289, 2286, 2304,
     3451, 2309, 2291, 2301, 2293, 2324, 2302, 2303, 2300, 3451,
     2306, 2355, 2358, 2361, 2352, 2361, 2362, 2365, 2380, 2383,
     2374, 2389, 2326, 2392, 2395, 2398, 2343, 2407, 2401, 2350,
     2364, 2358, 2389, 2416, 2423, 2371, 2371, 2426, 2429, 2379,
     2433, 2388, 3451, 2391, 2390, 2384, 2402, 2393, 2406, 2419,
     3451, 2404, 2448, 2451, 2454, 2445, 2451, 2466, 2457, 2458,
     2473, 2481, 2484, 2489, 2400, 2492, 2410, 2409, 2437, 2428,
     2458, 2472, 2499, 2502, 2508, 2512, 2464, 2451, 2477, 2478,

     2465, 2463, 2478, 2472, 2489, 2524, 2515, 2516, 2531, 2534,
     2525, 2546, 2540, 2549, 2564, 2483, 2515, 2517, 2504, 2505,
     2520, 2518, 2568, 2571, 2574, 2543, 2539, 2526, 2527, 2551,
     2544, 2541, 2529, 2547, 2575, 2576, 2591, 2582, 2597, 2600,
     2604, 2556, 2554, 2555, 2612, 2576, 2573, 2561, 2618, 2582,
     2569, 3451, 3451, 2569, 3451, 2576, 2586, 2584, 2616, 2619,
     2622, 2637, 2582, 2644, 2647, 2650, 2653, 2586, 2665, 2593,
     2617, 2614, 3451, 2607, 2619, 3451, 2621, 2656, 2659, 2660,
     2680, 2683, 2686, 2690, 2698, 2707, 2611, 2710, 2714, 2634,
     2717, 2636, 2635, 2655, 2651, 2708, 2709, 2714, 2732, 2735,

     2738, 2741, 2652, 2747, 2662, 2753, 2756, 2659, 2654, 2666,
     2671, 2747, 2715, 2754, 2769, 2682, 2705, 2772, 2691, 2709,
     2708, 2707, 2763, 2766, 2767, 2724, 2733, 2729, 3451, 2742,
     3451, 2773, 2772, 2791, 2794, 2747, 2797, 2747, 2795, 2815,
     2822, 2830, 2837, 2840, 2758, 2843, 2852, 2747, 2858, 2861,
     2864, 2867, 2876, 2752, 2879, 2757, 2882, 2885, 2888, 2760,
     3451, 2891, 2897, 2900, 2903, 2906, 3451, 2916, 2921, 2926,
     2931, 2936, 2941, 2946, 2950, 2955, 2959, 2964
    } ;

static yyconst flex_int16_t yy_def[1679] =
    {   0,
     1668, 1668, 1669, 1669, 1670, 1670, 1671, 1671, 1672, 1672,
     1672, 1672, 1673, 1673, 1674, 1674, 1667, 1667, 1675, 1675,
       20, 1667, 1675, 1675, 1675, 1675, 1675, 1667, 1667, 1675,
     1676, 1667, 1677, 1678, 1667, 1667, 1667, 1667, 1667, 1667,
       20, 1675, 1675,   28, 1667, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1675, 1676, 1677, 1678, 1667, 1667, 1675, 1675, 1675,
     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,

     1675, 1675, 1675, 1675, 1667, 1675, 1675, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1675, 1667,
     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1675, 1667, 1675, 1675, 1675, 1675, 1675,
     1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1675, 1675,
     1675, 1675, 1675, 1667, 1675, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1667, 1667, 1667, 1675, 1675, 1675, 1675, 1675,
     1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1675, 1675, 1675, 1667, 1675, 1667,
     1675, 1675, 1675, 1675, 1675, 1667, 1675, 1675, 1675, 1675,
     1675, 1667, 1675, 1675, 1675, 1667, 1675, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1675, 1675, 1667, 1667, 1667, 1675, 1675,
     1675, 1675, 1675, 1667, 1667, 1667, 1675, 1675, 1675, 1675,
     1667, 1667, 1667, 1675, 1675, 1667, 1667, 1667, 1675, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1667, 1675, 1667, 1675, 1675, 1675, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1675, 1675, 1675, 1675, 1675, 1667, 1675, 1675,
     1675, 1667, 1667, 1667, 1667, 1675, 1675, 1675, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1675, 1667, 1675, 1675, 1675, 1667, 1667, 1667, 1675,

     1675, 1667, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1675, 1675,

     1675, 1675, 1667, 1667, 1667, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1675, 1675, 1675, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1675, 1675, 1675, 1675, 1675,

     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1675,
     1667, 1675, 1667, 1675, 1667, 1675, 1675, 1667, 1675, 1675,
     1675, 1667, 1675, 1675, 1675, 1675, 1675, 1667, 1675, 1675,

     1667, 1675, 1675, 1675, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1675, 1667, 1667, 1675, 1675,
     1667, 1675, 1675, 1675, 1675, 1675, 1667, 1675, 1667, 1675,
     1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1667, 1675, 1675, 1675, 1675, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1675, 1675, 1667, 1675,
     1675, 1675, 1675, 1675, 1675, 1667, 1675, 1675, 1675, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1675, 1667, 1675, 1675, 1675, 1675, 1675, 1675,

     1675, 1675, 1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1667, 1675, 1667, 1675, 1675, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1675, 1675, 1667, 1675, 1675, 1675, 1675, 1667, 1667,
     1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1675, 1667, 1667, 1675, 1675, 1675, 1675, 1675,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1675, 1675, 1675, 1667,
     1675, 1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1675, 1675, 1667, 1675, 1675, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1675, 1675,
     1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1675, 1675, 1675,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1675, 1675, 1675, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1675, 1675, 1675, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1675, 1675, 1675, 1667, 1667, 1667, 1667, 1667,
     1667, 1675, 1675, 1675, 1667, 1667, 1667, 1667, 1675, 1675,
     1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1675, 1675,
     1667, 1667, 1667, 1667, 1667, 1667, 1675, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667,    0, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667
    } ;

static yyconst flex_int16_t yy_nxt[3515] =
    {   0,
       18,   19,   20,   21,   18,   22,   39,   22,   18,   24,
       25,   26,   27,   28,   18,   29,   18,   36,   36,   39,
       40, 1667,   30, 1667,   37,   37,   58, 1667,   59, 1667,
     1667, 1667,   63,   40, 1667, 1667, 1667, 1667,   60, 1667,
      139,   61, 1667, 1667, 1667,   63, 1667,  125,   82,   62,
       58,  126,   59, 1667, 1667, 1667, 1667,  140,  969, 1667,
       62, 1667,   22,   18,   19,   20,   21,   18,   22,   62,
       22,   18,   24,   25,   26,   27,   28,   18,   29,   18,
       62,   89,   88,  175, 1667,   30, 1667,  176, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667,  970, 1667,  132, 1667,  182, 1667, 1667, 1667, 1667,
     1667,  133,  971,  183,   92,   95, 1667,   93, 1667,   96,
      217,  218,   82,  104,   90,   22,   41,   41,   41,   91,
       94,  102,  189,  972,   98, 1667,   43, 1667,   44,   97,
       45,   99,  973,  103,  100,  270,  271,   61, 1667,  190,
     1667,  101,  105,  106,  223,   62,  107, 1667,  151, 1667,
     1667,  224, 1667,   46,   47,  974,   48,   49,  149,   50,
      276,  660,   51,   52,   53,   62,  152,  277,  661,   54,
       55,   56,   57,   41,   41,   41,   58,  134,   59, 1667,
      975, 1667, 1667,   43, 1667,   44,   62,   45,  976,   61,

     1667,  135, 1667,  977,  136,  137,  138,   62,  978, 1667,
      142, 1667,  143, 1667,  583, 1667,   62, 1667,  584, 1667,
       46,   47,  144,   48,   49,  159,   50,   62,  685,   51,
       52,   53,  145, 1667,  686, 1667,   54,   55,   56,   57,
       64,  719, 1667, 1667, 1667, 1667,  153,   65,  720,  156,
      154,  979,   66, 1667, 1667, 1667, 1667, 1006,  158,  164,
      164,  164, 1007,  155,  157,  166, 1667, 1667, 1667, 1667,
     1008, 1667,  165, 1667,   67,   68, 1009,   69,   70, 1010,
       71,   72, 1011,   73,   74,  170,   75,   76,  160,   77,
       78,   79,   80,   81,  109,  110, 1012,  111,  112, 1013,

      113,  114,  161,  115,  116, 1014,  117,  118, 1015,  119,
      120,  121,  122,  123, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1016, 1667,  168, 1667,  107, 1667,  184, 1667,
      107, 1667,  192, 1667,  193, 1667, 1667, 1667, 1667,  169,
     1017, 1667,  185, 1667,  194,  186,  187,  188,  162,  204,
     1667, 1018, 1667,  167,  195,  163,  205,  171, 1019,  206,
      207,  230,  229,  241, 1020,  233,  233,  233, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667,  231, 1667,  234, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1021,  164,
      164,  164,  236,  232,  242,  237, 1667, 1667, 1667, 1667,

      238, 1667,  165, 1667, 1667,  240, 1667,  239,  243,  243,
      243,  235,  244, 1667,  245, 1667, 1667, 1022, 1667,  257,
      246,  282,  283,  247,  295,  296,  258,  249, 1023,  259,
      260, 1667,  297, 1667, 1667, 1024, 1667,  317,  317,  317,
      248, 1667, 1027, 1667,  233,  233,  233, 1028, 1029, 1667,
      318, 1667,  320,  320,  320,  250, 1667,  234, 1667,  251,
      315, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,  598,
     1667,  324, 1667,  599,  316,  325,  325,  325, 1667,  319,
     1667, 1030,  634, 1667,  321, 1667,  635, 1667,  326, 1667,
     1667, 1667, 1667, 1667, 1031, 1032,  322,  327,  243,  243,

      243, 1667,  244, 1667,  245,  328, 1667,  323, 1667,  329,
      331,  331,  331, 1033,  333,  335,  335,  335,  338,  338,
      338,  650, 1667,  332, 1667,  651, 1034, 1667,  336, 1667,
     1035,  330,  339,  337, 1038,  334,  350,  350,  350,  355,
      356,  358,  358,  358,  372,  372,  372,  357, 1039, 1040,
      351,  378,  378,  378, 1667,  359, 1667,  352,  373,  399,
      399,  399, 1667, 1042, 1667,  379, 1667, 1667, 1667, 1667,
     1043,  340,  341,  400,  317,  317,  317,  374, 1044, 1045,
      360,  320,  320,  320, 1046, 1047, 1667,  318, 1667,  419,
     1667,  414, 1667,  415,  380,  416,  416,  416, 1048,  417,

      420,  418, 1667, 1667, 1667, 1667,  325,  325,  325,  424,
      424,  424, 1667,  425, 1667,  426, 1049, 1050, 1667,  326,
     1667, 1667, 1667, 1667, 1667, 1667, 1051, 1667,  331,  331,
      331, 1052, 1053,  421,  422, 1667, 1667, 1667, 1667,  423,
     1667,  332, 1667,  431,  431,  431,  490,  432,  491,  433,
     1054, 1055,  427,  335,  335,  335,  436,  436,  436, 1056,
      437,  428,  438,  430, 1057, 1667,  336, 1667,  429,  434,
      439,  439,  439,  338,  338,  338,  441,  441,  441,  435,
     1058, 1059, 1667,  440, 1667, 1060, 1061,  339,  350,  350,
      350,  452,  452,  452,  358,  358,  358,  459,  459,  459,

     1062, 1063,  351,  462,  462,  462, 1064, 1065,  359,  467,
      467,  467,  372,  372,  372, 1066, 1067,  463,  475,  475,
      475, 1068, 1667,  468, 1667, 1097,  373,  478,  478,  478,
      378,  378,  378,  481,  481,  481, 1098,  469,  399,  399,
      399,  479, 1099, 1667,  379, 1667, 1102,  416,  416,  416,
     1103,  417,  400,  418, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667,  514, 1667, 1104, 1667,  424,  424,  424, 1667,
      425, 1667,  426, 1105, 1106,  517,  522,  522,  522, 1107,
     1108,  515,  516, 1109,  521,  518, 1110, 1111, 1667,  523,
     1667,  524,  524,  524, 1112, 1667,  519, 1667, 1667, 1115,

     1667,  520, 1116, 1667,  525, 1667,  431,  431,  431, 1667,
      432, 1667,  433, 1118,  436,  436,  436, 1119,  437,  527,
      438,  439,  439,  439,  529,  529,  529,  539,  530,  540,
      531, 1120,  526, 1667,  440, 1667,  528,  441,  441,  441,
      452,  452,  452,  543,  543,  543,  459,  459,  459,  462,
      462,  462,  552,  552,  552, 1121, 1122,  544,  553,  553,
      553, 1123, 1124,  463,  467,  467,  467,  558,  558,  558,
     1125, 1129,  554,  475,  475,  475, 1130, 1131,  468,  478,
      478,  478,  567,  567,  567,  555,  481,  481,  481,  590,
     1667,  591, 1667,  479, 1667, 1667, 1667, 1667, 1667, 1132,

     1667,  607,  607,  607, 1667, 1667, 1667, 1667, 1133, 1667,
     1667, 1667, 1667, 1667,  608, 1667,  522,  522,  522, 1134,
     1135,  606,  615,  615,  615, 1667,  605, 1667, 1667,  523,
     1667, 1136,  617,  631,  631,  631,  604,  603,  611, 1137,
      609,  612,  612,  612,  642,  613,  643,  614,  524,  524,
      524,  774,  610,  775,  618,  618,  618,  552,  552,  552,
     1667,  525, 1667, 1138, 1139,  616, 1667,  619, 1667,  529,
      529,  529, 1667,  530, 1667,  531,  543,  543,  543,  553,
      553,  553,  640,  640,  640,  558,  558,  558, 1140, 1667,
      544, 1667, 1141,  554,  653,  653,  653,  567,  567,  567,

      662,  663,  664,  694, 1667,  787, 1667,  788,  654, 1142,
     1143,  665,  692,  692,  692, 1144, 1145,  666,  695,  607,
      607,  607, 1146, 1147, 1667,  693, 1667, 1667,  831, 1667,
      832, 1667,  608, 1667, 1148,  697,  697,  697,  696,  698,
     1149,  699,  701,  701,  701, 1150,  700, 1667, 1667, 1667,
     1667, 1667,  703, 1667, 1667,  702, 1667,  704,  615,  615,
      615, 1151,  705,  706,  851,  707,  852, 1152,  708,  612,
      612,  612, 1667,  613, 1667,  614,  631,  631,  631,  618,
      618,  618,  711,  711,  711,  710,  712, 1667,  713, 1667,
      709, 1667,  619, 1667,  715,  715,  715,  721,  721,  721,

     1173,  723,  724,  725, 1174,  732,  732,  732,  716,  799,
     1176,  722,  726,  734,  734,  734, 1177,  800,  727,  733,
      640,  640,  640,  747,  747,  747, 1178,  735,  752,  752,
      752,  653,  653,  653,  759,  759,  759,  748,  692,  692,
      692, 1667,  753, 1667, 1667,  654, 1667, 1667, 1179, 1667,
     1667,  693, 1667, 1180,  754,  796,  796,  796, 1181,  797,
      755,  798,  749,  697,  697,  697, 1667,  698, 1667,  699,
     1667,  808, 1667,  701,  701,  701,  803,  803,  803, 1667,
      804, 1667,  805, 1182,  801, 1667,  702, 1667, 1183,  809,
     1667,  802, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1186,  810,  806, 1667,  812, 1667,  807,  711,  711,
      711, 1192,  712,  815,  713, 1667,  814, 1667, 1197,  811,
      715,  715,  715,  818,  818,  818, 1198,  813,  721,  721,
      721,  823,  823,  823,  716,  732,  732,  732,  908,  901,
      816,  905,  722,  834,  834,  834,  734,  734,  734,  733,
      835,  835,  835,  845,  845,  845,  847,  847,  847, 1199,
      735,  747,  747,  747,  849,  849,  849,  846, 1200, 1201,
      848,  752,  752,  752, 1202,  748,  854,  854,  854,  759,
      759,  759,  860,  860,  860,  753,  796,  796,  796, 1667,
      797, 1667,  798, 1667, 1207, 1667,  861, 1667, 1667, 1667,

     1667,  803,  803,  803, 1667,  804, 1667,  805, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667,  898,  896,  818,  818,  818, 1208,
     1211,  906,  823,  823,  823,  897,  899, 1667,  903, 1667,
      900,  902,  834,  834,  834, 1212,  990,  910,  986, 1213,
      907,  835,  835,  835,  904,  845,  845,  845,  935,  935,
      935,  847,  847,  847,  909,  936,  936,  936, 1214,  846,
      849,  849,  849, 1215, 1216,  848,  854,  854,  854,  860,
      860,  860,  946,  946,  946,  947,  947,  947,  980,  980,
      980, 1209, 1217,  861,  982,  982,  982, 1218, 1210,  948,

     1667,  981, 1667,  984,  984,  984, 1667,  983, 1667,  987,
      987,  987,  991,  991,  991, 1667,  985, 1667, 1667, 1219,
     1667, 1667,  988, 1667, 1667,  992, 1667, 1667, 1667, 1667,
     1667, 1667, 1220, 1667,  997,  997,  997, 1667, 1667, 1667,
     1667, 1221, 1000, 1000, 1000,  994, 1667,  998, 1667, 1222,
     1667,  993, 1667,  996, 1667, 1001, 1667,  995, 1004, 1004,
     1004, 1167,  989, 1025, 1025, 1025,  935,  935,  935, 1223,
     1667, 1005, 1667, 1090, 1224,  999, 1003, 1026,  936,  936,
      936, 1036, 1036, 1036, 1225, 1002,  946,  946,  946,  947,
      947,  947, 1041, 1041, 1041, 1037,  980,  980,  980, 1226,

     1069, 1069, 1069,  948, 1070, 1667, 1071, 1667, 1667,  981,
     1667,  982,  982,  982, 1072, 1072, 1072,  984,  984,  984,
     1078, 1078, 1078, 1667,  983, 1667, 1081, 1081, 1081, 1667,
      985, 1667, 1073, 1073, 1073, 1667, 1074, 1667, 1075, 1076,
     1076, 1076,  987,  987,  987, 1248, 1249, 1079,  991,  991,
      991, 1667, 1077, 1667, 1667,  988, 1667, 1667, 1250, 1667,
     1667,  992, 1667, 1080, 1667, 1667, 1667, 1667, 1667, 1251,
     1667,  997,  997,  997, 1252, 1083, 1087, 1087, 1087, 1253,
     1667, 1084, 1667, 1667,  998, 1667, 1000, 1000, 1000, 1082,
     1089, 1089, 1089, 1254, 1667, 1086, 1667, 1244, 1667, 1001,

     1667, 1004, 1004, 1004, 1245, 1255, 1085, 1088, 1257, 1095,
     1095, 1095, 1264, 1667, 1005, 1667, 1092, 1092, 1092, 1265,
     1093, 1091, 1094, 1096, 1100, 1100, 1100, 1113, 1113, 1113,
     1025, 1025, 1025, 1117, 1117, 1117, 1266, 1667, 1101, 1667,
     1267, 1114, 1270, 1274, 1026, 1126, 1126, 1126, 1036, 1036,
     1036, 1128, 1128, 1128, 1041, 1041, 1041, 1275, 1667, 1127,
     1667, 1276, 1037, 1069, 1069, 1069, 1667, 1070, 1667, 1071,
     1072, 1072, 1072, 1073, 1073, 1073, 1277, 1074, 1157, 1075,
     1076, 1076, 1076, 1153, 1153, 1153, 1667, 1154, 1667, 1155,
     1278, 1279, 1667, 1077, 1667, 1078, 1078, 1078, 1156, 1081,

     1081, 1081, 1667, 1667, 1667, 1667, 1280, 1159, 1158, 1162,
     1281, 1282, 1163, 1163, 1163, 1283, 1284, 1160, 1087, 1087,
     1087, 1285, 1286, 1161, 1667, 1164, 1667, 1667, 1287, 1667,
     1089, 1089, 1089, 1168, 1168, 1168, 1092, 1092, 1092, 1667,
     1093, 1667, 1094, 1288, 1165, 1667, 1169, 1667, 1095, 1095,
     1095, 1170, 1170, 1170, 1171, 1171, 1171, 1100, 1100, 1100,
     1289, 1290, 1096, 1175, 1175, 1175, 1291, 1166, 1172, 1292,
     1230, 1101, 1184, 1184, 1184, 1187, 1187, 1187, 1113, 1113,
     1113, 1189, 1189, 1189, 1304, 1667, 1185, 1667, 1667, 1188,
     1667, 1305, 1114, 1190, 1190, 1190, 1117, 1117, 1117, 1193,

     1193, 1193, 1195, 1195, 1195, 1307, 1308, 1191, 1126, 1126,
     1126, 1227, 1667, 1194, 1667, 1309, 1196, 1203, 1203, 1203,
     1310, 1296, 1127, 1128, 1128, 1128, 1204, 1204, 1204, 1153,
     1153, 1153, 1667, 1154, 1667, 1155, 1228, 1228, 1228, 1667,
     1205, 1667, 1667, 1235, 1667, 1163, 1163, 1163, 1667, 1229,
     1667, 1236, 1236, 1236, 1667, 1311, 1667, 1667, 1164, 1667,
     1667, 1312, 1667, 1232, 1667, 1234, 1667, 1313, 1314, 1231,
     1168, 1168, 1168, 1315, 1667, 1238, 1667, 1233, 1317, 1206,
     1318, 1319, 1667, 1169, 1667, 1240, 1240, 1240, 1667, 1241,
     1667, 1242, 1170, 1170, 1170, 1237, 1320, 1322, 1239, 1171,

     1171, 1171, 1243, 1243, 1243, 1246, 1246, 1246, 1175, 1175,
     1175, 1326, 1327, 1172, 1184, 1184, 1184, 1328, 1295, 1247,
     1256, 1256, 1256, 1187, 1187, 1187, 1302, 1329, 1185, 1258,
     1258, 1258, 1189, 1189, 1189, 1330, 1331, 1188, 1190, 1190,
     1190, 1259, 1259, 1259, 1260, 1260, 1260, 1193, 1193, 1193,
     1332, 1333, 1191, 1262, 1262, 1262, 1334, 1667, 1261, 1667,
     1335, 1194, 1195, 1195, 1195, 1263, 1263, 1263, 1268, 1268,
     1268, 1203, 1203, 1203, 1336, 1337, 1196, 1204, 1204, 1204,
     1338, 1339, 1269, 1271, 1271, 1271, 1272, 1272, 1272, 1297,
     1667, 1205, 1667, 1228, 1228, 1228, 1294, 1294, 1294, 1667,

     1273, 1667, 1667, 1340, 1667, 1667, 1229, 1667, 1667, 1341,
     1667, 1236, 1236, 1236, 1342, 1353, 1667, 1667, 1667, 1667,
     1354, 1293, 1240, 1240, 1240, 1667, 1241, 1667, 1242, 1243,
     1243, 1243, 1246, 1246, 1246, 1306, 1306, 1306, 1256, 1256,
     1256, 1298, 1299, 1301, 1303, 1355, 1247, 1356, 1300, 1258,
     1258, 1258, 1259, 1259, 1259, 1260, 1260, 1260, 1316, 1316,
     1316, 1262, 1262, 1262, 1263, 1263, 1263, 1351, 1357, 1261,
     1268, 1268, 1268, 1321, 1321, 1321, 1271, 1271, 1271, 1272,
     1272, 1272, 1358, 1359, 1269, 1323, 1323, 1323, 1324, 1324,
     1324, 1360, 1667, 1273, 1667, 1294, 1294, 1294, 1667, 1667,

     1667, 1667, 1325, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1306, 1306, 1306, 1361, 1362,
     1363, 1316, 1316, 1316, 1364, 1344, 1365, 1368, 1343, 1369,
     1346, 1366, 1366, 1366, 1371, 1347, 1372, 1373, 1348, 1374,
     1345, 1321, 1321, 1321, 1375, 1367, 1323, 1323, 1323, 1349,
     1376, 1379, 1350, 1352, 1324, 1324, 1324, 1370, 1370, 1370,
     1377, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1325, 1667,
     1400, 1667, 1667, 1667, 1667, 1667, 1667, 1378, 1667, 1667,
     1667, 1667, 1667, 1393, 1393, 1393, 1395, 1395, 1395, 1667,
     1401, 1667, 1398, 1398, 1398, 1667, 1394, 1667, 1667, 1396,

     1667, 1390, 1402, 1392, 1667, 1399, 1667, 1403, 1404, 1405,
     1407, 1387, 1408, 1388, 1413, 1389, 1391, 1409, 1409, 1409,
     1397, 1411, 1411, 1411, 1414, 1415, 1406, 1366, 1366, 1366,
     1417, 1410, 1416, 1416, 1416, 1412, 1418, 1370, 1370, 1370,
     1419, 1367, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427,
     1428, 1429, 1430, 1431, 1667, 1443, 1667, 1433, 1433, 1433,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1446, 1667,
     1434, 1667, 1393, 1393, 1393, 1439, 1439, 1439, 1395, 1395,
     1395, 1440, 1440, 1440, 1667, 1394, 1667, 1667, 1438, 1667,
     1667, 1396, 1667, 1447, 1450, 1432, 1398, 1398, 1398, 1451,

     1435, 1437, 1452, 1436, 1442, 1442, 1442, 1453, 1667, 1399,
     1667, 1444, 1444, 1444, 1448, 1448, 1448, 1409, 1409, 1409,
     1454, 1454, 1454, 1456, 1441, 1445, 1457, 1460, 1449, 1461,
     1462, 1410, 1411, 1411, 1411, 1455, 1455, 1455, 1458, 1458,
     1458, 1416, 1416, 1416, 1463, 1464, 1412, 1465, 1466, 1467,
     1468, 1469, 1459, 1470, 1471, 1472, 1473, 1473, 1473, 1433,
     1433, 1433, 1475, 1475, 1475, 1667, 1481, 1667, 1667, 1474,
     1667, 1667, 1434, 1667, 1667, 1667, 1667, 1667, 1667, 1485,
     1667, 1439, 1439, 1439, 1440, 1440, 1440, 1667, 1476, 1667,
     1442, 1442, 1442, 1444, 1444, 1444, 1482, 1482, 1482, 1483,

     1483, 1483, 1486, 1486, 1486, 1477, 1487, 1445, 1448, 1448,
     1448, 1488, 1479, 1484, 1489, 1490, 1478, 1454, 1454, 1454,
     1491, 1492, 1449, 1480, 1455, 1455, 1455, 1458, 1458, 1458,
     1493, 1493, 1493, 1494, 1495, 1495, 1495, 1497, 1498, 1499,
     1500, 1459, 1501, 1502, 1503, 1504, 1505, 1516, 1496, 1473,
     1473, 1473, 1506, 1506, 1506, 1475, 1475, 1475, 1667, 1517,
     1667, 1667, 1474, 1667, 1667, 1518, 1667, 1509, 1509, 1509,
     1667, 1667, 1667, 1667, 1513, 1513, 1513, 1519, 1520, 1667,
     1510, 1667, 1482, 1482, 1482, 1483, 1483, 1483, 1514, 1507,
     1515, 1515, 1515, 1486, 1486, 1486, 1521, 1511, 1522, 1484,

     1493, 1493, 1493, 1523, 1523, 1523, 1526, 1527, 1508, 1495,
     1495, 1495, 1512, 1525, 1525, 1525, 1528, 1524, 1529, 1530,
     1531, 1532, 1533, 1496, 1534, 1506, 1506, 1506, 1667, 1667,
     1667, 1667, 1509, 1509, 1509, 1537, 1537, 1537, 1667, 1542,
     1667, 1513, 1513, 1513, 1667, 1510, 1667, 1539, 1539, 1539,
     1541, 1541, 1541, 1538, 1543, 1514, 1536, 1544, 1545, 1667,
     1540, 1667, 1546, 1547, 1535, 1515, 1515, 1515, 1548, 1523,
     1523, 1523, 1549, 1549, 1549, 1525, 1525, 1525, 1550, 1551,
     1552, 1553, 1554, 1524, 1555, 1556, 1557, 1558, 1667, 1667,
     1667, 1667, 1537, 1537, 1537, 1667, 1563, 1667, 1539, 1539,

     1539, 1562, 1562, 1562, 1560, 1541, 1541, 1541, 1564, 1565,
     1667, 1540, 1667, 1566, 1566, 1566, 1569, 1570, 1571, 1549,
     1549, 1549, 1572, 1573, 1574, 1575, 1576, 1567, 1577, 1667,
     1559, 1667, 1667, 1561, 1667, 1667, 1581, 1667, 1562, 1562,
     1562, 1587, 1590, 1568, 1578, 1582, 1582, 1582, 1584, 1584,
     1584, 1566, 1566, 1566, 1586, 1586, 1586, 1591, 1592, 1583,
     1593, 1594, 1585, 1595, 1603, 1567, 1588, 1588, 1588, 1667,
     1579, 1667, 1667, 1667, 1667, 1667, 1605, 1580, 1608, 1609,
     1589, 1599, 1599, 1599, 1582, 1582, 1582, 1601, 1601, 1601,
     1610, 1584, 1584, 1584, 1611, 1600, 1616, 1617, 1583, 1602,

     1602, 1602, 1619, 1620, 1598, 1585, 1621, 1596, 1586, 1586,
     1586, 1588, 1588, 1588, 1597, 1604, 1604, 1604, 1606, 1606,
     1606, 1667, 1667, 1667, 1667, 1589, 1622, 1667, 1667, 1667,
     1667, 1626, 1607, 1599, 1599, 1599, 1615, 1615, 1615, 1601,
     1601, 1601, 1602, 1602, 1602, 1627, 1628, 1600, 1604, 1604,
     1604, 1629, 1630, 1613, 1606, 1606, 1606, 1618, 1618, 1618,
     1667, 1631, 1667, 1612, 1614, 1624, 1635, 1667, 1607, 1667,
     1615, 1615, 1615, 1618, 1618, 1618, 1667, 1636, 1667, 1667,
     1667, 1667, 1667, 1637, 1638, 1667, 1667, 1667, 1667, 1645,
     1648, 1623, 1641, 1641, 1641, 1643, 1643, 1643, 1646, 1646,

     1646, 1654, 1656, 1625, 1667, 1642, 1667, 1660, 1667, 1644,
     1667, 1661, 1647, 1632, 1663, 1633, 1650, 1650, 1650,  968,
      967, 1634, 1639, 1641, 1641, 1641, 1640,  966, 1667, 1651,
     1667, 1652, 1652, 1652,  965, 1667, 1642, 1667, 1643, 1643,
     1643, 1653, 1653, 1653, 1646, 1646, 1646,  964,  963, 1649,
      962,  961, 1644, 1655, 1655, 1655,  960,  959, 1647, 1657,
     1657, 1657, 1650, 1650, 1650, 1659, 1659, 1659, 1652, 1652,
     1652, 1667, 1658, 1667, 1667, 1651, 1667, 1653, 1653, 1653,
     1655, 1655, 1655, 1657, 1657, 1657, 1662, 1662, 1662, 1659,
     1659, 1659, 1662, 1662, 1662, 1667, 1658, 1667, 1664, 1664,

     1664, 1664, 1664, 1664, 1666, 1666, 1666, 1666, 1666, 1666,
      958,  957, 1665,  956,  955, 1665,   23,   23,   23,   23,
       23,   31,   31,   31,   31,   31,   33,   33,   33,   33,
       33,   34,   34,   34,   34,   34,   32,   32,   32,   32,
       32,   35,   35,   35,   35,   35,   38,   38,   38,   38,
       38,   42,  954,  953,   42,   83,   83,   83,   83,   84,
       84,  952,   84,   84,   85,   85,   85,  951,   85,  950,
      949,  945,  944,  943,  942,  941,  940,  939,  938,  937,
      934,  933,  932,  931,  930,  929,  928,  927,  926,  925,
      924,  923,  922,  921,  920,  919,  918,  917,  916,  915,

      914,  913,  912,  911,  895,  894,  893,  892,  891,  890,
      889,  888,  887,  886,  885,  884,  883,  882,  881,  880,
      879,  878,  877,  876,  875,  874,  873,  872,  871,  870,
      869,  868,  867,  866,  865,  864,  863,  862,  859,  858,
      857,  856,  855,  853,  850,  844,  843,  842,  841,  840,
      839,  838,  837,  836,  833,  830,  829,  828,  827,  826,
      825,  824,  822,  821,  820,  819,  817,  795,  794,  793,
      792,  791,  790,  789,  786,  785,  784,  783,  782,  781,
      780,  779,  778,  777,  776,  773,  772,  771,  770,  769,
      768,  767,  766,  765,  764,  763,  762,  761,  760,  758,

      757,  756,  751,  750,  746,  745,  744,  743,  742,  741,
      740,  739,  738,  737,  736,  731,  730,  729,  728,  718,
      717,  714,  691,  690,  689,  688,  687,  684,  683,  682,
      681,  680,  679,  678,  677,  676,  675,  674,  673,  672,
      671,  670,  669,  668,  667,  659,  658,  657,  656,  655,
      652,  649,  648,  647,  646,  645,  644,  641,  639,  638,
      637,  636,  633,  632,  630,  629,  628,  627,  626,  625,
      624,  623,  622,  621,  620,  602,  601,  600,  597,  596,
      595,  594,  593,  592,  589,  588,  587,  586,  585,  582,
      581,  580,  579,  578,  577,  576,  575,  574,  573,  572,

      571,  570,  569,  568,  566,  565,  564,  563,  562,  561,
      560,  559,  557,  556,  551,  550,  549,  548,  547,  546,
      545,  542,  541,  538,  537,  536,  535,  534,  533,  532,
      513,  512,  511,  510,  509,  508,  507,  506,  505,  504,
      503,  502,  501,  500,  499,  498,  497,  496,  495,  494,
      493,  492,  489,  488,  487,  486,  485,  484,  483,  482,
      480,  477,  476,  474,  473,  472,  471,  470,  466,  465,
      464,  461,  460,  458,  457,  456,  455,  454,  453,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  413,
      412,  411,  410,  409,  408,  407,  406,  405,  404,  403,

      402,  401,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      377,  376,  375,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  354,  353,  349,  348,  347,  346,
      345,  344,  343,  342,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      298,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  281,  280,  279,  278,  275,  274,  273,  272,
      269,  268,  267,  266,  265,  264,  263,  262,  261,  256,
      255,  254,  253,  252,  172,  228,  227,  226,  225,  222,

      221,  220,  219,  216,  215,  214,  213,  212,  211,  210,
      209,  208,  203,  202,  201,  200,  199,  198,  197,  196,
      191,  181,  180,  179,  178,  177,  174,  173,  172,  150,
      148,  147,  146,  141,  131,  130,  129,  128,  127,  124,
      108,   87,   86, 1667,   32,   32,   32,   32,   32,   32,
       17, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667
    } ;

static yyconst flex_int16_t yy_chk[3515] =
    {   0,
        1,    1,    1,    1,    1,    1,   15,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   13,   14,   16,
       15,   23,    1,   23,   13,   14,   24,   44,   24,   24,
       26,   24,   26,   16,   30,   42,   30,   42,   24,   44,
       76,   25,   25,   43,   25,   43,    0,   68,   30,   25,
       27,   68,   27,   27,   47,   27,   47,   76,  884,   46,
       27,   46,    1,    2,    2,    2,    2,    2,    2,   25,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       27,   47,   46,  110,   48,    2,   48,  110,   50,   49,
       50,   49,   52,   51,   52,   51,   53,   54,   53,   54,

       57,  885,   57,   74,   55,  116,   55,   56,   60,   56,
       60,   74,  886,  116,   50,   52,   88,   51,   88,   53,
      139,  139,   60,   57,   48,    2,   19,   19,   19,   49,
       51,   56,  118,  887,   54,   89,   19,   89,   19,   53,
       19,   55,  888,   56,   55,  189,  189,   58,   58,  118,
       58,   55,   62,   62,  144,   58,   62,   62,   88,   62,
       82,  144,   82,   19,   19,  889,   19,   19,   82,   19,
      194,  574,   19,   19,   19,   58,   89,  194,  574,   19,
       19,   19,   19,   20,   20,   20,   59,   75,   59,   59,
      890,   59,   95,   20,   95,   20,   59,   20,  891,   61,

       61,   75,   61,  893,   75,   75,   75,   61,  894,   90,
       78,   90,   78,   91,  496,   91,   59,   92,  496,   92,
       20,   20,   78,   20,   20,   95,   20,   61,  597,   20,
       20,   20,   78,   94,  597,   94,   20,   20,   20,   20,
       28,  624,  100,   93,  100,   93,   90,   28,  624,   93,
       91,  895,   28,   96,  103,   96,  103,  911,   94,   99,
       99,   99,  912,   92,   93,  100,  149,   97,  149,   97,
      913,   99,   99,   99,   28,   28,  914,   28,   28,  915,
       28,   28,  916,   28,   28,  103,   28,   28,   96,   28,
       28,   28,   28,   28,   65,   65,  917,   65,   65,  918,

       65,   65,   97,   65,   65,  919,   65,   65,  920,   65,
       65,   65,   65,   65,   98,  101,   98,  101,  102,  162,
      102,  162,  921,  104,  102,  104,  106,  106,  117,  106,
      107,  107,  120,  107,  120,  151,  152,  151,  152,  102,
      922,  153,  117,  153,  120,  117,  117,  117,   98,  129,
      154,  923,  154,  101,  120,   98,  129,  104,  924,  129,
      129,  152,  151,  162,  925,  155,  155,  155,  156,  157,
      156,  157,  158,  159,  158,  159,  153,  155,  155,  155,
      160,  161,  160,  161,  166,  163,  166,  163,  926,  164,
      164,  164,  157,  154,  163,  158,  167,  168,  167,  168,

      159,  164,  164,  164,  169,  161,  169,  160,  165,  165,
      165,  156,  165,  170,  165,  170,  171,  927,  171,  179,
      166,  199,  199,  167,  211,  211,  179,  169,  928,  179,
      179,  229,  211,  229,  230,  929,  230,  231,  231,  231,
      168,  232,  931,  232,  233,  233,  233,  932,  933,  231,
      231,  231,  234,  234,  234,  170,  233,  233,  233,  171,
      229,  235,  236,  235,  236,  237,  238,  237,  238,  509,
      240,  238,  240,  509,  230,  239,  239,  239,  241,  232,
      241,  934,  547,  242,  235,  242,  547,  239,  239,  239,
      246,  248,  246,  248,  937,  938,  236,  240,  243,  243,

      243,  249,  243,  249,  243,  241,  251,  237,  251,  242,
      247,  247,  247,  939,  248,  250,  250,  250,  252,  252,
      252,  564,  247,  247,  247,  564,  940,  250,  250,  250,
      941,  246,  252,  251,  943,  249,  261,  261,  261,  264,
      264,  265,  265,  265,  277,  277,  277,  264,  944,  945,
      261,  281,  281,  281,  315,  265,  315,  261,  277,  300,
      300,  300,  316,  950,  316,  281,  321,  319,  321,  319,
      951,  252,  252,  300,  317,  317,  317,  277,  952,  954,
      265,  320,  320,  320,  955,  956,  317,  317,  317,  319,
      322,  315,  322,  316,  281,  318,  318,  318,  957,  318,

      321,  318,  324,  323,  324,  323,  325,  325,  325,  326,
      326,  326,  327,  326,  327,  326,  958,  959,  325,  325,
      325,  328,  329,  328,  329,  330,  960,  330,  331,  331,
      331,  961,  962,  322,  323,  333,  334,  333,  334,  324,
      331,  331,  331,  332,  332,  332,  388,  332,  388,  332,
      963,  964,  327,  335,  335,  335,  336,  336,  336,  966,
      336,  328,  336,  330,  967,  335,  335,  335,  329,  333,
      337,  337,  337,  338,  338,  338,  339,  339,  339,  334,
      968,  969,  337,  337,  337,  970,  971,  338,  350,  350,
      350,  351,  351,  351,  358,  358,  358,  359,  359,  359,

      972,  973,  350,  362,  362,  362,  974,  975,  358,  366,
      366,  366,  372,  372,  372,  977,  978,  362,  373,  373,
      373,  979,  414,  366,  414, 1007,  372,  376,  376,  376,
      378,  378,  378,  379,  379,  379, 1008,  366,  399,  399,
      399,  376, 1009,  415,  378,  415, 1011,  416,  416,  416,
     1012,  416,  399,  416,  420,  419,  420,  419,  421,  422,
      421,  422,  414,  423, 1013,  423,  424,  424,  424,  427,
      424,  427,  424, 1014, 1015,  420,  428,  428,  428, 1016,
     1017,  415,  419, 1018,  427,  421, 1019, 1020,  428,  428,
      428,  429,  429,  429, 1021,  430,  422,  430,  434, 1023,

      434,  423, 1024,  429,  429,  429,  431,  431,  431,  435,
      431,  435,  431, 1027,  436,  436,  436, 1028,  436,  434,
      436,  439,  439,  439,  440,  440,  440,  449,  440,  449,
      440, 1029,  430,  439,  439,  439,  435,  441,  441,  441,
      452,  452,  452,  453,  453,  453,  459,  459,  459,  462,
      462,  462,  463,  463,  463, 1030, 1031,  453,  464,  464,
      464, 1032, 1033,  462,  467,  467,  467,  468,  468,  468,
     1034, 1038,  464,  475,  475,  475, 1039, 1040,  467,  478,
      478,  478,  479,  479,  479,  464,  481,  481,  481,  502,
      514,  502,  514,  478,  515,  516,  515,  516,  517, 1043,

      517,  518,  518,  518,  519,  520,  519,  520, 1044,  527,
      521,  527,  521,  518,  518,  518,  522,  522,  522, 1045,
     1046,  517,  525,  525,  525,  526,  516,  526,  522,  522,
      522, 1047,  527,  544,  544,  544,  515,  514,  521, 1048,
      519,  523,  523,  523,  556,  523,  556,  523,  524,  524,
      524,  669,  520,  669,  528,  528,  528,  552,  552,  552,
      524,  524,  524, 1049, 1050,  526,  528,  528,  528,  529,
      529,  529,  604,  529,  604,  529,  543,  543,  543,  553,
      553,  553,  554,  554,  554,  558,  558,  558, 1051,  605,
      543,  605, 1052,  553,  566,  566,  566,  567,  567,  567,

      576,  576,  576,  604,  606,  683,  606,  683,  566, 1054,
     1057,  576,  603,  603,  603, 1060, 1061,  576,  605,  607,
      607,  607, 1062, 1063,  603,  603,  603,  609,  730,  609,
      730,  607,  607,  607, 1064,  608,  608,  608,  606,  608,
     1065,  608,  610,  610,  610, 1066,  609,  611,  616,  611,
      616,  617,  611,  617,  610,  610,  610,  611,  615,  615,
      615, 1067,  611,  611,  750,  611,  750, 1068,  611,  612,
      612,  612,  694,  612,  694,  612,  631,  631,  631,  618,
      618,  618,  619,  619,  619,  617,  619,  695,  619,  695,
      616,  618,  618,  618,  621,  621,  621,  625,  625,  625,

     1098,  626,  626,  626, 1099,  632,  632,  632,  621,  694,
     1102,  625,  626,  633,  633,  633, 1103,  695,  626,  632,
      640,  640,  640,  646,  646,  646, 1104,  633,  649,  649,
      649,  653,  653,  653,  654,  654,  654,  646,  692,  692,
      692,  696,  649,  696,  700,  653,  700,  705, 1105,  705,
      692,  692,  692, 1106,  649,  693,  693,  693, 1107,  693,
      649,  693,  646,  697,  697,  697,  703,  697,  703,  697,
      704,  705,  704,  701,  701,  701,  702,  702,  702,  706,
      702,  706,  702, 1108,  696,  701,  701,  701, 1109,  705,
      707,  700,  707,  708,  709,  708,  709,  710,  814,  710,

      814, 1111,  706,  703,  811,  707,  811,  704,  711,  711,
      711, 1116,  711,  709,  711,  807,  708,  807, 1120,  706,
      715,  715,  715,  716,  716,  716, 1121,  707,  721,  721,
      721,  722,  722,  722,  715,  732,  732,  732,  814,  807,
      710,  811,  721,  733,  733,  733,  734,  734,  734,  732,
      735,  735,  735,  745,  745,  745,  746,  746,  746, 1122,
      734,  747,  747,  747,  748,  748,  748,  745, 1123, 1124,
      746,  752,  752,  752, 1125,  747,  753,  753,  753,  759,
      759,  759,  760,  760,  760,  752,  796,  796,  796,  799,
      796,  799,  796,  800, 1130,  800,  760,  801,  802,  801,

      802,  803,  803,  803,  806,  803,  806,  803,  809,  808,
      809,  808,  810,  812,  810,  812,  813,  815,  813,  815,
      816,  899,  816,  899,  801,  799,  818,  818,  818, 1131,
     1134,  812,  823,  823,  823,  800,  802,  901,  809,  901,
      806,  808,  834,  834,  834, 1135,  901,  816,  899, 1136,
      813,  835,  835,  835,  810,  845,  845,  845,  846,  846,
      846,  847,  847,  847,  815,  848,  848,  848, 1137,  845,
      849,  849,  849, 1138, 1139,  847,  854,  854,  854,  860,
      860,  860,  861,  861,  861,  862,  862,  862,  896,  896,
      896, 1132, 1140,  860,  897,  897,  897, 1141, 1132,  862,

      896,  896,  896,  898,  898,  898,  897,  897,  897,  900,
      900,  900,  902,  902,  902,  898,  898,  898,  903, 1142,
      903,  900,  900,  900,  902,  902,  902,  904,  905,  904,
      905,  907, 1144,  907,  906,  906,  906, 1090,  909, 1090,
      909, 1145,  908,  908,  908,  903,  906,  906,  906, 1146,
     1002,  902, 1002,  905,  908,  908,  908,  904,  910,  910,
      910, 1090,  900,  930,  930,  930,  935,  935,  935, 1147,
      910,  910,  910, 1002, 1149,  907,  909,  930,  936,  936,
      936,  942,  942,  942, 1151,  908,  946,  946,  946,  947,
      947,  947,  948,  948,  948,  942,  980,  980,  980, 1152,

      981,  981,  981,  947,  981,  989,  981,  989,  980,  980,
      980,  982,  982,  982,  983,  983,  983,  984,  984,  984,
      988,  988,  988,  982,  982,  982,  992,  992,  992,  984,
      984,  984,  985,  985,  985,  994,  985,  994,  985,  986,
      986,  986,  987,  987,  987, 1176, 1177,  989,  991,  991,
      991,  986,  986,  986,  987,  987,  987,  990, 1178,  990,
      991,  991,  991,  990,  993,  995,  993,  995,  996, 1179,
      996,  997,  997,  997, 1180,  994,  998,  998,  998, 1181,
      999,  995,  999,  997,  997,  997, 1000, 1000, 1000,  993,
     1001, 1001, 1001, 1182, 1003,  996, 1003, 1173, 1000, 1000,

     1000, 1004, 1004, 1004, 1173, 1183,  995,  999, 1186, 1006,
     1006, 1006, 1197, 1004, 1004, 1004, 1005, 1005, 1005, 1198,
     1005, 1003, 1005, 1006, 1010, 1010, 1010, 1022, 1022, 1022,
     1025, 1025, 1025, 1026, 1026, 1026, 1199, 1080, 1010, 1080,
     1200, 1022, 1202, 1207, 1025, 1035, 1035, 1035, 1036, 1036,
     1036, 1037, 1037, 1037, 1041, 1041, 1041, 1208, 1079, 1035,
     1079, 1209, 1036, 1069, 1069, 1069, 1082, 1069, 1082, 1069,
     1072, 1072, 1072, 1073, 1073, 1073, 1210, 1073, 1080, 1073,
     1076, 1076, 1076, 1077, 1077, 1077, 1084, 1077, 1084, 1077,
     1211, 1212, 1076, 1076, 1076, 1078, 1078, 1078, 1079, 1081,

     1081, 1081, 1083, 1086, 1083, 1086, 1213, 1083, 1082, 1084,
     1214, 1215, 1085, 1085, 1085, 1216, 1217, 1083, 1087, 1087,
     1087, 1218, 1219, 1083, 1085, 1085, 1085, 1088, 1220, 1088,
     1089, 1089, 1089, 1091, 1091, 1091, 1092, 1092, 1092, 1158,
     1092, 1158, 1092, 1221, 1086, 1091, 1091, 1091, 1095, 1095,
     1095, 1096, 1096, 1096, 1097, 1097, 1097, 1100, 1100, 1100,
     1222, 1223, 1095, 1101, 1101, 1101, 1224, 1088, 1097, 1226,
     1158, 1100, 1110, 1110, 1110, 1112, 1112, 1112, 1113, 1113,
     1113, 1114, 1114, 1114, 1244, 1231, 1110, 1231, 1156, 1112,
     1156, 1245, 1113, 1115, 1115, 1115, 1117, 1117, 1117, 1118,

     1118, 1118, 1119, 1119, 1119, 1248, 1249, 1115, 1126, 1126,
     1126, 1156, 1162, 1118, 1162, 1250, 1119, 1127, 1127, 1127,
     1251, 1231, 1126, 1128, 1128, 1128, 1129, 1129, 1129, 1153,
     1153, 1153, 1159, 1153, 1159, 1153, 1157, 1157, 1157, 1160,
     1129, 1160, 1161, 1162, 1161, 1163, 1163, 1163, 1157, 1157,
     1157, 1164, 1164, 1164, 1165, 1252, 1165, 1163, 1163, 1163,
     1166, 1253, 1166, 1160, 1167, 1161, 1167, 1254, 1255, 1159,
     1168, 1168, 1168, 1257, 1230, 1166, 1230, 1160, 1264, 1129,
     1265, 1266, 1168, 1168, 1168, 1169, 1169, 1169, 1238, 1169,
     1238, 1169, 1170, 1170, 1170, 1165, 1267, 1270, 1167, 1171,

     1171, 1171, 1172, 1172, 1172, 1174, 1174, 1174, 1175, 1175,
     1175, 1275, 1276, 1171, 1184, 1184, 1184, 1277, 1230, 1174,
     1185, 1185, 1185, 1187, 1187, 1187, 1238, 1278, 1184, 1188,
     1188, 1188, 1189, 1189, 1189, 1279, 1280, 1187, 1190, 1190,
     1190, 1191, 1191, 1191, 1192, 1192, 1192, 1193, 1193, 1193,
     1281, 1282, 1190, 1194, 1194, 1194, 1283, 1232, 1192, 1232,
     1284, 1193, 1195, 1195, 1195, 1196, 1196, 1196, 1201, 1201,
     1201, 1203, 1203, 1203, 1285, 1286, 1195, 1204, 1204, 1204,
     1287, 1288, 1201, 1205, 1205, 1205, 1206, 1206, 1206, 1232,
     1227, 1204, 1227, 1228, 1228, 1228, 1229, 1229, 1229, 1233,

     1206, 1233, 1234, 1290, 1234, 1228, 1228, 1228, 1235, 1291,
     1235, 1236, 1236, 1236, 1292, 1304, 1237, 1239, 1237, 1239,
     1305, 1227, 1240, 1240, 1240, 1302, 1240, 1302, 1240, 1243,
     1243, 1243, 1246, 1246, 1246, 1247, 1247, 1247, 1256, 1256,
     1256, 1233, 1234, 1237, 1239, 1307, 1246, 1308, 1235, 1258,
     1258, 1258, 1259, 1259, 1259, 1260, 1260, 1260, 1261, 1261,
     1261, 1262, 1262, 1262, 1263, 1263, 1263, 1302, 1309, 1260,
     1268, 1268, 1268, 1269, 1269, 1269, 1271, 1271, 1271, 1272,
     1272, 1272, 1310, 1311, 1268, 1273, 1273, 1273, 1274, 1274,
     1274, 1312, 1293, 1272, 1293, 1294, 1294, 1294, 1295, 1296,

     1295, 1296, 1274, 1297, 1298, 1297, 1298, 1299, 1300, 1299,
     1300, 1301, 1303, 1301, 1303, 1306, 1306, 1306, 1313, 1314,
     1315, 1316, 1316, 1316, 1317, 1295, 1318, 1320, 1293, 1322,
     1297, 1319, 1319, 1319, 1326, 1298, 1327, 1328, 1299, 1329,
     1296, 1321, 1321, 1321, 1330, 1319, 1323, 1323, 1323, 1300,
     1331, 1333, 1301, 1303, 1324, 1324, 1324, 1325, 1325, 1325,
     1332, 1334, 1337, 1338, 1339, 1340, 1341, 1342, 1324, 1343,
     1353, 1343, 1344, 1345, 1344, 1345, 1346, 1332, 1346, 1347,
     1348, 1347, 1348, 1349, 1349, 1349, 1350, 1350, 1350, 1351,
     1354, 1351, 1352, 1352, 1352, 1349, 1349, 1349, 1350, 1350,

     1350, 1346, 1355, 1348, 1352, 1352, 1352, 1356, 1357, 1358,
     1359, 1343, 1360, 1344, 1363, 1345, 1347, 1361, 1361, 1361,
     1351, 1362, 1362, 1362, 1364, 1365, 1358, 1366, 1366, 1366,
     1368, 1361, 1367, 1367, 1367, 1362, 1369, 1370, 1370, 1370,
     1371, 1366, 1372, 1374, 1375, 1377, 1378, 1379, 1380, 1381,
     1382, 1384, 1385, 1386, 1387, 1400, 1387, 1388, 1388, 1388,
     1389, 1390, 1389, 1390, 1392, 1391, 1392, 1391, 1402, 1388,
     1388, 1388, 1393, 1393, 1393, 1394, 1394, 1394, 1395, 1395,
     1395, 1396, 1396, 1396, 1393, 1393, 1393, 1397, 1392, 1397,
     1395, 1395, 1395, 1403, 1405, 1387, 1398, 1398, 1398, 1406,

     1389, 1391, 1407, 1390, 1399, 1399, 1399, 1408, 1398, 1398,
     1398, 1401, 1401, 1401, 1404, 1404, 1404, 1409, 1409, 1409,
     1410, 1410, 1410, 1413, 1397, 1401, 1414, 1417, 1404, 1418,
     1419, 1409, 1411, 1411, 1411, 1412, 1412, 1412, 1415, 1415,
     1415, 1416, 1416, 1416, 1420, 1422, 1411, 1423, 1424, 1425,
     1426, 1427, 1415, 1428, 1429, 1431, 1432, 1432, 1432, 1433,
     1433, 1433, 1434, 1434, 1434, 1435, 1443, 1435, 1432, 1432,
     1432, 1433, 1433, 1433, 1436, 1437, 1436, 1437, 1438, 1447,
     1438, 1439, 1439, 1439, 1440, 1440, 1440, 1441, 1435, 1441,
     1442, 1442, 1442, 1444, 1444, 1444, 1445, 1445, 1445, 1446,

     1446, 1446, 1449, 1449, 1449, 1436, 1450, 1444, 1448, 1448,
     1448, 1451, 1438, 1446, 1452, 1453, 1437, 1454, 1454, 1454,
     1456, 1457, 1448, 1441, 1455, 1455, 1455, 1458, 1458, 1458,
     1459, 1459, 1459, 1460, 1461, 1461, 1461, 1462, 1464, 1465,
     1466, 1458, 1467, 1468, 1469, 1470, 1472, 1485, 1461, 1473,
     1473, 1473, 1474, 1474, 1474, 1475, 1475, 1475, 1476, 1487,
     1476, 1473, 1473, 1473, 1477, 1488, 1477, 1478, 1478, 1478,
     1479, 1480, 1479, 1480, 1481, 1481, 1481, 1489, 1490, 1478,
     1478, 1478, 1482, 1482, 1482, 1483, 1483, 1483, 1481, 1476,
     1484, 1484, 1484, 1486, 1486, 1486, 1491, 1479, 1492, 1483,

     1493, 1493, 1493, 1494, 1494, 1494, 1497, 1498, 1477, 1495,
     1495, 1495, 1480, 1496, 1496, 1496, 1499, 1494, 1500, 1501,
     1502, 1503, 1504, 1495, 1505, 1506, 1506, 1506, 1507, 1508,
     1507, 1508, 1509, 1509, 1509, 1510, 1510, 1510, 1511, 1516,
     1511, 1513, 1513, 1513, 1509, 1509, 1509, 1512, 1512, 1512,
     1514, 1514, 1514, 1511, 1517, 1513, 1508, 1518, 1519, 1512,
     1512, 1512, 1520, 1521, 1507, 1515, 1515, 1515, 1522, 1523,
     1523, 1523, 1524, 1524, 1524, 1525, 1525, 1525, 1526, 1527,
     1528, 1529, 1530, 1523, 1531, 1532, 1533, 1534, 1535, 1536,
     1535, 1536, 1537, 1537, 1537, 1538, 1542, 1538, 1539, 1539,

     1539, 1540, 1540, 1540, 1536, 1541, 1541, 1541, 1543, 1544,
     1539, 1539, 1539, 1545, 1545, 1545, 1546, 1547, 1548, 1549,
     1549, 1549, 1550, 1551, 1554, 1556, 1557, 1545, 1558, 1559,
     1535, 1559, 1560, 1538, 1560, 1561, 1563, 1561, 1562, 1562,
     1562, 1568, 1570, 1545, 1559, 1564, 1564, 1564, 1565, 1565,
     1565, 1566, 1566, 1566, 1567, 1567, 1567, 1571, 1572, 1564,
     1574, 1575, 1565, 1577, 1587, 1566, 1569, 1569, 1569, 1578,
     1560, 1578, 1579, 1580, 1579, 1580, 1590, 1561, 1592, 1593,
     1569, 1581, 1581, 1581, 1582, 1582, 1582, 1583, 1583, 1583,
     1594, 1584, 1584, 1584, 1595, 1581, 1603, 1605, 1582, 1585,

     1585, 1585, 1608, 1609, 1580, 1584, 1610, 1578, 1586, 1586,
     1586, 1588, 1588, 1588, 1579, 1589, 1589, 1589, 1591, 1591,
     1591, 1596, 1597, 1596, 1597, 1588, 1611, 1598, 1613, 1598,
     1613, 1616, 1591, 1599, 1599, 1599, 1600, 1600, 1600, 1601,
     1601, 1601, 1602, 1602, 1602, 1617, 1619, 1599, 1604, 1604,
     1604, 1620, 1621, 1597, 1606, 1606, 1606, 1607, 1607, 1607,
     1612, 1622, 1612, 1596, 1598, 1613, 1626, 1614, 1606, 1614,
     1615, 1615, 1615, 1618, 1618, 1618, 1623, 1627, 1623, 1624,
     1625, 1624, 1625, 1628, 1630, 1633, 1632, 1633, 1632, 1636,
     1638, 1612, 1634, 1634, 1634, 1635, 1635, 1635, 1637, 1637,

     1637, 1645, 1648, 1614, 1634, 1634, 1634, 1654, 1639, 1635,
     1639, 1656, 1637, 1623, 1660, 1624, 1640, 1640, 1640,  883,
      881, 1625, 1632, 1641, 1641, 1641, 1633,  880, 1640, 1640,
     1640, 1642, 1642, 1642,  879, 1641, 1641, 1641, 1643, 1643,
     1643, 1644, 1644, 1644, 1646, 1646, 1646,  878,  877, 1639,
      876,  875, 1643, 1647, 1647, 1647,  874,  873, 1646, 1649,
     1649, 1649, 1650, 1650, 1650, 1651, 1651, 1651, 1652, 1652,
     1652, 1649, 1649, 1649, 1650, 1650, 1650, 1653, 1653, 1653,
     1655, 1655, 1655, 1657, 1657, 1657, 1658, 1658, 1658, 1659,
     1659, 1659, 1662, 1662, 1662, 1657, 1657, 1657, 1663, 1663,

     1663, 1664, 1664, 1664, 1665, 1665, 1665, 1666, 1666, 1666,
      872,  871, 1663,  870,  869, 1664, 1668, 1668, 1668, 1668,
     1668, 1669, 1669, 1669, 1669, 1669, 1670, 1670, 1670, 1670,
     1670, 1671, 1671, 1671, 1671, 1671, 1672, 1672, 1672, 1672,
     1672, 1673, 1673, 1673, 1673, 1673, 1674, 1674, 1674, 1674,
     1674, 1675,  868,  867, 1675, 1676, 1676, 1676, 1676, 1677,
     1677,  866, 1677, 1677, 1678, 1678, 1678,  865, 1678,  864,
      863,  859,  858,  857,  856,  855,  853,  852,  851,  850,
      844,  843,  842,  841,  840,  839,  838,  837,  836,  833,
      832,  831,  830,  829,  828,  827,  826,  825,  824,  822,

      821,  820,  819,  817,  794,  793,  792,  791,  790,  789,
      788,  787,  786,  785,  784,  783,  782,  781,  780,  779,
      778,  777,  776,  775,  774,  773,  772,  771,  770,  769,
      768,  767,  766,  765,  764,  763,  762,  761,  758,  757,
      756,  755,  754,  751,  749,  744,  743,  742,  741,  740,
      739,  738,  737,  736,  731,  729,  728,  727,  726,  725,
      724,  723,  720,  719,  718,  717,  714,  691,  689,  688,
      687,  686,  685,  684,  682,  679,  678,  677,  676,  675,
      674,  673,  672,  671,  670,  668,  667,  666,  665,  664,
      663,  662,  661,  660,  659,  658,  657,  656,  655,  652,

      651,  650,  648,  647,  645,  644,  643,  642,  641,  639,
      638,  637,  636,  635,  634,  630,  629,  628,  627,  623,
      622,  620,  602,  601,  600,  599,  598,  596,  595,  594,
      593,  592,  591,  590,  589,  588,  587,  586,  585,  584,
      583,  580,  579,  578,  577,  573,  572,  570,  569,  568,
      565,  563,  562,  561,  560,  559,  557,  555,  551,  550,
      549,  548,  546,  545,  542,  541,  540,  539,  538,  537,
      536,  535,  534,  533,  532,  513,  512,  510,  508,  507,
      506,  505,  504,  503,  501,  500,  499,  498,  497,  495,
      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,

      484,  483,  482,  480,  477,  476,  474,  473,  472,  471,
      470,  469,  466,  465,  461,  460,  458,  457,  456,  455,
      454,  451,  450,  448,  447,  446,  445,  444,  443,  442,
      413,  412,  411,  410,  409,  408,  407,  406,  405,  404,
      403,  402,  401,  398,  397,  396,  395,  394,  393,  392,
      390,  389,  387,  386,  385,  384,  383,  382,  381,  380,
      377,  375,  374,  371,  370,  369,  368,  367,  365,  364,
      363,  361,  360,  357,  356,  355,  354,  353,  352,  349,
      348,  347,  346,  345,  344,  343,  342,  341,  340,  314,
      313,  311,  310,  309,  308,  307,  306,  305,  304,  303,

      302,  301,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      280,  279,  278,  276,  275,  274,  273,  272,  271,  270,
      269,  268,  267,  266,  263,  262,  260,  259,  258,  257,
      256,  255,  254,  253,  228,  227,  226,  225,  224,  223,
      222,  221,  220,  219,  218,  217,  216,  215,  214,  213,
      212,  210,  209,  208,  207,  206,  205,  204,  203,  202,
      201,  200,  198,  197,  196,  195,  193,  192,  191,  190,
      188,  187,  186,  185,  184,  183,  182,  181,  180,  178,
      177,  176,  175,  174,  172,  148,  147,  146,  145,  143,

      142,  141,  140,  138,  137,  136,  135,  134,  133,  132,
      131,  130,  128,  127,  126,  125,  124,  123,  122,  121,
      119,  115,  114,  113,  112,  111,  109,  108,  105,   86,
       81,   80,   79,   77,   73,   72,   71,   70,   69,   67,
       64,   40,   37,   17,    8,    7,    6,    5,    4,    3,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[189] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 
    0, 0, 1, 0, 1, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "OSParseosol.l"
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin, 
 * @version 1.1, 10/07/2008
 * @since   OS1.1
 *
 * \remarks
 * Copyright (C) 2005-2008, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "OSParseosol.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSoLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"



#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;








#line 100 "OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 1879 "OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 110 "OSParseosol.l"


 
#line 2125 "OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1668 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3451 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 113 "OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 118 "OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 119 "OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 120 "OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 122 "OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 136 "OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 138 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 139 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 140 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 141 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 142 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 143 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 144 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 145 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 146 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 147 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 148 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 149 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 150 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 151 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 152 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 153 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 154 "OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 155 "OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 156 "OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 158 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 159 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 160 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 161 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 162 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 163 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 164 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 165 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 166 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 167 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 168 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 169 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 170 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 171 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 172 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 173 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 174 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 175 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 176 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 177 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 178 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 179 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 180 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 181 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 182 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 183 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 184 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 185 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 187 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBDUALVALUEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 188 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBDUALVALUEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 189 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBDUALVALUEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 190 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBDUALVALUEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 193 "OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 194 "OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 196 "OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 197 "OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 198 "OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 199 "OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 200 "OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 201 "OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 202 "OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 203 "OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 204 "OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 205 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 206 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 208 "OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 209 "OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 210 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 211 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 212 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 213 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 214 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 215 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 216 "OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 217 "OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 218 "OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 219 "OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 220 "OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 221 "OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 222 "OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 223 "OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 224 "OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 225 "OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 226 "OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 227 "OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 228 "OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 229 "OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 230 "OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 231 "OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 233 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 234 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 235 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZESTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 236 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZEEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 237 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 238 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 239 "OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 240 "OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 242 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 243 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 245 "OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 246 "OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 247 "OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 248 "OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 249 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 250 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 251 "OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 252 "OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 253 "OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 254 "OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 255 "OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 256 "OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 257 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 258 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 259 "OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 260 "OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 261 "OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 262 "OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 263 "OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 264 "OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 265 "OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 266 "OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 267 "OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 268 "OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 269 "OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 270 "OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 271 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 272 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 273 "OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 274 "OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 275 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 276 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 277 "OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 278 "OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 281 "OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 282 "OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 283 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 284 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 285 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 286 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 287 "OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 288 "OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 289 "OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 290 "OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 291 "OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 292 "OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 293 "OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 294 "OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 295 "OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 296 "OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 297 "OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 298 "OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 299 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 300 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 301 "OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 302 "OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 303 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 304 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 305 "OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 306 "OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 307 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 308 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 309 "OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 310 "OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 311 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 312 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 313 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 314 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 315 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 316 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 319 "OSParseosol.l"
{ YY_PRINT; /*yylval->sval = strdup( yytext);*/   yylval->sval = yytext; yyextra->errorText = yylval->sval;  return (ELEMENTTEXT); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 322 "OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 177:
#line 324 "OSParseosol.l"
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 324 "OSParseosol.l"
;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 325 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 327 "OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 181:
#line 329 "OSParseosol.l"
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 329 "OSParseosol.l"
;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 330 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 333 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 334 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;  return(ATTRIBUTETEXT);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 335 "OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 337 "OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 349 "OSParseosol.l"
ECHO;
	YY_BREAK
#line 3358 "OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1668 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1668 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1667);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 349 "OSParseosol.l"





