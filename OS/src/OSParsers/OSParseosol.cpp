#line 2 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.cpp"

#line 4 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 260
#define YY_END_OF_BUFFER 261
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2101] =
    {   0,
        1,    1,  258,  258,  256,  256,  257,  257,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  261,  259,
        1,    2,  246,    2,  246,    6,  246,    5,  259,    4,
      246,  246,    2,  258,  260,  256,  257,  247,  249,  250,
      249,  253,  254,  253,    1,  246,  246,    6,  246,    5,
        0,    4,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,    3,    6,    6,
      246,    7,    5,    0,    0,  252,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    4,  246,  246,  258,  256,

      257,  247,    0,  255,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,    6,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  134,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        6,  251,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,

      246,  246,  246,  246,  246,  246,  246,  248,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  212,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   96,    0,    0,
        0,    0,  204,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  196,    0,    0,    0,    0,    0,    0,
      198,  246,  246,  246,  246,  246,   27,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,   78,

       79,  246,  246,  246,  246,  246,  246,  246,    0,    0,
        0,    0,    0,    0,    0,    0,  135,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  146,    0,    0,    0,    0,    0,    0,    0,    0,
      136,    0,    0,    0,  246,  246,  246,  246,  246,   27,

      246,   82,  246,  246,  246,  246,  246,   83,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,    0,    0,    0,    0,    0,  213,    0,
        0,    0,    0,    0,  135,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   97,    0,    0,    0,    0,
        0,    0,    0,    0,  205,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  197,    0,    0,
        0,    0,    0,    0,    0,    0,  199,    0,    0,    0,
        0,  180,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  223,  108,

        0,    0,    0,    0,    0,    0,    0,  227,    0,    0,
        0,   86,   85,  122,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  246,
      246,  246,   76,   77,  246,   82,  246,  246,  246,  246,
       83,  246,   48,   49,  246,  246,  246,  246,  246,  246,
       56,   57,  246,  246,  246,   66,   67,  246,  246,  246,
        0,    0,    0,    0,  213,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      224,   97,    0,    0,    0,    0,    0,    0,    0,  228,
      205,    0,    0,    0,    0,   87,    0,    0,    0,    0,

      147,    0,    0,    0,    0,    0,    0,  197,    0,    0,
        0,    0,    0,  137,    0,    0,  199,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  186,  225,  223,    0,    0,
        0,    0,    0,    0,    0,  229,  227,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   92,    0,    0,    0,  246,  246,  246,
      246,  246,  246,  246,   46,   47,  246,  246,   84,  246,
      246,  246,   28,  246,   54,   55,  246,  246,   64,   65,
      246,   70,   71,  246,  246,    0,    0,    0,    0,  181,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  224,    0,  109,    0,    0,
        0,    0,    0,    0,  228,    0,    0,    0,   87,    0,
      123,    0,    0,    0,  147,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  137,    0,    0,    0,  182,
      184,    0,    0,  118,    0,    0,    0,    0,    0,    0,
       90,    0,    0,    0,    0,    0,  225,    0,    0,  112,
      138,    0,    0,    0,    0,  229,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  170,    0,    0,   94,    0,
        0,    0,    0,    0,  231,    0,  190,    0,    0,  246,

      246,  246,  246,  246,  246,  246,  246,  246,   84,  246,
       52,   53,   28,  246,  246,  246,  246,   68,   69,  246,
       74,   75,    0,    0,    0,  181,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  187,  109,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  123,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  232,    0,    0,
       93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  243,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  116,  158,    0,
        0,    0,    0,    0,    0,    0,    0,  233,  231,    0,
        0,  114,    0,  246,  246,  246,  246,  246,  246,   42,
       43,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,   50,   51,  246,  246,  246,   62,   63,   72,
       73,    0,  183,    0,  185,    0,    0,    0,  119,    0,
        0,    0,    0,    0,    0,    0,    0,   91,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  187,    0,  244,
        0,  113,    0,  139,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  171,    0,    0,

        0,    0,   95,    0,    0,    0,    0,    0,  232,    0,
       93,    0,  191,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  245,  243,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  233,    0,
        0,  172,  246,   34,   35,  246,  246,  246,   40,   41,
      246,  246,   80,   81,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,   60,   61,
      183,  185,    0,    0,  119,    0,    0,    0,    0,    0,

        0,    0,   91,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  244,  113,  139,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  117,    0,  159,
      171,    0,    0,    0,    0,   95,    0,    0,    0,    0,
        0,    0,  191,    0,  115,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  245,    0,    0,    0,
        0,    0,    0,  200,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  100,    0,    0,    0,    0,  188,
       32,   33,  246,  246,  246,  246,  246,  246,   10,  246,

      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      117,  159,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  115,    0,  173,    0,  208,    0,    0,    0,
      220,    0,    0,  152,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  128,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      102,    0,    0,    0,    0,  246,  246,  246,   29,  246,

       30,  246,  246,   25,  246,   10,  246,  246,  246,  246,
       23,  246,  246,  246,  246,  246,   21,  246,  246,   20,
      246,  246,  246,   31,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  201,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      101,    0,    0,    0,    0,  189,  173,    0,  142,    0,
        0,  235,    0,    0,    0,  239,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  104,    0,    0,  222,    0,
      130,  124,    0,    0,  226,   98,   88,  120,    0,    0,

        0,    0,    0,    0,  218,    0,    0,    0,  246,   38,
       39,   29,   30,  246,  246,   25,  246,  246,  246,  246,
       23,  246,  246,  246,  246,  246,   21,  246,   20,  246,
      246,   31,    0,    0,  209,    0,    0,  236,    0,    0,
      221,    0,  240,    0,    0,  153,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  129,    0,
        0,  201,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  103,  101,    0,    0,    0,  189,    0,  237,
      235,    0,    0,  241,  239,    0,  166,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  222,    0,  126,  226,

        0,    0,    0,    0,    0,  148,  216,    0,    0,    0,
       36,   37,  246,   45,   44,  246,  246,  246,   13,  246,
      246,  246,  246,  246,  246,  246,   12,  246,  246,  246,
      246,  246,    0,  209,    0,  143,  236,    0,  221,  240,
        0,  153,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  105,    0,    0,  131,  129,    0,  125,    0,    0,
       99,    0,   89,    0,  121,    0,    0,    0,    0,    0,
        0,  103,    0,  219,    0,    0,    0,    0,  237,    0,
        0,    0,  241,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  110,

        0,    0,  246,  246,   13,  246,    9,  246,  246,  246,
      246,  246,  246,   12,  246,  246,  246,  246,   59,   58,
        0,  143,    0,    0,    0,  167,    0,    0,    0,    0,
        0,    0,    0,    0,  105,    0,  131,  125,    0,  127,
       99,   89,  121,    0,    0,    0,    0,    0,    0,  149,
      219,    0,  217,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  168,    0,    0,    0,    0,  246,  246,    9,
      246,  246,  246,  246,  246,  246,  246,  246,  246,    0,
        0,    0,  167,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  127,    0,    0,    0,    0,    0,  149,  217,
        0,  111,    0,  132,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  156,  106,    0,    0,    0,    0,
        0,    0,    0,    0,  230,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  169,    0,    0,  111,    0,    0,    0,  150,    0,
        0,    0,  214,    0,    0,    0,    0,    0,    0,    0,
      162,    0,    0,    0,  230,  246,  246,  246,  246,  246,
      246,  246,  246,   14,  246,   15,  246,  246,   16,    0,

      133,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  157,    0,  107,    0,    0,    0,  169,    0,    0,
        0,    0,    0,    0,  178,    0,    0,    0,    0,    0,
        0,    0,  242,    0,  140,    0,    0,  246,  246,  246,
       17,  246,  246,  246,  246,   14,   15,  246,   16,  133,
        0,    0,  151,    0,    0,    0,  215,    0,    0,    0,
        0,  157,  107,    0,    0,    0,  163,    0,    0,    0,
        0,  164,    0,    0,    0,    0,    0,    0,    0,  242,
        0,  144,    0,  246,   18,  246,   17,  246,  246,  246,
      246,  246,    0,  151,    0,  179,    0,  215,    0,    0,

        0,    0,    0,    0,  163,    0,  141,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   18,
      246,   11,  246,  246,  246,    8,  246,  246,    0,  165,
      179,    0,    0,    0,    0,    0,    0,    0,  141,    0,
      145,    0,    0,    0,    0,    0,    0,  174,    0,    0,
        0,    0,   11,  246,  246,    8,  246,  246,   26,  165,
        0,    0,    0,    0,    0,    0,    0,  145,    0,    0,
        0,    0,  206,  202,    0,  154,    0,    0,    0,  246,
      246,  246,   26,    0,    0,    0,    0,  175,    0,    0,
        0,    0,    0,    0,    0,  210,    0,    0,  160,    0,

      246,  246,  246,    0,    0,  207,    0,  203,  175,    0,
        0,  155,    0,    0,    0,    0,    0,    0,    0,    0,
      246,  246,  246,    0,  211,  207,  203,    0,  155,    0,
        0,  161,    0,    0,    0,    0,    0,    0,  246,  246,
      246,  211,    0,    0,  161,    0,    0,  234,    0,  238,
        0,    0,    0,  246,  246,  246,    0,    0,    0,  234,
      238,  176,    0,  194,  246,  246,  246,    0,    0,    0,
        0,  246,  246,  246,   19,    0,  177,    0,    0,  195,
        0,  246,  246,   22,   19,  177,    0,  195,    0,  246,
       24,   22,    0,  192,   24,    0,    0,  193,  193,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,   27,   28,   29,   30,   31,   32,
        6,   33,   34,   35,   36,   37,   38,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,   65,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2113] =
    {   0,
        0,   65, 3240, 3239, 3250, 3249, 3246, 3245,    0,    0,
        0,    0, 3236, 3235,   13,   17,    3,    5, 3249, 3258,
      129, 3243,  192, 3240,   19,   38, 3229,   84,  250,   25,
     3215, 3205, 3258,    0, 3258,    0,    0,    0, 3258, 3258,
     3234, 3258, 3258, 3225,    0,    0,   24,   90, 3224,  213,
       35,   40, 3210, 3200, 3199, 3194, 3180, 3179,    3,    6,
       25,   32,    1,   52,   21, 3195, 3190, 3258,   54,  216,
      105, 3258,   60, 3223,  272, 3258, 3173, 3191, 3176,   42,
       49, 3181, 3184,   64, 3173, 3178,   81, 3185,  206,   68,
     3180,  214, 3159,   77, 3182,  107, 3197, 3189,    0,    0,

        0,    0, 3201, 3258, 3159, 3159, 3162, 3161, 3151, 3171,
      175, 3170, 3161, 3159, 3157, 3156, 3142,  163,  195, 3166,
     3150,  187, 3156, 3152, 3154,  257,  272, 3191, 3141, 3159,
     3144,  167,   73, 3149, 3152,  224, 3141, 3146,  193, 3153,
      281,  192, 3148,  284, 3127,  226, 3150,  219, 3131, 3135,
      242, 3130, 3258, 3126, 3134, 3131,  287, 3159, 3138, 3140,
     3138, 3116, 3125, 3125, 3127, 3116, 3120, 3126, 3113,  142,
     3117, 3114, 3112,  292, 3113, 3109, 3111, 3115, 3120, 3106,
      277, 3258, 3118, 3119, 3108, 3099,  350, 3101, 3097, 3116,
     3115, 3110, 3094, 3108, 3110, 3106, 3088, 3122,  352,  354,

     3094, 3102, 3085, 3104, 3084, 3082, 3095, 3258,  230, 3082,
     3086,  279, 3081,  360, 3077, 3085, 3082,  313, 3110, 3089,
     3091, 3089, 3067, 3076, 3076, 3078, 3067, 3071, 3077, 3064,
      230, 3068, 3065, 3063,  315, 3064, 3060, 3062, 3066, 3071,
     3057, 3059, 3057,  198,  318, 3067, 3068, 3065, 3056, 3063,
     3062, 3046, 3044, 3044, 3058, 3044, 3048, 3073, 3054, 3061,
      358, 3052, 3051, 3046, 3042, 3048, 3036, 3032, 3042, 3046,
     3027, 3025, 3024, 3046, 3026, 3038, 3022, 3036, 3026, 3021,
     3029, 3030, 3018,  378, 3019,  380,  382,  386, 3033, 3021,
     3012, 3049,  388,  390, 3025, 3036, 3023, 3023,  396, 3258,

     3258, 3007,  405, 3024, 3012,  407, 3018, 3014, 3006, 3004,
      303,  409, 3014, 3015, 3012,  411,  413, 3003, 3010, 3009,
     2993, 2991, 2991, 3005, 2991, 2995,  415, 3002, 3009,  404,
     3000,  417, 2995, 2991, 2997, 2985, 2981, 2991, 2995, 2976,
     2974, 2973,  427, 2976, 2988, 2972, 2986, 2976, 2971,  433,
     2965, 2971, 3010, 2982, 2964, 2982, 2968, 2963, 2977, 2974,
      338, 2960, 2968, 2956, 2974, 2967, 2968,  435, 2989, 2957,
     2961, 2975, 2959, 2962,  440, 2963,  388,  445, 2947, 2943,
     2940, 2968, 2956,  326, 2951, 2954, 2957, 2954, 2938, 2950,
     3258, 2939, 2961, 2951, 2936, 2941,  452,  456, 2949,  467,

      469,  471, 2936, 2926, 2937, 2930,  473,  475,  479,  481,
     2926, 2937, 2924, 2917, 2924,  488,  491, 2927, 2917,  497,
      500,  506, 2917, 2913, 2919, 2958, 2930,  508,  512, 2912,
     2930, 2916, 2911, 2925,  514, 2922,  467, 2908, 2916, 2904,
     2922, 2915, 2916,  516,  518,  524, 2937, 2905, 2909, 2923,
     2907, 2910,  526,  528,  534, 2911,  481,  536, 2895, 2891,
     2888,  538, 2905,  384, 2900, 2903,  544,  546, 2906, 2903,
     2887, 2899,  548, 2888, 2910,  554,  556, 2900, 2895, 2894,
     2923, 3258, 2879, 2893, 2891, 2885, 2873, 2874, 2873, 2893,
     2888, 2887,  521, 2873, 2881, 2880,  561, 2905,  564, 3258,

      307, 2870, 2884, 2862, 2867,  566, 2900,  571, 2858, 2868,
     2862,  573, 3258, 2882, 2854, 2858, 2871, 2852, 2851, 2851,
     2865, 2849, 2848, 2860, 2862, 2850, 2839, 2860, 2858, 2841,
     2842,  582, 3258, 3258, 2852,  578, 2857, 2850, 2839, 2837,
      589,  591, 2885, 2882, 2857,  597,  599,  601, 2834,  603,
     2881, 2878, 2847, 2840,  609, 2877, 2874,  616,  618,  624,
     2837, 2836, 2865,  626,  628, 2821, 2835, 2833, 2827, 2815,
     2816, 2815, 2835, 2830, 2829,  531, 2815, 2823, 2822,  631,
      633,  635,  639,  408, 2813, 2827, 2805, 2810,  642,  644,
      647, 2802, 2812, 2806,  649,  651,  655, 2799, 2803,  658,

      660, 2816, 2797, 2796, 2796, 2810, 2794,  662, 2793, 2805,
     2807, 2795,  665,  667, 2784, 2805,  671, 2803, 2786, 2785,
     2821, 2800, 2780, 2794, 2782, 2782, 2795, 2790, 2779, 2781,
     2780, 2782, 2781, 2786, 2770, 3258,  674,  676, 2814, 2781,
     2780, 2779,  467, 2772, 2767,  678,  681, 2808, 2771, 2753,
     2792, 2761,  539, 2758, 2766, 2755, 2753, 2767, 2766,  654,
     2761,  690, 2768, 3258, 2754, 2754, 2754, 2740, 2744, 2754,
     2761,  692, 2747, 2735, 3258, 3258, 2753,  695,  685,  697,
      707,  700,  702, 2740, 3258, 3258, 2756,  715, 3258, 3258,
      717, 2789, 2786,  723,  725, 2736, 2735, 2771,  731,  733,

     2750, 2730, 2744, 2732, 2732, 2745, 2740, 2729, 2731, 2730,
     2732, 2731, 2736, 2720,  735,  738,  740,  742, 2732, 2731,
     2730,  716, 2723, 2718,  751, 2723, 2705, 2743,  753,  756,
      758, 2707,  574, 2699,  760, 2661, 2649, 2647, 2661, 2660,
      716, 2655,  762, 2662,  764,  766,    6,   37,   50, 3258,
     3258,   64,   79, 3258,   84,   89,  165,  204,  233,  376,
     3258,  751,  249,  268,  343,  363,  772,  375,  774, 3258,
     3258,  386,  399,  422,  423,  781,  440,  446,  473,  480,
      524,  541,  560,  567,  566,  581,  596,  613,  685,  617,
      637,  667,  784,  706,  787,  672, 3258,  706,  735,  790,

      733,  749,  746,  795,  802,  764,  810,  796,  812,  829,
      795,  796,  817,  750,  760,  821,  836, 3258, 3258,  842,
      812,  818,  848,  850,  782,  852,  788,  854,  788,  784,
      790,  790,  819,  839,  859,  853,  803,  813,  821,  829,
      875,  867,  877,  879,  883,  885,  816,  829,  855,  835,
      833,  855,  852,  895,  841,  854,  856,  862,  849,  904,
      865,  867,  908,  858,  860,  875,  913,  915,  862,  920,
      924,  926,  877,  881,  879,  880,  892,  887,  888,  889,
      881,  897,  902,  903,  892,  887,  908,  910,  907,  908,
      924,  914,  897,  954,  941,  957,  910,  919,  909,  901,

      927,  924,  910,  930,  923,  917,  924, 3258, 3258,  918,
      934,  956,  939,  947,  923,  957,  943,  982,  984,  977,
      942, 3258,  933,  989,  991,  942,  951,  941,  999,  998,
     1000,  945, 1007, 1009,  960,  965,  960,  966,  980,  983,
      990,  985, 3258, 3258,  990,  967, 1025, 1024, 1024, 3258,
     3258, 1031, 1033, 1038, 1042,  985,  990, 1044, 1047, 1010,
     1005, 1006, 1007,  998, 1014, 1019, 1057, 1060, 1025, 1012,
     1007, 1027, 1029, 1026, 1027, 1043, 1033, 1073, 1075, 1077,
     1079, 1081, 1083, 1085, 1038, 1047, 1037, 1030, 1051, 1037,
     1058, 1051, 1043, 1051, 1100, 1102, 1104, 1106, 1053, 1069,

     1091, 1113, 1120, 1074, 1085, 1062, 1099, 1085, 1124, 1081,
     1129, 1131, 1133, 1135, 1072, 1100, 1082, 1094, 1089, 1100,
     1091, 1092, 1096, 1098, 1092, 1098, 1112, 1105, 1098, 1114,
     1099, 1104, 1119, 1103, 1117, 1159, 1161, 1154, 1126, 1124,
     1129, 1135, 1119, 1114, 1125, 1131, 1121, 1132, 1134, 1143,
     1145, 1133, 1134, 1131, 1158, 1137, 1133, 1136, 1185, 1132,
     1149, 3258, 1189, 1188, 1188, 1145, 1140, 1156, 3258, 3258,
     1146, 1199, 3258, 3258, 1151, 1205, 1146, 1166, 1170, 1163,
     1166, 1155, 1161, 1181, 1166, 1161, 1155, 1176, 3258, 3258,
     1220, 1222, 1181, 1168, 1225, 1182, 1177, 1188, 1179, 1180,

     1184, 1186, 1234, 1181, 1187, 1201, 1193, 1186, 1202, 1187,
     1192, 1207, 1191, 1246, 1248, 1250, 1214, 1212, 1217, 1223,
     1201, 1212, 1218, 1208, 1219, 1220, 1262, 1264, 1266, 1268,
     1270, 1239, 1241, 1229, 1230, 1278, 1227, 1257, 1237, 1233,
     1236, 1246, 1286, 1288, 1290, 1292, 1240, 1240, 1255, 1247,
     1243, 1249, 1246, 1260, 1261, 1259, 1250, 1258, 1267, 1264,
     1254, 1278, 1273, 1264, 1269, 1266, 1316, 1270, 1278, 1280,
     1282, 1277, 1282, 3258, 1273, 1284, 1276, 1288, 1273, 1278,
     1274, 1277, 1284, 1292, 3258, 1283, 1277, 1295, 1286, 3258,
     3258, 3258, 1338, 1340, 1342, 1303, 1345, 1347, 1349, 1302,

     1304, 1332, 1357, 1319, 1318, 1324, 1364, 1308, 1367, 1317,
     1372, 1316, 1319, 1334, 1326, 1322, 1329, 1326, 1341, 1342,
     1339, 1330, 1339, 1347, 1344, 1334, 1358, 1353, 1344, 1349,
     1354, 1356, 1358, 1354, 1401, 1352, 1363, 1355, 1367, 1352,
     1408, 1410, 1362, 1358, 1361, 1369, 1377, 1419, 1370, 1364,
     1382, 1424, 1426, 1428, 1430, 1371, 3258, 1378, 1435, 1404,
     3258, 1440, 1382, 3258, 1387, 1389, 1411, 1408, 1411, 1400,
     1401, 1416, 1413, 1419, 1457, 1414, 1406, 3258, 1420, 1400,
     1463, 1415, 1412, 1412, 1412, 1436, 1445, 1434, 1432, 1433,
     3258, 1425, 1425, 1460, 1422, 1480, 1482, 1488, 1490, 1492,

     1495, 1497, 1499, 1503, 1428, 1507, 1445, 1446, 1486, 1509,
     1514, 1473, 1462, 1487, 1477, 1519, 1521, 1483, 1525, 1527,
     1492, 1489, 1531, 1534, 1475, 1537, 1485, 1543, 1508, 1546,
     1548, 1494, 1553, 1496, 1499, 1521, 1518, 1522, 1509, 1511,
     1527, 1524, 1529, 1513, 1569, 1530, 1510, 1573, 1575, 1527,
     1524, 1524, 1524, 1548, 1557, 1546, 1544, 1545, 1589, 1591,
     1593, 1537, 1544, 1579, 1597, 1599, 1601, 1584, 3258, 1607,
     1590, 1610, 1558, 1617, 1598, 1614, 1578, 1588, 1567, 1587,
     1569, 1590, 1575, 1603, 1575, 3258, 1595, 1634, 1636, 1599,
     3258, 3258, 1598, 1640, 1642, 3258, 3258, 3258, 1593, 1594,

     1601, 1593, 1609, 1595, 1596, 1605, 1599, 1600, 1656, 1655,
     1655, 1662, 1664, 1666, 1668, 1674, 1616, 1618, 1676, 1623,
     1681, 1623, 1665, 1647, 1685, 1632, 1688, 1637, 1692, 1657,
     1696, 1701, 1679, 1703, 1705, 1707, 1711, 1713, 1658, 1715,
     1719, 1723, 1727, 1676, 1731, 1733, 1689, 1671, 1692, 1679,
     1698, 1683, 1712, 1684, 1741, 1705, 1744, 1747, 1749, 1751,
     1712, 1754, 1757, 1760, 1763, 1714, 1716, 1723, 1715, 1731,
     1716, 1773, 1776, 1779, 1781, 1736, 1730, 1785, 1750, 1789,
     1791, 1784, 1775, 1797, 1799, 1786, 3258, 1745, 1766, 1757,
     1761, 1759, 1763, 1758, 1765, 1763, 1813, 1774, 3258, 1816,

     1764, 1792, 1772, 1765, 1766, 3258, 3258, 1782, 1787, 1786,
     3258, 3258, 1826, 3258, 3258, 1791, 1793, 1832, 1834, 1837,
     1794, 1789, 1803, 1805, 1798, 1844, 1847, 1794, 1821, 1804,
     1853, 1856, 1823, 1862, 1864, 1868, 1870, 1847, 1872, 1875,
     1877, 1880, 1826, 1846, 1836, 1840, 1838, 1842, 1837, 1844,
     1890, 1893, 1847, 1896, 1898, 1900, 1902, 1906, 1908, 1912,
     1914, 1918, 1920, 1924, 1928, 1850, 1883, 1868, 1866, 1870,
     1930, 1934, 1936, 1940, 1942, 1891, 1901, 1888, 1946, 1908,
     1908, 1913, 1952, 1912, 1918, 1911, 1901, 1901, 1919, 1920,
     1904, 1912, 1923, 1915, 1921, 1916, 1920, 1936, 1919, 3258,

     1921, 1931, 1928, 1918, 1975, 1977, 1979, 1923, 1932, 1937,
     1928, 1931, 1932, 1987, 1948, 1938, 1951, 1993, 3258, 3258,
     1939, 1999, 1956, 1964, 2002, 2004, 1969, 1962, 1951, 1951,
     1969, 1970, 1954, 1962, 2014, 1975, 2018, 2020, 2022, 2024,
     2026, 2028, 2030, 1987, 1982, 1986, 2002, 1985, 2038, 2040,
     2042, 2044, 2046, 2048, 2000, 2014, 2011, 2006, 2008, 2011,
     2001, 2008, 2019, 2020, 2027, 2009, 2024, 2016, 2050, 2029,
     2028, 2012, 3258, 2026, 2018, 2034, 2074, 2026, 2032, 2078,
     2039, 2026, 2041, 2038, 2039, 2030, 2031, 2031, 2033, 2053,
     2043, 2045, 2093, 2039, 2046, 2056, 2057, 2064, 2045, 2060,

     2052, 2086, 2104, 2065, 2049, 2108, 2065, 2057, 2112, 2114,
     2116, 2118, 2081, 3258, 2066, 2081, 2083, 2077, 2069, 2071,
     2073, 2112, 2093, 2099, 3258, 3258, 2079, 2093, 2080, 2095,
     2088, 2093, 2095, 2140, 2142, 2088, 2094, 2091, 2092, 2110,
     2099, 2114, 2152, 2156, 2109, 2158, 2160, 2121, 2122, 2107,
     2109, 2112, 2151, 2132, 2138, 2173, 2176, 2124, 2124, 2139,
     2181, 2183, 2136, 2142, 2189, 2148, 2154, 2138, 3258, 2154,
     2142, 2163, 3258, 2148, 2163, 2153, 2151, 2166, 2204, 2173,
     3258, 2166, 2167, 2164, 2210, 2157, 2163, 2214, 2162, 2161,
     2168, 2182, 2221, 2223, 2225, 2229, 2176, 2231, 2233, 2236,

     2240, 2182, 2242, 2189, 2211, 2247, 2198, 2213, 2204, 2202,
     2254, 2258, 2260, 2263, 2219, 2232, 2266, 2270, 2227, 2231,
     2228, 2220, 2235, 2259, 3258, 2241, 2222, 2232, 2225, 2256,
     2234, 2285, 2287, 2238, 3258, 2235, 2241, 2292, 2239, 2295,
     2297, 2262, 2256, 2247, 2255, 2304, 2307, 2260, 2311, 2313,
     2274, 2316, 2318, 2320, 2285, 2323, 2325, 2270, 2280, 2272,
     2303, 2332, 2336, 2284, 2288, 2340, 2342, 2344, 2291, 2297,
     2303, 3258, 2295, 2302, 2301, 2295, 2312, 2303, 2317, 2357,
     2333, 3258, 2318, 2362, 2364, 2366, 2368, 2325, 2313, 2372,
     2333, 2320, 2377, 2381, 2383, 2387, 2331, 2389, 2335, 2334,

     2352, 2343, 2356, 2369, 2399, 2401, 2403, 2405, 2354, 2355,
     2367, 2352, 2370, 2370, 2357, 2355, 2370, 2364, 2381, 2418,
     2421, 2423, 2375, 2385, 2427, 2429, 2402, 2432, 2436, 2438,
     2442, 2377, 2400, 2403, 2390, 2389, 2404, 2398, 2452, 2454,
     2456, 2414, 2402, 2422, 2419, 2406, 2407, 2431, 2423, 2420,
     2408, 2426, 2470, 2412, 2443, 2473, 2423, 2476, 2478, 2480,
     2441, 2428, 2429, 2485, 2446, 2443, 2431, 2491, 2452, 2449,
     2439, 2441, 3258, 3258, 2441, 3258, 2448, 2458, 2456, 2473,
     2451, 2448, 2505, 2452, 2508, 2510, 2512, 2514, 2460, 2518,
     2470, 2480, 2477, 2473, 2475, 3258, 2474, 2486, 3258, 2487,

     2479, 2476, 2489, 2535, 2537, 2539, 2541, 2543, 2545, 2493,
     2548, 2553, 2508, 2557, 2512, 2509, 2506, 2516, 2526, 2520,
     2509, 2521, 2516, 2568, 2570, 2573, 2575, 2532, 2578, 2544,
     2581, 2584, 2542, 2587, 2589, 2541, 2551, 2537, 2549, 2544,
     2547, 2598, 2550, 2560, 2605, 2547, 2607, 2609, 2611, 2613,
     2572, 2571, 2562, 2567, 2569, 2565, 2578, 2578, 2569, 2627,
     2629, 3258, 2582, 3258, 2581, 2577, 2633, 2635, 2594, 2638,
     2596, 2586, 2642, 2644, 2648, 2651, 2654, 2602, 2659, 2661,
     2601, 2663, 2667, 2669, 2671, 2675, 2609, 2678, 2618, 2682,
     2684, 2686, 2625, 3258, 2688, 2690, 2692, 2694, 2697, 3258,

     2709, 2714, 2719, 2724, 2729, 2734, 2739, 2744, 2749, 2753,
     2758, 2763
    } ;

static yyconst flex_int16_t yy_def[2113] =
    {   0,
     2101, 2101, 2102, 2102, 2103, 2103, 2104, 2104, 2105, 2105,
     2105, 2105, 2106, 2106, 2107, 2107, 2108, 2108, 2100, 2100,
     2100, 2100,   21, 2100,   23,   23,   23,   23, 2100, 2100,
       23,   23, 2100, 2109, 2100, 2110, 2111, 2112, 2100, 2100,
     2100, 2100, 2100, 2100,   21,   23,   23,   23,   23,   23,
       29, 2100,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2100,   23,   23,
       23, 2100,   23, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100,   23,   23, 2109, 2110,

     2111, 2112, 2100, 2100,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
       23, 2100,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2100,

     2100,   23,   23,   23,   23,   23,   23,   23, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,   23,
       23,   23, 2100, 2100,   23,   23,   23,   23,   23,   23,
       23,   23, 2100, 2100,   23,   23,   23,   23,   23,   23,
     2100, 2100,   23,   23,   23, 2100, 2100,   23,   23,   23,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100,   23,   23,   23,
       23,   23,   23,   23, 2100, 2100,   23,   23,   23,   23,
       23,   23,   23,   23, 2100, 2100,   23,   23, 2100, 2100,
       23, 2100, 2100,   23,   23, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2100, 2100,   23,   23,   23,   23,   23, 2100, 2100,   23,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100,   23,   23,   23,   23,   23,   23, 2100,
     2100,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2100, 2100,   23,   23,   23, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100,   23, 2100, 2100,   23,   23,   23, 2100, 2100,
       23,   23, 2100, 2100,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,   23, 2100,
     2100,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100,   23, 2100, 2100,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100,   23,   23,   23,   23,   23,   23,   23, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,   23,
       23,   23,   23, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

       23,   23,   23, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
       23,   23,   23, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,   23,   23,
       23, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100,   23,   23,   23, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100,   23,   23,   23, 2100, 2100, 2100,
     2100,   23,   23,   23,   23, 2100, 2100, 2100, 2100, 2100,
     2100,   23,   23,   23,   23, 2100, 2100, 2100, 2100,   23,
       23,   23, 2100, 2100,   23, 2100, 2100, 2100, 2100,    0,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100
    } ;

static yyconst flex_int16_t yy_nxt[3324] =
    {   0,
       20,   21,   21,   20,   22,   43,   24,   43,   25,   26,
       27,   28,   28,   28,   29,   40,   30,   20, 2100,   40,
       44,   41,   44, 2100,   31,   41,   96,   96,   48,   32,
       50,   50,   50,   48, 2100,   50,   50,   50, 2100,   69,
       69,   96,   96,   53,  109,  111, 2100,  117,   53,   70,
       70,   70, 2100,  118,  110,   69,   69,  872,  112,   71,
      122,   73,   73,  113,   33,   20,   21,   21,   20,   22,
      115,   24,  123,   25,   26,   27,   28,   28,   28,   29,
       71,   30,   20,  114,  151,   73,   73,  873,  152,   31,
      116,   69,   69,   48,   32,   50,   50,   50,  153,  874,

      154,   70,   70,   70,  119,   71,  170,  120,   96,   96,
      875,   71,  126,  126,  121,  157,  127,  127,  127,  162,
      158,  159,  214,  171,  215,  876,   71,  163,  178,   33,
       45,   45,   71,  179,   46,  877,   46,   47,   48,   49,
       50,   50,   50,   51,   46,   52,  878,   46,   46,   46,
       46,   46,   46,   53,   46,   46,   46,   46,   54,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   55,
       56,   46,   57,   58,   46,   59,   46,   46,   60,   61,
       62,   46,   46,   46,   46,   63,   64,   65,   66,   67,
       46,   46,   46,   46,   46,  189,  199,  199,  268,  269,

       46,   46,   46,   46,   46,   46, 2100,  203, 2100,  212,
      200,  190,  197,  213,   73,   73,   46,   69,   69,  198,
      879,   46,   48,  204,   50,   50,   50,   70,   70,   70,
      231,  223,   46,   46,   71,   46,   46,   71,   46,  224,
      353,   46,   46,   46,  354,  165,  242,  232,   46,   46,
       46,   46,   46,   74,  243,   71,  173,  309,   71,  166,
       75,  880,  167,  168,  169,  310,  174,   76,  127,  127,
      127,  881,  175,   69,   69,  218,  176,  239,   69,   69,
      219,  220,  240,  127,  127,  127,  337,  338,   77,   78,
       79,   80,   81,   82,   83,  246,   84,   85,  247,   86,

       87,   88,   89,   90,  889,   91,   92,   93,   94,   95,
      129,  130,  131,  132,  133,  134,  135,  890,  136,  137,
      226,  138,  139,  140,  141,  142,  234,  143,  144,  145,
      146,  147,  313,  252,  227,  314,  235,  228,  229,  230,
      253,  273,  236,  254,  255,  426,  237,  640,  274,  427,
      275,  286,  286,  199,  199,  299,  299,  489,  300,  321,
      301,  316,  316,  641,  342,  287,  322,  200,  519,  323,
      324,  343,  520,  344,  355,  356,  317,  372,  373,  397,
      397,  286,  286,  400,  400,  891,  374,  401,  401,  407,
      407,  409,  409,  398,  490,  287,  882,  299,  299,  892,

      300,  402,  301,  408,  883,  410,  416,  416,  420,  420,
      428,  428,  316,  316,  435,  435,  445,  445,  454,  454,
      417,  893,  421,  450,  451,  429,  604,  317,  467,  467,
      605,  446,  452,  455,  476,  476,  497,  497,  510,  447,
      511,  506,  506,  468,  897,  498,  512,  512,  719,  477,
      507,  499,  898,  397,  397,  899,  508,  532,  532,  456,
      533,  513,  534,  469,  720,  430,  431,  398,  400,  400,
      401,  401,  536,  536,  407,  407,  541,  541,  900,  478,
      409,  409,  542,  542,  402,  543,  572,  544,  408,  416,
      416,  901,  550,  550,  410,  551,  772,  552,  420,  420,

      773,  555,  555,  417,  556,  902,  557,  558,  558,  428,
      428,  903,  421,  565,  565,  435,  435,  580,  580,  445,
      445,  559,  904,  573,  429,  582,  582,  589,  589,  454,
      454,  593,  581,  594,  446,  591,  591,  595,  595,  600,
      600,  632,  590,  633,  455,  467,  467,  608,  608,  613,
      613,  711,  596,  712,  601,  476,  476,  617,  617,  782,
      468,  783,  497,  497,  614,  638,  638,  506,  506,  602,
      477,  498,  647,  647,  512,  512,  507,  499,  639,  536,
      536,  905,  508,  532,  532,  648,  533,  906,  534,  513,
      541,  541,  542,  542,  856,  543,  857,  544,  678,  678,

      680,  680,  682,  682,  550,  550,  907,  551,  908,  552,
      555,  555,  679,  556,  681,  557,  683,  558,  558,  691,
      691,  909,  692,  910,  693,  694,  694,  699,  699,  565,
      565,  559,  580,  580,  716,  716,  582,  582,  911,  695,
      717,  717,  700,  589,  589,  725,  725,  581,  591,  591,
      595,  595,  729,  729,  912,  718,  730,  730,  590,  600,
      600,  735,  735,  608,  608,  596,  613,  613,  746,  746,
      915,  731,  617,  617,  601,  767,  767,  638,  638,  776,
      776,  614,  647,  647,  790,  732,  809,  809,  791,  916,
      639,  793,  793,  804,  804,  648,  678,  678,  680,  680,

      794,  682,  682,  813,  813,  917,  795,  805,  810,  810,
      679,  811,  681,  812,  913,  683,  816,  816,  691,  691,
      914,  692,  918,  693,  694,  694,  820,  820,  921,  821,
      817,  822,  699,  699,  826,  826,  841,  841,  695,  716,
      716,  717,  717,  843,  843,  847,  864,  700,  922,  848,
      865,  842,  725,  725,  729,  729,  718,  730,  730,  854,
      854,  735,  735,  867,  867,  870,  870,  746,  746,  884,
      885,  886,  731,  767,  767,  894,  894,  923,  868,  926,
      871,  887,  776,  776,  895,  793,  793,  888,  919,  919,
      896,  924,  924,  927,  794,  928,  804,  804,  932,  943,

      795,  920,  944,  929,  929,  925,  930,  945,  931,  946,
      805,  933,  933,  809,  809,  935,  950,  936,  813,  813,
      937,  938,  816,  816,  951,  934,  939,  940,  956,  941,
      810,  810,  942,  811,  957,  812,  817,  947,  947,  960,
      948,  961,  949,  820,  820,  962,  821,  963,  822,  952,
      952,  954,  954,  826,  826,  958,  958,  964,  974,  965,
      967,  967,  975,  976,  953,  977,  955,  966,  978,  978,
      959,  969,  970,  971,  985,  968,  841,  841,  843,  843,
      979,  979,  986,  972,  981,  981,  983,  983,  987,  973,
      988,  842,  989,  990,  991,  980,  854,  854,  992,  982,

      993,  984,  994,  995,  996,  997,  997, 1000, 1001, 1002,
     1002, 1006, 1007, 1008,  867,  867, 1009, 1009, 1010, 1014,
      998,  870,  870, 1015, 1003, 1011, 1011, 1012, 1012,  868,
     1016, 1017, 1018, 1019, 1020, 1021,  871, 1004, 1022, 1023,
     1024, 1025, 1013, 1005, 1026, 1027,  999, 1028, 1029, 1030,
     1031, 1032, 1034, 1033, 1035,  894,  894, 1036, 1037, 1037,
     1039, 1040, 1041, 1042,  895, 1043, 1044, 1045, 1046, 1047,
      896, 1038, 1048, 1049, 1050, 1051, 1052, 1054, 1053, 1055,
     1056, 1057, 1058, 1059, 1059,  919,  919, 1060, 1061, 1062,
      924,  924, 1063, 1063, 1066, 1064, 1067, 1065,  920, 1068,

      929,  929, 1069,  930,  925,  931, 1070, 1071,  933,  933,
     1072, 1072, 1075, 1073, 1076, 1074, 1077, 1078, 1079, 1080,
     1084, 1082,  934, 1086, 1087, 1088,  947,  947, 1089,  948,
     1090,  949,  952,  952, 1091, 1091, 1093, 1081, 1083,  954,
      954, 1094, 1085, 1092, 1092,  958,  958,  953, 1095, 1095,
     1096, 1097, 1098, 1099,  955, 1100, 1101, 1102,  967,  967,
      959, 1103, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
     1111, 1113, 1112,  968,  978,  978,  979,  979, 1114, 1114,
      981,  981, 1115, 1115,  983,  983, 1116, 1116, 1117, 1118,
     1119,  980, 1120, 1121, 1122,  982, 1123, 1124, 1125,  984,

     1126, 1127, 1127, 1129, 1129,  997,  997, 1131, 1131, 1132,
     1133, 1134, 1137, 1135, 1002, 1002, 1128, 1138, 1130, 1139,
      998, 1136, 1136, 1140, 1141, 1009, 1009, 1142, 1146, 1003,
     1011, 1011, 1012, 1012, 1143, 1143, 1144, 1144, 1147, 1148,
     1149, 1150, 1151, 1152, 1153, 1154, 1155, 1013, 1156, 1157,
     1158, 1145, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
     1167, 1167, 1037, 1037, 1168, 1169, 1170, 1171, 1172, 1173,
     1174, 1175, 1176, 1177, 1178, 1038, 1179, 1180, 1181, 1182,
     1183, 1184, 1185, 1186, 1187, 1188, 1059, 1059, 1189, 1190,
     1063, 1063, 1191, 1064, 1192, 1065, 1193, 1194, 1195, 1196,

     1072, 1072, 1197, 1073, 1200, 1074, 1198, 1198, 1201, 1202,
     1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
     1199, 1091, 1091, 1092, 1092, 1213, 1095, 1095, 1214, 1215,
     1216, 1217, 1218, 1219, 1220, 1103, 1103, 1221, 1222, 1223,
     1224, 1225, 1226, 1227, 1228, 1229, 1230, 1114, 1114, 1115,
     1115, 1116, 1116, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
     1238, 1239, 1240, 1127, 1127, 1241, 1241, 1129, 1129, 1242,
     1242, 1131, 1131, 1243, 1244, 1245, 1246, 1247, 1128, 1136,
     1136, 1248, 1130, 1249, 1250, 1251, 1252, 1143, 1143, 1144,
     1144, 1253, 1253, 1254, 1254, 1256, 1257, 1258, 1259, 1260,

     1261, 1262, 1263, 1264, 1145, 1265, 1266, 1267, 1255, 1268,
     1269, 1270, 1271, 1272, 1273, 1274, 1275, 1167, 1167, 1276,
     1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
     1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
     1296, 1298, 1298, 1300, 1300, 1302, 1303, 1303, 1198, 1198,
     1306, 1306, 1307, 1297, 1308, 1299, 1309, 1301, 1310, 1310,
     1304, 1313, 1199, 1314, 1315, 1316, 1316, 1318, 1319, 1319,
     1322, 1325, 1311, 1323, 1323, 1326, 1327, 1328, 1329, 1317,
     1330, 1331, 1320, 1332, 1333, 1334, 1335, 1324, 1336, 1337,
     1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1312,

     1347, 1305, 1348, 1348, 1350, 1351, 1352, 1353, 1354, 1241,
     1241, 1242, 1242, 1321, 1355, 1356, 1357, 1349, 1358, 1359,
     1360, 1360, 1362, 1363, 1364, 1365, 1365, 1253, 1253, 1254,
     1254, 1367, 1367, 1368, 1369, 1361, 1370, 1370, 1373, 1377,
     1366, 1374, 1374, 1378, 1255, 1371, 1379, 1380, 1381, 1382,
     1375, 1372, 1383, 1384, 1385, 1386, 1376, 1387, 1388, 1388,
     1390, 1391, 1392, 1393, 1394, 1394, 1396, 1397, 1398, 1399,
     1400, 1401, 1402, 1389, 1403, 1404, 1405, 1406, 1407, 1395,
     1408, 1296, 1296, 1409, 1409, 1417, 1410, 1418, 1411, 1298,
     1298, 1412, 1412, 1300, 1300, 1297, 1413, 1413, 1414, 1414,

     1303, 1303, 1419, 1299, 1416, 1416, 1420, 1301, 1306, 1306,
     1310, 1310, 1415, 1422, 1304, 1421, 1421, 1423, 1424, 1426,
     1316, 1316, 1427, 1427, 1311, 1428, 1319, 1319, 1429, 1429,
     1430, 1431, 1323, 1323, 1317, 1432, 1432, 1433, 1434, 1434,
     1320, 1436, 1439, 1425, 1437, 1437, 1324, 1440, 1440, 1442,
     1442, 1444, 1447, 1435, 1445, 1445, 1448, 1449, 1450, 1438,
     1451, 1452, 1441, 1453, 1443, 1454, 1455, 1456, 1457, 1446,
     1458, 1458, 1460, 1461, 1348, 1348, 1462, 1462, 1463, 1464,
     1465, 1466, 1467, 1468, 1469, 1459, 1470, 1471, 1475, 1349,
     1472, 1472, 1360, 1360, 1474, 1474, 1476, 1477, 1365, 1365,

     1478, 1478, 1367, 1367, 1479, 1473, 1480, 1361, 1370, 1370,
     1483, 1481, 1481, 1366, 1484, 1485, 1485, 1371, 1374, 1374,
     1487, 1488, 1489, 1372, 1482, 1490, 1491, 1375, 1486, 1492,
     1493, 1494, 1495, 1376, 1496, 1388, 1388, 1497, 1497, 1498,
     1499, 1394, 1394, 1500, 1500, 1501, 1502, 1503, 1504, 1505,
     1389, 1506, 1507, 1508, 1509, 1510, 1395, 1409, 1409, 1511,
     1410, 1512, 1411, 1412, 1412, 1413, 1413, 1414, 1414, 1513,
     1513, 1516, 1514, 1517, 1515, 1416, 1416, 1518, 1518, 1520,
     1521, 1415, 1421, 1421, 1522, 1525, 1526, 1526, 1528, 1427,
     1427, 1519, 1529, 1429, 1429, 1523, 1530, 1531, 1531, 1533,

     1527, 1524, 1432, 1432, 1434, 1434, 1534, 1534, 1535, 1535,
     1538, 1532, 1437, 1437, 1537, 1537, 1440, 1440, 1541, 1435,
     1539, 1539, 1543, 1536, 1442, 1442, 1544, 1438, 1540, 1540,
     1545, 1441, 1445, 1445, 1542, 1542, 1546, 1547, 1548, 1443,
     1549, 1550, 1551, 1551, 1553, 1554, 1554, 1446, 1458, 1458,
     1556, 1556, 1557, 1557, 1559, 1462, 1462, 1552, 1560, 1560,
     1555, 1562, 1562, 1459, 1564, 1564, 1566, 1558, 1567, 1568,
     1569, 1570, 1571, 1561, 1472, 1472, 1563, 1572, 1572, 1565,
     1474, 1474, 1573, 1573, 1576, 1577, 1478, 1478, 1578, 1473,
     1579, 1579, 1481, 1481, 1580, 1581, 1584, 1574, 1583, 1583,

     1485, 1485, 1585, 1582, 1586, 1482, 1587, 1588, 1589, 1590,
     1591, 1592, 1593, 1486, 1497, 1497, 1594, 1500, 1500, 1595,
     1596, 1597, 1598, 1599, 1600, 1601, 1602, 1513, 1513, 1603,
     1514, 1604, 1515, 1518, 1518, 1605, 1605, 1575, 1606, 1606,
     1608, 1609, 1610, 1612, 1613, 1526, 1526, 1519, 1614, 1614,
     1615, 1616, 1607, 1617, 1531, 1531, 1611, 1618, 1618, 1527,
     1619, 1621, 1620, 1534, 1534, 1535, 1535, 1623, 1532, 1622,
     1622, 1537, 1537, 1539, 1539, 1624, 1540, 1540, 1625, 1625,
     1536, 1542, 1542, 1627, 1628, 1629, 1630, 1631, 1632, 1633,
     1634, 1551, 1551, 1626, 1635, 1635, 1636, 1554, 1554, 1637,

     1637, 1556, 1556, 1557, 1557, 1644, 1552, 1638, 1638, 1639,
     1639, 1645, 1555, 1560, 1560, 1641, 1641, 1646, 1558, 1562,
     1562, 1642, 1642, 1647, 1640, 1564, 1564, 1648, 1561, 1643,
     1643, 1649, 1649, 1654, 1563, 1572, 1572, 1573, 1573, 1655,
     1565, 1651, 1651, 1652, 1652, 1656, 1650, 1579, 1579, 1657,
     1658, 1659, 1574, 1583, 1583, 1660, 1661, 1662, 1653, 1663,
     1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673,
     1674, 1675, 1676, 1677, 1678, 1679, 1605, 1605, 1606, 1606,
     1680, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1614, 1614,
     1687, 1688, 1607, 1689, 1618, 1618, 1690, 1619, 1691, 1620,

     1622, 1622, 1692, 1625, 1625, 1693, 1693, 1694, 1695, 1696,
     1697, 1698, 1699, 1700, 1701, 1635, 1635, 1702, 1626, 1637,
     1637, 1638, 1638, 1639, 1639, 1703, 1703, 1641, 1641, 1642,
     1642, 1643, 1643, 1704, 1705, 1706, 1707, 1708, 1640, 1649,
     1649, 1709, 1709, 1651, 1651, 1652, 1652, 1710, 1710, 1711,
     1711, 1713, 1714, 1715, 1650, 1716, 1717, 1718, 1719, 1720,
     1653, 1721, 1722, 1723, 1712, 1724, 1725, 1726, 1727, 1728,
     1729, 1730, 1731, 1732, 1733, 1734, 1734, 1736, 1737, 1680,
     1680, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
     1735, 1747, 1748, 1749, 1693, 1693, 1750, 1751, 1752, 1753,

     1754, 1755, 1756, 1757, 1758, 1703, 1703, 1759, 1760, 1761,
     1761, 1763, 1764, 1709, 1709, 1710, 1710, 1711, 1711, 1765,
     1765, 1766, 1767, 1768, 1762, 1769, 1770, 1771, 1772, 1773,
     1774, 1776, 1712, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
     1784, 1734, 1734, 1785, 1785, 1786, 1787, 1788, 1775, 1789,
     1790, 1791, 1792, 1793, 1793, 1797, 1735, 1795, 1795, 1798,
     1798, 1800, 1800, 1802, 1803, 1804, 1805, 1794, 1806, 1807,
     1809, 1796, 1810, 1799, 1811, 1811, 1801, 1813, 1813, 1815,
     1816, 1817, 1761, 1761, 1818, 1818, 1819, 1808, 1820, 1812,
     1765, 1765, 1814, 1821, 1822, 1823, 1824, 1762, 1825, 1826,

     1827, 1828, 1829, 1830, 1831, 1832, 1832, 1834, 1835, 1836,
     1837, 1785, 1785, 1838, 1839, 1840, 1840, 1842, 1843, 1844,
     1833, 1845, 1793, 1793, 1846, 1846, 1795, 1795, 1848, 1841,
     1847, 1847, 1798, 1798, 1849, 1849, 1794, 1800, 1800, 1851,
     1796, 1850, 1850, 1852, 1852, 1854, 1799, 1855, 1856, 1856,
     1858, 1859, 1801, 1860, 1861, 1811, 1811, 1864, 1853, 1862,
     1862, 1813, 1813, 1857, 1863, 1863, 1865, 1866, 1866, 1868,
     1812, 1818, 1818, 1869, 1870, 1871, 1814, 1872, 1873, 1874,
     1875, 1876, 1867, 1877, 1878, 1879, 1832, 1832, 1880, 1880,
     1881, 1882, 1883, 1884, 1884, 1886, 1840, 1840, 1887, 1887,

     1888, 1833, 1889, 1890, 1891, 1846, 1846, 1885, 1847, 1847,
     1841, 1892, 1849, 1849, 1850, 1850, 1893, 1852, 1852, 1894,
     1894, 1895, 1895, 1897, 1856, 1856, 1898, 1898, 1899, 1900,
     1901, 1902, 1853, 1862, 1862, 1903, 1896, 1863, 1863, 1857,
     1904, 1866, 1866, 1905, 1905, 1906, 1906, 1908, 1909, 1910,
     1911, 1912, 1913, 1914, 1915, 1916, 1867, 1917, 1880, 1880,
     1907, 1918, 1919, 1884, 1884, 1920, 1920, 1921, 1921, 1887,
     1887, 1923, 1924, 1925, 1925, 1927, 1928, 1885, 1929, 1929,
     1932, 1922, 1894, 1894, 1895, 1895, 1933, 1926, 1931, 1931,
     1898, 1898, 1934, 1930, 1935, 1936, 1937, 1938, 1942, 1896,

     1905, 1905, 1906, 1906, 1939, 1939, 1940, 1940, 1943, 1944,
     1945, 1946, 1947, 1948, 1949, 1950, 1951, 1907, 1952, 1920,
     1920, 1941, 1921, 1921, 1953, 1953, 1954, 1955, 1925, 1925,
     1956, 1956, 1957, 1958, 1958, 1961, 1922, 1929, 1929, 1960,
     1960, 1962, 1926, 1931, 1931, 1963, 1964, 1959, 1965, 1966,
     1967, 1969, 1930, 1939, 1939, 1940, 1940, 1968, 1968, 1970,
     1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
     1941, 1953, 1953, 1981, 1956, 1956, 1982, 1958, 1958, 1983,
     1983, 1960, 1960, 1984, 1985, 1986, 1987, 1987, 1990, 1991,
     1992, 1959, 1968, 1968, 1993, 1994, 1995, 1996, 1997, 1998,

     1999, 1988, 2000, 2001, 2002, 2003, 1983, 1983, 2004, 2005,
     2005, 2007, 2007, 1987, 1987, 2009, 2009, 2010, 1989, 2011,
     2011, 2013, 2014, 2015, 2006, 2016, 2008, 2017, 1988, 2018,
     2019, 2020, 2021, 2022, 2012, 2023, 2024, 2024, 2005, 2005,
     2026, 2026, 2007, 2007, 2027, 2027, 2009, 2009, 2028, 2011,
     2011, 2025, 2030, 2006, 2029, 2029, 2033, 2008, 2031, 2031,
     2034, 2035, 2036, 2037, 2012, 2038, 2039, 2040, 2041, 2024,
     2024, 2042, 2042, 2032, 2026, 2026, 2027, 2027, 2043, 2029,
     2029, 2044, 2031, 2031, 2025, 2045, 2045, 2046, 2047, 2047,
     2049, 2049, 2051, 2052, 2053, 2054, 2055, 2032, 2056, 2042,

     2042, 2057, 2058, 2048, 2059, 2050, 2045, 2045, 2047, 2047,
     2060, 2060, 2049, 2049, 2061, 2061, 2062, 2063, 2064, 2065,
     2066, 2067, 2068, 2048, 2069, 2070, 2071, 2050, 2060, 2060,
     2061, 2061, 2072, 2073, 2074, 2074, 2076, 2076, 2078, 2079,
     2079, 2081, 2082, 2083, 2083, 2074, 2074, 2087, 2075, 2085,
     2085, 2077, 2076, 2076, 2080, 2086, 2086, 2084, 2089, 2075,
     2079, 2079, 2088, 2088, 2090, 2090, 2093, 2077, 2083, 2083,
     2092, 2092, 2085, 2085, 2094, 2080, 2086, 2086, 2091, 2088,
     2088, 2096, 2084, 2090, 2090, 2095, 2095, 2092, 2092, 2095,
     2095, 2097, 2097, 2097, 2097, 2099, 2099, 2091, 2099, 2099,

      869,  866,  863,  862,  861,  860, 2098,  859, 2098,   23,
       23,   23,   23,   23,   34,   34,   34,   34,   34,   36,
       36,   36,   36,   36,   37,   37,   37,   37,   37,   35,
       35,   35,   35,   35,   38,   38,   38,   38,   38,   39,
       39,   39,   39,   39,   42,   42,   42,   42,   42,   99,
       99,   99,   99,  100,  858,  100,  100,  100,  101,  101,
      855,  101,  101,  102,  102,  102,  853,  102,  852,  851,
      850,  849,  846,  845,  844,  840,  839,  838,  837,  836,
      835,  834,  833,  832,  831,  830,  829,  828,  827,  825,
      824,  823,  819,  818,  815,  814,  808,  807,  806,  803,

      802,  801,  800,  799,  798,  797,  796,  792,  789,  788,
      787,  786,  785,  784,  781,  780,  779,  778,  777,  775,
      774,  771,  770,  769,  768,  766,  765,  764,  763,  762,
      761,  760,  759,  758,  757,  756,  755,  754,  753,  752,
      751,  750,  749,  748,  747,  745,  744,  743,  742,  741,
      740,  739,  738,  737,  736,  734,  733,  728,  727,  726,
      724,  723,  722,  721,  715,  714,  713,  710,  709,  708,
      707,  706,  705,  704,  703,  702,  701,  698,  697,  696,
      690,  689,  688,  687,  686,  685,  684,  677,  676,  675,
      674,  673,  672,  671,  670,  669,  668,  667,  666,  665,

      664,  663,  662,  661,  660,  659,  658,  657,  656,  655,
      654,  653,  652,  651,  650,  649,  646,  645,  644,  643,
      642,  637,  636,  635,  634,  631,  630,  629,  628,  627,
      626,  625,  624,  623,  622,  621,  620,  619,  618,  616,
      615,  612,  611,  610,  609,  607,  606,  603,  599,  598,
      597,  592,  588,  587,  586,  585,  584,  583,  579,  578,
      577,  576,  575,  574,  571,  570,  569,  568,  567,  566,
      564,  563,  562,  561,  560,  554,  553,  549,  548,  547,
      546,  545,  540,  539,  538,  537,  535,  531,  530,  529,
      528,  527,  526,  525,  524,  523,  522,  521,  518,  517,

      516,  515,  514,  509,  505,  504,  503,  502,  501,  500,
      496,  495,  494,  493,  492,  491,  488,  487,  486,  485,
      484,  483,  482,  481,  480,  479,  475,  474,  473,  472,
      471,  470,  466,  465,  464,  463,  462,  461,  460,  459,
      458,  457,  453,  449,  448,  444,  443,  442,  441,  440,
      439,  438,  437,  436,  434,  433,  432,  425,  424,  423,
      422,  419,  418,  415,  414,  413,  412,  411,  406,  405,
      404,  403,  399,  396,  395,  394,  393,  392,  391,  390,
      389,  388,  387,  386,  385,  384,  383,  382,  381,  380,
      379,  378,  377,  376,  375,  371,  370,  369,  368,  367,

      366,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      352,  351,  350,  349,  348,  347,  346,  345,  341,  340,
      339,  336,  335,  334,  333,  332,  331,  330,  329,  328,
      327,  326,  325,  320,  319,  318,  315,  312,  311,  308,
      307,  306,  305,  304,  303,  302,  298,  297,  296,  295,
      294,  293,  292,  291,  290,  289,  288,  285,  284,  283,
      282,  281,  280,  279,  278,  277,  276,  272,  271,  270,
      267,  266,  265,  264,  263,  262,  261,  260,  259,  258,
      257,  256,  251,  250,  249,  248,  245,  244,  241,  238,
      233,  225,  222,  221,  217,  216,  211,  210,  209,  208,

      207,  206,  205,  202,  201,  196,  195,  194,  193,  192,
      191,  188,  187,  186,  185,  184,  183,  182,  181,  181,
      180,  177,  172,  164,  161,  160,  156,  155,  150,  149,
      148,  128,  125,  124,  108,  107,  106,  105,   98,   97,
       72,  104,  103,   98,   97,   72,   68,   68, 2100,   35,
       35,   35,   35,   35,   35,   35,   35,   19, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100
    } ;

static yyconst flex_int16_t yy_chk[3324] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,    0,    1,   16,   30,   30,   25,    1,
       25,   25,   25,   47,    0,   47,   47,   47,   51,   26,
       26,   52,   52,   25,   59,   60,    0,   63,   47,   26,
       26,   26,   51,   63,   59,   69,   69,  747,   60,   26,
       65,   73,   73,   61,    1,    2,    2,    2,    2,    2,
       62,    2,   65,    2,    2,    2,    2,    2,    2,    2,
       26,    2,    2,   61,   80,   28,   28,  748,   80,    2,
       62,   48,   48,   28,    2,   28,   28,   28,   81,  749,

       81,   48,   48,   48,   64,   28,   90,   64,   96,   96,
      752,   48,   71,   71,   64,   84,   71,   71,   71,   87,
       84,   84,  133,   90,  133,  753,   28,   87,   94,    2,
       21,   21,   48,   94,   21,  755,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,  756,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   23,   23,  111,  119,  119,  170,  170,

       23,   23,   23,   23,   23,   23,   23,  122,   23,  132,
      119,  111,  118,  132,   50,   50,   23,   70,   70,  118,
      757,   23,   50,  122,   50,   50,   50,   70,   70,   70,
      142,  139,   23,   23,   50,   23,   23,   70,   23,  139,
      244,   23,   23,   23,  244,   89,  148,  142,   23,   23,
       23,   23,   23,   29,  148,   50,   92,  209,   70,   89,
       29,  758,   89,   89,   89,  209,   92,   29,  126,  126,
      126,  759,   92,  127,  127,  136,   92,  146,  181,  181,
      136,  136,  146,  127,  127,  127,  231,  231,   29,   29,
       29,   29,   29,   29,   29,  151,   29,   29,  151,   29,

       29,   29,   29,   29,  763,   29,   29,   29,   29,   29,
       75,   75,   75,   75,   75,   75,   75,  764,   75,   75,
      141,   75,   75,   75,   75,   75,  144,   75,   75,   75,
       75,   75,  212,  157,  141,  212,  144,  141,  141,  141,
      157,  174,  144,  157,  157,  311,  144,  501,  174,  311,
      174,  187,  187,  199,  199,  200,  200,  361,  200,  218,
      200,  214,  214,  501,  235,  187,  218,  199,  384,  218,
      218,  235,  384,  235,  245,  245,  214,  261,  261,  284,
      284,  286,  286,  287,  287,  765,  261,  288,  288,  293,
      293,  294,  294,  284,  361,  286,  760,  299,  299,  766,

      299,  288,  299,  293,  760,  294,  303,  303,  306,  306,
      312,  312,  316,  316,  317,  317,  327,  327,  332,  332,
      303,  768,  306,  330,  330,  312,  464,  316,  343,  343,
      464,  327,  330,  332,  350,  350,  368,  368,  377,  327,
      377,  375,  375,  343,  772,  368,  378,  378,  584,  350,
      375,  368,  773,  397,  397,  774,  375,  398,  398,  332,
      398,  378,  398,  343,  584,  312,  312,  397,  400,  400,
      401,  401,  402,  402,  407,  407,  408,  408,  775,  350,
      409,  409,  410,  410,  401,  410,  437,  410,  407,  416,
      416,  777,  417,  417,  409,  417,  643,  417,  420,  420,

      643,  421,  421,  416,  421,  778,  421,  422,  422,  428,
      428,  779,  420,  429,  429,  435,  435,  444,  444,  445,
      445,  422,  780,  437,  428,  446,  446,  453,  453,  454,
      454,  457,  444,  457,  445,  455,  455,  458,  458,  462,
      462,  493,  453,  493,  454,  467,  467,  468,  468,  473,
      473,  576,  458,  576,  462,  476,  476,  477,  477,  653,
      467,  653,  497,  497,  473,  499,  499,  506,  506,  462,
      476,  497,  508,  508,  512,  512,  506,  497,  499,  536,
      536,  781,  506,  532,  532,  508,  532,  782,  532,  512,
      541,  541,  542,  542,  733,  542,  733,  542,  546,  546,

      547,  547,  548,  548,  550,  550,  783,  550,  784,  550,
      555,  555,  546,  555,  547,  555,  548,  558,  558,  559,
      559,  785,  559,  786,  559,  560,  560,  564,  564,  565,
      565,  558,  580,  580,  581,  581,  582,  582,  787,  560,
      583,  583,  564,  589,  589,  590,  590,  580,  591,  591,
      595,  595,  596,  596,  788,  583,  597,  597,  589,  600,
      600,  601,  601,  608,  608,  595,  613,  613,  614,  614,
      790,  597,  617,  617,  600,  637,  637,  638,  638,  646,
      646,  613,  647,  647,  660,  597,  679,  679,  660,  791,
      638,  662,  662,  672,  672,  647,  678,  678,  680,  680,

      662,  682,  682,  683,  683,  792,  662,  672,  681,  681,
      678,  681,  680,  681,  789,  682,  688,  688,  691,  691,
      789,  691,  794,  691,  694,  694,  695,  695,  796,  695,
      688,  695,  699,  699,  700,  700,  715,  715,  694,  716,
      716,  717,  717,  718,  718,  722,  741,  699,  798,  722,
      741,  715,  725,  725,  729,  729,  717,  730,  730,  731,
      731,  735,  735,  743,  743,  745,  745,  746,  746,  762,
      762,  762,  730,  767,  767,  769,  769,  799,  743,  801,
      745,  762,  776,  776,  769,  793,  793,  762,  795,  795,
      769,  800,  800,  802,  793,  803,  804,  804,  806,  811,

      793,  795,  812,  805,  805,  800,  805,  814,  805,  815,
      804,  807,  807,  809,  809,  808,  821,  808,  813,  813,
      808,  808,  816,  816,  822,  807,  808,  808,  825,  808,
      810,  810,  808,  810,  827,  810,  816,  817,  817,  829,
      817,  830,  817,  820,  820,  831,  820,  832,  820,  823,
      823,  824,  824,  826,  826,  828,  828,  833,  837,  834,
      835,  835,  838,  839,  823,  840,  824,  834,  842,  842,
      828,  836,  836,  836,  847,  835,  841,  841,  843,  843,
      844,  844,  848,  836,  845,  845,  846,  846,  849,  836,
      850,  841,  851,  852,  853,  844,  854,  854,  855,  845,

      856,  846,  857,  858,  859,  860,  860,  861,  862,  863,
      863,  864,  865,  866,  867,  867,  868,  868,  869,  873,
      860,  870,  870,  874,  863,  871,  871,  872,  872,  867,
      875,  876,  877,  878,  879,  880,  870,  863,  881,  882,
      883,  884,  872,  863,  885,  886,  860,  887,  888,  889,
      890,  891,  892,  891,  893,  894,  894,  895,  896,  896,
      897,  898,  899,  900,  894,  901,  902,  903,  904,  905,
      894,  896,  906,  907,  910,  911,  912,  913,  912,  914,
      915,  916,  917,  918,  918,  919,  919,  920,  921,  923,
      924,  924,  925,  925,  926,  925,  927,  925,  919,  928,

      929,  929,  930,  929,  924,  929,  931,  932,  933,  933,
      934,  934,  935,  934,  936,  934,  936,  937,  938,  939,
      941,  940,  933,  942,  945,  946,  947,  947,  948,  947,
      949,  947,  952,  952,  953,  953,  956,  939,  940,  954,
      954,  957,  941,  955,  955,  958,  958,  952,  959,  959,
      960,  961,  962,  963,  954,  964,  965,  966,  967,  967,
      958,  968,  968,  969,  970,  971,  972,  973,  974,  975,
      976,  977,  976,  967,  978,  978,  979,  979,  980,  980,
      981,  981,  982,  982,  983,  983,  984,  984,  985,  986,
      987,  979,  988,  989,  990,  981,  991,  992,  993,  983,

      994,  995,  995,  996,  996,  997,  997,  998,  998,  999,
     1000, 1001, 1004, 1001, 1002, 1002,  995, 1005,  996, 1006,
      997, 1003, 1003, 1007, 1008, 1009, 1009, 1010, 1015, 1002,
     1011, 1011, 1012, 1012, 1013, 1013, 1014, 1014, 1016, 1017,
     1018, 1019, 1020, 1021, 1022, 1023, 1024, 1012, 1025, 1026,
     1027, 1014, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
     1036, 1036, 1037, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
     1044, 1045, 1046, 1047, 1048, 1037, 1049, 1050, 1051, 1052,
     1053, 1054, 1055, 1056, 1057, 1058, 1059, 1059, 1060, 1061,
     1063, 1063, 1064, 1063, 1065, 1063, 1066, 1067, 1068, 1071,

     1072, 1072, 1075, 1072, 1077, 1072, 1076, 1076, 1078, 1079,
     1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1093,
     1076, 1091, 1091, 1092, 1092, 1094, 1095, 1095, 1096, 1097,
     1098, 1099, 1100, 1101, 1102, 1103, 1103, 1104, 1105, 1106,
     1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1114, 1115,
     1115, 1116, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
     1124, 1125, 1126, 1127, 1127, 1128, 1128, 1129, 1129, 1130,
     1130, 1131, 1131, 1132, 1133, 1134, 1135, 1137, 1127, 1136,
     1136, 1138, 1129, 1139, 1140, 1141, 1142, 1143, 1143, 1144,
     1144, 1145, 1145, 1146, 1146, 1147, 1148, 1149, 1150, 1151,

     1152, 1153, 1154, 1155, 1144, 1156, 1157, 1158, 1146, 1159,
     1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1167, 1168,
     1169, 1170, 1171, 1172, 1173, 1175, 1176, 1177, 1178, 1179,
     1180, 1181, 1182, 1183, 1184, 1186, 1187, 1188, 1189, 1193,
     1193, 1194, 1194, 1195, 1195, 1196, 1197, 1197, 1198, 1198,
     1199, 1199, 1200, 1193, 1201, 1194, 1202, 1195, 1203, 1203,
     1197, 1204, 1198, 1205, 1206, 1207, 1207, 1208, 1209, 1209,
     1210, 1212, 1203, 1211, 1211, 1213, 1214, 1215, 1216, 1207,
     1217, 1218, 1209, 1219, 1220, 1221, 1222, 1211, 1223, 1224,
     1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1203,

     1234, 1197, 1235, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
     1241, 1242, 1242, 1209, 1243, 1244, 1245, 1235, 1246, 1247,
     1248, 1248, 1249, 1250, 1251, 1252, 1252, 1253, 1253, 1254,
     1254, 1255, 1255, 1256, 1258, 1248, 1259, 1259, 1260, 1263,
     1252, 1262, 1262, 1265, 1254, 1259, 1266, 1267, 1268, 1269,
     1262, 1259, 1270, 1271, 1272, 1273, 1262, 1274, 1275, 1275,
     1276, 1277, 1279, 1280, 1281, 1281, 1282, 1283, 1284, 1285,
     1286, 1287, 1288, 1275, 1289, 1290, 1292, 1293, 1294, 1281,
     1295, 1296, 1296, 1297, 1297, 1305, 1297, 1307, 1297, 1298,
     1298, 1299, 1299, 1300, 1300, 1296, 1301, 1301, 1302, 1302,

     1303, 1303, 1308, 1298, 1304, 1304, 1309, 1300, 1306, 1306,
     1310, 1310, 1302, 1312, 1303, 1311, 1311, 1313, 1314, 1315,
     1316, 1316, 1317, 1317, 1310, 1318, 1319, 1319, 1320, 1320,
     1321, 1322, 1323, 1323, 1316, 1324, 1324, 1325, 1326, 1326,
     1319, 1327, 1329, 1314, 1328, 1328, 1323, 1330, 1330, 1331,
     1331, 1332, 1334, 1326, 1333, 1333, 1335, 1336, 1337, 1328,
     1338, 1339, 1330, 1340, 1331, 1341, 1342, 1343, 1344, 1333,
     1345, 1345, 1346, 1347, 1348, 1348, 1349, 1349, 1350, 1351,
     1352, 1353, 1354, 1355, 1356, 1345, 1357, 1358, 1362, 1348,
     1359, 1359, 1360, 1360, 1361, 1361, 1363, 1364, 1365, 1365,

     1366, 1366, 1367, 1367, 1368, 1359, 1371, 1360, 1370, 1370,
     1373, 1372, 1372, 1365, 1375, 1376, 1376, 1370, 1374, 1374,
     1377, 1378, 1379, 1370, 1372, 1380, 1381, 1374, 1376, 1382,
     1383, 1384, 1385, 1374, 1387, 1388, 1388, 1389, 1389, 1390,
     1393, 1394, 1394, 1395, 1395, 1399, 1400, 1401, 1402, 1403,
     1388, 1404, 1405, 1406, 1407, 1408, 1394, 1409, 1409, 1410,
     1409, 1411, 1409, 1412, 1412, 1413, 1413, 1414, 1414, 1415,
     1415, 1417, 1415, 1418, 1415, 1416, 1416, 1419, 1419, 1420,
     1422, 1414, 1421, 1421, 1423, 1424, 1425, 1425, 1426, 1427,
     1427, 1419, 1428, 1429, 1429, 1423, 1430, 1431, 1431, 1433,

     1425, 1423, 1432, 1432, 1434, 1434, 1435, 1435, 1436, 1436,
     1439, 1431, 1437, 1437, 1438, 1438, 1440, 1440, 1444, 1434,
     1441, 1441, 1447, 1436, 1442, 1442, 1448, 1437, 1443, 1443,
     1449, 1440, 1445, 1445, 1446, 1446, 1450, 1451, 1452, 1442,
     1453, 1454, 1455, 1455, 1456, 1457, 1457, 1445, 1458, 1458,
     1459, 1459, 1460, 1460, 1461, 1462, 1462, 1455, 1463, 1463,
     1457, 1464, 1464, 1458, 1465, 1465, 1466, 1460, 1467, 1468,
     1469, 1470, 1471, 1463, 1472, 1472, 1464, 1473, 1473, 1465,
     1474, 1474, 1475, 1475, 1476, 1477, 1478, 1478, 1479, 1472,
     1480, 1480, 1481, 1481, 1482, 1483, 1486, 1475, 1484, 1484,

     1485, 1485, 1488, 1483, 1489, 1481, 1490, 1491, 1492, 1493,
     1494, 1495, 1496, 1485, 1497, 1497, 1498, 1500, 1500, 1501,
     1502, 1503, 1504, 1505, 1508, 1509, 1510, 1513, 1513, 1516,
     1513, 1517, 1513, 1518, 1518, 1519, 1519, 1475, 1520, 1520,
     1521, 1522, 1523, 1524, 1525, 1526, 1526, 1518, 1527, 1527,
     1528, 1529, 1520, 1530, 1531, 1531, 1523, 1532, 1532, 1526,
     1532, 1533, 1532, 1534, 1534, 1535, 1535, 1538, 1531, 1536,
     1536, 1537, 1537, 1539, 1539, 1538, 1540, 1540, 1541, 1541,
     1535, 1542, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549,
     1550, 1551, 1551, 1541, 1552, 1552, 1553, 1554, 1554, 1555,

     1555, 1556, 1556, 1557, 1557, 1566, 1551, 1558, 1558, 1559,
     1559, 1567, 1554, 1560, 1560, 1561, 1561, 1568, 1557, 1562,
     1562, 1563, 1563, 1569, 1559, 1564, 1564, 1570, 1560, 1565,
     1565, 1571, 1571, 1576, 1562, 1572, 1572, 1573, 1573, 1577,
     1564, 1574, 1574, 1575, 1575, 1578, 1571, 1579, 1579, 1580,
     1581, 1582, 1573, 1583, 1583, 1584, 1585, 1586, 1575, 1587,
     1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
     1598, 1599, 1601, 1602, 1603, 1604, 1605, 1605, 1606, 1606,
     1607, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1614,
     1615, 1616, 1606, 1617, 1618, 1618, 1621, 1618, 1623, 1618,

     1622, 1622, 1624, 1625, 1625, 1626, 1626, 1627, 1628, 1629,
     1630, 1631, 1632, 1633, 1634, 1635, 1635, 1636, 1625, 1637,
     1637, 1638, 1638, 1639, 1639, 1640, 1640, 1641, 1641, 1642,
     1642, 1643, 1643, 1644, 1645, 1646, 1647, 1648, 1639, 1649,
     1649, 1650, 1650, 1651, 1651, 1652, 1652, 1653, 1653, 1654,
     1654, 1655, 1656, 1657, 1649, 1658, 1659, 1660, 1661, 1662,
     1652, 1663, 1664, 1665, 1654, 1666, 1667, 1668, 1669, 1670,
     1671, 1672, 1674, 1675, 1676, 1677, 1677, 1678, 1679, 1680,
     1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,
     1677, 1690, 1691, 1692, 1693, 1693, 1694, 1695, 1696, 1697,

     1698, 1699, 1700, 1701, 1702, 1703, 1703, 1704, 1705, 1706,
     1706, 1707, 1708, 1709, 1709, 1710, 1710, 1711, 1711, 1712,
     1712, 1713, 1715, 1716, 1706, 1717, 1718, 1719, 1720, 1721,
     1722, 1723, 1711, 1724, 1727, 1728, 1729, 1730, 1731, 1732,
     1733, 1734, 1734, 1735, 1735, 1736, 1737, 1738, 1722, 1739,
     1740, 1741, 1742, 1743, 1743, 1745, 1734, 1744, 1744, 1746,
     1746, 1747, 1747, 1748, 1749, 1750, 1751, 1743, 1752, 1753,
     1754, 1744, 1755, 1746, 1756, 1756, 1747, 1757, 1757, 1758,
     1759, 1760, 1761, 1761, 1762, 1762, 1763, 1753, 1764, 1756,
     1765, 1765, 1757, 1766, 1767, 1768, 1770, 1761, 1771, 1772,

     1774, 1775, 1776, 1777, 1778, 1779, 1779, 1780, 1782, 1783,
     1784, 1785, 1785, 1786, 1787, 1788, 1788, 1789, 1790, 1791,
     1779, 1792, 1793, 1793, 1794, 1794, 1795, 1795, 1797, 1788,
     1796, 1796, 1798, 1798, 1799, 1799, 1793, 1800, 1800, 1802,
     1795, 1801, 1801, 1803, 1803, 1804, 1798, 1805, 1806, 1806,
     1807, 1808, 1800, 1809, 1810, 1811, 1811, 1815, 1803, 1812,
     1812, 1813, 1813, 1806, 1814, 1814, 1816, 1817, 1817, 1819,
     1811, 1818, 1818, 1820, 1821, 1822, 1813, 1823, 1824, 1826,
     1827, 1828, 1817, 1829, 1830, 1831, 1832, 1832, 1833, 1833,
     1834, 1836, 1837, 1838, 1838, 1839, 1840, 1840, 1841, 1841,

     1842, 1832, 1843, 1844, 1845, 1846, 1846, 1838, 1847, 1847,
     1840, 1848, 1849, 1849, 1850, 1850, 1851, 1852, 1852, 1853,
     1853, 1854, 1854, 1855, 1856, 1856, 1857, 1857, 1858, 1859,
     1860, 1861, 1852, 1862, 1862, 1864, 1854, 1863, 1863, 1856,
     1865, 1866, 1866, 1867, 1867, 1868, 1868, 1869, 1870, 1871,
     1873, 1874, 1875, 1876, 1877, 1878, 1866, 1879, 1880, 1880,
     1868, 1881, 1883, 1884, 1884, 1885, 1885, 1886, 1886, 1887,
     1887, 1888, 1889, 1890, 1890, 1891, 1892, 1884, 1893, 1893,
     1897, 1886, 1894, 1894, 1895, 1895, 1899, 1890, 1896, 1896,
     1898, 1898, 1900, 1893, 1901, 1902, 1903, 1904, 1909, 1895,

     1905, 1905, 1906, 1906, 1907, 1907, 1908, 1908, 1910, 1911,
     1912, 1913, 1914, 1915, 1916, 1917, 1918, 1906, 1919, 1920,
     1920, 1908, 1921, 1921, 1922, 1922, 1923, 1924, 1925, 1925,
     1926, 1926, 1927, 1928, 1928, 1932, 1921, 1929, 1929, 1930,
     1930, 1933, 1925, 1931, 1931, 1934, 1935, 1928, 1936, 1937,
     1938, 1942, 1929, 1939, 1939, 1940, 1940, 1941, 1941, 1943,
     1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1954,
     1940, 1953, 1953, 1955, 1956, 1956, 1957, 1958, 1958, 1959,
     1959, 1960, 1960, 1961, 1962, 1963, 1964, 1964, 1965, 1966,
     1967, 1958, 1968, 1968, 1969, 1970, 1971, 1972, 1975, 1977,

     1978, 1964, 1979, 1980, 1981, 1982, 1983, 1983, 1984, 1985,
     1985, 1986, 1986, 1987, 1987, 1988, 1988, 1989, 1964, 1990,
     1990, 1991, 1992, 1993, 1985, 1994, 1986, 1995, 1987, 1997,
     1998, 2000, 2001, 2002, 1990, 2003, 2004, 2004, 2005, 2005,
     2006, 2006, 2007, 2007, 2008, 2008, 2009, 2009, 2010, 2011,
     2011, 2004, 2013, 2005, 2012, 2012, 2015, 2007, 2014, 2014,
     2016, 2017, 2018, 2019, 2011, 2020, 2021, 2022, 2023, 2024,
     2024, 2025, 2025, 2014, 2026, 2026, 2027, 2027, 2028, 2029,
     2029, 2030, 2031, 2031, 2024, 2032, 2032, 2033, 2034, 2034,
     2035, 2035, 2036, 2037, 2038, 2039, 2040, 2031, 2041, 2042,

     2042, 2043, 2044, 2034, 2046, 2035, 2045, 2045, 2047, 2047,
     2048, 2048, 2049, 2049, 2050, 2050, 2051, 2052, 2053, 2054,
     2055, 2056, 2057, 2047, 2058, 2059, 2063, 2049, 2060, 2060,
     2061, 2061, 2065, 2066, 2067, 2067, 2068, 2068, 2069, 2070,
     2070, 2071, 2072, 2073, 2073, 2074, 2074, 2078, 2067, 2075,
     2075, 2068, 2076, 2076, 2070, 2077, 2077, 2073, 2081, 2074,
     2079, 2079, 2080, 2080, 2082, 2082, 2087, 2076, 2083, 2083,
     2084, 2084, 2085, 2085, 2089, 2079, 2086, 2086, 2082, 2088,
     2088, 2093, 2083, 2090, 2090, 2091, 2091, 2092, 2092, 2095,
     2095, 2096, 2096, 2097, 2097, 2098, 2098, 2090, 2099, 2099,

      744,  742,  740,  739,  738,  737, 2096,  736, 2097, 2101,
     2101, 2101, 2101, 2101, 2102, 2102, 2102, 2102, 2102, 2103,
     2103, 2103, 2103, 2103, 2104, 2104, 2104, 2104, 2104, 2105,
     2105, 2105, 2105, 2105, 2106, 2106, 2106, 2106, 2106, 2107,
     2107, 2107, 2107, 2107, 2108, 2108, 2108, 2108, 2108, 2109,
     2109, 2109, 2109, 2110,  734, 2110, 2110, 2110, 2111, 2111,
      732, 2111, 2111, 2112, 2112, 2112,  728, 2112,  727,  726,
      724,  723,  721,  720,  719,  714,  713,  712,  711,  710,
      709,  708,  707,  706,  705,  704,  703,  702,  701,  698,
      697,  696,  693,  692,  687,  684,  677,  674,  673,  671,

      670,  669,  668,  667,  666,  665,  663,  661,  659,  658,
      657,  656,  655,  654,  652,  651,  650,  649,  648,  645,
      644,  642,  641,  640,  639,  635,  634,  633,  632,  631,
      630,  629,  628,  627,  626,  625,  624,  623,  622,  621,
      620,  619,  618,  616,  615,  612,  611,  610,  609,  607,
      606,  605,  604,  603,  602,  599,  598,  594,  593,  592,
      588,  587,  586,  585,  579,  578,  577,  575,  574,  573,
      572,  571,  570,  569,  568,  567,  566,  563,  562,  561,
      557,  556,  554,  553,  552,  551,  549,  545,  544,  543,
      540,  539,  538,  537,  535,  531,  530,  529,  528,  527,

      526,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      516,  515,  514,  511,  510,  509,  507,  505,  504,  503,
      502,  498,  496,  495,  494,  492,  491,  490,  489,  488,
      487,  486,  485,  484,  483,  481,  480,  479,  478,  475,
      474,  472,  471,  470,  469,  466,  465,  463,  461,  460,
      459,  456,  452,  451,  450,  449,  448,  447,  443,  442,
      441,  440,  439,  438,  436,  434,  433,  432,  431,  430,
      427,  426,  425,  424,  423,  419,  418,  415,  414,  413,
      412,  411,  406,  405,  404,  403,  399,  396,  395,  394,
      393,  392,  390,  389,  388,  387,  386,  385,  383,  382,

      381,  380,  379,  376,  374,  373,  372,  371,  370,  369,
      367,  366,  365,  364,  363,  362,  360,  359,  358,  357,
      356,  355,  354,  353,  352,  351,  349,  348,  347,  346,
      345,  344,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  331,  329,  328,  326,  325,  324,  323,  322,
      321,  320,  319,  318,  315,  314,  313,  310,  309,  308,
      307,  305,  304,  302,  298,  297,  296,  295,  292,  291,
      290,  289,  285,  283,  282,  281,  280,  279,  278,  277,
      276,  275,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  265,  264,  263,  262,  260,  259,  258,  257,  256,

      255,  254,  253,  252,  251,  250,  249,  248,  247,  246,
      243,  242,  241,  240,  239,  238,  237,  236,  234,  233,
      232,  230,  229,  228,  227,  226,  225,  224,  223,  222,
      221,  220,  219,  217,  216,  215,  213,  211,  210,  207,
      206,  205,  204,  203,  202,  201,  198,  197,  196,  195,
      194,  193,  192,  191,  190,  189,  188,  186,  185,  184,
      183,  180,  179,  178,  177,  176,  175,  173,  172,  171,
      169,  168,  167,  166,  165,  164,  163,  162,  161,  160,
      159,  158,  156,  155,  154,  152,  150,  149,  147,  145,
      143,  140,  138,  137,  135,  134,  131,  130,  129,  128,

      125,  124,  123,  121,  120,  117,  116,  115,  114,  113,
      112,  110,  109,  108,  107,  106,  105,  103,   98,   97,
       95,   93,   91,   88,   86,   85,   83,   82,   79,   78,
       77,   74,   67,   66,   58,   57,   56,   55,   54,   53,
       49,   44,   41,   32,   31,   27,   24,   22,   19,   14,
       13,    8,    7,    6,    5,    4,    3, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[261] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
/* $Id$ */
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2011, Horand Gassmann, Jun Ma, Kipp Martin,
 * Dalhousie University, Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 15 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream>  

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 

//#define PARSERDEBUG
#ifdef PARSERDEBUG

	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
#include "OSoLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;









#line 103 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 1992 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osollex_init (yyscan_t* scanner);

int osollex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 113 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"


 
#line 2248 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2101 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3258 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 120 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 122 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 123 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 125 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 141 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 143 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 144 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 145 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 146 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 147 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 148 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 149 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 150 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 151 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 152 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 153 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 154 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 155 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 156 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 157 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 158 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 159 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 160 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 161 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 162 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 163 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 164 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 165 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LBDUALVALUEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 166 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UBDUALVALUEATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 170 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 171 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 172 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 173 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 174 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 175 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 176 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 177 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 178 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 179 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 180 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 181 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 182 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 183 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 184 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 185 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 186 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 187 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 188 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 189 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 190 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 191 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 192 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 193 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 194 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 195 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 196 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 197 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 198 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 199 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 200 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 201 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 202 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 203 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 204 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 205 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 206 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 207 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 208 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 209 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 210 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 211 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 212 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 213 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 215 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 216 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 217 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 218 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 219 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 220 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 222 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 223 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 224 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 226 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 227 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 228 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 230 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 231 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 233 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 234 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 236 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 237 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 239 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 240 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 242 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 243 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 245 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 246 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 249 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 250 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 251 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 252 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 253 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 254 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 255 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 256 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 257 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 258 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 259 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 260 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 261 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 262 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 263 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 264 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 265 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 266 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 267 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 268 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 269 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 270 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 271 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 272 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 274 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 275 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 276 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 277 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 278 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 279 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 280 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 281 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 282 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 283 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 284 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 285 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 287 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 288 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 290 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 291 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 292 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 293 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 294 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 295 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 296 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 297 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 298 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 299 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 300 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 301 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 302 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 303 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 304 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 305 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 306 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 307 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 308 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 309 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 310 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 311 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 312 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 313 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 314 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 315 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 316 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 317 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 318 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 319 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 320 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 321 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 322 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 323 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 326 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 327 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 328 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 329 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 330 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 331 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 332 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 333 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 334 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 335 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 336 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 337 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 338 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 339 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 340 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 341 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 342 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 343 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 344 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 345 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 346 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 347 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 348 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 349 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 350 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 351 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 352 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 353 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 354 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 355 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 356 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 357 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 358 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 359 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 360 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 361 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 362 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 363 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 364 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 365 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 366 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 367 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 368 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 369 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 370 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 371 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 372 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 373 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 374 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 375 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
/* The <item> element and the children of the option header are treated specially because they may legitimately contain special characters */
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 380 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 381 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 382 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 383 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 385 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 386 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 387 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 388 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 390 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 391 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 392 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 393 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 395 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 396 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 397 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 398 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 400 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 401 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 402 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 403 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 405 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 406 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 407 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 408 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* environments and comments */
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 412 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 413 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 415 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 249:
#line 417 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 417 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 418 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 420 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 253:
#line 422 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 422 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 423 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 426 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 427 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 428 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 432 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 444 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 3921 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osolrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2101 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2101 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2100);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osollex_init_extra has the same functionality as osollex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osolalloc in
 * the yyextra field.
 */

int osollex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osolset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osolset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 444 "/home/gus/research/OS/trunk-temp/OS/src/OSParsers/OSParseosol.l"





