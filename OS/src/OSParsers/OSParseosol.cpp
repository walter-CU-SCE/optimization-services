#line 2 "OSParseosol.cpp"

#line 4 "OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osollex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 187
#define YY_END_OF_BUFFER 188
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1655] =
    {   0,
        0,    0,  185,  185,  183,  183,  184,  184,    0,    0,
        0,    0,    0,    0,    0,    0,  188,  186,    1,    1,
        1,    2,  174,  174,    5,  174,    4,  186,    3,  174,
      185,  187,  183,  184,  176,  177,  176,  180,  181,  180,
      174,  174,  174,    0,    3,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,    5,    4,  174,
        5,  174,    6,    0,    0,  179,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  174,  185,  183,  184,    0,  182,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,    0,  174,    5,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    5,  178,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,    0,  174,  174,  174,  174,  174,    5,
      175,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  166,    0,    0,    0,

        0,    0,    0,    0,    0,   66,    0,    0,    0,  158,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  150,    0,    0,    0,  152,  174,  174,  174,  174,
      174,   23,  174,  174,  174,  174,  174,  174,  174,    0,
       40,   41,  174,  174,  174,  174,  174,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  112,

        0,    0,    0,    0,    0,    0,    0,  102,    0,    0,
      174,  174,  174,    0,  174,   23,  174,  174,  174,  174,
        0,  174,  174,  174,  174,  174,    0,  174,  174,    0,
      174,    0,  167,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   67,    0,    0,    0,    0,    0,
        0,    0,  159,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  151,    0,    0,    0,
        0,    0,  153,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   78,    0,    0,    0,    0,    0,
        0,    0,   58,   92,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  174,  174,    0,   38,
       39,  174,  174,  174,  174,    0,   30,   31,  174,  174,
      174,  174,    0,   48,   49,  174,    0,   36,   37,  174,
        0,  174,  167,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   67,    0,    0,    0,    0,    0,    0,
      159,    0,    0,    0,   59,    0,    0,    0,    0,  113,
        0,    0,    0,    0,    0,    0,  151,    0,    0,    0,
      103,    0,  153,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   62,    0,    0,  174,  174,  174,  174,  174,
      174,  174,  174,    0,  174,   24,  174,  174,    0,   32,
       33,  174,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   79,    0,    0,    0,    0,    0,
        0,    0,   59,    0,   93,    0,    0,    0,  113,    0,
        0,    0,    0,    0,    0,    0,    0,  103,    0,    0,
        0,   88,    0,    0,    0,   60,    0,    0,    0,    0,
        0,   82,  104,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  136,    0,    0,   64,    0,    0,
        0,    0,    0,  174,  174,  174,  174,    0,  174,  174,

      174,    0,   44,   45,   24,  174,  174,    0,  174,  174,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   79,    0,    0,    0,    0,    0,    0,    0,    0,
       93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   63,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       86,  124,    0,    0,    0,    0,    0,    0,    0,    0,
       84,    0,  174,    0,  174,  174,    0,   50,   51,  174,
      174,    0,  174,  174,  174,  174,  174,  174,  174,    0,

       52,   53,  174,  174,    0,    0,   89,    0,    0,    0,
        0,    0,   61,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   83,    0,  105,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  137,    0,
        0,    0,    0,   65,    0,    0,    0,    0,    0,   63,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  138,    0,   46,   47,  174,
      174,  174,    0,   42,   43,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,    0,  174,    0,    0,
       89,    0,    0,    0,    0,   61,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   83,  105,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   87,    0,
      125,  137,    0,    0,    0,    0,   65,    0,    0,    0,
        0,    0,    0,   85,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  154,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   70,    0,    0,    0,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,    0,   54,   55,    0,   56,   57,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   87,  125,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   85,    0,  139,  162,    0,    0,    0,  118,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   98,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   72,    0,    0,    0,  174,    0,  174,   25,
      174,  174,   21,  174,  174,  174,   19,  174,  174,  174,
      174,  174,   17,  174,  174,   16,  174,  174,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  155,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   71,
        0,    0,    0,  139,  108,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   74,    0,  100,   94,    0,
       68,   90,    0,    0,    0,    0,    0,    0,  172,    0,
        0,    0,   34,   35,   25,  174,    0,   21,  174,  174,
       19,  174,  174,  174,  174,  174,   17,  174,   16,  174,
      174,    0,  163,    0,    0,    0,    0,  119,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       99,    0,    0,  155,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   73,   71,    0,    0,    0,    0,  132,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   96,
        0,    0,    0,    0,  114,    0,  170,    0,    0,    0,
       26,   27,  174,  174,  174,  174,  174,  174,  174,  174,
        9,  174,  174,  174,  174,    0,  163,    0,  109,    0,
        0,  119,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   75,    0,    0,  101,   99,    0,   95,    0,    0,
       69,    0,   91,    0,    0,    0,    0,    0,    0,   73,
        0,  173,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   80,    0,  174,  174,    8,  174,  174,  174,  174,
      174,  174,    9,  174,  174,  174,    0,   28,   29,  109,
        0,    0,    0,  133,    0,    0,    0,    0,    0,    0,
        0,    0,   75,    0,  101,   95,    0,   97,   69,   91,
        0,    0,    0,    0,    0,  115,    0,  173,    0,  171,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  134,    0,    0,    0,  174,
        8,  174,  174,  174,  174,  174,  174,  174,  174,  174,
        0,    0,  133,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   97,    0,    0,    0,    0,  115,    0,  171,
        0,   81,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  122,   76,    0,    0,    0,    0,    0,    0,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  135,    0,    0,   81,    0,    0,  116,
        0,    0,  168,    0,    0,    0,    0,    0,    0,  128,
        0,    0,    0,  174,  174,  174,  174,  174,  174,  174,
       10,  174,   11,  174,  174,   12,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  123,    0,   77,    0,

        0,    0,  135,    0,    0,    0,    0,  144,    0,    0,
        0,    0,    0,    0,    0,    0,  106,    0,  174,  174,
       13,  174,  174,  174,  174,   10,   11,  174,   12,    0,
        0,  117,    0,    0,    0,  169,    0,    0,    0,    0,
      123,   77,    0,    0,    0,  129,    0,    0,    0,  130,
        0,    0,    0,    0,    0,    0,    0,  110,    0,  174,
       14,   13,  174,  174,  174,  174,  174,    0,  117,    0,
      145,    0,  169,    0,    0,    0,    0,    0,    0,  129,
        0,    0,  107,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   14,  174,  174,  174,    7,  174,  174,    0,

      131,  145,    0,    0,    0,    0,    0,    0,    0,    0,
      111,  107,    0,    0,    0,    0,  140,    0,    0,    0,
        0,  174,  174,    7,  174,  174,   22,  131,    0,    0,
        0,    0,    0,    0,    0,  111,    0,    0,  160,  156,
        0,  120,    0,    0,    0,  174,  174,  174,   22,    0,
        0,    0,    0,  141,    0,    0,    0,    0,    0,  164,
        0,    0,  126,    0,  174,  174,  174,    0,    0,  161,
        0,  157,  141,    0,    0,  121,    0,    0,    0,    0,
        0,    0,  174,  174,  174,    0,  165,  161,  157,    0,
      121,    0,    0,  127,    0,    0,    0,    0,  174,  174,

      174,  165,    0,    0,  127,    0,    0,    0,    0,  174,
      174,  174,    0,    0,    0,  142,    0,  148,  174,  174,
      174,    0,    0,    0,    0,  174,  174,  174,   15,    0,
      143,    0,    0,  149,    0,  174,  174,   18,   15,  143,
        0,  149,    0,  174,   20,   18,    0,  146,   20,    0,
        0,  147,  147,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    7,    1,    1,    8,    1,
        1,    7,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    7,    1,   14,
       15,   16,   17,    7,   18,   19,   20,   21,   22,   23,
        7,    7,   24,   25,   26,   27,   28,   29,   30,   31,
        7,   32,   33,   34,   35,   36,   37,    7,    7,    7,
        1,    7,    1,    1,    7,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,    1,   64,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    2,    2,    2,    1,    3,    2,    4,    1,    2,
        2,    2,    2,    2,    1,    5,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    1
    } ;

static yyconst flex_int16_t yy_base[1666] =
    {   0,
        0,   64, 3399, 3398, 3407, 3406, 3403, 3402,    0,    0,
        0,    0,   15,   16,    4,   17, 3409, 3416,  127,  185,
        0, 3416,   13,   17,   29,   21,   41,  240, 3416,   24,
        0, 3416,    0,    0, 3416, 3416, 3398, 3416, 3416, 3391,
        0,   30,   33,   31, 3416,   44,   45,   70,   77,   76,
       81,   80,   84,   85,   92,   95,   88,  137,  150,   98,
      180,  194, 3416, 3396,  260, 3416, 3353,   43, 3358, 3361,
     3351, 3349, 3354,   67,   99,    1, 3357,  171, 3336, 3341,
     3358,  146,    0,    0,    0, 3379, 3416,  198,  184,  166,
      201,  205,  223,  105,  216,  232,  235,  306,  258,  240,

      249,  255,  307,  310, 3381,  254,  263, 3383, 3340,   61,
     3345, 3348, 3338, 3336, 3341,   77,  272,  110, 3344,  292,
     3323, 3328, 3345, 3331, 3328, 3325, 3330, 3327,  285, 3338,
     3336, 3314, 3323, 3326, 3315, 3319, 3325, 3312,   79, 3316,
     3313, 3321, 3310,  125, 3308, 3310, 3320, 3306,  319, 3416,
      323,  329,  332,  333,  364,  336,  347,  342,  356,  357,
      361,  373,  390,  405,  367,  372,  385,  386,  396, 3347,
     3416, 3308, 3305, 3302, 3307, 3304,  369, 3315, 3313, 3291,
     3300, 3303, 3292, 3296, 3302, 3289,  134, 3293, 3290, 3298,
     3287,  160, 3285, 3287, 3297, 3283,  149, 3295, 3294, 3293,

     3292, 3276, 3274, 3274, 3288, 3305, 3286, 3293,  396, 3284,
     3279, 3275, 3281, 3269, 3265, 3275, 3279, 3260, 3275, 3257,
     3256, 3278, 3256, 3270, 3256, 3264,  405,  413,  430,  414,
      436,  433,  439,  442,  443,  458,  450,  455,  461,  476,
     3416, 3416,  467,  491,  471,  510,  475,  506, 3267, 3266,
     3265, 3264, 3248, 3246, 3246, 3260,  525, 3259, 3266,  483,
      528, 3253, 3249, 3255, 3243, 3239, 3249, 3253, 3234, 3249,
     3231, 3230,  531, 3231, 3245, 3231,  534, 3228, 3246, 3232,
     3242, 3225, 3225, 3233, 3221, 3239, 3232, 3254, 3223, 3227,
     3241, 3225, 3228, 3229, 3218,  549, 3212, 3208, 3205, 3233,

     3221, 3216, 3220, 3214, 3217, 3220, 3215, 3416, 3227, 3217,
      502,  526,  562,  553,  482,  571,  529,  544,  532,  579,
      594,  555,  572,  575,  585,  601,  605,  598,  616,  620,
      631,  637,  640, 3197, 3215, 3201, 3211, 3194, 3194, 3202,
     3190, 3208, 3201,  648,  655, 3223, 3192, 3196, 3210, 3194,
     3197,  658,  663, 3198, 3187,  666, 3181, 3177, 3174,  669,
     3191, 3186, 3190, 3184, 3187,  673,  676, 3190, 3185,  688,
     3197,  691,  684, 3187, 3169, 3183, 3181, 3164, 3186, 3181,
     3180,  660, 3166, 3174, 3416, 3159, 3164, 3178, 3156, 3161,
     3153, 3163,  694, 3178, 3150, 3154, 3167, 3148, 3148, 3144,

     3161, 3145, 3144, 3148, 3159, 3157,  685,  689,  706, 3416,
     3416,  697,  701,  702,  705,  720, 3416, 3416,  711,  730,
      733,  715,  749, 3416, 3416,  745,  760, 3416, 3416,  767,
      770,  761,  782, 3140, 3154, 3152, 3135, 3157, 3152, 3151,
      767, 3137, 3145,  789,  792, 3130, 3135, 3149, 3127, 3132,
      795, 3124, 3134,  798,  801,  807, 3122, 3126,  813,  817,
     3139, 3120, 3120, 3116, 3133, 3117,  822, 3116, 3120,  828,
      831, 3131,  836, 3129, 3129, 3109, 3123, 3112, 3111, 3113,
     3112, 3114, 3113, 3118, 3102, 3114, 3113,  191, 3106, 3101,
     3106, 3088, 3097,  820, 3094, 3102, 3091, 3104, 3096, 3102,

      306, 3097, 3416, 3092, 3092,  831,  832,  835,  850,  841,
      842,  845,  868,  871,  883,  865,  846,  892,  907, 3416,
     3416,  889, 3102, 3082, 3096, 3085, 3084, 3086, 3085, 3087,
     3086, 3091, 3075,  915,  918, 3087, 3086,  331, 3079, 3074,
     3079, 3061,  923,  926,  930, 3070,  855, 3067,  933, 3075,
     3064, 3077, 3069, 3075,  456, 3070,  936,  941, 3065, 3065,
     3067, 3416, 3061, 3056,  420, 3416,  927, 3055, 3060, 3066,
     3071, 3416, 3416, 3048, 3052, 3071, 3048, 3043, 3063, 3043,
     3053, 3052, 3056, 3041, 3053, 3053, 3051,   81, 3039, 3039,
     3052, 3047, 3046,  951,  935,  942,  957,  972,  948,  981,

      973, 1008, 3416, 3416,  966,  963, 1015, 1019,  974,  985,
     3041, 1030, 3035, 3030,  564, 1033, 1020, 3029, 3034, 3040,
     3045, 1040, 1049, 1055, 3022, 3026, 3045, 3022, 3017, 3037,
     1058, 3017, 3027, 3026, 3030, 3015, 1064, 3028, 3026, 1070,
     3014, 3014, 3027, 1073, 1079, 3022, 3021, 3011, 3021, 3014,
     3017, 3020, 3019, 3004, 2997, 3015, 3015, 3010, 3009,  873,
     3012, 2999, 3006, 2994, 2984, 3003, 2987, 2997, 2987, 2992,
     3416, 3416, 2984,  891, 2998, 3000, 3005, 2979, 3011, 2995,
     3416, 2977, 1088, 1092,  986, 1071, 1105, 3416, 3416, 1031,
     1115, 1118, 1012, 1096, 1111, 1118, 1119, 1122, 1123, 1138,

     3416, 3416, 1149, 1172, 2981, 1175, 1178, 2991, 2984, 2987,
     2990, 1181, 1190, 2989, 2974, 2967, 2985, 2985, 2980, 2979,
      965, 2982, 1196, 1199, 1202, 1205, 2969, 2976, 2964, 2954,
     2973, 2957, 2967, 2957, 2962, 1211, 1217, 1220, 1226, 2954,
      984, 2968, 1235, 1238, 2970, 2975, 2949, 2981, 2965, 1241,
     1244, 2947, 2945, 2955, 2958, 2950, 2950, 2941, 2945, 2957,
     2947, 2938, 2952, 2935, 2938, 2951, 2933, 2948, 2944, 2947,
     2951, 2927, 2936, 2929, 2938, 2937, 2944, 2931, 2930, 2942,
     2924, 2949, 2926, 2920, 2921, 3416, 1250, 3416, 3416, 1145,
     1153, 1218, 1259, 3416, 3416, 1241, 1131, 1250, 1254, 1258,

     1259, 1262, 1263, 1266, 1267, 1286, 1301, 1316, 1320, 2912,
     1282, 2922, 2925, 2917, 2917, 1331, 2908, 2912, 2924, 2914,
     2905, 2919, 2902, 2905, 2918, 2900, 1334, 1337, 2915, 2911,
     2914, 2918, 2894, 2903, 2896, 2905, 2904, 1340, 1343, 1346,
     1349, 1355, 2911, 2898, 2897, 2909, 1361, 2891, 2916, 2893,
     2887, 2888, 1364, 1367, 1370, 2880, 2893, 2878, 2891, 2890,
     2885, 2874, 2880, 2886, 2880, 2863, 2878, 2871, 2823, 2826,
     2828, 2828, 2786, 2779, 3416, 2758,   11,   84,   84,   97,
      103,  126,  138,  185, 3416,  186,  188,  208, 1373, 1379,
     1376, 1394, 1282, 1397, 1388, 1389, 1277, 1412, 1403, 1421,

     1406, 1438, 3416, 3416, 1445, 3416, 3416,  202,  233,  232,
      252,  263,  262,  258,  278,  309,  311,  319,  356,  355,
      353,  385,  400,  406,  425,  424, 1429,  424,  449,  461,
      459, 1452, 1461,  469,  484,  519,  522,  564, 1466,  569,
      566,  587, 1469, 1472, 1475, 3416,  581,  614,  597, 3416,
      599,  606,  648,  662,  668,  668,  678,  700,  708,  718,
      705, 3416,  723,  716,  729,  733,  749,  773,  786,  771,
      780,  789, 3416,  777,  784,  823, 1481, 1496, 1503, 1487,
     1506, 1509, 1490, 1444, 1512, 1527, 1512, 1518, 1300, 1521,
     1522, 1545, 1542, 1537, 1552, 1567, 1549, 1558, 1578,  794,

      829,  823, 1581,  834,  834,  887,  901,  912,  939,  956,
      977, 1006, 1016, 1000, 1586, 1021, 1006, 1589, 1604, 1019,
     1022, 1022, 1050, 1062, 1055, 1059, 1076, 1607, 1610, 1613,
     1064, 1071, 1109, 1616, 3416, 1091, 1112, 1122, 1103, 1124,
     1109, 1133, 1134, 1162, 1138, 3416, 1172, 3416, 3416, 1174,
     3416, 3416, 1165, 1173, 1180, 1191, 1179, 1194, 1194, 1211,
     1214, 1625, 3416, 3416, 1632, 1635, 1638, 1650, 1608, 1587,
     1653, 1616, 1644, 1631, 1663, 1645, 1668, 1667, 1682, 1559,
     1688, 1691, 1685, 1694, 1235, 1252, 1709, 1712, 1275, 1255,
     1275, 1268, 1288, 1299, 1332, 1304, 1715, 1339, 1724, 1730,

     1733, 1739, 1337, 1745, 1748, 1754, 1332, 1333, 1345, 1366,
     1351, 1366, 1757, 1763, 1772, 1775, 1381, 1383, 1459, 3416,
     1386, 1414, 1408, 1415, 1417, 1435, 1434, 1457, 1478, 3416,
     1484, 1512, 1501, 1500, 3416, 1505, 3416, 1534, 1540, 1778,
     3416, 3416, 1692, 1785, 1707, 1755, 1769, 1776, 1779, 1801,
     1794, 1795, 1796, 1804, 1825, 1830, 1840, 1843, 1846, 1647,
     1852, 1858, 1529, 1557, 1547, 1553, 1555, 1575, 1573, 1602,
     1861, 1867, 1613, 1870, 1876, 1879, 1885, 1888, 1891, 1894,
     1900, 1909, 1912, 1621, 1654, 1650, 1643, 1915, 1648, 1918,
     1924, 1930, 1933, 1667, 1682, 1682, 1691, 1700, 1693, 1686,

     1686, 1712, 1720, 1704, 1716, 1730, 1748, 1750, 1757, 1761,
     1785, 3416, 1770, 1821, 1939, 1942, 1892, 1934, 1942, 1943,
     1946, 1947, 1962, 1953, 1954, 1957, 1972, 3416, 3416, 1979,
     1781, 1786, 1988, 1984, 1792, 1806, 1799, 1799, 1824, 1833,
     1817, 1832, 1994, 1843, 2006, 2009, 2012, 2015, 2018, 2021,
     1853, 1848, 1856, 1857, 2027, 2030, 1889, 2033, 2036, 2042,
     2045, 1873, 1880, 1882, 1881, 1888, 1905, 1910, 1936, 1921,
     1937, 1933, 1974, 1952, 1944, 3416, 1950, 1960, 1986, 2037,
     2052, 2043, 2044, 2048, 2049, 2052, 2053, 2056, 2057, 2060,
     1978, 1993, 2075, 1985, 1999, 2033, 2038, 2045, 2026, 2041,

     2033, 2067, 2089, 2045, 2030, 2099, 2039, 2102, 2050, 2115,
     2118, 2121, 2057, 2057, 2065, 2050, 2053, 2055, 2094, 2088,
     2093, 3416, 3416, 2073, 2073, 2089, 2086, 2083, 2090, 2122,
     2125, 2126, 2129, 2130, 2133, 2148, 2151, 2142, 2170, 2095,
     2106, 2099, 2102, 2104, 2142, 2130, 2136, 2173, 2188, 2125,
     2131, 2151, 2192, 2195, 2154, 2151, 2203, 2157, 2146, 3416,
     2153, 2174, 3416, 2159, 2174, 2164, 2162, 2177, 2182, 3416,
     2175, 2176, 2173, 2206, 2221, 2212, 2213, 2217, 2216, 2236,
     2239, 2242, 2245, 2245, 2261, 2269, 2164, 2276, 2178, 2217,
     2279, 2202, 2222, 2217, 2217, 2282, 2285, 2297, 2300, 2236,

     2256, 2303, 2306, 2249, 2251, 2248, 2254, 3416, 2273, 2254,
     2265, 2257, 2288, 2266, 2266, 2264, 3416, 2270, 2320, 2323,
     2326, 2317, 2326, 2327, 2330, 2345, 2348, 2340, 2355, 2290,
     2358, 2361, 2364, 2307, 2373, 2367, 2295, 2324, 2320, 2353,
     2382, 2390, 2331, 2335, 2393, 2396, 2332, 2399, 2339, 3416,
     2355, 2354, 2348, 2365, 2356, 2370, 2383, 3416, 2368, 2414,
     2417, 2420, 2411, 2417, 2432, 2423, 2424, 2439, 2447, 2450,
     2456, 2364, 2459, 2363, 2368, 2390, 2392, 2405, 2428, 2465,
     2468, 2471, 2475, 2420, 2423, 2441, 2441, 2429, 2427, 2443,
     2437, 2453, 2489, 2480, 2481, 2496, 2499, 2490, 2511, 2505,

     2514, 2526, 2447, 2478, 2480, 2468, 2473, 2488, 2482, 2533,
     2536, 2539, 2507, 2503, 2490, 2491, 2515, 2508, 2505, 2493,
     2511, 2540, 2541, 2556, 2547, 2562, 2565, 2570, 2520, 2514,
     2519, 2577, 2540, 2537, 2525, 2583, 2546, 2533, 3416, 3416,
     2533, 3416, 2540, 2550, 2548, 2582, 2585, 2588, 2603, 2539,
     2611, 2614, 2617, 2620, 2546, 2632, 2557, 2567, 2565, 3416,
     2570, 2582, 3416, 2584, 2615, 2623, 2626, 2647, 2650, 2653,
     2657, 2667, 2672, 2577, 2675, 2679, 2597, 2682, 2599, 2598,
     2609, 2602, 2648, 2651, 2673, 2690, 2697, 2700, 2705, 2612,
     2708, 2651, 2711, 2714, 2645, 2644, 2654, 2662, 2706, 2707,

     2710, 2726, 2680, 2690, 2731, 2679, 2693, 2692, 2683, 2726,
     2729, 2730, 2697, 2701, 2692, 3416, 2705, 3416, 2737, 2740,
     2760, 2763, 2706, 2766, 2710, 2744, 2769, 2787, 2790, 2795,
     2802, 2712, 2805, 2810, 2720, 2813, 2816, 2820, 2831, 2834,
     2724, 2837, 2731, 2840, 2843, 2846, 2739, 3416, 2849, 2855,
     2858, 2861, 2864, 3416, 2874, 2879, 2884, 2889, 2894, 2899,
     2904, 2908, 2913, 2917, 2922
    } ;

static yyconst flex_int16_t yy_def[1666] =
    {   0,
     1655, 1655, 1656, 1656, 1657, 1657, 1658, 1658, 1659, 1659,
     1659, 1659, 1660, 1660, 1661, 1661, 1654, 1654, 1662, 1662,
       20, 1654, 1662, 1662, 1662, 1662, 1662, 1654, 1654, 1662,
     1663, 1654, 1664, 1665, 1654, 1654, 1654, 1654, 1654, 1654,
       20, 1662, 1662,   28, 1654, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1662, 1663, 1664, 1665, 1654, 1654, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,

     1662, 1662, 1662, 1662, 1654, 1662, 1662, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1662, 1654,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1654, 1662, 1662, 1662, 1662, 1662, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1662, 1662, 1662, 1662,
     1662, 1654, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1654,
     1654, 1654, 1662, 1662, 1662, 1662, 1662, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1662, 1662, 1662, 1654, 1662, 1654, 1662, 1662, 1662, 1662,
     1654, 1662, 1662, 1662, 1662, 1662, 1654, 1662, 1662, 1654,
     1662, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1662, 1662, 1654, 1654,
     1654, 1662, 1662, 1662, 1662, 1654, 1654, 1654, 1662, 1662,
     1662, 1662, 1654, 1654, 1654, 1662, 1654, 1654, 1654, 1662,
     1654, 1662, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1654, 1662, 1654, 1662, 1662, 1654, 1654,
     1654, 1662, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1662, 1662, 1662, 1662, 1654, 1662, 1662,

     1662, 1654, 1654, 1654, 1654, 1662, 1662, 1654, 1662, 1662,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1662, 1654, 1662, 1662, 1654, 1654, 1654, 1662,
     1662, 1654, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1654,

     1654, 1654, 1662, 1662, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1662,
     1662, 1662, 1654, 1654, 1654, 1662, 1662, 1662, 1662, 1662,

     1662, 1662, 1662, 1662, 1662, 1662, 1654, 1662, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,

     1662, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1662, 1654, 1662, 1654,
     1662, 1662, 1654, 1662, 1662, 1662, 1654, 1662, 1662, 1662,
     1662, 1662, 1654, 1662, 1662, 1654, 1662, 1662, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1662, 1654, 1654, 1662, 1662,
     1654, 1662, 1662, 1662, 1662, 1662, 1654, 1662, 1654, 1662,
     1662, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1654, 1662, 1662, 1662, 1662, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1662, 1662, 1654, 1662, 1662, 1662, 1662,
     1662, 1662, 1654, 1662, 1662, 1662, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1662,
     1654, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1654, 1662, 1654, 1662, 1662, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1662, 1662,
     1654, 1662, 1662, 1662, 1662, 1654, 1654, 1662, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1662,
     1654, 1654, 1662, 1662, 1662, 1662, 1662, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1662, 1662, 1662, 1654, 1662, 1662, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1662, 1662, 1654, 1662, 1662, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1662, 1662, 1662, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1662, 1662, 1662, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1662, 1662, 1662, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1662, 1662,

     1662, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1662,
     1662, 1662, 1654, 1654, 1654, 1654, 1654, 1654, 1662, 1662,
     1662, 1654, 1654, 1654, 1654, 1662, 1662, 1662, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1662, 1662, 1654, 1654, 1654,
     1654, 1654, 1654, 1662, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654,    0, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654
    } ;

static yyconst flex_int16_t yy_nxt[3481] =
    {   0,
       18,   19,   20,   21,   18,   22,   39,   22,   18,   24,
       25,   26,   27,   28,   18,   29,   18,   36,   36,   39,
       40, 1654, 1654,   30,   37,   37, 1654,   58, 1654,   59,
     1654, 1654, 1654,   40, 1654, 1654,   63, 1654,  139, 1654,
       60,   61, 1654, 1654, 1654, 1654, 1654, 1654,   63, 1654,
       62,   58,   82,   59, 1654,  140, 1654, 1654, 1654, 1654,
     1654,  966,   62,   22,   18,   19,   20,   21,   18,   22,
       62,   22,   18,   24,   25,   26,   27,   28,   18,   29,
       18,   88,   62, 1654,  125, 1654,   89,   30,  126, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654,  173, 1654,  132, 1654,  174, 1654, 1654,  676,
     1654, 1654,  133, 1654,  180,  677,   92,   95, 1654,   93,
     1654,   96,  181,  967,   90,  104,   82,   22,   41,   41,
       41,   91,   94,  102,  215,  216,   98,  134,   43,  968,
       44,   97,   45,   99,  157,  103,  100,  187,  969,   61,
     1654,  135, 1654,  101,  136,  137,  138,  970,   62, 1654,
       58, 1654,   59, 1654,  188, 1654,   46,   47,  149,   48,
       49,   62,   50,  221,  971,   51,   52,   53,   62, 1654,
      222, 1654,   54,   55,   56,   57,   41,   41,   41,  266,
      267,   62,   61, 1654,  972, 1654,   43, 1654,   44, 1654,

       45,   62,  105,  106,  278,  279,  107, 1654,  272, 1654,
      142, 1654,  143, 1654, 1654,  273, 1654,  153, 1654,  574,
     1654,   62,  144,  575,   46,   47,  973,   48,   49, 1654,
       50, 1654,  145,   51,   52,   53, 1654,  974, 1654,  152,
       54,   55,   56,   57,   64, 1654,  975, 1654, 1654,  976,
     1654,   65,  154, 1654,  151, 1654,   66,  999,  156,  163,
      163,  163, 1654,  158, 1654,  155,  107, 1654, 1654, 1654,
     1654, 1654,  164, 1654, 1000,  107, 1654,  165, 1654,   67,
       68,  159,   69,   70,  160,   71,   72, 1001,   73,   74,
      167,   75,   76, 1002,   77,   78,   79,   80,   81,  109,

      110,  166,  111,  112, 1003,  113,  114, 1004,  115,  116,
      182,  117,  118, 1005,  119,  120,  121,  122,  123, 1654,
     1654, 1654, 1654, 1654,  183, 1654, 1006,  184,  185,  186,
      202,  190, 1654,  191, 1654,  589, 1654,  203, 1654,  590,
      204,  205, 1654,  192, 1654, 1654, 1654, 1654, 1654, 1654,
     1007, 1654,  168,  193,  161, 1654, 1008, 1654,  169,  625,
     1654,  162, 1654,  626,  227,  231,  231,  231,  228, 1654,
     1654, 1654, 1654,  233, 1654, 1009, 1654, 1654,  232, 1654,
     1654,  229, 1654,  235,  234, 1654, 1654, 1654, 1654, 1010,
      230,  163,  163,  163, 1011,  237,  239,  236, 1654, 1654,

     1654, 1654, 1012, 1654,  164, 1654,  240,  240,  240, 1654,
      241, 1654,  242,  244,  253,  291,  292,  243, 1654,  238,
     1654,  254,  245,  293,  255,  256, 1654, 1654, 1654, 1654,
     1013,  313,  313,  313,  316,  316,  316,  231,  231,  231,
      651, 1014,  246, 1654,  314, 1654, 1015,  652,  311, 1654,
      232, 1654, 1654,  247, 1654, 1654, 1654, 1654, 1654,  320,
      320,  320,  319, 1654, 1016, 1654,  315,  312, 1654, 1017,
     1654, 1654,  321, 1654, 1654, 1020, 1654,  240,  240,  240,
     1654,  241, 1654,  242, 1654,  641, 1654,  317, 1654,  642,
     1654,  322,  326,  326,  326, 1654,  323, 1654,  318, 1021,

     1022,  324,  349,  350, 1654,  327, 1654,  332,  332,  332,
      351,  329,  329,  329, 1023, 1654,  331, 1654,  412,  328,
     1024,  333,  325, 1654,  330, 1654,  344,  344,  344,  352,
      352,  352,  366,  366,  366,  372,  372,  372, 1025, 1654,
      345, 1654, 1654,  353, 1654, 1654,  367, 1654,  346,  373,
      393,  393,  393,  407,  409,  409,  409, 1654,  410, 1654,
      411,  334,  335,  313,  313,  313,  368, 1026, 1654,  354,
     1654,  408,  316,  316,  316, 1654,  314, 1654, 1027,  374,
      320,  320,  320,  415,  710, 1654,  413, 1654, 1654,  414,
     1654,  711, 1654,  321, 1654,  416,  416,  416, 1654,  417,

     1654,  418,  326,  326,  326, 1028,  423,  423,  423,  419,
      424, 1654,  425, 1654, 1654,  327, 1654,  329,  329,  329,
     1031,  427,  427,  427, 1032,  428,  420,  429, 1033, 1654,
      330, 1654,  430,  430,  430,  421, 1035,  422,  332,  332,
      332,  433,  433,  433, 1654,  431, 1654, 1036,  432,  344,
      344,  344,  333, 1037, 1038,  426,  444,  444,  444,  352,
      352,  352, 1039,  345,  451,  451,  451,  454,  454,  454,
      459,  459,  459,  353,  366,  366,  366,  467,  467,  467,
      482,  455,  483, 1040,  460,  473,  473,  473,  367,  470,
      470,  470,  372,  372,  372,  393,  393,  393, 1654,  461,

     1654, 1041, 1654,  471, 1654, 1042,  373,  409,  409,  409,
     1654,  410, 1654,  411, 1654, 1654, 1654, 1654, 1654, 1043,
     1654,  416,  416,  416, 1654,  417, 1654,  418, 1654, 1044,
     1654,  513,  513,  513,  515,  515,  515, 1045,  508,  506,
      512,  507,  509, 1654,  514, 1654, 1654,  516, 1654, 1046,
      423,  423,  423,  510,  424, 1047,  425,  511, 1654, 1048,
     1654,  427,  427,  427, 1049,  428,  517,  429,  430,  430,
      430,  519,  519,  519, 1654,  520, 1654,  521, 1050, 1051,
     1654,  431, 1654,  433,  433,  433,  518,  530, 1052,  531,
      444,  444,  444,  534,  534,  534,  451,  451,  451,  454,

      454,  454,  543,  543,  543, 1053, 1054,  535,  544,  544,
      544, 1055, 1056,  455,  459,  459,  459,  522,  549,  549,
      549, 1057,  545,  467,  467,  467, 1058, 1059,  460,  470,
      470,  470,  558,  558,  558, 1060,  546,  473,  473,  473,
      581, 1061,  582,  471, 1654, 1654, 1654, 1654, 1654, 1084,
     1654,  597,  597,  597, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1085, 1654,  598, 1654,  605,  605,  605,  513,
      513,  513,  602,  602,  602,  633,  603,  634,  604, 1086,
      596, 1654,  514, 1654,  515,  515,  515,  601,  595, 1089,
     1090,  599,  594,  607,  607,  607, 1654,  516, 1654,  765,

      606,  766, 1654,  600, 1654, 1654,  608, 1654,  519,  519,
      519,  778,  520,  779,  521,  609,  534,  534,  534,  622,
      622,  622, 1091,  610,  543,  543,  543,  544,  544,  544,
      535,  631,  631,  631,  549,  549,  549,  644,  644,  644,
     1092,  545,  558,  558,  558,  653,  654,  655, 1654, 1093,
     1654,  645,  683,  683,  683, 1654,  656, 1654,  597,  597,
      597, 1654,  657, 1654, 1654,  684, 1654,  605,  605,  605,
     1654,  598, 1654,  687,  687,  687, 1654,  688, 1654,  689,
      685,  690,  691,  691,  691,  686, 1654, 1654, 1654, 1654,
     1094,  824,  693,  825, 1654,  692, 1654,  694, 1654, 1654,

     1654, 1654,  695,  696,  844,  697,  845, 1095,  698,  602,
      602,  602,  703,  603, 1096,  604,  607,  607,  607,  699,
      700,  700,  700,  704,  701, 1654,  702, 1654, 1654,  608,
     1654,  706,  706,  706,  712,  712,  712,  790,  714,  715,
      716,  622,  622,  622, 1654,  707, 1654, 1097,  713,  717,
      723,  723,  723, 1098, 1099,  718,  725,  725,  725,  631,
      631,  631, 1102,  796,  724,  738,  738,  738, 1103, 1105,
      726,  743,  743,  743,  644,  644,  644, 1106, 1107,  739,
      750,  750,  750, 1108, 1654,  744, 1654, 1109,  645,  683,
      683,  683,  792,  787,  787,  787, 1110,  788,  745,  789,

     1111, 1654,  684, 1654,  746,  740,  687,  687,  687, 1654,
      688, 1654,  689, 1112, 1116,  791,  691,  691,  691,  793,
      793,  793, 1117,  794, 1654,  795, 1654, 1118, 1654,  692,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,  700,
      700,  700, 1119,  701, 1654,  702, 1654,  797,  802,  798,
      806,  806,  806, 1120, 1121,  800,  805, 1122, 1654,  804,
     1654, 1123, 1654,  807, 1654, 1124, 1654,  799, 1654,  893,
      803, 1125,  801,  808,  808,  808,  706,  706,  706,  811,
      811,  811,  712,  712,  712, 1654,  809, 1654, 1126, 1127,
      707,  816,  816,  816, 1128,  889,  713,  723,  723,  723,

      827,  827,  827,  725,  725,  725,  828,  828,  828,  890,
     1129,  724,  838,  838,  838, 1130, 1131,  726,  840,  840,
      840,  738,  738,  738, 1132, 1133,  839,  842,  842,  842,
     1134, 1654,  841, 1654, 1135,  739,  743,  743,  743,  847,
      847,  847,  750,  750,  750,  853,  853,  853, 1136, 1137,
      744,  787,  787,  787, 1654,  788, 1654,  789, 1138,  854,
      793,  793,  793, 1654,  794, 1654,  795, 1654, 1139, 1654,
      891, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654,  811,  811,  811, 1160,  806,  806,  806,
     1654,  892, 1654, 1161,  898, 1654,  894, 1654,  895, 1654,

      807, 1654,  902,  902,  902,  985,  903, 1163,  904, 1164,
      897,  899, 1165, 1654,  896, 1654,  991,  808,  808,  808,
      900,  905,  905,  905, 1166,  906, 1167,  907,  901, 1654,
      809, 1654,  816,  816,  816,  827,  827,  827,  828,  828,
      828,  838,  838,  838,  932,  932,  932,  840,  840,  840,
      933,  933,  933, 1168, 1073,  839,  842,  842,  842, 1169,
     1170,  841,  847,  847,  847,  853,  853,  853,  943,  943,
      943,  944,  944,  944,  977,  977,  977, 1173, 1179,  854,
      979,  979,  979, 1184, 1185,  945, 1654,  978, 1654, 1654,
     1186, 1654, 1654,  980, 1654,  982,  982,  982,  986,  986,

      986, 1654, 1654, 1654, 1654, 1187, 1188, 1654,  983, 1654,
     1654,  987, 1654,  992,  992,  992, 1654,  981, 1654, 1654,
     1189, 1654,  995,  995,  995, 1654,  993, 1654, 1194,  989,
     1018, 1018, 1018,  990, 1654,  996, 1654, 1195,  988,  902,
      902,  902, 1198,  903, 1019,  904,  905,  905,  905,  984,
      906, 1199,  907,  932,  932,  932, 1200, 1654,  998, 1654,
     1201,  994,  933,  933,  933, 1202,  997, 1029, 1029, 1029,
      943,  943,  943,  944,  944,  944, 1034, 1034, 1034, 1196,
     1203, 1030,  977,  977,  977, 1204, 1197,  945, 1065, 1065,
     1065, 1068, 1068, 1068, 1654,  978, 1654, 1062, 1062, 1062,

     1069, 1063, 1205, 1064,  979,  979,  979, 1066, 1066, 1066,
      982,  982,  982, 1071, 1071, 1071, 1654,  980, 1654, 1654,
     1067, 1654, 1654,  983, 1654, 1654, 1206, 1654,  986,  986,
      986, 1654, 1070, 1654, 1654, 1654, 1654, 1654, 1207, 1208,
     1654,  987, 1654, 1077, 1077, 1077,  992,  992,  992, 1209,
     1654, 1074, 1654,  995,  995,  995, 1210, 1072, 1654,  993,
     1654, 1211, 1654, 1076, 1654, 1654,  996, 1654, 1079, 1079,
     1079, 1654, 1654, 1654, 1654, 1212, 1075, 1213, 1078, 1082,
     1082, 1082, 1087, 1087, 1087, 1235, 1080, 1100, 1100, 1100,
     1018, 1018, 1018, 1083, 1236, 1237, 1088, 1154, 1238, 1081,

     1654, 1101, 1654, 1239, 1019, 1104, 1104, 1104, 1113, 1113,
     1113, 1029, 1029, 1029, 1115, 1115, 1115, 1034, 1034, 1034,
     1240, 1654, 1114, 1654, 1241, 1030, 1062, 1062, 1062, 1654,
     1063, 1654, 1064, 1065, 1065, 1065, 1066, 1066, 1066, 1140,
     1140, 1140, 1144, 1141, 1654, 1142, 1654, 1242, 1654, 1067,
     1654, 1068, 1068, 1068, 1071, 1071, 1071, 1654, 1654, 1654,
     1654, 1244, 1143, 1146, 1150, 1150, 1150, 1231, 1149, 1077,
     1077, 1077, 1145, 1147, 1232, 1251, 1654, 1151, 1654, 1148,
     1654, 1252, 1654, 1079, 1079, 1079, 1157, 1157, 1157, 1155,
     1155, 1155, 1082, 1082, 1082, 1158, 1158, 1158, 1253, 1254,

     1152, 1654, 1156, 1654, 1257, 1654, 1083, 1654, 1261, 1159,
     1087, 1087, 1087, 1162, 1162, 1162, 1171, 1171, 1171, 1262,
     1654, 1153, 1654, 1263, 1088, 1174, 1174, 1174, 1264, 1214,
     1172, 1100, 1100, 1100, 1176, 1176, 1176, 1265, 1266, 1175,
     1177, 1177, 1177, 1267, 1268, 1101, 1104, 1104, 1104, 1180,
     1180, 1180, 1217, 1269, 1178, 1182, 1182, 1182, 1113, 1113,
     1113, 1270, 1271, 1181, 1190, 1190, 1190, 1272, 1654, 1183,
     1654, 1273, 1114, 1115, 1115, 1115, 1191, 1191, 1191, 1140,
     1140, 1140, 1654, 1141, 1654, 1142, 1215, 1215, 1215, 1654,
     1192, 1654, 1654, 1274, 1654, 1223, 1223, 1223, 1654, 1216,

     1654, 1275, 1150, 1150, 1150, 1276, 1218, 1219, 1654, 1654,
     1654, 1654, 1277, 1221, 1654, 1151, 1654, 1654, 1278, 1654,
     1279, 1220, 1291, 1292, 1222, 1225, 1155, 1155, 1155, 1294,
     1193, 1227, 1227, 1227, 1654, 1228, 1654, 1229, 1654, 1156,
     1654, 1157, 1157, 1157, 1158, 1158, 1158, 1230, 1230, 1230,
     1224, 1295, 1226, 1233, 1233, 1233, 1296, 1297, 1159, 1162,
     1162, 1162, 1171, 1171, 1171, 1298, 1280, 1234, 1243, 1243,
     1243, 1174, 1174, 1174, 1299, 1300, 1172, 1245, 1245, 1245,
     1176, 1176, 1176, 1301, 1302, 1175, 1177, 1177, 1177, 1246,
     1246, 1246, 1247, 1247, 1247, 1180, 1180, 1180, 1304, 1305,

     1178, 1249, 1249, 1249, 1306, 1654, 1248, 1654, 1307, 1181,
     1182, 1182, 1182, 1250, 1250, 1250, 1255, 1255, 1255, 1190,
     1190, 1190, 1309, 1313, 1183, 1191, 1191, 1191, 1314, 1315,
     1256, 1258, 1258, 1258, 1259, 1259, 1259, 1316, 1317, 1192,
     1215, 1215, 1215, 1281, 1281, 1281, 1318, 1654, 1260, 1654,
     1282, 1319, 1654, 1216, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1223, 1223, 1223, 1654, 1654, 1654, 1654,
     1654, 1320, 1654, 1227, 1227, 1227, 1321, 1228, 1322, 1229,
     1230, 1230, 1230, 1323, 1283, 1293, 1293, 1293, 1284, 1233,
     1233, 1233, 1324, 1325, 1288, 1243, 1243, 1243, 1290, 1285,

     1286, 1287, 1326, 1234, 1327, 1328, 1289, 1245, 1245, 1245,
     1246, 1246, 1246, 1247, 1247, 1247, 1303, 1303, 1303, 1249,
     1249, 1249, 1250, 1250, 1250, 1329, 1340, 1248, 1255, 1255,
     1255, 1308, 1308, 1308, 1258, 1258, 1258, 1259, 1259, 1259,
     1341, 1342, 1256, 1310, 1310, 1310, 1311, 1311, 1311, 1343,
     1654, 1260, 1654, 1281, 1281, 1281, 1654, 1654, 1654, 1654,
     1312, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1344, 1654, 1293, 1293, 1293, 1345,
     1346, 1347, 1348, 1349, 1331, 1350, 1351, 1330, 1352, 1333,
     1303, 1303, 1303, 1355, 1334, 1356, 1358, 1335, 1359, 1332,

     1353, 1353, 1353, 1308, 1308, 1308, 1360, 1361, 1336, 1362,
     1363, 1337, 1364, 1338, 1354, 1339, 1310, 1310, 1310, 1311,
     1311, 1311, 1357, 1357, 1357, 1366, 1367, 1368, 1369, 1365,
     1370, 1371, 1372, 1312, 1373, 1654, 1387, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1388, 1654, 1380,
     1380, 1380, 1382, 1382, 1382, 1654, 1389, 1654, 1390, 1391,
     1392, 1654, 1381, 1654, 1654, 1383, 1654, 1394, 1377, 1395,
     1379, 1385, 1385, 1385, 1396, 1396, 1396, 1393, 1374, 1400,
     1375, 1378, 1376, 1654, 1386, 1654, 1401, 1384, 1397, 1398,
     1398, 1398, 1402, 1353, 1353, 1353, 1403, 1403, 1403, 1404,

     1405, 1406, 1407, 1399, 1357, 1357, 1357, 1354, 1408, 1409,
     1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1654,
     1430, 1654, 1420, 1420, 1420, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1433, 1654, 1421, 1654, 1380, 1380, 1380,
     1426, 1426, 1426, 1382, 1382, 1382, 1427, 1427, 1427, 1654,
     1381, 1654, 1434, 1437, 1425, 1654, 1383, 1654, 1654, 1438,
     1654, 1419, 1385, 1385, 1385, 1439, 1422, 1424, 1440, 1423,
     1429, 1429, 1429, 1443, 1654, 1386, 1654, 1431, 1431, 1431,
     1435, 1435, 1435, 1396, 1396, 1396, 1441, 1441, 1441, 1444,
     1447, 1432, 1448, 1449, 1436, 1450, 1428, 1397, 1398, 1398,

     1398, 1442, 1442, 1442, 1445, 1445, 1445, 1403, 1403, 1403,
     1451, 1452, 1399, 1453, 1454, 1455, 1456, 1457, 1446, 1458,
     1459, 1460, 1460, 1460, 1420, 1420, 1420, 1462, 1462, 1462,
     1654, 1468, 1654, 1654, 1461, 1654, 1654, 1421, 1654, 1654,
     1654, 1654, 1654, 1654, 1472, 1654, 1426, 1426, 1426, 1427,
     1427, 1427, 1474, 1654, 1463, 1654, 1429, 1429, 1429, 1431,
     1431, 1431, 1469, 1469, 1469, 1470, 1470, 1470, 1473, 1473,
     1473, 1464, 1475, 1432, 1435, 1435, 1435, 1476, 1466, 1471,
     1477, 1478, 1465, 1441, 1441, 1441, 1479, 1481, 1436, 1484,
     1467, 1442, 1442, 1442, 1445, 1445, 1445, 1480, 1480, 1480,

     1482, 1482, 1482, 1485, 1486, 1487, 1488, 1489, 1446, 1490,
     1491, 1492, 1503, 1504, 1483, 1460, 1460, 1460, 1493, 1493,
     1493, 1462, 1462, 1462, 1654, 1505, 1654, 1654, 1461, 1654,
     1654, 1506, 1654, 1496, 1496, 1496, 1654, 1654, 1654, 1654,
     1500, 1500, 1500, 1507, 1508, 1654, 1497, 1654, 1469, 1469,
     1469, 1470, 1470, 1470, 1501, 1509, 1494, 1502, 1502, 1502,
     1473, 1473, 1473, 1513, 1498, 1471, 1480, 1480, 1480, 1510,
     1510, 1510, 1482, 1482, 1482, 1495, 1512, 1512, 1512, 1499,
     1514, 1515, 1516, 1511, 1517, 1518, 1483, 1519, 1520, 1521,
     1493, 1493, 1493, 1654, 1654, 1654, 1654, 1496, 1496, 1496,

     1524, 1524, 1524, 1654, 1529, 1654, 1500, 1500, 1500, 1654,
     1497, 1654, 1526, 1526, 1526, 1528, 1528, 1528, 1530, 1525,
     1501, 1531, 1523, 1532, 1654, 1527, 1654, 1502, 1502, 1502,
     1522, 1533, 1534, 1535, 1510, 1510, 1510, 1536, 1536, 1536,
     1512, 1512, 1512, 1537, 1538, 1539, 1540, 1541, 1511, 1542,
     1543, 1544, 1545, 1654, 1654, 1654, 1654, 1524, 1524, 1524,
     1654, 1550, 1654, 1526, 1526, 1526, 1549, 1549, 1549, 1551,
     1547, 1528, 1528, 1528, 1552, 1654, 1527, 1654, 1553, 1553,
     1553, 1556, 1557, 1558, 1536, 1536, 1536, 1559, 1560, 1561,
     1562, 1563, 1554, 1564, 1568, 1654, 1546, 1654, 1654, 1548,

     1654, 1654, 1574, 1654, 1549, 1549, 1549, 1577, 1578, 1555,
     1579, 1565, 1569, 1569, 1569, 1571, 1571, 1571, 1553, 1553,
     1553, 1573, 1573, 1573, 1580, 1581, 1570, 1582, 1654, 1572,
     1654, 1590, 1554, 1575, 1575, 1575, 1654, 1566, 1654, 1654,
     1592, 1654, 1595, 1596, 1567, 1597, 1598, 1576, 1586, 1586,
     1586, 1569, 1569, 1569, 1588, 1588, 1588, 1603, 1571, 1571,
     1571, 1654, 1587, 1654, 1654, 1570, 1654, 1583, 1589, 1589,
     1589, 1585, 1572, 1573, 1573, 1573, 1575, 1575, 1575, 1584,
     1591, 1591, 1591, 1593, 1593, 1593, 1654, 1604, 1654, 1606,
     1576, 1586, 1586, 1586, 1607, 1608, 1600, 1594, 1602, 1602,

     1602, 1588, 1588, 1588, 1599, 1587, 1589, 1589, 1589, 1591,
     1591, 1591, 1593, 1593, 1593, 1605, 1605, 1605, 1609, 1654,
     1654, 1654, 1654, 1654, 1601, 1654, 1594, 1602, 1602, 1602,
     1613, 1614, 1605, 1605, 1605, 1615, 1616, 1617, 1618, 1654,
     1622, 1654, 1654, 1654, 1654, 1654, 1623, 1624, 1625, 1632,
     1654, 1610, 1654, 1654, 1635, 1654, 1641, 1654, 1611, 1654,
     1612, 1628, 1628, 1628, 1630, 1630, 1630, 1633, 1633, 1633,
     1637, 1637, 1637, 1654, 1629, 1654, 1643, 1619, 1631, 1620,
     1647, 1634, 1654, 1638, 1654, 1621, 1648, 1626, 1628, 1628,
     1628, 1639, 1639, 1639, 1650, 1627, 1630, 1630, 1630, 1636,

     1654, 1629, 1654, 1640, 1640, 1640, 1633, 1633, 1633,  965,
     1631, 1642, 1642, 1642, 1644, 1644, 1644, 1637, 1637, 1637,
     1634, 1646, 1646, 1646,  964,  963, 1654, 1645, 1654, 1654,
     1638, 1654, 1639, 1639, 1639, 1640, 1640, 1640, 1642, 1642,
     1642, 1644, 1644, 1644, 1649, 1649, 1649, 1646, 1646, 1646,
     1649, 1649, 1649, 1654, 1645, 1654, 1651, 1651, 1651, 1651,
     1651, 1651, 1653, 1653, 1653, 1653, 1653, 1653,  962,  961,
     1652,  960,  959, 1652,   23,   23,   23,   23,   23,   31,
       31,   31,   31,   31,   33,   33,   33,   33,   33,   34,
       34,   34,   34,   34,   32,   32,   32,   32,   32,   35,

       35,   35,   35,   35,   38,   38,   38,   38,   38,   42,
      958,  957,   42,   83,   83,   83,   83,   84,   84,  956,
       84,   84,   85,   85,   85,  955,   85,  954,  953,  952,
      951,  950,  949,  948,  947,  946,  942,  941,  940,  939,
      938,  937,  936,  935,  934,  931,  930,  929,  928,  927,
      926,  925,  924,  923,  922,  921,  920,  919,  918,  917,
      916,  915,  914,  913,  912,  911,  910,  909,  908,  888,
      887,  886,  885,  884,  883,  882,  881,  880,  879,  878,
      877,  876,  875,  874,  873,  872,  871,  870,  869,  868,
      867,  866,  865,  864,  863,  862,  861,  860,  859,  858,

      857,  856,  855,  852,  851,  850,  849,  848,  846,  843,
      837,  836,  835,  834,  833,  832,  831,  830,  829,  826,
      823,  822,  821,  820,  819,  818,  817,  815,  814,  813,
      812,  810,  786,  785,  784,  783,  782,  781,  780,  777,
      776,  775,  774,  773,  772,  771,  770,  769,  768,  767,
      764,  763,  762,  761,  760,  759,  758,  757,  756,  755,
      754,  753,  752,  751,  749,  748,  747,  742,  741,  737,
      736,  735,  734,  733,  732,  731,  730,  729,  728,  727,
      722,  721,  720,  719,  709,  708,  705,  682,  681,  680,
      679,  678,  675,  674,  673,  672,  671,  670,  669,  668,

      667,  666,  665,  664,  663,  662,  661,  660,  659,  658,
      650,  649,  648,  647,  646,  643,  640,  639,  638,  637,
      636,  635,  632,  630,  629,  628,  627,  624,  623,  621,
      620,  619,  618,  617,  616,  615,  614,  613,  612,  611,
      593,  592,  591,  588,  587,  586,  585,  584,  583,  580,
      579,  578,  577,  576,  573,  572,  571,  570,  569,  568,
      567,  566,  565,  564,  563,  562,  561,  560,  559,  557,
      556,  555,  554,  553,  552,  551,  550,  548,  547,  542,
      541,  540,  539,  538,  537,  536,  533,  532,  529,  528,
      527,  526,  525,  524,  523,  505,  504,  503,  502,  501,

      500,  499,  498,  497,  496,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  486,  485,  484,  481,  480,  479,
      478,  477,  476,  475,  474,  472,  469,  468,  466,  465,
      464,  463,  462,  458,  457,  456,  453,  452,  450,  449,
      448,  447,  446,  445,  443,  442,  441,  440,  439,  438,
      437,  436,  435,  434,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  392,  391,  390,
      389,  388,  387,  386,  385,  384,  383,  382,  381,  380,
      379,  378,  377,  376,  375,  371,  370,  369,  365,  364,
      363,  362,  361,  360,  359,  358,  357,  356,  355,  348,

      347,  343,  342,  341,  340,  339,  338,  337,  336,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  290,  289,  288,  287,
      286,  285,  284,  283,  282,  281,  280,  277,  276,  275,
      274,  271,  270,  269,  268,  265,  264,  263,  262,  261,
      260,  259,  258,  257,  252,  251,  250,  249,  248,  170,
      226,  225,  224,  223,  220,  219,  218,  217,  214,  213,
      212,  211,  210,  209,  208,  207,  206,  201,  200,  199,
      198,  197,  196,  195,  194,  189,  179,  178,  177,  176,
      175,  172,  171,  170,  150,  148,  147,  146,  141,  131,

      130,  129,  128,  127,  124,  108,   87,   86, 1654,   32,
       32,   32,   32,   32,   32,   17, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654
    } ;

static yyconst flex_int16_t yy_chk[3481] =
    {   0,
        1,    1,    1,    1,    1,    1,   15,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   13,   14,   16,
       15,    0,    0,    1,   13,   14,   23,   24,   23,   24,
       24,    0,   24,   16,   26,   44,   26,   30,   76,   30,
       24,   25,   25,   42,   25,   42,   43,   44,   43,    0,
       25,   27,   30,   27,   27,   76,   27,   46,   47,   46,
       47,  877,   27,    1,    2,    2,    2,    2,    2,    2,
       25,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   46,   27,   48,   68,   48,   47,    2,   68,   50,
       49,   50,   49,   52,   51,   52,   51,   53,   54,   53,

       54,   57,  110,   57,   74,   55,  110,   55,   56,  588,
       56,   60,   74,   60,  116,  588,   50,   52,   94,   51,
       94,   53,  116,  878,   48,   57,   60,    2,   19,   19,
       19,   49,   51,   56,  139,  139,   54,   75,   19,  879,
       19,   53,   19,   55,   94,   56,   55,  118,  880,   58,
       58,   75,   58,   55,   75,   75,   75,  881,   58,   82,
       59,   82,   59,   59,  118,   59,   19,   19,   82,   19,
       19,   59,   19,  144,  882,   19,   19,   19,   58,   90,
      144,   90,   19,   19,   19,   19,   20,   20,   20,  187,
      187,   59,   61,   61,  883,   61,   20,   89,   20,   89,

       20,   61,   62,   62,  197,  197,   62,   62,  192,   62,
       78,   88,   78,   88,   91,  192,   91,   90,   92,  488,
       92,   61,   78,  488,   20,   20,  884,   20,   20,   95,
       20,   95,   78,   20,   20,   20,   93,  886,   93,   89,
       20,   20,   20,   20,   28,   96,  887,   96,   97,  888,
       97,   28,   91,  100,   88,  100,   28,  908,   93,   99,
       99,   99,  101,   95,  101,   92,  106,  106,  102,  106,
      102,   99,   99,   99,  909,  107,  107,  100,  107,   28,
       28,   96,   28,   28,   97,   28,   28,  910,   28,   28,
      102,   28,   28,  911,   28,   28,   28,   28,   28,   65,

       65,  101,   65,   65,  912,   65,   65,  913,   65,   65,
      117,   65,   65,  914,   65,   65,   65,   65,   65,   98,
      103,   98,  103,  104,  117,  104,  915,  117,  117,  117,
      129,  120,  149,  120,  149,  501,  151,  129,  151,  501,
      129,  129,  152,  120,  152,  153,  154,  153,  154,  156,
      916,  156,  103,  120,   98,  158,  917,  158,  104,  538,
      157,   98,  157,  538,  151,  155,  155,  155,  152,  159,
      160,  159,  160,  156,  161,  918,  161,  155,  155,  155,
      165,  153,  165,  158,  157,  166,  162,  166,  162,  919,
      154,  163,  163,  163,  920,  160,  162,  159,  167,  168,

      167,  168,  921,  163,  163,  163,  164,  164,  164,  169,
      164,  169,  164,  166,  177,  209,  209,  165,  227,  161,
      227,  177,  167,  209,  177,  177,  228,  230,  228,  230,
      922,  229,  229,  229,  232,  232,  232,  231,  231,  231,
      565,  923,  168,  229,  229,  229,  924,  565,  227,  231,
      231,  231,  233,  169,  233,  234,  235,  234,  235,  236,
      236,  236,  235,  237,  925,  237,  230,  228,  238,  926,
      238,  236,  236,  236,  239,  928,  239,  240,  240,  240,
      243,  240,  243,  240,  245,  555,  245,  233,  247,  555,
      247,  237,  244,  244,  244,  315,  238,  315,  234,  929,

      930,  239,  260,  260,  244,  244,  244,  248,  248,  248,
      260,  246,  246,  246,  931,  311,  247,  311,  315,  245,
      934,  248,  243,  246,  246,  246,  257,  257,  257,  261,
      261,  261,  273,  273,  273,  277,  277,  277,  935,  312,
      257,  312,  317,  261,  317,  319,  273,  319,  257,  277,
      296,  296,  296,  311,  314,  314,  314,  318,  314,  318,
      314,  248,  248,  313,  313,  313,  273,  936,  322,  261,
      322,  312,  316,  316,  316,  313,  313,  313,  937,  277,
      320,  320,  320,  319,  615,  323,  317,  323,  324,  318,
      324,  615,  320,  320,  320,  321,  321,  321,  325,  321,

      325,  321,  326,  326,  326,  938,  327,  327,  327,  322,
      327,  328,  327,  328,  326,  326,  326,  329,  329,  329,
      940,  330,  330,  330,  941,  330,  323,  330,  942,  329,
      329,  329,  331,  331,  331,  324,  947,  325,  332,  332,
      332,  333,  333,  333,  331,  331,  331,  948,  331,  344,
      344,  344,  332,  949,  951,  328,  345,  345,  345,  352,
      352,  352,  952,  344,  353,  353,  353,  356,  356,  356,
      360,  360,  360,  352,  366,  366,  366,  367,  367,  367,
      382,  356,  382,  953,  360,  373,  373,  373,  366,  370,
      370,  370,  372,  372,  372,  393,  393,  393,  407,  360,

      407,  954,  408,  370,  408,  955,  372,  409,  409,  409,
      412,  409,  412,  409,  413,  414,  413,  414,  415,  956,
      415,  416,  416,  416,  419,  416,  419,  416,  422,  957,
      422,  420,  420,  420,  421,  421,  421,  958,  412,  407,
      419,  408,  413,  420,  420,  420,  421,  421,  421,  959,
      423,  423,  423,  414,  423,  960,  423,  415,  426,  961,
      426,  427,  427,  427,  963,  427,  422,  427,  430,  430,
      430,  431,  431,  431,  432,  431,  432,  431,  964,  965,
      430,  430,  430,  433,  433,  433,  426,  441,  966,  441,
      444,  444,  444,  445,  445,  445,  451,  451,  451,  454,

      454,  454,  455,  455,  455,  967,  968,  445,  456,  456,
      456,  969,  970,  454,  459,  459,  459,  432,  460,  460,
      460,  971,  456,  467,  467,  467,  972,  974,  459,  470,
      470,  470,  471,  471,  471,  975,  456,  473,  473,  473,
      494,  976,  494,  470,  506,  507,  506,  507,  508, 1000,
      508,  509,  509,  509,  510,  511,  510,  511,  512,  517,
      512,  517, 1001,  509,  509,  509,  516,  516,  516,  513,
      513,  513,  514,  514,  514,  547,  514,  547,  514, 1002,
      508,  513,  513,  513,  515,  515,  515,  512,  507, 1004,
     1005,  510,  506,  518,  518,  518,  515,  515,  515,  660,

      517,  660,  522,  511,  522,  518,  518,  518,  519,  519,
      519,  674,  519,  674,  519,  522,  534,  534,  534,  535,
      535,  535, 1006,  522,  543,  543,  543,  544,  544,  544,
      534,  545,  545,  545,  549,  549,  549,  557,  557,  557,
     1007,  544,  558,  558,  558,  567,  567,  567,  595, 1008,
      595,  557,  594,  594,  594,  596,  567,  596,  597,  597,
      597,  599,  567,  599,  594,  594,  594,  605,  605,  605,
      597,  597,  597,  598,  598,  598,  606,  598,  606,  598,
      595,  599,  600,  600,  600,  596,  601,  609,  601,  609,
     1009,  721,  601,  721,  600,  600,  600,  601,  610,  685,

      610,  685,  601,  601,  741,  601,  741, 1010,  601,  602,
      602,  602,  609,  602, 1011,  602,  607,  607,  607,  606,
      608,  608,  608,  610,  608,  693,  608,  693,  607,  607,
      607,  612,  612,  612,  616,  616,  616,  685,  617,  617,
      617,  622,  622,  622,  690,  612,  690, 1012,  616,  617,
      623,  623,  623, 1013, 1014,  617,  624,  624,  624,  631,
      631,  631, 1016,  693,  623,  637,  637,  637, 1017, 1020,
      624,  640,  640,  640,  644,  644,  644, 1021, 1022,  637,
      645,  645,  645, 1023,  686,  640,  686, 1024,  644,  683,
      683,  683,  690,  684,  684,  684, 1025,  684,  640,  684,

     1026,  683,  683,  683,  640,  637,  687,  687,  687,  694,
      687,  694,  687, 1027, 1031,  686,  691,  691,  691,  692,
      692,  692, 1032,  692,  695,  692,  695, 1033,  691,  691,
      691,  696,  697,  696,  697,  698,  699,  698,  699,  700,
      700,  700, 1036,  700,  797,  700,  797,  694,  697,  695,
      703,  703,  703, 1037, 1038,  696,  699, 1039,  790,  698,
      790, 1040,  703,  703,  703, 1041,  791,  695,  791,  797,
      697, 1042,  696,  704,  704,  704,  706,  706,  706,  707,
      707,  707,  712,  712,  712,  704,  704,  704, 1043, 1044,
      706,  713,  713,  713, 1045,  790,  712,  723,  723,  723,

      724,  724,  724,  725,  725,  725,  726,  726,  726,  791,
     1047,  723,  736,  736,  736, 1050, 1053,  725,  737,  737,
      737,  738,  738,  738, 1054, 1055,  736,  739,  739,  739,
     1056,  792,  737,  792, 1057,  738,  743,  743,  743,  744,
      744,  744,  750,  750,  750,  751,  751,  751, 1058, 1059,
      743,  787,  787,  787,  796,  787,  796,  787, 1060,  751,
      793,  793,  793,  798,  793,  798,  793,  799, 1061,  799,
      792,  800,  801,  800,  801,  802,  803,  802,  803,  804,
      805,  804,  805,  811,  811,  811, 1085,  806,  806,  806,
      897,  796,  897, 1086,  802,  893,  798,  893,  799,  806,

      806,  806,  807,  807,  807,  893,  807, 1089,  807, 1090,
      801,  803, 1091,  989,  800,  989,  897,  808,  808,  808,
      804,  809,  809,  809, 1092,  809, 1093,  809,  805,  808,
      808,  808,  816,  816,  816,  827,  827,  827,  828,  828,
      828,  838,  838,  838,  839,  839,  839,  840,  840,  840,
      841,  841,  841, 1094,  989,  838,  842,  842,  842, 1095,
     1096,  840,  847,  847,  847,  853,  853,  853,  854,  854,
      854,  855,  855,  855,  889,  889,  889, 1098, 1103,  853,
      890,  890,  890, 1107, 1108,  855,  889,  889,  889,  891,
     1109,  891,  890,  890,  890,  892,  892,  892,  894,  894,

      894,  895,  896,  895,  896, 1110, 1111,  892,  892,  892,
      894,  894,  894,  898,  898,  898,  899,  891,  899,  901,
     1112,  901,  900,  900,  900,  898,  898,  898, 1117,  895,
      927,  927,  927,  896,  900,  900,  900, 1118,  894,  902,
      902,  902, 1121,  902,  927,  902,  905,  905,  905,  892,
      905, 1122,  905,  932,  932,  932, 1123,  984,  901,  984,
     1124,  899,  933,  933,  933, 1125,  900,  939,  939,  939,
      943,  943,  943,  944,  944,  944,  945,  945,  945, 1119,
     1126,  939,  977,  977,  977, 1127, 1119,  944,  980,  980,
      980,  983,  983,  983,  977,  977,  977,  978,  978,  978,

      984,  978, 1128,  978,  979,  979,  979,  981,  981,  981,
      982,  982,  982,  987,  987,  987,  979,  979,  979,  981,
      981,  981,  982,  982,  982,  985, 1129,  985,  986,  986,
      986,  988,  985,  988,  990,  991,  990,  991, 1131, 1132,
      986,  986,  986,  993,  993,  993,  992,  992,  992, 1133,
      994,  990,  994,  995,  995,  995, 1134,  988,  992,  992,
      992, 1136,  997,  991,  997,  995,  995,  995,  996,  996,
      996,  998, 1080,  998, 1080, 1138,  990, 1139,  994,  999,
      999,  999, 1003, 1003, 1003, 1163,  997, 1015, 1015, 1015,
     1018, 1018, 1018,  999, 1164, 1165, 1003, 1080, 1166,  998,

     1070, 1015, 1070, 1167, 1018, 1019, 1019, 1019, 1028, 1028,
     1028, 1029, 1029, 1029, 1030, 1030, 1030, 1034, 1034, 1034,
     1168, 1069, 1028, 1069, 1169, 1029, 1062, 1062, 1062, 1072,
     1062, 1072, 1062, 1065, 1065, 1065, 1066, 1066, 1066, 1067,
     1067, 1067, 1070, 1067, 1074, 1067, 1074, 1170, 1066, 1066,
     1066, 1068, 1068, 1068, 1071, 1071, 1071, 1073, 1076, 1073,
     1076, 1173, 1069, 1073, 1075, 1075, 1075, 1160, 1074, 1077,
     1077, 1077, 1072, 1073, 1160, 1184, 1075, 1075, 1075, 1073,
     1078, 1185, 1078, 1079, 1079, 1079, 1083, 1083, 1083, 1081,
     1081, 1081, 1082, 1082, 1082, 1084, 1084, 1084, 1186, 1187,

     1076, 1081, 1081, 1081, 1189, 1143, 1082, 1143, 1194, 1084,
     1087, 1087, 1087, 1088, 1088, 1088, 1097, 1097, 1097, 1195,
     1145, 1078, 1145, 1196, 1087, 1099, 1099, 1099, 1197, 1143,
     1097, 1100, 1100, 1100, 1101, 1101, 1101, 1198, 1199, 1099,
     1102, 1102, 1102, 1200, 1201, 1100, 1104, 1104, 1104, 1105,
     1105, 1105, 1145, 1202, 1102, 1106, 1106, 1106, 1113, 1113,
     1113, 1203, 1204, 1105, 1114, 1114, 1114, 1205, 1146, 1106,
     1146, 1206, 1113, 1115, 1115, 1115, 1116, 1116, 1116, 1140,
     1140, 1140, 1147, 1140, 1147, 1140, 1144, 1144, 1144, 1148,
     1116, 1148, 1149, 1207, 1149, 1151, 1151, 1151, 1144, 1144,

     1144, 1208, 1150, 1150, 1150, 1209, 1146, 1147, 1152, 1153,
     1152, 1153, 1210, 1148, 1150, 1150, 1150, 1154, 1211, 1154,
     1213, 1147, 1231, 1232, 1149, 1153, 1155, 1155, 1155, 1235,
     1116, 1156, 1156, 1156, 1214, 1156, 1214, 1156, 1155, 1155,
     1155, 1157, 1157, 1157, 1158, 1158, 1158, 1159, 1159, 1159,
     1152, 1236, 1154, 1161, 1161, 1161, 1237, 1238, 1158, 1162,
     1162, 1162, 1171, 1171, 1171, 1239, 1214, 1161, 1172, 1172,
     1172, 1174, 1174, 1174, 1240, 1241, 1171, 1175, 1175, 1175,
     1176, 1176, 1176, 1242, 1244, 1174, 1177, 1177, 1177, 1178,
     1178, 1178, 1179, 1179, 1179, 1180, 1180, 1180, 1251, 1252,

     1177, 1181, 1181, 1181, 1253, 1217, 1179, 1217, 1254, 1180,
     1182, 1182, 1182, 1183, 1183, 1183, 1188, 1188, 1188, 1190,
     1190, 1190, 1257, 1262, 1182, 1191, 1191, 1191, 1263, 1264,
     1188, 1192, 1192, 1192, 1193, 1193, 1193, 1265, 1266, 1191,
     1215, 1215, 1215, 1216, 1216, 1216, 1267, 1218, 1193, 1218,
     1217, 1268, 1215, 1215, 1215, 1219, 1220, 1219, 1220, 1221,
     1222, 1221, 1222, 1223, 1223, 1223, 1224, 1225, 1224, 1225,
     1226, 1269, 1226, 1227, 1227, 1227, 1270, 1227, 1271, 1227,
     1230, 1230, 1230, 1272, 1218, 1234, 1234, 1234, 1219, 1233,
     1233, 1233, 1273, 1274, 1224, 1243, 1243, 1243, 1226, 1220,

     1221, 1222, 1275, 1233, 1277, 1278, 1225, 1245, 1245, 1245,
     1246, 1246, 1246, 1247, 1247, 1247, 1248, 1248, 1248, 1249,
     1249, 1249, 1250, 1250, 1250, 1279, 1291, 1247, 1255, 1255,
     1255, 1256, 1256, 1256, 1258, 1258, 1258, 1259, 1259, 1259,
     1292, 1294, 1255, 1260, 1260, 1260, 1261, 1261, 1261, 1295,
     1280, 1259, 1280, 1281, 1281, 1281, 1282, 1283, 1282, 1283,
     1261, 1284, 1285, 1284, 1285, 1286, 1287, 1286, 1287, 1288,
     1289, 1288, 1289, 1290, 1296, 1290, 1293, 1293, 1293, 1297,
     1298, 1299, 1300, 1301, 1282, 1302, 1304, 1280, 1305, 1284,
     1303, 1303, 1303, 1307, 1285, 1309, 1313, 1286, 1314, 1283,

     1306, 1306, 1306, 1308, 1308, 1308, 1315, 1316, 1287, 1317,
     1318, 1288, 1319, 1289, 1306, 1290, 1310, 1310, 1310, 1311,
     1311, 1311, 1312, 1312, 1312, 1320, 1321, 1324, 1325, 1319,
     1326, 1327, 1328, 1311, 1329, 1330, 1340, 1330, 1331, 1332,
     1331, 1332, 1333, 1334, 1333, 1334, 1335, 1341, 1335, 1336,
     1336, 1336, 1337, 1337, 1337, 1338, 1342, 1338, 1343, 1344,
     1345, 1336, 1336, 1336, 1337, 1337, 1337, 1346, 1333, 1347,
     1335, 1339, 1339, 1339, 1348, 1348, 1348, 1345, 1330, 1350,
     1331, 1334, 1332, 1339, 1339, 1339, 1351, 1338, 1348, 1349,
     1349, 1349, 1352, 1353, 1353, 1353, 1354, 1354, 1354, 1355,

     1356, 1358, 1359, 1349, 1357, 1357, 1357, 1353, 1361, 1362,
     1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374,
     1387, 1374, 1375, 1375, 1375, 1376, 1377, 1376, 1377, 1379,
     1378, 1379, 1378, 1389, 1375, 1375, 1375, 1380, 1380, 1380,
     1381, 1381, 1381, 1382, 1382, 1382, 1383, 1383, 1383, 1380,
     1380, 1380, 1390, 1392, 1379, 1382, 1382, 1382, 1384, 1393,
     1384, 1374, 1385, 1385, 1385, 1394, 1376, 1378, 1395, 1377,
     1386, 1386, 1386, 1400, 1385, 1385, 1385, 1388, 1388, 1388,
     1391, 1391, 1391, 1396, 1396, 1396, 1397, 1397, 1397, 1401,
     1404, 1388, 1405, 1406, 1391, 1407, 1384, 1396, 1398, 1398,

     1398, 1399, 1399, 1399, 1402, 1402, 1402, 1403, 1403, 1403,
     1409, 1410, 1398, 1411, 1412, 1413, 1414, 1415, 1402, 1416,
     1418, 1419, 1419, 1419, 1420, 1420, 1420, 1421, 1421, 1421,
     1422, 1430, 1422, 1419, 1419, 1419, 1420, 1420, 1420, 1423,
     1424, 1423, 1424, 1425, 1434, 1425, 1426, 1426, 1426, 1427,
     1427, 1427, 1437, 1428, 1422, 1428, 1429, 1429, 1429, 1431,
     1431, 1431, 1432, 1432, 1432, 1433, 1433, 1433, 1436, 1436,
     1436, 1423, 1438, 1431, 1435, 1435, 1435, 1439, 1425, 1433,
     1440, 1443, 1424, 1441, 1441, 1441, 1444, 1447, 1435, 1449,
     1428, 1442, 1442, 1442, 1445, 1445, 1445, 1446, 1446, 1446,

     1448, 1448, 1448, 1451, 1452, 1453, 1454, 1455, 1445, 1456,
     1457, 1459, 1472, 1474, 1448, 1460, 1460, 1460, 1461, 1461,
     1461, 1462, 1462, 1462, 1463, 1475, 1463, 1460, 1460, 1460,
     1464, 1476, 1464, 1465, 1465, 1465, 1466, 1467, 1466, 1467,
     1468, 1468, 1468, 1477, 1478, 1465, 1465, 1465, 1469, 1469,
     1469, 1470, 1470, 1470, 1468, 1479, 1463, 1471, 1471, 1471,
     1473, 1473, 1473, 1484, 1466, 1470, 1480, 1480, 1480, 1481,
     1481, 1481, 1482, 1482, 1482, 1464, 1483, 1483, 1483, 1467,
     1485, 1486, 1487, 1481, 1488, 1489, 1482, 1490, 1491, 1492,
     1493, 1493, 1493, 1494, 1495, 1494, 1495, 1496, 1496, 1496,

     1497, 1497, 1497, 1498, 1503, 1498, 1500, 1500, 1500, 1496,
     1496, 1496, 1499, 1499, 1499, 1501, 1501, 1501, 1504, 1498,
     1500, 1505, 1495, 1506, 1499, 1499, 1499, 1502, 1502, 1502,
     1494, 1507, 1508, 1509, 1510, 1510, 1510, 1511, 1511, 1511,
     1512, 1512, 1512, 1513, 1514, 1515, 1516, 1517, 1510, 1518,
     1519, 1520, 1521, 1522, 1523, 1522, 1523, 1524, 1524, 1524,
     1525, 1529, 1525, 1526, 1526, 1526, 1527, 1527, 1527, 1530,
     1523, 1528, 1528, 1528, 1531, 1526, 1526, 1526, 1532, 1532,
     1532, 1533, 1534, 1535, 1536, 1536, 1536, 1537, 1538, 1541,
     1543, 1544, 1532, 1545, 1550, 1546, 1522, 1546, 1547, 1525,

     1547, 1548, 1555, 1548, 1549, 1549, 1549, 1557, 1558, 1532,
     1559, 1546, 1551, 1551, 1551, 1552, 1552, 1552, 1553, 1553,
     1553, 1554, 1554, 1554, 1561, 1562, 1551, 1564, 1565, 1552,
     1565, 1574, 1553, 1556, 1556, 1556, 1566, 1547, 1566, 1567,
     1577, 1567, 1579, 1580, 1548, 1581, 1582, 1556, 1568, 1568,
     1568, 1569, 1569, 1569, 1570, 1570, 1570, 1590, 1571, 1571,
     1571, 1583, 1568, 1583, 1584, 1569, 1584, 1565, 1572, 1572,
     1572, 1567, 1571, 1573, 1573, 1573, 1575, 1575, 1575, 1566,
     1576, 1576, 1576, 1578, 1578, 1578, 1585, 1592, 1585, 1595,
     1575, 1586, 1586, 1586, 1596, 1597, 1584, 1578, 1587, 1587,

     1587, 1588, 1588, 1588, 1583, 1586, 1589, 1589, 1589, 1591,
     1591, 1591, 1593, 1593, 1593, 1594, 1594, 1594, 1598, 1599,
     1600, 1599, 1600, 1601, 1585, 1601, 1593, 1602, 1602, 1602,
     1603, 1604, 1605, 1605, 1605, 1606, 1607, 1608, 1609, 1610,
     1613, 1610, 1611, 1612, 1611, 1612, 1614, 1615, 1617, 1623,
     1619, 1599, 1619, 1620, 1625, 1620, 1632, 1626, 1600, 1626,
     1601, 1621, 1621, 1621, 1622, 1622, 1622, 1624, 1624, 1624,
     1627, 1627, 1627, 1621, 1621, 1621, 1635, 1610, 1622, 1611,
     1641, 1624, 1627, 1627, 1627, 1612, 1643, 1619, 1628, 1628,
     1628, 1629, 1629, 1629, 1647, 1620, 1630, 1630, 1630, 1626,

     1628, 1628, 1628, 1631, 1631, 1631, 1633, 1633, 1633,  876,
     1630, 1634, 1634, 1634, 1636, 1636, 1636, 1637, 1637, 1637,
     1633, 1638, 1638, 1638,  874,  873, 1636, 1636, 1636, 1637,
     1637, 1637, 1639, 1639, 1639, 1640, 1640, 1640, 1642, 1642,
     1642, 1644, 1644, 1644, 1645, 1645, 1645, 1646, 1646, 1646,
     1649, 1649, 1649, 1644, 1644, 1644, 1650, 1650, 1650, 1651,
     1651, 1651, 1652, 1652, 1652, 1653, 1653, 1653,  872,  871,
     1650,  870,  869, 1651, 1655, 1655, 1655, 1655, 1655, 1656,
     1656, 1656, 1656, 1656, 1657, 1657, 1657, 1657, 1657, 1658,
     1658, 1658, 1658, 1658, 1659, 1659, 1659, 1659, 1659, 1660,

     1660, 1660, 1660, 1660, 1661, 1661, 1661, 1661, 1661, 1662,
      868,  867, 1662, 1663, 1663, 1663, 1663, 1664, 1664,  866,
     1664, 1664, 1665, 1665, 1665,  865, 1665,  864,  863,  862,
      861,  860,  859,  858,  857,  856,  852,  851,  850,  849,
      848,  846,  845,  844,  843,  837,  836,  835,  834,  833,
      832,  831,  830,  829,  826,  825,  824,  823,  822,  821,
      820,  819,  818,  817,  815,  814,  813,  812,  810,  785,
      784,  783,  782,  781,  780,  779,  778,  777,  776,  775,
      774,  773,  772,  771,  770,  769,  768,  767,  766,  765,
      764,  763,  762,  761,  760,  759,  758,  757,  756,  755,

      754,  753,  752,  749,  748,  747,  746,  745,  742,  740,
      735,  734,  733,  732,  731,  730,  729,  728,  727,  722,
      720,  719,  718,  717,  716,  715,  714,  711,  710,  709,
      708,  705,  682,  680,  679,  678,  677,  676,  675,  673,
      670,  669,  668,  667,  666,  665,  664,  663,  662,  661,
      659,  658,  657,  656,  655,  654,  653,  652,  651,  650,
      649,  648,  647,  646,  643,  642,  641,  639,  638,  636,
      635,  634,  633,  632,  630,  629,  628,  627,  626,  625,
      621,  620,  619,  618,  614,  613,  611,  593,  592,  591,
      590,  589,  587,  586,  585,  584,  583,  582,  581,  580,

      579,  578,  577,  576,  575,  574,  571,  570,  569,  568,
      564,  563,  561,  560,  559,  556,  554,  553,  552,  551,
      550,  548,  546,  542,  541,  540,  539,  537,  536,  533,
      532,  531,  530,  529,  528,  527,  526,  525,  524,  523,
      505,  504,  502,  500,  499,  498,  497,  496,  495,  493,
      492,  491,  490,  489,  487,  486,  485,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  475,  474,  472,  469,
      468,  466,  465,  464,  463,  462,  461,  458,  457,  453,
      452,  450,  449,  448,  447,  446,  443,  442,  440,  439,
      438,  437,  436,  435,  434,  406,  405,  404,  403,  402,

      401,  400,  399,  398,  397,  396,  395,  394,  392,  391,
      390,  389,  388,  387,  386,  384,  383,  381,  380,  379,
      378,  377,  376,  375,  374,  371,  369,  368,  365,  364,
      363,  362,  361,  359,  358,  357,  355,  354,  351,  350,
      349,  348,  347,  346,  343,  342,  341,  340,  339,  338,
      337,  336,  335,  334,  310,  309,  307,  306,  305,  304,
      303,  302,  301,  300,  299,  298,  297,  295,  294,  293,
      292,  291,  290,  289,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  279,  278,  276,  275,  274,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  259,

      258,  256,  255,  254,  253,  252,  251,  250,  249,  226,
      225,  224,  223,  222,  221,  220,  219,  218,  217,  216,
      215,  214,  213,  212,  211,  210,  208,  207,  206,  205,
      204,  203,  202,  201,  200,  199,  198,  196,  195,  194,
      193,  191,  190,  189,  188,  186,  185,  184,  183,  182,
      181,  180,  179,  178,  176,  175,  174,  173,  172,  170,
      148,  147,  146,  145,  143,  142,  141,  140,  138,  137,
      136,  135,  134,  133,  132,  131,  130,  128,  127,  126,
      125,  124,  123,  122,  121,  119,  115,  114,  113,  112,
      111,  109,  108,  105,   86,   81,   80,   79,   77,   73,

       72,   71,   70,   69,   67,   64,   40,   37,   17,    8,
        7,    6,    5,    4,    3, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[188] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 
    0, 1, 0, 1, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "OSParseosol.l"
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin, 
 * @version 1.1, 10/07/2008
 * @since   OS1.1
 *
 * \remarks
 * Copyright (C) 2005-2008, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "OSParseosol.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSoLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"

#define PARSERDEBUG

#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;








#line 100 "OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 1866 "OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 110 "OSParseosol.l"


 
#line 2112 "OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1655 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3416 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 113 "OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 118 "OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 119 "OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 120 "OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 122 "OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 136 "OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 138 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 139 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 140 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 141 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 142 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 143 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 144 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 145 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 146 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 147 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 148 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 149 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 150 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 151 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 152 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 153 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 154 "OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 155 "OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 156 "OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 158 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 159 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 160 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 161 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 162 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 163 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 164 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 165 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 166 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 167 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 168 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 169 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 170 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 171 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 172 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 173 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 174 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 175 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 176 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 177 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 178 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 179 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 180 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 181 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 182 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 183 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 184 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 185 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 187 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATLBATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 188 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATLBATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 189 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATUBATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 190 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATUBATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 192 "OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 193 "OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 194 "OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 195 "OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 196 "OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 197 "OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 198 "OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 199 "OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 200 "OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 201 "OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 202 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 203 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 205 "OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 206 "OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 207 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 208 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 209 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 210 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 211 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 212 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 213 "OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 214 "OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 215 "OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 216 "OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 217 "OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 218 "OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 219 "OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 220 "OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 221 "OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 222 "OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 223 "OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 224 "OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 225 "OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 226 "OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 227 "OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 228 "OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 230 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 231 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 232 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZESTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 233 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZEEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 234 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 235 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 236 "OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 237 "OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 239 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 240 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 242 "OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 243 "OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 244 "OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 245 "OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 246 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 247 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 248 "OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 249 "OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 250 "OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 251 "OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 252 "OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 253 "OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 254 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 255 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 256 "OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 257 "OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 258 "OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 259 "OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 260 "OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 261 "OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 262 "OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 263 "OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 264 "OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 265 "OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 266 "OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 267 "OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 268 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 269 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 270 "OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 271 "OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 272 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 273 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 274 "OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 275 "OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 278 "OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 279 "OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 280 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 281 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 282 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 283 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 284 "OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 285 "OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 286 "OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 287 "OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 288 "OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 289 "OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 290 "OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 291 "OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 292 "OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 293 "OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 294 "OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 295 "OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 296 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 297 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 298 "OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 299 "OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 300 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 301 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 302 "OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 303 "OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 304 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 305 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 306 "OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 307 "OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 308 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 309 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 310 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 311 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 312 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 313 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 316 "OSParseosol.l"
{ YY_PRINT; /*yylval->sval = strdup( yytext);*/   yylval->sval = yytext; yyextra->errorText = yylval->sval;  return (ELEMENTTEXT); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 319 "OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 176:
#line 321 "OSParseosol.l"
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 321 "OSParseosol.l"
;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 322 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 324 "OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 180:
#line 326 "OSParseosol.l"
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 326 "OSParseosol.l"
;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 327 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 330 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 331 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;  return(ATTRIBUTETEXT);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 332 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 334 "OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 346 "OSParseosol.l"
ECHO;
	YY_BREAK
#line 3339 "OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1655 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1655 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1654);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 346 "OSParseosol.l"





