#line 2 "OSParseosol.cpp"

#line 4 "OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osollex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 260
#define YY_END_OF_BUFFER 261
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2101] =
    {   0,
        1,    1,  258,  258,  256,  256,  257,  257,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  261,  259,
        1,    2,  246,    2,  246,    6,  246,    5,  259,    4,
      246,    2,  258,  260,  256,  257,  247,  249,  250,  249,
      253,  254,  253,    1,  246,  246,    6,  246,    5,    0,
        4,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,    3,    6,    6,  246,    7,
        5,    0,    0,  252,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    4,  246,  258,  256,  257,  247,    0,

      255,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,    0,  246,    6,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      134,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    6,  251,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,    0,  246,  246,

      246,  246,  246,  246,  246,    6,  248,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  212,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   96,    0,    0,    0,
        0,  204,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  196,    0,    0,    0,    0,    0,    0,  198,
      246,  246,  246,  246,  246,   27,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,    0,   78,   79,

      246,  246,  246,  246,  246,  246,  246,    6,    0,    0,
        0,    0,    0,    0,    0,    0,  135,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  146,    0,    0,    0,    0,    0,    0,    0,    0,
      136,    0,    0,    0,  246,  246,  246,    0,  246,   27,

      246,   82,  246,  246,  246,  246,  246,   83,  246,    0,
      246,  246,  246,  246,  246,  246,    0,  246,  246,  246,
        0,  246,  246,    0,    0,    0,    0,    0,  213,    0,
        0,    0,    0,    0,  135,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   97,    0,    0,    0,    0,
        0,    0,    0,    0,  205,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  197,    0,    0,
        0,    0,    0,    0,    0,    0,  199,    0,    0,    0,
        0,  180,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  223,  108,

        0,    0,    0,    0,    0,    0,    0,  227,    0,    0,
        0,   86,   85,  122,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  246,
      246,    0,   76,   77,  246,   82,  246,  246,  246,  246,
       83,    0,   48,   49,  246,  246,  246,  246,  246,    0,
       56,   57,  246,  246,    0,   66,   67,  246,    0,  246,
        0,    0,    0,    0,  213,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      224,   97,    0,    0,    0,    0,    0,    0,    0,  228,
      205,    0,    0,    0,    0,   87,    0,    0,    0,    0,

      147,    0,    0,    0,    0,    0,    0,  197,    0,    0,
        0,    0,    0,  137,    0,    0,  199,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  186,  225,  223,    0,    0,
        0,    0,    0,    0,    0,  229,  227,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   92,    0,    0,    0,  246,  246,  246,
      246,  246,  246,  246,   46,   47,  246,  246,   84,  246,
        0,  246,   28,  246,   54,   55,  246,  246,   64,   65,
        0,   70,   71,  246,    0,    0,    0,    0,    0,  181,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  224,    0,  109,    0,    0,
        0,    0,    0,    0,  228,    0,    0,    0,   87,    0,
      123,    0,    0,    0,  147,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  137,    0,    0,    0,  182,
      184,    0,    0,  118,    0,    0,    0,    0,    0,    0,
       90,    0,    0,    0,    0,    0,  225,    0,    0,  112,
      138,    0,    0,    0,    0,  229,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  170,    0,    0,   94,    0,
        0,    0,    0,    0,  231,    0,  190,    0,    0,  246,

      246,  246,  246,  246,    0,  246,  246,  246,   84,    0,
       52,   53,   28,  246,  246,  246,    0,   68,   69,    0,
       74,   75,    0,    0,    0,  181,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  187,  109,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  123,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  232,    0,    0,
       93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  243,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  116,  158,    0,
        0,    0,    0,    0,    0,    0,    0,  233,  231,    0,
        0,  114,    0,  246,    0,  246,  246,  246,    0,   42,
       43,  246,  246,    0,  246,  246,  246,  246,  246,  246,
      246,  246,   50,   51,  246,  246,    0,   62,   63,   72,
       73,    0,  183,    0,  185,    0,    0,    0,  119,    0,
        0,    0,    0,    0,    0,    0,    0,   91,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  187,    0,  244,
        0,  113,    0,  139,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  171,    0,    0,

        0,    0,   95,    0,    0,    0,    0,    0,  232,    0,
       93,    0,  191,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  245,  243,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  233,    0,
        0,  172,    0,   34,   35,  246,  246,  246,   40,   41,
      246,    0,   80,   81,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,   60,   61,
      183,  185,    0,    0,  119,    0,    0,    0,    0,    0,

        0,    0,   91,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  244,  113,  139,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  117,    0,  159,
      171,    0,    0,    0,    0,   95,    0,    0,    0,    0,
        0,    0,  191,    0,  115,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  245,    0,    0,    0,
        0,    0,    0,  200,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  100,    0,    0,    0,    0,  188,
       32,   33,  246,  246,  246,  246,  246,  246,   10,  246,

      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      117,  159,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  115,    0,  173,    0,  208,    0,    0,    0,
      220,    0,    0,  152,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  128,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      102,    0,    0,    0,    0,  246,    0,  246,   29,  246,

       30,  246,  246,   25,  246,   10,  246,  246,  246,  246,
       23,  246,  246,  246,  246,  246,   21,  246,  246,   20,
      246,  246,  246,   31,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  201,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      101,    0,    0,    0,    0,  189,  173,    0,  142,    0,
        0,  235,    0,    0,    0,  239,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  104,    0,    0,  222,    0,
      130,  124,    0,    0,  226,   98,   88,  120,    0,    0,

        0,    0,    0,    0,  218,    0,    0,    0,    0,   38,
       39,   29,   30,  246,    0,   25,  246,  246,  246,  246,
       23,  246,  246,  246,  246,  246,   21,  246,   20,  246,
      246,   31,    0,    0,  209,    0,    0,  236,    0,    0,
      221,    0,  240,    0,    0,  153,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  129,    0,
        0,  201,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  103,  101,    0,    0,    0,  189,    0,  237,
      235,    0,    0,  241,  239,    0,  166,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  222,    0,  126,  226,

        0,    0,    0,    0,    0,  148,  216,    0,    0,    0,
       36,   37,    0,   45,   44,  246,  246,  246,   13,  246,
      246,  246,  246,  246,  246,  246,   12,  246,  246,  246,
      246,    0,    0,  209,    0,  143,  236,    0,  221,  240,
        0,  153,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  105,    0,    0,  131,  129,    0,  125,    0,    0,
       99,    0,   89,    0,  121,    0,    0,    0,    0,    0,
        0,  103,    0,  219,    0,    0,    0,    0,  237,    0,
        0,    0,  241,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  110,

        0,    0,  246,  246,   13,  246,    9,  246,  246,  246,
      246,  246,  246,   12,  246,  246,  246,    0,   59,   58,
        0,  143,    0,    0,    0,  167,    0,    0,    0,    0,
        0,    0,    0,    0,  105,    0,  131,  125,    0,  127,
       99,   89,  121,    0,    0,    0,    0,    0,    0,  149,
      219,    0,  217,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  168,    0,    0,    0,    0,  246,  246,    9,
      246,  246,  246,  246,  246,  246,  246,  246,  246,    0,
        0,    0,  167,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  127,    0,    0,    0,    0,    0,  149,  217,
        0,  111,    0,  132,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  156,  106,    0,    0,    0,    0,
        0,    0,    0,    0,  230,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  169,    0,    0,  111,    0,    0,    0,  150,    0,
        0,    0,  214,    0,    0,    0,    0,    0,    0,    0,
      162,    0,    0,    0,  230,  246,  246,  246,  246,  246,
      246,  246,  246,   14,  246,   15,  246,  246,   16,    0,

      133,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  157,    0,  107,    0,    0,    0,  169,    0,    0,
        0,    0,    0,    0,  178,    0,    0,    0,    0,    0,
        0,    0,  242,    0,  140,    0,    0,  246,  246,  246,
       17,  246,  246,  246,  246,   14,   15,  246,   16,  133,
        0,    0,  151,    0,    0,    0,  215,    0,    0,    0,
        0,  157,  107,    0,    0,    0,  163,    0,    0,    0,
        0,  164,    0,    0,    0,    0,    0,    0,    0,  242,
        0,  144,    0,  246,   18,  246,   17,  246,  246,  246,
      246,  246,    0,  151,    0,  179,    0,  215,    0,    0,

        0,    0,    0,    0,  163,    0,  141,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   18,
      246,   11,  246,  246,  246,    8,  246,  246,    0,  165,
      179,    0,    0,    0,    0,    0,    0,    0,  141,    0,
      145,    0,    0,    0,    0,    0,    0,  174,    0,    0,
        0,    0,   11,  246,  246,    8,  246,  246,   26,  165,
        0,    0,    0,    0,    0,    0,    0,  145,    0,    0,
        0,    0,  206,  202,    0,  154,    0,    0,    0,  246,
      246,  246,   26,    0,    0,    0,    0,  175,    0,    0,
        0,    0,    0,    0,    0,  210,    0,    0,  160,    0,

      246,  246,  246,    0,    0,  207,    0,  203,  175,    0,
        0,  155,    0,    0,    0,    0,    0,    0,    0,    0,
      246,  246,  246,    0,  211,  207,  203,    0,  155,    0,
        0,  161,    0,    0,    0,    0,    0,    0,  246,  246,
      246,  211,    0,    0,  161,    0,    0,  234,    0,  238,
        0,    0,    0,  246,  246,  246,    0,    0,    0,  234,
      238,  176,    0,  194,  246,  246,  246,    0,    0,    0,
        0,  246,  246,  246,   19,    0,  177,    0,    0,  195,
        0,  246,  246,   22,   19,  177,    0,  195,    0,  246,
       24,   22,    0,  192,   24,    0,    0,  193,  193,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    1,    1,    7,    1,
        1,    6,    8,    1,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,   27,   28,   29,   30,   31,   32,
        6,   33,   34,   35,   36,   37,   38,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,   65,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2113] =
    {   0,
        0,   65, 3246, 3245, 3256, 3255, 3252, 3251,    0,    0,
        0,    0, 3242, 3241,   17,   18,   16,   19, 3255, 3264,
      129, 3249,  192, 3246,   18,   42, 3235,   49,  250,   21,
     3221, 3264,    0, 3264,    0,    0,    0, 3264, 3264, 3241,
     3264, 3264, 3232,    0,    0,   28,   84, 3231,   91,   29,
       33, 3217, 3207, 3202, 3188, 3187,    6,   49,   49,   52,
       62,   54,   60, 3203, 3198, 3264,   47,  213,  110, 3264,
      118, 3231,  272, 3264, 3181, 3199, 3184,   52,   64, 3189,
     3192,  156, 3181, 3186,   86, 3193,  201,   89, 3188,  169,
     3167,  166, 3190,  134, 3205,    0,    0,    0,    0, 3210,

     3264, 3168, 3168, 3171, 3170, 3160, 3180,  203, 3179, 3170,
     3168, 3166, 3165, 3151,  181,  194, 3175, 3159,  208, 3165,
     3161, 3163,  186,  207,  260, 3200, 3150, 3168, 3153,  222,
      196, 3158, 3161,  218, 3150, 3155,  232, 3162,  224,  191,
     3157,  284, 3136,  228, 3159,  260, 3140, 3144,    3, 3139,
     3264, 3135, 3143, 3140,  287, 3168, 3147, 3149, 3147, 3125,
     3134, 3134, 3136, 3125, 3129, 3135, 3122,  209, 3126, 3123,
     3121,  227, 3122, 3118, 3120, 3124, 3129, 3115,  333, 3264,
     3127, 3128, 3117, 3108,  336, 3110, 3106, 3125, 3124, 3119,
     3103, 3117, 3119, 3115, 3097, 3131,  346,  348, 3103, 3111,

     3094, 3113, 3093, 3091, 3104,  354, 3264,  318, 3091, 3095,
       72, 3090,  356, 3086, 3094, 3091,  317, 3119, 3098, 3100,
     3098, 3076, 3085, 3085, 3087, 3076, 3080, 3086, 3073,  303,
     3077, 3074, 3072,  283, 3073, 3069, 3071, 3075, 3080, 3066,
     3068, 3066,  322,  319, 3076, 3077, 3074, 3065, 3072, 3071,
     3055, 3053, 3053, 3067, 3053, 3057, 3082, 3063, 3070,  358,
     3061, 3060, 3055, 3051, 3057, 3045, 3041, 3051, 3055, 3036,
     3034, 3033, 3055, 3035, 3047, 3031, 3045, 3035, 3030, 3038,
     3039, 3027,  378, 3028,  380,  382,  386, 3042, 3030, 3021,
     3058,  388,  390, 3034, 3045, 3032, 3032,  396, 3264, 3264,

     3016,  405, 3033, 3021,  407, 3027, 3023,  409, 3015, 3013,
      370,  412, 3023, 3024, 3021,  416,  422, 3012, 3019, 3018,
     3002, 3000, 3000, 3014, 3000, 3004,  424, 3011, 3018,  410,
     3009,  433, 3004, 3000, 3006, 2994, 2990, 3000, 3004, 2985,
     2983, 2982,  435, 2985, 2997, 2981, 2995, 2985, 2980,  440,
     2974, 2980, 3019, 2991, 2973, 2991, 2977, 2972, 2986, 2983,
      343, 2969, 2977, 2965, 2983, 2976, 2977,  442, 2998, 2966,
     2970, 2984, 2968, 2971,  444, 2972,  319,  460, 2956, 2952,
     2949, 2977, 2965,  373, 2960, 2963, 2966, 2963, 2947, 2959,
     3264, 2948, 2970, 2960, 2945, 2950,  462,  477, 2958,  464,

      472,  483, 2945, 2935, 2946, 2939,  487,  489,  491,  493,
     2935, 2946, 2933, 2926, 2933,  499,  503, 2936, 2926,  509,
      511,  517, 2926, 2922, 2928, 2967, 2939,  519,  521, 2921,
     2939, 2925, 2920, 2934,  524, 2931,  375, 2917, 2925, 2913,
     2931, 2924, 2925,  526,  528,  532, 2946, 2914, 2918, 2932,
     2916, 2919,  535,  537,  539, 2920,  403,  544, 2904, 2900,
     2897,  546, 2914,  508, 2909, 2912,  554,  556, 2915, 2912,
     2896, 2908,  562, 2897, 2919,  564,  566, 2909, 2904, 2903,
     2932, 3264, 2888, 2902, 2900, 2894, 2882, 2883, 2882, 2902,
     2897, 2896,  437, 2882, 2890, 2889,  571, 2914,  574, 3264,

      264, 2879, 2893, 2871, 2876,  581, 2909,  584, 2867, 2877,
     2871,  588, 3264, 2891, 2863, 2867, 2880, 2861, 2860, 2860,
     2874, 2858, 2857, 2869, 2871, 2859, 2848, 2869, 2867, 2850,
     2851,  599, 3264, 3264, 2861,  591, 2866, 2859, 2848, 2846,
      593,  605, 2894, 2891, 2866,  611,  613,  615, 2843,  617,
     2890, 2887, 2856, 2849,  623, 2886, 2883,  630,  632,  638,
     2846, 2845, 2874,  640,  642, 2830, 2844, 2842, 2836, 2824,
     2825, 2824, 2844, 2839, 2838,  450, 2824, 2832, 2831,  645,
      647,  649,  653,  440, 2822, 2836, 2814, 2819,  656,  658,
      661, 2811, 2821, 2815,  663,  665,  669, 2808, 2812,  672,

      674, 2825, 2806, 2805, 2805, 2819, 2803,  676, 2802, 2814,
     2816, 2804,  679,  681, 2793, 2814,  685, 2812, 2795, 2794,
     2830, 2809, 2789, 2803, 2791, 2791, 2804, 2799, 2788, 2790,
     2789, 2791, 2790, 2795, 2779, 3264,  688,  690, 2823, 2790,
     2789, 2788,  664, 2781, 2776,  699,  701, 2817, 2780, 2762,
     2801, 2770,  539, 2767, 2775, 2764, 2762, 2776, 2775,  664,
     2770,  704, 2777, 3264, 2763, 2763, 2763, 2749, 2753, 2763,
     2770,  706, 2756, 2744, 3264, 3264, 2762,  708,  710,  715,
      723,  717,  732, 2749, 3264, 3264, 2765,  734, 3264, 3264,
      736, 2798, 2795,  742,  744, 2745, 2744, 2780,  750,  752,

     2759, 2739, 2753, 2741, 2741, 2754, 2749, 2738, 2740, 2739,
     2741, 2740, 2745, 2729,  754,  757,  759,  761, 2741, 2740,
     2739,  693, 2732, 2727,  763, 2732, 2714, 2753,  766,  770,
      772, 2722,  549, 2719,  775, 2726, 2710, 2703, 2671, 2669,
      748, 2664,  778, 2671,  782,  786, 2657, 2657, 2657, 3264,
     3264,   37,  100, 3264,  159,  199,  231,  241,  279,  376,
     3264,  771,  330,  372,  385,  397,  791,  393,  794, 3264,
     3264,  389,  397,  434,  427,  798,  447,  444,  470,  474,
      474,  497,  503,  511,  519,  537,  542,  555,  573,  546,
      558,  582,  801,  606,  804,  579, 3264,  595,  610,  807,

      622,  640,  647,  811,  819,  679,  813,  808,  829,  841,
      724,  725,  833,  682,  692,  835,  847, 3264, 3264,  853,
      743,  763,  859,  861,  735,  863,  739,  865,  746,  759,
      764,  767,  802,  848,  868,  853,  791,  803,  814,  822,
      877,  884,  886,  889,  893,  895,  816,  827,  849,  837,
      839,  861,  858,  900,  846,  858,  860,  866,  853,  911,
      868,  873,  914,  864,  866,  881,  919,  921,  868,  924,
      927,  930,  891,  892,  885,  886,  898,  893,  895,  896,
      887,  903,  909,  910,  898,  893,  913,  916,  913,  914,
      930,  920,  903,  960,  947,  963,  916,  925,  915,  907,

      933,  930,  916,  936,  929,  923,  930, 3264, 3264,  924,
      940,  962,  945,  953,  929,  963,  949,  988,  990,  983,
      948, 3264,  939,  995,  997,  948,  957,  947, 1005, 1004,
     1006,  951, 1013, 1015,  966,  971,  966,  972,  986,  989,
      996,  991, 3264, 3264,  996,  973, 1031, 1030, 1030, 3264,
     3264, 1037, 1039, 1044, 1048,  991,  996, 1050, 1053, 1016,
     1011, 1012, 1013, 1004, 1020, 1025, 1063, 1066, 1031, 1018,
     1013, 1033, 1035, 1032, 1033, 1049, 1039, 1079, 1081, 1083,
     1085, 1087, 1089, 1091, 1044, 1053, 1043, 1036, 1057, 1043,
     1064, 1057, 1049, 1057, 1106, 1108, 1110, 1112, 1059, 1075,

     1097, 1119, 1126, 1080, 1091, 1068, 1105, 1091, 1130, 1087,
     1135, 1137, 1139, 1141, 1078, 1106, 1088, 1100, 1095, 1106,
     1097, 1098, 1102, 1104, 1098, 1104, 1118, 1111, 1104, 1120,
     1105, 1110, 1125, 1109, 1123, 1165, 1167, 1160, 1132, 1130,
     1135, 1141, 1125, 1120, 1131, 1137, 1127, 1138, 1140, 1149,
     1151, 1139, 1140, 1137, 1164, 1143, 1139, 1142, 1191, 1138,
     1155, 3264, 1195, 1194, 1194, 1151, 1146, 1162, 3264, 3264,
     1152, 1205, 3264, 3264, 1157, 1211, 1152, 1172, 1176, 1169,
     1172, 1161, 1167, 1187, 1172, 1167, 1161, 1182, 3264, 3264,
     1226, 1228, 1187, 1174, 1231, 1188, 1183, 1194, 1185, 1186,

     1190, 1192, 1240, 1187, 1193, 1207, 1199, 1192, 1208, 1193,
     1198, 1213, 1197, 1252, 1254, 1256, 1220, 1218, 1223, 1229,
     1207, 1218, 1224, 1214, 1225, 1226, 1268, 1270, 1272, 1274,
     1276, 1245, 1247, 1235, 1236, 1284, 1233, 1263, 1243, 1239,
     1242, 1252, 1292, 1294, 1296, 1298, 1246, 1246, 1261, 1253,
     1249, 1255, 1252, 1266, 1267, 1265, 1256, 1264, 1273, 1270,
     1260, 1284, 1279, 1270, 1275, 1272, 1322, 1276, 1284, 1286,
     1288, 1283, 1288, 3264, 1279, 1290, 1282, 1294, 1279, 1284,
     1280, 1283, 1290, 1298, 3264, 1289, 1283, 1301, 1292, 3264,
     3264, 3264, 1344, 1346, 1348, 1309, 1351, 1353, 1355, 1308,

     1310, 1338, 1363, 1325, 1324, 1330, 1370, 1314, 1373, 1323,
     1378, 1322, 1325, 1340, 1332, 1328, 1335, 1332, 1347, 1348,
     1345, 1336, 1345, 1353, 1350, 1340, 1364, 1359, 1350, 1355,
     1360, 1362, 1364, 1360, 1407, 1358, 1369, 1361, 1373, 1358,
     1414, 1416, 1368, 1364, 1367, 1375, 1383, 1425, 1376, 1370,
     1388, 1430, 1432, 1434, 1436, 1377, 3264, 1384, 1441, 1410,
     3264, 1446, 1388, 3264, 1393, 1395, 1417, 1414, 1417, 1406,
     1407, 1422, 1419, 1425, 1463, 1420, 1412, 3264, 1426, 1406,
     1469, 1421, 1418, 1418, 1418, 1442, 1451, 1440, 1438, 1439,
     3264, 1431, 1431, 1466, 1428, 1486, 1488, 1494, 1496, 1498,

     1501, 1503, 1505, 1509, 1434, 1513, 1451, 1452, 1492, 1515,
     1520, 1479, 1468, 1493, 1483, 1525, 1527, 1489, 1531, 1533,
     1498, 1495, 1537, 1540, 1481, 1543, 1491, 1549, 1514, 1552,
     1554, 1500, 1559, 1502, 1505, 1527, 1524, 1528, 1515, 1517,
     1533, 1530, 1535, 1519, 1575, 1536, 1516, 1579, 1581, 1533,
     1530, 1530, 1530, 1554, 1563, 1552, 1550, 1551, 1595, 1597,
     1599, 1543, 1550, 1585, 1603, 1605, 1607, 1590, 3264, 1613,
     1596, 1616, 1564, 1623, 1604, 1620, 1584, 1594, 1573, 1593,
     1575, 1596, 1581, 1609, 1581, 3264, 1601, 1640, 1642, 1605,
     3264, 3264, 1604, 1646, 1648, 3264, 3264, 3264, 1599, 1600,

     1607, 1599, 1615, 1601, 1602, 1611, 1605, 1606, 1662, 1661,
     1661, 1668, 1670, 1672, 1674, 1680, 1622, 1624, 1682, 1629,
     1687, 1629, 1671, 1653, 1691, 1638, 1694, 1643, 1698, 1663,
     1702, 1707, 1685, 1709, 1711, 1713, 1717, 1719, 1664, 1721,
     1725, 1729, 1733, 1682, 1737, 1739, 1695, 1677, 1698, 1685,
     1704, 1689, 1718, 1690, 1747, 1711, 1750, 1753, 1755, 1757,
     1718, 1760, 1763, 1766, 1769, 1720, 1722, 1729, 1721, 1737,
     1722, 1779, 1782, 1785, 1787, 1742, 1736, 1791, 1756, 1795,
     1797, 1790, 1781, 1803, 1805, 1792, 3264, 1751, 1772, 1763,
     1767, 1765, 1769, 1764, 1771, 1769, 1819, 1780, 3264, 1822,

     1770, 1798, 1778, 1771, 1772, 3264, 3264, 1788, 1793, 1792,
     3264, 3264, 1832, 3264, 3264, 1797, 1799, 1838, 1840, 1843,
     1800, 1795, 1809, 1811, 1804, 1850, 1853, 1800, 1827, 1810,
     1859, 1862, 1829, 1868, 1870, 1874, 1876, 1853, 1878, 1881,
     1883, 1886, 1832, 1852, 1842, 1846, 1844, 1848, 1843, 1850,
     1896, 1899, 1853, 1902, 1904, 1906, 1908, 1912, 1914, 1918,
     1920, 1924, 1926, 1930, 1934, 1856, 1889, 1874, 1872, 1876,
     1936, 1940, 1942, 1946, 1948, 1897, 1907, 1894, 1952, 1914,
     1914, 1919, 1958, 1918, 1924, 1917, 1907, 1907, 1925, 1926,
     1910, 1918, 1929, 1921, 1927, 1922, 1926, 1942, 1925, 3264,

     1927, 1937, 1934, 1924, 1981, 1983, 1985, 1929, 1938, 1943,
     1934, 1937, 1938, 1993, 1954, 1944, 1957, 1999, 3264, 3264,
     1945, 2005, 1962, 1970, 2008, 2010, 1975, 1968, 1957, 1957,
     1975, 1976, 1960, 1968, 2020, 1981, 2024, 2026, 2028, 2030,
     2032, 2034, 2036, 1993, 1988, 1992, 2008, 1991, 2044, 2046,
     2048, 2050, 2052, 2054, 2006, 2020, 2017, 2012, 2014, 2017,
     2007, 2014, 2025, 2026, 2033, 2015, 2030, 2022, 2056, 2035,
     2034, 2018, 3264, 2032, 2024, 2040, 2080, 2032, 2038, 2084,
     2045, 2032, 2047, 2044, 2045, 2036, 2037, 2037, 2039, 2059,
     2049, 2051, 2099, 2045, 2052, 2062, 2063, 2070, 2051, 2066,

     2058, 2092, 2110, 2071, 2055, 2114, 2071, 2063, 2118, 2120,
     2122, 2124, 2087, 3264, 2072, 2087, 2089, 2083, 2075, 2077,
     2079, 2118, 2099, 2105, 3264, 3264, 2085, 2099, 2086, 2101,
     2094, 2099, 2101, 2146, 2148, 2094, 2100, 2097, 2098, 2116,
     2105, 2120, 2158, 2162, 2115, 2164, 2166, 2127, 2128, 2113,
     2115, 2118, 2157, 2138, 2144, 2179, 2182, 2130, 2130, 2145,
     2187, 2189, 2142, 2148, 2195, 2154, 2160, 2144, 3264, 2160,
     2148, 2169, 3264, 2154, 2169, 2159, 2157, 2172, 2210, 2179,
     3264, 2172, 2173, 2170, 2216, 2163, 2169, 2220, 2168, 2167,
     2174, 2188, 2227, 2229, 2231, 2235, 2182, 2237, 2239, 2242,

     2246, 2188, 2248, 2195, 2217, 2253, 2204, 2219, 2210, 2208,
     2260, 2264, 2266, 2269, 2225, 2238, 2272, 2276, 2233, 2237,
     2234, 2226, 2241, 2265, 3264, 2247, 2228, 2238, 2231, 2262,
     2240, 2291, 2293, 2244, 3264, 2241, 2247, 2298, 2245, 2301,
     2303, 2268, 2262, 2253, 2261, 2310, 2313, 2266, 2317, 2319,
     2280, 2322, 2324, 2326, 2291, 2329, 2331, 2276, 2286, 2278,
     2309, 2338, 2342, 2290, 2294, 2346, 2348, 2350, 2297, 2303,
     2309, 3264, 2301, 2308, 2307, 2301, 2318, 2309, 2323, 2363,
     2339, 3264, 2324, 2368, 2370, 2372, 2374, 2331, 2319, 2378,
     2339, 2326, 2383, 2387, 2389, 2393, 2337, 2395, 2341, 2340,

     2358, 2349, 2362, 2375, 2405, 2407, 2409, 2411, 2360, 2361,
     2373, 2358, 2376, 2376, 2363, 2361, 2376, 2370, 2387, 2424,
     2427, 2429, 2381, 2391, 2433, 2435, 2408, 2438, 2442, 2444,
     2448, 2383, 2406, 2409, 2396, 2395, 2410, 2404, 2458, 2460,
     2462, 2420, 2408, 2428, 2425, 2412, 2413, 2437, 2429, 2426,
     2414, 2432, 2476, 2418, 2449, 2479, 2429, 2482, 2484, 2486,
     2447, 2434, 2435, 2491, 2452, 2449, 2437, 2497, 2458, 2455,
     2445, 2447, 3264, 3264, 2447, 3264, 2454, 2464, 2462, 2479,
     2457, 2454, 2511, 2458, 2514, 2516, 2518, 2520, 2466, 2524,
     2476, 2486, 2483, 2479, 2481, 3264, 2480, 2492, 3264, 2493,

     2485, 2482, 2495, 2541, 2543, 2545, 2547, 2549, 2551, 2499,
     2554, 2559, 2514, 2563, 2518, 2515, 2512, 2522, 2532, 2526,
     2515, 2527, 2522, 2574, 2576, 2579, 2581, 2538, 2584, 2550,
     2587, 2590, 2548, 2593, 2595, 2547, 2557, 2543, 2555, 2550,
     2553, 2604, 2556, 2566, 2611, 2553, 2613, 2615, 2617, 2619,
     2578, 2577, 2568, 2573, 2575, 2571, 2584, 2584, 2575, 2633,
     2635, 3264, 2588, 3264, 2587, 2583, 2639, 2641, 2600, 2644,
     2602, 2592, 2648, 2650, 2654, 2657, 2660, 2608, 2665, 2667,
     2607, 2669, 2673, 2675, 2677, 2681, 2615, 2684, 2624, 2688,
     2690, 2692, 2631, 3264, 2694, 2696, 2698, 2700, 2703, 3264,

     2715, 2720, 2725, 2730, 2735, 2740, 2745, 2750, 2755, 2759,
     2764, 2769
    } ;

static yyconst flex_int16_t yy_def[2113] =
    {   0,
     2101, 2101, 2102, 2102, 2103, 2103, 2104, 2104, 2105, 2105,
     2105, 2105, 2106, 2106, 2107, 2107, 2108, 2108, 2100, 2100,
     2100, 2100,   21, 2100,   23,   23,   23,   23, 2100, 2100,
       23, 2100, 2109, 2100, 2110, 2111, 2112, 2100, 2100, 2100,
     2100, 2100, 2100,   21,   23,   23,   23,   23,   23,   29,
     2100,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 2100,   23,   23,   23, 2100,
       23, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100,   23, 2109, 2110, 2111, 2112, 2100,

     2100,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2100,   23,   23, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,   23, 2100,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2100,   23,   23,

       23,   23,   23,   23,   23, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
       23,   23,   23,   23,   23, 2100,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2100, 2100, 2100,

       23,   23,   23,   23,   23,   23,   23, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100,   23,   23,   23, 2100,   23, 2100,

       23, 2100,   23,   23,   23,   23,   23, 2100,   23, 2100,
       23,   23,   23,   23,   23,   23, 2100,   23,   23,   23,
     2100,   23,   23, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,   23,
       23, 2100, 2100, 2100,   23, 2100,   23,   23,   23,   23,
     2100, 2100, 2100, 2100,   23,   23,   23,   23,   23, 2100,
     2100, 2100,   23,   23, 2100, 2100, 2100,   23, 2100,   23,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100,   23,   23,   23,
       23,   23,   23,   23, 2100, 2100,   23,   23, 2100,   23,
     2100,   23, 2100,   23, 2100, 2100,   23,   23, 2100, 2100,
     2100, 2100, 2100,   23, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,   23,

       23,   23,   23,   23, 2100,   23,   23,   23, 2100, 2100,
     2100, 2100, 2100,   23,   23,   23, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100,   23, 2100,   23,   23,   23, 2100, 2100,
     2100,   23,   23, 2100,   23,   23,   23,   23,   23,   23,
       23,   23, 2100, 2100,   23,   23, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100,   23,   23,   23, 2100, 2100,
       23, 2100, 2100, 2100,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100,   23,   23,   23,   23,   23,   23, 2100,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100,   23, 2100,   23, 2100,   23,

     2100,   23,   23, 2100,   23, 2100,   23,   23,   23,   23,
     2100,   23,   23,   23,   23,   23, 2100,   23,   23, 2100,
       23,   23,   23, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100,   23, 2100, 2100,   23,   23,   23,   23,
     2100,   23,   23,   23,   23,   23, 2100,   23, 2100,   23,
       23, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100,   23,   23,   23, 2100,   23,
       23,   23,   23,   23,   23,   23, 2100,   23,   23,   23,
       23, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100,   23,   23, 2100,   23, 2100,   23,   23,   23,
       23,   23,   23, 2100,   23,   23,   23, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100,   23,   23, 2100,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100,   23,   23,   23,   23,   23,
       23,   23,   23, 2100,   23, 2100,   23,   23, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100,   23,   23,   23,
     2100,   23,   23,   23,   23, 2100, 2100,   23, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100,   23, 2100,   23, 2100,   23,   23,   23,
       23,   23, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
       23, 2100,   23,   23,   23, 2100,   23,   23, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100,   23,   23, 2100,   23,   23, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,   23,
       23,   23, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

       23,   23,   23, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
       23,   23,   23, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,   23,   23,
       23, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100,   23,   23,   23, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100,   23,   23,   23, 2100, 2100, 2100,
     2100,   23,   23,   23, 2100, 2100, 2100, 2100, 2100, 2100,
     2100,   23,   23, 2100, 2100, 2100, 2100, 2100, 2100,   23,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,    0,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100
    } ;

static yyconst flex_int16_t yy_nxt[3330] =
    {   0,
       20,   21,   21,   20,   22, 2100,   24,   20,   25,   26,
       27,   28,   28,   28,   29,   20,   30,   20,   42,   39,
       39,   42,   94,   94,   31,   40,   40,   47, 2100,   49,
       49,   49, 2100,   43,   94,   94,   43,   47, 2100,   49,
       49,   49,   52,   67,   67, 2100, 2100,  106,   67,   67,
       71,   71,   52,   68,   68,   68,  245,  107,   47,  246,
       49,   49,   49,   69,   32,   20,   21,   21,   20,   22,
       69,   24,   20,   25,   26,   27,   28,   28,   28,   29,
       20,   30,   20,  875,   69,   67,   67,  110,  108,   31,
      112,   69,   71,   71,  149,   68,   68,   68,  150,  119,

       47,  109,   49,   49,   49,   69,  116,  111,  114,  117,
      113,  120,   69,  151,  115,  152,  118,  123,  124,   71,
       71,  125,  125,  125,  160,  313,   69,  168,  314,   32,
       44,   44,  161,   69,   45,   94,   94,   46,   47,   48,
       49,   49,   49,   50,  169,   51,  876,   45,   45,   45,
       45,   45,   45,   52,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   53,
       54,   45,   55,   56,   45,   57,   45,   45,   58,   59,
       60,   45,   45,   45,   45,   61,   62,   63,   64,   65,
       45,   45,   45,   45,   45,  197,  197,  206,  206,  206,

       45,   45,   45,   45,   45,   45, 2100,  155, 2100,  198,
      877,  171,  156,  157,   67,   67,   45,  176,  125,  125,
      125,  172,  177,  187,   68,   68,   68,  173,  201,  230,
      195,  174,   45,   45,   69,   45,   45,  196,   45,  188,
      163,   45,   45,   45,  202,  213,  231,  214,   45,   45,
       45,   45,   45,   72,  164,   69,  878,  165,  166,  167,
       73,   67,   67,  225,  211,  267,  268,   74,  212,  217,
      222,  125,  125,  125,  218,  219,  272,  226,  223,  238,
      227,  228,  229,  273,  239,  274,  879,  241,   75,   76,
       77,   78,   79,   80,   81,  242,   82,   83,  880,   84,

       85,   86,   87,   88,  640,   89,   90,   91,   92,   93,
      127,  128,  129,  130,  131,  132,  133,  881,  134,  135,
      641,  136,  137,  138,  139,  140,  233,  141,  142,  143,
      144,  145,  342,  251,   67,   67,  234,  285,  285,  343,
      252,  344,  235,  253,  254,  309,  236,  197,  197,  298,
      298,  286,  299,  310,  300,  308,  308,  316,  316,  337,
      338,  198,  489,  321,  353,  206,  206,  206,  354,  510,
      322,  511,  317,  323,  324,  355,  356,  372,  373,  397,
      397,  285,  285,  400,  400,  889,  374,  401,  401,  407,
      407,  409,  409,  398,  572,  286,  882,  298,  298,  490,

      299,  402,  300,  408,  883,  410,  416,  416,  420,  420,
      308,  308,  426,  428,  428,  519,  427,  316,  316,  520,
      417,  890,  421,  435,  435,  445,  445,  891,  429,  450,
      451,  573,  317,  892,  454,  454,  467,  467,  452,  893,
      446,  476,  476,  497,  497,  506,  506,  897,  447,  455,
      898,  468,  498,  593,  507,  594,  477,  632,  499,  633,
      508,  512,  512,  397,  397,  400,  400,  899,  430,  431,
      711,  469,  712,  401,  401,  456,  513,  398,  532,  532,
      719,  533,  900,  534,  536,  536,  478,  402,  407,  407,
      541,  541,  409,  409,  542,  542,  720,  543,  901,  544,

      416,  416,  408,  902,  550,  550,  410,  551,  903,  552,
      420,  420,  555,  555,  417,  556,  904,  557,  558,  558,
      428,  428,  565,  565,  421,  435,  435,  580,  580,  445,
      445,  905,  559,  582,  582,  429,  589,  589,  454,  454,
      591,  591,  581,  906,  446,  595,  595,  600,  600,  907,
      604,  590,  908,  455,  605,  467,  467,  608,  608,  782,
      596,  783,  601,  613,  613,  476,  476,  617,  617,  856,
      468,  857,  497,  497,  909,  638,  638,  602,  614,  910,
      477,  498,  506,  506,  911,  647,  647,  499,  639,  512,
      512,  507,  536,  536,  541,  541,  912,  508,  648,  915,

      532,  532,  913,  533,  513,  534,  542,  542,  914,  543,
      916,  544,  678,  678,  680,  680,  682,  682,  550,  550,
      917,  551,  918,  552,  555,  555,  679,  556,  681,  557,
      683,  558,  558,  691,  691,  921,  692,  922,  693,  694,
      694,  699,  699,  565,  565,  559,  580,  580,  716,  716,
      582,  582,  923,  695,  717,  717,  700,  589,  589,  725,
      725,  581,  591,  591,  595,  595,  729,  729,  926,  718,
      730,  730,  590,  600,  600,  735,  735,  608,  608,  596,
      613,  613,  746,  746,  927,  731,  617,  617,  601,  767,
      767,  638,  638,  772,  790,  614,  928,  773,  791,  732,

      776,  776,  647,  647,  639,  793,  793,  804,  804,  678,
      678,  809,  809,  932,  794,  648,  680,  680,  682,  682,
      795,  805,  847,  679,  810,  810,  848,  811,  943,  812,
      681,  944,  683,  813,  813,  816,  816,  691,  691,  945,
      692,  946,  693,  694,  694,  820,  820,  950,  821,  817,
      822,  699,  699,  826,  826,  841,  841,  695,  716,  716,
      717,  717,  843,  843,  725,  725,  700,  729,  729,  951,
      842,  730,  730,  854,  854,  718,  735,  735,  864,  867,
      867,  956,  865,  870,  870,  957,  731,  746,  746,  884,
      885,  886,  767,  767,  868,  894,  894,  960,  871,  776,

      776,  887,  793,  793,  895,  919,  919,  888,  924,  924,
      896,  794,  804,  804,  933,  933,  961,  795,  920,  962,
      929,  929,  925,  930,  963,  931,  805,  935,  934,  936,
      809,  809,  937,  938,  813,  813,  816,  816,  939,  940,
      964,  941,  810,  810,  942,  811,  974,  812,  947,  947,
      817,  948,  975,  949,  820,  820,  976,  821,  977,  822,
      952,  952,  954,  954,  826,  826,  958,  958,  965,  967,
      967,  969,  970,  971,  985,  953,  966,  955,  841,  841,
      986,  959,  987,  972,  968,  978,  978,  843,  843,  973,
      979,  979,  988,  842,  981,  981,  983,  983,  989,  990,

      991,  854,  854,  992,  993,  980,  994,  995,  996,  982,
     1000,  984,  997,  997, 1001, 1002, 1002, 1006, 1007, 1008,
      867,  867, 1009, 1009, 1010,  870,  870,  998, 1011, 1011,
     1003, 1012, 1012, 1014, 1015,  868, 1016, 1017, 1018, 1019,
      871, 1020, 1021, 1004, 1022, 1023, 1013, 1024, 1025, 1005,
     1026, 1027, 1028,  999, 1029, 1030, 1031, 1032, 1034, 1033,
     1035,  894,  894, 1036, 1037, 1037, 1039, 1040, 1041, 1042,
      895, 1043, 1044, 1045, 1046, 1047,  896, 1038, 1048, 1049,
     1050, 1051, 1052, 1054, 1053, 1055, 1056, 1057, 1058, 1059,
     1059,  919,  919, 1060, 1061, 1062,  924,  924, 1063, 1063,

     1066, 1064, 1067, 1065,  920, 1068,  929,  929, 1069,  930,
      925,  931, 1070, 1071,  933,  933, 1072, 1072, 1075, 1073,
     1076, 1074, 1077, 1078, 1079, 1080, 1084, 1082,  934, 1086,
     1087, 1088,  947,  947, 1089,  948, 1090,  949,  952,  952,
     1091, 1091, 1093, 1081, 1083,  954,  954, 1094, 1085, 1092,
     1092,  958,  958,  953, 1095, 1095, 1096, 1097, 1098, 1099,
      955, 1100, 1101, 1102,  967,  967,  959, 1103, 1103, 1104,
     1105, 1106, 1107, 1108, 1109, 1110, 1111, 1113, 1112,  968,
      978,  978,  979,  979, 1114, 1114,  981,  981, 1115, 1115,
      983,  983, 1116, 1116, 1117, 1118, 1119,  980, 1120, 1121,

     1122,  982, 1123, 1124, 1125,  984, 1126, 1127, 1127, 1129,
     1129,  997,  997, 1131, 1131, 1132, 1133, 1134, 1137, 1135,
     1002, 1002, 1128, 1138, 1130, 1139,  998, 1136, 1136, 1140,
     1141, 1009, 1009, 1142, 1146, 1003, 1011, 1011, 1012, 1012,
     1143, 1143, 1144, 1144, 1147, 1148, 1149, 1150, 1151, 1152,
     1153, 1154, 1155, 1013, 1156, 1157, 1158, 1145, 1159, 1160,
     1161, 1162, 1163, 1164, 1165, 1166, 1167, 1167, 1037, 1037,
     1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
     1178, 1038, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
     1187, 1188, 1059, 1059, 1189, 1190, 1063, 1063, 1191, 1064,

     1192, 1065, 1193, 1194, 1195, 1196, 1072, 1072, 1197, 1073,
     1200, 1074, 1198, 1198, 1201, 1202, 1203, 1204, 1205, 1206,
     1207, 1208, 1209, 1210, 1211, 1212, 1199, 1091, 1091, 1092,
     1092, 1213, 1095, 1095, 1214, 1215, 1216, 1217, 1218, 1219,
     1220, 1103, 1103, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
     1228, 1229, 1230, 1114, 1114, 1115, 1115, 1116, 1116, 1231,
     1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1127,
     1127, 1241, 1241, 1129, 1129, 1242, 1242, 1131, 1131, 1243,
     1244, 1245, 1246, 1247, 1128, 1136, 1136, 1248, 1130, 1249,
     1250, 1251, 1252, 1143, 1143, 1144, 1144, 1253, 1253, 1254,

     1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
     1145, 1265, 1266, 1267, 1255, 1268, 1269, 1270, 1271, 1272,
     1273, 1274, 1275, 1167, 1167, 1276, 1277, 1278, 1279, 1280,
     1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290,
     1291, 1292, 1293, 1294, 1295, 1296, 1296, 1298, 1298, 1300,
     1300, 1302, 1303, 1303, 1198, 1198, 1306, 1306, 1307, 1297,
     1308, 1299, 1309, 1301, 1310, 1310, 1304, 1313, 1199, 1314,
     1315, 1316, 1316, 1318, 1319, 1319, 1322, 1325, 1311, 1323,
     1323, 1326, 1327, 1328, 1329, 1317, 1330, 1331, 1320, 1332,
     1333, 1334, 1335, 1324, 1336, 1337, 1338, 1339, 1340, 1341,

     1342, 1343, 1344, 1345, 1346, 1312, 1347, 1305, 1348, 1348,
     1350, 1351, 1352, 1353, 1354, 1241, 1241, 1242, 1242, 1321,
     1355, 1356, 1357, 1349, 1358, 1359, 1360, 1360, 1362, 1363,
     1364, 1365, 1365, 1253, 1253, 1254, 1254, 1367, 1367, 1368,
     1369, 1361, 1370, 1370, 1373, 1377, 1366, 1374, 1374, 1378,
     1255, 1371, 1379, 1380, 1381, 1382, 1375, 1372, 1383, 1384,
     1385, 1386, 1376, 1387, 1388, 1388, 1390, 1391, 1392, 1393,
     1394, 1394, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1389,
     1403, 1404, 1405, 1406, 1407, 1395, 1408, 1296, 1296, 1409,
     1409, 1417, 1410, 1418, 1411, 1298, 1298, 1412, 1412, 1300,

     1300, 1297, 1413, 1413, 1414, 1414, 1303, 1303, 1419, 1299,
     1416, 1416, 1420, 1301, 1306, 1306, 1310, 1310, 1415, 1422,
     1304, 1421, 1421, 1423, 1424, 1426, 1316, 1316, 1427, 1427,
     1311, 1428, 1319, 1319, 1429, 1429, 1430, 1431, 1323, 1323,
     1317, 1432, 1432, 1433, 1434, 1434, 1320, 1436, 1439, 1425,
     1437, 1437, 1324, 1440, 1440, 1442, 1442, 1444, 1447, 1435,
     1445, 1445, 1448, 1449, 1450, 1438, 1451, 1452, 1441, 1453,
     1443, 1454, 1455, 1456, 1457, 1446, 1458, 1458, 1460, 1461,
     1348, 1348, 1462, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
     1469, 1459, 1470, 1471, 1475, 1349, 1472, 1472, 1360, 1360,

     1474, 1474, 1476, 1477, 1365, 1365, 1478, 1478, 1367, 1367,
     1479, 1473, 1480, 1361, 1370, 1370, 1483, 1481, 1481, 1366,
     1484, 1485, 1485, 1371, 1374, 1374, 1487, 1488, 1489, 1372,
     1482, 1490, 1491, 1375, 1486, 1492, 1493, 1494, 1495, 1376,
     1496, 1388, 1388, 1497, 1497, 1498, 1499, 1394, 1394, 1500,
     1500, 1501, 1502, 1503, 1504, 1505, 1389, 1506, 1507, 1508,
     1509, 1510, 1395, 1409, 1409, 1511, 1410, 1512, 1411, 1412,
     1412, 1413, 1413, 1414, 1414, 1513, 1513, 1516, 1514, 1517,
     1515, 1416, 1416, 1518, 1518, 1520, 1521, 1415, 1421, 1421,
     1522, 1525, 1526, 1526, 1528, 1427, 1427, 1519, 1529, 1429,

     1429, 1523, 1530, 1531, 1531, 1533, 1527, 1524, 1432, 1432,
     1434, 1434, 1534, 1534, 1535, 1535, 1538, 1532, 1437, 1437,
     1537, 1537, 1440, 1440, 1541, 1435, 1539, 1539, 1543, 1536,
     1442, 1442, 1544, 1438, 1540, 1540, 1545, 1441, 1445, 1445,
     1542, 1542, 1546, 1547, 1548, 1443, 1549, 1550, 1551, 1551,
     1553, 1554, 1554, 1446, 1458, 1458, 1556, 1556, 1557, 1557,
     1559, 1462, 1462, 1552, 1560, 1560, 1555, 1562, 1562, 1459,
     1564, 1564, 1566, 1558, 1567, 1568, 1569, 1570, 1571, 1561,
     1472, 1472, 1563, 1572, 1572, 1565, 1474, 1474, 1573, 1573,
     1576, 1577, 1478, 1478, 1578, 1473, 1579, 1579, 1481, 1481,

     1580, 1581, 1584, 1574, 1583, 1583, 1485, 1485, 1585, 1582,
     1586, 1482, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1486,
     1497, 1497, 1594, 1500, 1500, 1595, 1596, 1597, 1598, 1599,
     1600, 1601, 1602, 1513, 1513, 1603, 1514, 1604, 1515, 1518,
     1518, 1605, 1605, 1575, 1606, 1606, 1608, 1609, 1610, 1612,
     1613, 1526, 1526, 1519, 1614, 1614, 1615, 1616, 1607, 1617,
     1531, 1531, 1611, 1618, 1618, 1527, 1619, 1621, 1620, 1534,
     1534, 1535, 1535, 1623, 1532, 1622, 1622, 1537, 1537, 1539,
     1539, 1624, 1540, 1540, 1625, 1625, 1536, 1542, 1542, 1627,
     1628, 1629, 1630, 1631, 1632, 1633, 1634, 1551, 1551, 1626,

     1635, 1635, 1636, 1554, 1554, 1637, 1637, 1556, 1556, 1557,
     1557, 1644, 1552, 1638, 1638, 1639, 1639, 1645, 1555, 1560,
     1560, 1641, 1641, 1646, 1558, 1562, 1562, 1642, 1642, 1647,
     1640, 1564, 1564, 1648, 1561, 1643, 1643, 1649, 1649, 1654,
     1563, 1572, 1572, 1573, 1573, 1655, 1565, 1651, 1651, 1652,
     1652, 1656, 1650, 1579, 1579, 1657, 1658, 1659, 1574, 1583,
     1583, 1660, 1661, 1662, 1653, 1663, 1664, 1665, 1666, 1667,
     1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
     1678, 1679, 1605, 1605, 1606, 1606, 1680, 1680, 1681, 1682,
     1683, 1684, 1685, 1686, 1614, 1614, 1687, 1688, 1607, 1689,

     1618, 1618, 1690, 1619, 1691, 1620, 1622, 1622, 1692, 1625,
     1625, 1693, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700,
     1701, 1635, 1635, 1702, 1626, 1637, 1637, 1638, 1638, 1639,
     1639, 1703, 1703, 1641, 1641, 1642, 1642, 1643, 1643, 1704,
     1705, 1706, 1707, 1708, 1640, 1649, 1649, 1709, 1709, 1651,
     1651, 1652, 1652, 1710, 1710, 1711, 1711, 1713, 1714, 1715,
     1650, 1716, 1717, 1718, 1719, 1720, 1653, 1721, 1722, 1723,
     1712, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732,
     1733, 1734, 1734, 1736, 1737, 1680, 1680, 1738, 1739, 1740,
     1741, 1742, 1743, 1744, 1745, 1746, 1735, 1747, 1748, 1749,

     1693, 1693, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
     1758, 1703, 1703, 1759, 1760, 1761, 1761, 1763, 1764, 1709,
     1709, 1710, 1710, 1711, 1711, 1765, 1765, 1766, 1767, 1768,
     1762, 1769, 1770, 1771, 1772, 1773, 1774, 1776, 1712, 1777,
     1778, 1779, 1780, 1781, 1782, 1783, 1784, 1734, 1734, 1785,
     1785, 1786, 1787, 1788, 1775, 1789, 1790, 1791, 1792, 1793,
     1793, 1797, 1735, 1795, 1795, 1798, 1798, 1800, 1800, 1802,
     1803, 1804, 1805, 1794, 1806, 1807, 1809, 1796, 1810, 1799,
     1811, 1811, 1801, 1813, 1813, 1815, 1816, 1817, 1761, 1761,
     1818, 1818, 1819, 1808, 1820, 1812, 1765, 1765, 1814, 1821,

     1822, 1823, 1824, 1762, 1825, 1826, 1827, 1828, 1829, 1830,
     1831, 1832, 1832, 1834, 1835, 1836, 1837, 1785, 1785, 1838,
     1839, 1840, 1840, 1842, 1843, 1844, 1833, 1845, 1793, 1793,
     1846, 1846, 1795, 1795, 1848, 1841, 1847, 1847, 1798, 1798,
     1849, 1849, 1794, 1800, 1800, 1851, 1796, 1850, 1850, 1852,
     1852, 1854, 1799, 1855, 1856, 1856, 1858, 1859, 1801, 1860,
     1861, 1811, 1811, 1864, 1853, 1862, 1862, 1813, 1813, 1857,
     1863, 1863, 1865, 1866, 1866, 1868, 1812, 1818, 1818, 1869,
     1870, 1871, 1814, 1872, 1873, 1874, 1875, 1876, 1867, 1877,
     1878, 1879, 1832, 1832, 1880, 1880, 1881, 1882, 1883, 1884,

     1884, 1886, 1840, 1840, 1887, 1887, 1888, 1833, 1889, 1890,
     1891, 1846, 1846, 1885, 1847, 1847, 1841, 1892, 1849, 1849,
     1850, 1850, 1893, 1852, 1852, 1894, 1894, 1895, 1895, 1897,
     1856, 1856, 1898, 1898, 1899, 1900, 1901, 1902, 1853, 1862,
     1862, 1903, 1896, 1863, 1863, 1857, 1904, 1866, 1866, 1905,
     1905, 1906, 1906, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
     1915, 1916, 1867, 1917, 1880, 1880, 1907, 1918, 1919, 1884,
     1884, 1920, 1920, 1921, 1921, 1887, 1887, 1923, 1924, 1925,
     1925, 1927, 1928, 1885, 1929, 1929, 1932, 1922, 1894, 1894,
     1895, 1895, 1933, 1926, 1931, 1931, 1898, 1898, 1934, 1930,

     1935, 1936, 1937, 1938, 1942, 1896, 1905, 1905, 1906, 1906,
     1939, 1939, 1940, 1940, 1943, 1944, 1945, 1946, 1947, 1948,
     1949, 1950, 1951, 1907, 1952, 1920, 1920, 1941, 1921, 1921,
     1953, 1953, 1954, 1955, 1925, 1925, 1956, 1956, 1957, 1958,
     1958, 1961, 1922, 1929, 1929, 1960, 1960, 1962, 1926, 1931,
     1931, 1963, 1964, 1959, 1965, 1966, 1967, 1969, 1930, 1939,
     1939, 1940, 1940, 1968, 1968, 1970, 1971, 1972, 1973, 1974,
     1975, 1976, 1977, 1978, 1979, 1980, 1941, 1953, 1953, 1981,
     1956, 1956, 1982, 1958, 1958, 1983, 1983, 1960, 1960, 1984,
     1985, 1986, 1987, 1987, 1990, 1991, 1992, 1959, 1968, 1968,

     1993, 1994, 1995, 1996, 1997, 1998, 1999, 1988, 2000, 2001,
     2002, 2003, 1983, 1983, 2004, 2005, 2005, 2007, 2007, 1987,
     1987, 2009, 2009, 2010, 1989, 2011, 2011, 2013, 2014, 2015,
     2006, 2016, 2008, 2017, 1988, 2018, 2019, 2020, 2021, 2022,
     2012, 2023, 2024, 2024, 2005, 2005, 2026, 2026, 2007, 2007,
     2027, 2027, 2009, 2009, 2028, 2011, 2011, 2025, 2030, 2006,
     2029, 2029, 2033, 2008, 2031, 2031, 2034, 2035, 2036, 2037,
     2012, 2038, 2039, 2040, 2041, 2024, 2024, 2042, 2042, 2032,
     2026, 2026, 2027, 2027, 2043, 2029, 2029, 2044, 2031, 2031,
     2025, 2045, 2045, 2046, 2047, 2047, 2049, 2049, 2051, 2052,

     2053, 2054, 2055, 2032, 2056, 2042, 2042, 2057, 2058, 2048,
     2059, 2050, 2045, 2045, 2047, 2047, 2060, 2060, 2049, 2049,
     2061, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2048,
     2069, 2070, 2071, 2050, 2060, 2060, 2061, 2061, 2072, 2073,
     2074, 2074, 2076, 2076, 2078, 2079, 2079, 2081, 2082, 2083,
     2083, 2074, 2074, 2087, 2075, 2085, 2085, 2077, 2076, 2076,
     2080, 2086, 2086, 2084, 2089, 2075, 2079, 2079, 2088, 2088,
     2090, 2090, 2093, 2077, 2083, 2083, 2092, 2092, 2085, 2085,
     2094, 2080, 2086, 2086, 2091, 2088, 2088, 2096, 2084, 2090,
     2090, 2095, 2095, 2092, 2092, 2095, 2095, 2097, 2097, 2097,

     2097, 2099, 2099, 2091, 2099, 2099,  874,  873,  872,  869,
      866,  863, 2098,  862, 2098,   23,   23,   23,   23,   23,
       33,   33,   33,   33,   33,   35,   35,   35,   35,   35,
       36,   36,   36,   36,   36,   34,   34,   34,   34,   34,
       37,   37,   37,   37,   37,   38,   38,   38,   38,   38,
       41,   41,   41,   41,   41,   96,   96,   96,   96,   97,
      861,   97,   97,   97,   98,   98,  860,   98,   98,   99,
       99,   99,  859,   99,  858,  855,  853,  852,  851,  850,
      849,  846,  845,  844,  840,  839,  838,  837,  836,  835,
      834,  833,  832,  831,  830,  829,  828,  827,  825,  824,

      823,  819,  818,  815,  814,  808,  807,  806,  803,  802,
      801,  800,  799,  798,  797,  796,  792,  789,  788,  787,
      786,  785,  784,  781,  780,  779,  778,  777,  775,  774,
      771,  770,  769,  768,  766,  765,  764,  763,  762,  761,
      760,  759,  758,  757,  756,  755,  754,  753,  752,  751,
      750,  749,  748,  747,  745,  744,  743,  742,  741,  740,
      739,  738,  737,  736,  734,  733,  728,  727,  726,  724,
      723,  722,  721,  715,  714,  713,  710,  709,  708,  707,
      706,  705,  704,  703,  702,  701,  698,  697,  696,  690,
      689,  688,  687,  686,  685,  684,  677,  676,  675,  674,

      673,  672,  671,  670,  669,  668,  667,  666,  665,  664,
      663,  662,  661,  660,  659,  658,  657,  656,  655,  654,
      653,  652,  651,  650,  649,  646,  645,  644,  643,  642,
      637,  636,  635,  634,  631,  630,  629,  628,  627,  626,
      625,  624,  623,  622,  621,  620,  619,  618,  616,  615,
      612,  611,  610,  609,  607,  606,  603,  599,  598,  597,
      592,  588,  587,  586,  585,  584,  583,  579,  578,  577,
      576,  575,  574,  571,  570,  569,  568,  567,  566,  564,
      563,  562,  561,  560,  554,  553,  549,  548,  547,  546,
      545,  540,  539,  538,  537,  535,  531,  530,  529,  528,

      527,  526,  525,  524,  523,  522,  521,  518,  517,  516,
      515,  514,  509,  505,  504,  503,  502,  501,  500,  496,
      495,  494,  493,  492,  491,  488,  487,  486,  485,  484,
      483,  482,  481,  480,  479,  475,  474,  473,  472,  471,
      470,  466,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  453,  449,  448,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  434,  433,  432,  425,  424,  423,  422,
      419,  418,  415,  414,  413,  412,  411,  406,  405,  404,
      403,  399,  396,  395,  394,  393,  392,  391,  390,  389,
      388,  387,  386,  385,  384,  383,  382,  381,  380,  379,

      378,  377,  376,  375,  371,  370,  369,  368,  367,  366,
      365,  364,  363,  362,  361,  360,  359,  358,  357,  352,
      351,  350,  349,  348,  347,  346,  345,  341,  340,  339,
      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  320,  319,  318,  315,  312,  311,  307,  306,
      305,  304,  303,  302,  301,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  288,  287,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  271,  270,  269,  266,
      265,  264,  263,  262,  261,  260,  259,  258,  257,  256,
      255,  250,  249,  248,  247,  244,  243,  240,  237,  232,

      224,  221,  220,  216,  215,  210,  209,  208,  207,  205,
      204,  203,  200,  199,  194,  193,  192,  191,  190,  189,
      186,  185,  184,  183,  182,  181,  180,  179,  178,  175,
      170,  162,  159,  158,  154,  153,  148,  147,  146,  126,
      122,  121,  105,  104,  103,  102,   95,   70,  101,  100,
       95,   70,   66,   66, 2100,   34,   34,   34,   34,   34,
       34,   34,   34,   19, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100
    } ;

static yyconst flex_int16_t yy_chk[3330] =
    {   0,
        1,    1,    1,    1,    1,    0,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   17,   15,
       16,   18,   30,   30,    1,   15,   16,   25,    0,   25,
       25,   25,   50,   17,   51,   51,   18,   46,    0,   46,
       46,   46,   25,   26,   26,    0,   50,   57,   67,   67,
       28,   28,   46,   26,   26,   26,  149,   57,   28,  149,
       28,   28,   28,   26,    1,    2,    2,    2,    2,    2,
       28,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,  752,   26,   47,   47,   59,   58,    2,
       60,   28,   49,   49,   78,   47,   47,   47,   78,   63,

       49,   58,   49,   49,   49,   47,   62,   59,   61,   62,
       60,   63,   49,   79,   61,   79,   62,   69,   69,   71,
       71,   69,   69,   69,   85,  211,   47,   88,  211,    2,
       21,   21,   85,   49,   21,   94,   94,   21,   21,   21,
       21,   21,   21,   21,   88,   21,  753,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   23,   23,  116,  116,  123,  123,  123,

       23,   23,   23,   23,   23,   23,   23,   82,   23,  116,
      755,   90,   82,   82,   68,   68,   23,   92,  124,  124,
      124,   90,   92,  108,   68,   68,   68,   90,  119,  140,
      115,   90,   23,   23,   68,   23,   23,  115,   23,  108,
       87,   23,   23,   23,  119,  131,  140,  131,   23,   23,
       23,   23,   23,   29,   87,   68,  756,   87,   87,   87,
       29,  125,  125,  139,  130,  168,  168,   29,  130,  134,
      137,  125,  125,  125,  134,  134,  172,  139,  137,  144,
      139,  139,  139,  172,  144,  172,  757,  146,   29,   29,
       29,   29,   29,   29,   29,  146,   29,   29,  758,   29,

       29,   29,   29,   29,  501,   29,   29,   29,   29,   29,
       73,   73,   73,   73,   73,   73,   73,  759,   73,   73,
      501,   73,   73,   73,   73,   73,  142,   73,   73,   73,
       73,   73,  234,  155,  179,  179,  142,  185,  185,  234,
      155,  234,  142,  155,  155,  208,  142,  197,  197,  198,
      198,  185,  198,  208,  198,  206,  206,  213,  213,  230,
      230,  197,  361,  217,  243,  206,  206,  206,  243,  377,
      217,  377,  213,  217,  217,  244,  244,  260,  260,  283,
      283,  285,  285,  286,  286,  763,  260,  287,  287,  292,
      292,  293,  293,  283,  437,  285,  760,  298,  298,  361,

      298,  287,  298,  292,  760,  293,  302,  302,  305,  305,
      308,  308,  311,  312,  312,  384,  311,  316,  316,  384,
      302,  764,  305,  317,  317,  327,  327,  765,  312,  330,
      330,  437,  316,  766,  332,  332,  343,  343,  330,  768,
      327,  350,  350,  368,  368,  375,  375,  772,  327,  332,
      773,  343,  368,  457,  375,  457,  350,  493,  368,  493,
      375,  378,  378,  397,  397,  400,  400,  774,  312,  312,
      576,  343,  576,  401,  401,  332,  378,  397,  398,  398,
      584,  398,  775,  398,  402,  402,  350,  401,  407,  407,
      408,  408,  409,  409,  410,  410,  584,  410,  777,  410,

      416,  416,  407,  778,  417,  417,  409,  417,  779,  417,
      420,  420,  421,  421,  416,  421,  780,  421,  422,  422,
      428,  428,  429,  429,  420,  435,  435,  444,  444,  445,
      445,  781,  422,  446,  446,  428,  453,  453,  454,  454,
      455,  455,  444,  782,  445,  458,  458,  462,  462,  783,
      464,  453,  784,  454,  464,  467,  467,  468,  468,  653,
      458,  653,  462,  473,  473,  476,  476,  477,  477,  733,
      467,  733,  497,  497,  785,  499,  499,  462,  473,  786,
      476,  497,  506,  506,  787,  508,  508,  497,  499,  512,
      512,  506,  536,  536,  541,  541,  788,  506,  508,  790,

      532,  532,  789,  532,  512,  532,  542,  542,  789,  542,
      791,  542,  546,  546,  547,  547,  548,  548,  550,  550,
      792,  550,  794,  550,  555,  555,  546,  555,  547,  555,
      548,  558,  558,  559,  559,  796,  559,  798,  559,  560,
      560,  564,  564,  565,  565,  558,  580,  580,  581,  581,
      582,  582,  799,  560,  583,  583,  564,  589,  589,  590,
      590,  580,  591,  591,  595,  595,  596,  596,  801,  583,
      597,  597,  589,  600,  600,  601,  601,  608,  608,  595,
      613,  613,  614,  614,  802,  597,  617,  617,  600,  637,
      637,  638,  638,  643,  660,  613,  803,  643,  660,  597,

      646,  646,  647,  647,  638,  662,  662,  672,  672,  678,
      678,  679,  679,  806,  662,  647,  680,  680,  682,  682,
      662,  672,  722,  678,  681,  681,  722,  681,  811,  681,
      680,  812,  682,  683,  683,  688,  688,  691,  691,  814,
      691,  815,  691,  694,  694,  695,  695,  821,  695,  688,
      695,  699,  699,  700,  700,  715,  715,  694,  716,  716,
      717,  717,  718,  718,  725,  725,  699,  729,  729,  822,
      715,  730,  730,  731,  731,  717,  735,  735,  741,  743,
      743,  825,  741,  745,  745,  827,  730,  746,  746,  762,
      762,  762,  767,  767,  743,  769,  769,  829,  745,  776,

      776,  762,  793,  793,  769,  795,  795,  762,  800,  800,
      769,  793,  804,  804,  807,  807,  830,  793,  795,  831,
      805,  805,  800,  805,  832,  805,  804,  808,  807,  808,
      809,  809,  808,  808,  813,  813,  816,  816,  808,  808,
      833,  808,  810,  810,  808,  810,  837,  810,  817,  817,
      816,  817,  838,  817,  820,  820,  839,  820,  840,  820,
      823,  823,  824,  824,  826,  826,  828,  828,  834,  835,
      835,  836,  836,  836,  847,  823,  834,  824,  841,  841,
      848,  828,  849,  836,  835,  842,  842,  843,  843,  836,
      844,  844,  850,  841,  845,  845,  846,  846,  851,  852,

      853,  854,  854,  855,  856,  844,  857,  858,  859,  845,
      861,  846,  860,  860,  862,  863,  863,  864,  865,  866,
      867,  867,  868,  868,  869,  870,  870,  860,  871,  871,
      863,  872,  872,  873,  874,  867,  875,  876,  877,  878,
      870,  879,  880,  863,  881,  882,  872,  883,  884,  863,
      885,  886,  887,  860,  888,  889,  890,  891,  892,  891,
      893,  894,  894,  895,  896,  896,  897,  898,  899,  900,
      894,  901,  902,  903,  904,  905,  894,  896,  906,  907,
      910,  911,  912,  913,  912,  914,  915,  916,  917,  918,
      918,  919,  919,  920,  921,  923,  924,  924,  925,  925,

      926,  925,  927,  925,  919,  928,  929,  929,  930,  929,
      924,  929,  931,  932,  933,  933,  934,  934,  935,  934,
      936,  934,  936,  937,  938,  939,  941,  940,  933,  942,
      945,  946,  947,  947,  948,  947,  949,  947,  952,  952,
      953,  953,  956,  939,  940,  954,  954,  957,  941,  955,
      955,  958,  958,  952,  959,  959,  960,  961,  962,  963,
      954,  964,  965,  966,  967,  967,  958,  968,  968,  969,
      970,  971,  972,  973,  974,  975,  976,  977,  976,  967,
      978,  978,  979,  979,  980,  980,  981,  981,  982,  982,
      983,  983,  984,  984,  985,  986,  987,  979,  988,  989,

      990,  981,  991,  992,  993,  983,  994,  995,  995,  996,
      996,  997,  997,  998,  998,  999, 1000, 1001, 1004, 1001,
     1002, 1002,  995, 1005,  996, 1006,  997, 1003, 1003, 1007,
     1008, 1009, 1009, 1010, 1015, 1002, 1011, 1011, 1012, 1012,
     1013, 1013, 1014, 1014, 1016, 1017, 1018, 1019, 1020, 1021,
     1022, 1023, 1024, 1012, 1025, 1026, 1027, 1014, 1028, 1029,
     1030, 1031, 1032, 1033, 1034, 1035, 1036, 1036, 1037, 1037,
     1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
     1048, 1037, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
     1057, 1058, 1059, 1059, 1060, 1061, 1063, 1063, 1064, 1063,

     1065, 1063, 1066, 1067, 1068, 1071, 1072, 1072, 1075, 1072,
     1077, 1072, 1076, 1076, 1078, 1079, 1080, 1081, 1082, 1083,
     1084, 1085, 1086, 1087, 1088, 1093, 1076, 1091, 1091, 1092,
     1092, 1094, 1095, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
     1102, 1103, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
     1111, 1112, 1113, 1114, 1114, 1115, 1115, 1116, 1116, 1117,
     1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
     1127, 1128, 1128, 1129, 1129, 1130, 1130, 1131, 1131, 1132,
     1133, 1134, 1135, 1137, 1127, 1136, 1136, 1138, 1129, 1139,
     1140, 1141, 1142, 1143, 1143, 1144, 1144, 1145, 1145, 1146,

     1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,
     1144, 1156, 1157, 1158, 1146, 1159, 1160, 1161, 1162, 1163,
     1164, 1165, 1166, 1167, 1167, 1168, 1169, 1170, 1171, 1172,
     1173, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183,
     1184, 1186, 1187, 1188, 1189, 1193, 1193, 1194, 1194, 1195,
     1195, 1196, 1197, 1197, 1198, 1198, 1199, 1199, 1200, 1193,
     1201, 1194, 1202, 1195, 1203, 1203, 1197, 1204, 1198, 1205,
     1206, 1207, 1207, 1208, 1209, 1209, 1210, 1212, 1203, 1211,
     1211, 1213, 1214, 1215, 1216, 1207, 1217, 1218, 1209, 1219,
     1220, 1221, 1222, 1211, 1223, 1224, 1225, 1226, 1227, 1228,

     1229, 1230, 1231, 1232, 1233, 1203, 1234, 1197, 1235, 1235,
     1236, 1237, 1238, 1239, 1240, 1241, 1241, 1242, 1242, 1209,
     1243, 1244, 1245, 1235, 1246, 1247, 1248, 1248, 1249, 1250,
     1251, 1252, 1252, 1253, 1253, 1254, 1254, 1255, 1255, 1256,
     1258, 1248, 1259, 1259, 1260, 1263, 1252, 1262, 1262, 1265,
     1254, 1259, 1266, 1267, 1268, 1269, 1262, 1259, 1270, 1271,
     1272, 1273, 1262, 1274, 1275, 1275, 1276, 1277, 1279, 1280,
     1281, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1275,
     1289, 1290, 1292, 1293, 1294, 1281, 1295, 1296, 1296, 1297,
     1297, 1305, 1297, 1307, 1297, 1298, 1298, 1299, 1299, 1300,

     1300, 1296, 1301, 1301, 1302, 1302, 1303, 1303, 1308, 1298,
     1304, 1304, 1309, 1300, 1306, 1306, 1310, 1310, 1302, 1312,
     1303, 1311, 1311, 1313, 1314, 1315, 1316, 1316, 1317, 1317,
     1310, 1318, 1319, 1319, 1320, 1320, 1321, 1322, 1323, 1323,
     1316, 1324, 1324, 1325, 1326, 1326, 1319, 1327, 1329, 1314,
     1328, 1328, 1323, 1330, 1330, 1331, 1331, 1332, 1334, 1326,
     1333, 1333, 1335, 1336, 1337, 1328, 1338, 1339, 1330, 1340,
     1331, 1341, 1342, 1343, 1344, 1333, 1345, 1345, 1346, 1347,
     1348, 1348, 1349, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
     1356, 1345, 1357, 1358, 1362, 1348, 1359, 1359, 1360, 1360,

     1361, 1361, 1363, 1364, 1365, 1365, 1366, 1366, 1367, 1367,
     1368, 1359, 1371, 1360, 1370, 1370, 1373, 1372, 1372, 1365,
     1375, 1376, 1376, 1370, 1374, 1374, 1377, 1378, 1379, 1370,
     1372, 1380, 1381, 1374, 1376, 1382, 1383, 1384, 1385, 1374,
     1387, 1388, 1388, 1389, 1389, 1390, 1393, 1394, 1394, 1395,
     1395, 1399, 1400, 1401, 1402, 1403, 1388, 1404, 1405, 1406,
     1407, 1408, 1394, 1409, 1409, 1410, 1409, 1411, 1409, 1412,
     1412, 1413, 1413, 1414, 1414, 1415, 1415, 1417, 1415, 1418,
     1415, 1416, 1416, 1419, 1419, 1420, 1422, 1414, 1421, 1421,
     1423, 1424, 1425, 1425, 1426, 1427, 1427, 1419, 1428, 1429,

     1429, 1423, 1430, 1431, 1431, 1433, 1425, 1423, 1432, 1432,
     1434, 1434, 1435, 1435, 1436, 1436, 1439, 1431, 1437, 1437,
     1438, 1438, 1440, 1440, 1444, 1434, 1441, 1441, 1447, 1436,
     1442, 1442, 1448, 1437, 1443, 1443, 1449, 1440, 1445, 1445,
     1446, 1446, 1450, 1451, 1452, 1442, 1453, 1454, 1455, 1455,
     1456, 1457, 1457, 1445, 1458, 1458, 1459, 1459, 1460, 1460,
     1461, 1462, 1462, 1455, 1463, 1463, 1457, 1464, 1464, 1458,
     1465, 1465, 1466, 1460, 1467, 1468, 1469, 1470, 1471, 1463,
     1472, 1472, 1464, 1473, 1473, 1465, 1474, 1474, 1475, 1475,
     1476, 1477, 1478, 1478, 1479, 1472, 1480, 1480, 1481, 1481,

     1482, 1483, 1486, 1475, 1484, 1484, 1485, 1485, 1488, 1483,
     1489, 1481, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1485,
     1497, 1497, 1498, 1500, 1500, 1501, 1502, 1503, 1504, 1505,
     1508, 1509, 1510, 1513, 1513, 1516, 1513, 1517, 1513, 1518,
     1518, 1519, 1519, 1475, 1520, 1520, 1521, 1522, 1523, 1524,
     1525, 1526, 1526, 1518, 1527, 1527, 1528, 1529, 1520, 1530,
     1531, 1531, 1523, 1532, 1532, 1526, 1532, 1533, 1532, 1534,
     1534, 1535, 1535, 1538, 1531, 1536, 1536, 1537, 1537, 1539,
     1539, 1538, 1540, 1540, 1541, 1541, 1535, 1542, 1542, 1543,
     1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1551, 1541,

     1552, 1552, 1553, 1554, 1554, 1555, 1555, 1556, 1556, 1557,
     1557, 1566, 1551, 1558, 1558, 1559, 1559, 1567, 1554, 1560,
     1560, 1561, 1561, 1568, 1557, 1562, 1562, 1563, 1563, 1569,
     1559, 1564, 1564, 1570, 1560, 1565, 1565, 1571, 1571, 1576,
     1562, 1572, 1572, 1573, 1573, 1577, 1564, 1574, 1574, 1575,
     1575, 1578, 1571, 1579, 1579, 1580, 1581, 1582, 1573, 1583,
     1583, 1584, 1585, 1586, 1575, 1587, 1588, 1589, 1590, 1591,
     1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1601, 1602,
     1603, 1604, 1605, 1605, 1606, 1606, 1607, 1607, 1608, 1609,
     1610, 1611, 1612, 1613, 1614, 1614, 1615, 1616, 1606, 1617,

     1618, 1618, 1621, 1618, 1623, 1618, 1622, 1622, 1624, 1625,
     1625, 1626, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633,
     1634, 1635, 1635, 1636, 1625, 1637, 1637, 1638, 1638, 1639,
     1639, 1640, 1640, 1641, 1641, 1642, 1642, 1643, 1643, 1644,
     1645, 1646, 1647, 1648, 1639, 1649, 1649, 1650, 1650, 1651,
     1651, 1652, 1652, 1653, 1653, 1654, 1654, 1655, 1656, 1657,
     1649, 1658, 1659, 1660, 1661, 1662, 1652, 1663, 1664, 1665,
     1654, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1674, 1675,
     1676, 1677, 1677, 1678, 1679, 1680, 1680, 1681, 1682, 1683,
     1684, 1685, 1686, 1687, 1688, 1689, 1677, 1690, 1691, 1692,

     1693, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701,
     1702, 1703, 1703, 1704, 1705, 1706, 1706, 1707, 1708, 1709,
     1709, 1710, 1710, 1711, 1711, 1712, 1712, 1713, 1715, 1716,
     1706, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1711, 1724,
     1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1734, 1735,
     1735, 1736, 1737, 1738, 1722, 1739, 1740, 1741, 1742, 1743,
     1743, 1745, 1734, 1744, 1744, 1746, 1746, 1747, 1747, 1748,
     1749, 1750, 1751, 1743, 1752, 1753, 1754, 1744, 1755, 1746,
     1756, 1756, 1747, 1757, 1757, 1758, 1759, 1760, 1761, 1761,
     1762, 1762, 1763, 1753, 1764, 1756, 1765, 1765, 1757, 1766,

     1767, 1768, 1770, 1761, 1771, 1772, 1774, 1775, 1776, 1777,
     1778, 1779, 1779, 1780, 1782, 1783, 1784, 1785, 1785, 1786,
     1787, 1788, 1788, 1789, 1790, 1791, 1779, 1792, 1793, 1793,
     1794, 1794, 1795, 1795, 1797, 1788, 1796, 1796, 1798, 1798,
     1799, 1799, 1793, 1800, 1800, 1802, 1795, 1801, 1801, 1803,
     1803, 1804, 1798, 1805, 1806, 1806, 1807, 1808, 1800, 1809,
     1810, 1811, 1811, 1815, 1803, 1812, 1812, 1813, 1813, 1806,
     1814, 1814, 1816, 1817, 1817, 1819, 1811, 1818, 1818, 1820,
     1821, 1822, 1813, 1823, 1824, 1826, 1827, 1828, 1817, 1829,
     1830, 1831, 1832, 1832, 1833, 1833, 1834, 1836, 1837, 1838,

     1838, 1839, 1840, 1840, 1841, 1841, 1842, 1832, 1843, 1844,
     1845, 1846, 1846, 1838, 1847, 1847, 1840, 1848, 1849, 1849,
     1850, 1850, 1851, 1852, 1852, 1853, 1853, 1854, 1854, 1855,
     1856, 1856, 1857, 1857, 1858, 1859, 1860, 1861, 1852, 1862,
     1862, 1864, 1854, 1863, 1863, 1856, 1865, 1866, 1866, 1867,
     1867, 1868, 1868, 1869, 1870, 1871, 1873, 1874, 1875, 1876,
     1877, 1878, 1866, 1879, 1880, 1880, 1868, 1881, 1883, 1884,
     1884, 1885, 1885, 1886, 1886, 1887, 1887, 1888, 1889, 1890,
     1890, 1891, 1892, 1884, 1893, 1893, 1897, 1886, 1894, 1894,
     1895, 1895, 1899, 1890, 1896, 1896, 1898, 1898, 1900, 1893,

     1901, 1902, 1903, 1904, 1909, 1895, 1905, 1905, 1906, 1906,
     1907, 1907, 1908, 1908, 1910, 1911, 1912, 1913, 1914, 1915,
     1916, 1917, 1918, 1906, 1919, 1920, 1920, 1908, 1921, 1921,
     1922, 1922, 1923, 1924, 1925, 1925, 1926, 1926, 1927, 1928,
     1928, 1932, 1921, 1929, 1929, 1930, 1930, 1933, 1925, 1931,
     1931, 1934, 1935, 1928, 1936, 1937, 1938, 1942, 1929, 1939,
     1939, 1940, 1940, 1941, 1941, 1943, 1944, 1945, 1946, 1947,
     1948, 1949, 1950, 1951, 1952, 1954, 1940, 1953, 1953, 1955,
     1956, 1956, 1957, 1958, 1958, 1959, 1959, 1960, 1960, 1961,
     1962, 1963, 1964, 1964, 1965, 1966, 1967, 1958, 1968, 1968,

     1969, 1970, 1971, 1972, 1975, 1977, 1978, 1964, 1979, 1980,
     1981, 1982, 1983, 1983, 1984, 1985, 1985, 1986, 1986, 1987,
     1987, 1988, 1988, 1989, 1964, 1990, 1990, 1991, 1992, 1993,
     1985, 1994, 1986, 1995, 1987, 1997, 1998, 2000, 2001, 2002,
     1990, 2003, 2004, 2004, 2005, 2005, 2006, 2006, 2007, 2007,
     2008, 2008, 2009, 2009, 2010, 2011, 2011, 2004, 2013, 2005,
     2012, 2012, 2015, 2007, 2014, 2014, 2016, 2017, 2018, 2019,
     2011, 2020, 2021, 2022, 2023, 2024, 2024, 2025, 2025, 2014,
     2026, 2026, 2027, 2027, 2028, 2029, 2029, 2030, 2031, 2031,
     2024, 2032, 2032, 2033, 2034, 2034, 2035, 2035, 2036, 2037,

     2038, 2039, 2040, 2031, 2041, 2042, 2042, 2043, 2044, 2034,
     2046, 2035, 2045, 2045, 2047, 2047, 2048, 2048, 2049, 2049,
     2050, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2047,
     2058, 2059, 2063, 2049, 2060, 2060, 2061, 2061, 2065, 2066,
     2067, 2067, 2068, 2068, 2069, 2070, 2070, 2071, 2072, 2073,
     2073, 2074, 2074, 2078, 2067, 2075, 2075, 2068, 2076, 2076,
     2070, 2077, 2077, 2073, 2081, 2074, 2079, 2079, 2080, 2080,
     2082, 2082, 2087, 2076, 2083, 2083, 2084, 2084, 2085, 2085,
     2089, 2079, 2086, 2086, 2082, 2088, 2088, 2093, 2083, 2090,
     2090, 2091, 2091, 2092, 2092, 2095, 2095, 2096, 2096, 2097,

     2097, 2098, 2098, 2090, 2099, 2099,  749,  748,  747,  744,
      742,  740, 2096,  739, 2097, 2101, 2101, 2101, 2101, 2101,
     2102, 2102, 2102, 2102, 2102, 2103, 2103, 2103, 2103, 2103,
     2104, 2104, 2104, 2104, 2104, 2105, 2105, 2105, 2105, 2105,
     2106, 2106, 2106, 2106, 2106, 2107, 2107, 2107, 2107, 2107,
     2108, 2108, 2108, 2108, 2108, 2109, 2109, 2109, 2109, 2110,
      738, 2110, 2110, 2110, 2111, 2111,  737, 2111, 2111, 2112,
     2112, 2112,  736, 2112,  734,  732,  728,  727,  726,  724,
      723,  721,  720,  719,  714,  713,  712,  711,  710,  709,
      708,  707,  706,  705,  704,  703,  702,  701,  698,  697,

      696,  693,  692,  687,  684,  677,  674,  673,  671,  670,
      669,  668,  667,  666,  665,  663,  661,  659,  658,  657,
      656,  655,  654,  652,  651,  650,  649,  648,  645,  644,
      642,  641,  640,  639,  635,  634,  633,  632,  631,  630,
      629,  628,  627,  626,  625,  624,  623,  622,  621,  620,
      619,  618,  616,  615,  612,  611,  610,  609,  607,  606,
      605,  604,  603,  602,  599,  598,  594,  593,  592,  588,
      587,  586,  585,  579,  578,  577,  575,  574,  573,  572,
      571,  570,  569,  568,  567,  566,  563,  562,  561,  557,
      556,  554,  553,  552,  551,  549,  545,  544,  543,  540,

      539,  538,  537,  535,  531,  530,  529,  528,  527,  526,
      525,  524,  523,  522,  521,  520,  519,  518,  517,  516,
      515,  514,  511,  510,  509,  507,  505,  504,  503,  502,
      498,  496,  495,  494,  492,  491,  490,  489,  488,  487,
      486,  485,  484,  483,  481,  480,  479,  478,  475,  474,
      472,  471,  470,  469,  466,  465,  463,  461,  460,  459,
      456,  452,  451,  450,  449,  448,  447,  443,  442,  441,
      440,  439,  438,  436,  434,  433,  432,  431,  430,  427,
      426,  425,  424,  423,  419,  418,  415,  414,  413,  412,
      411,  406,  405,  404,  403,  399,  396,  395,  394,  393,

      392,  390,  389,  388,  387,  386,  385,  383,  382,  381,
      380,  379,  376,  374,  373,  372,  371,  370,  369,  367,
      366,  365,  364,  363,  362,  360,  359,  358,  357,  356,
      355,  354,  353,  352,  351,  349,  348,  347,  346,  345,
      344,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      333,  331,  329,  328,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  315,  314,  313,  310,  309,  307,  306,
      304,  303,  301,  297,  296,  295,  294,  291,  290,  289,
      288,  284,  282,  281,  280,  279,  278,  277,  276,  275,
      274,  273,  272,  271,  270,  269,  268,  267,  266,  265,

      264,  263,  262,  261,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  245,  242,
      241,  240,  239,  238,  237,  236,  235,  233,  232,  231,
      229,  228,  227,  226,  225,  224,  223,  222,  221,  220,
      219,  218,  216,  215,  214,  212,  210,  209,  205,  204,
      203,  202,  201,  200,  199,  196,  195,  194,  193,  192,
      191,  190,  189,  188,  187,  186,  184,  183,  182,  181,
      178,  177,  176,  175,  174,  173,  171,  170,  169,  167,
      166,  165,  164,  163,  162,  161,  160,  159,  158,  157,
      156,  154,  153,  152,  150,  148,  147,  145,  143,  141,

      138,  136,  135,  133,  132,  129,  128,  127,  126,  122,
      121,  120,  118,  117,  114,  113,  112,  111,  110,  109,
      107,  106,  105,  104,  103,  102,  100,   95,   93,   91,
       89,   86,   84,   83,   81,   80,   77,   76,   75,   72,
       65,   64,   56,   55,   54,   53,   52,   48,   43,   40,
       31,   27,   24,   22,   19,   14,   13,    8,    7,    6,
        5,    4,    3, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[261] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "OSParseosol.l"
/* $Id$ */
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2011, Horand Gassmann, Jun Ma, Kipp Martin,
 * Dalhousie University, Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 15 "OSParseosol.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream>  

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 

//#define PARSERDEBUG
#ifdef PARSERDEBUG

	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
#include "OSoLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;









#line 103 "OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 1989 "OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 113 "OSParseosol.l"


 
#line 2234 "OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2101 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3264 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 120 "OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 122 "OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 123 "OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 125 "OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 141 "OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 143 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 144 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 145 "OSParseosol.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 146 "OSParseosol.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 147 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 148 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 149 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 150 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 151 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 152 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 153 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 154 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 155 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 156 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 157 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 158 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 159 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 160 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 161 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 162 "OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 163 "OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 164 "OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 165 "OSParseosol.l"
{YY_PRINT; return(LBDUALVALUEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 166 "OSParseosol.l"
{YY_PRINT; return(UBDUALVALUEATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 170 "OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 171 "OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 172 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 173 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 174 "OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 175 "OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 176 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 177 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 178 "OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 179 "OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 180 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 181 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 182 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 183 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 184 "OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 185 "OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 186 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 187 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 188 "OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 189 "OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 190 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 191 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 192 "OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 193 "OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 194 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 195 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 196 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 197 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 198 "OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 199 "OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 200 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 201 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 202 "OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 203 "OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 204 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 205 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 206 "OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 207 "OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 208 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 209 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 210 "OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 211 "OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 212 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 213 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 215 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 216 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 217 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 218 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 219 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 220 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 222 "OSParseosol.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 223 "OSParseosol.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 224 "OSParseosol.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 226 "OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 227 "OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 228 "OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 230 "OSParseosol.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 231 "OSParseosol.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 233 "OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 234 "OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 236 "OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 237 "OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 239 "OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 240 "OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 242 "OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 243 "OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 245 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 246 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 249 "OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 250 "OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 251 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 252 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 253 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 254 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 255 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 256 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 257 "OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 258 "OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 259 "OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 260 "OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 261 "OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 262 "OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 263 "OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 264 "OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 265 "OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 266 "OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 267 "OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 268 "OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 269 "OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 270 "OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 271 "OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 272 "OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 274 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 275 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 276 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 277 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 278 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 279 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 280 "OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 281 "OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 282 "OSParseosol.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 283 "OSParseosol.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 284 "OSParseosol.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 285 "OSParseosol.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 287 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 288 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 290 "OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 291 "OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 292 "OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 293 "OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 294 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 295 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 296 "OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 297 "OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 298 "OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 299 "OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 300 "OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 301 "OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 302 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 303 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 304 "OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 305 "OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 306 "OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 307 "OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 308 "OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 309 "OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 310 "OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 311 "OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 312 "OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 313 "OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 314 "OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 315 "OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 316 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 317 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 318 "OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 319 "OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 320 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 321 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 322 "OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 323 "OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 326 "OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 327 "OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 328 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 329 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 330 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 331 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 332 "OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 333 "OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 334 "OSParseosol.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 335 "OSParseosol.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 336 "OSParseosol.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 337 "OSParseosol.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 338 "OSParseosol.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 339 "OSParseosol.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 340 "OSParseosol.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 341 "OSParseosol.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 342 "OSParseosol.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 343 "OSParseosol.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 344 "OSParseosol.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 345 "OSParseosol.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 346 "OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 347 "OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 348 "OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 349 "OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 350 "OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 351 "OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 352 "OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 353 "OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 354 "OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 355 "OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 356 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 357 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 358 "OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 359 "OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 360 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 361 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 362 "OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 363 "OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 364 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 365 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 366 "OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 367 "OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 368 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 369 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 370 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 371 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 372 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 373 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 374 "OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 375 "OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
/* The <item> element and the children of the option header are treated specially because they may legitimately contain special characters */
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 380 "OSParseosol.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 381 "OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 382 "OSParseosol.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 383 "OSParseosol.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 385 "OSParseosol.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 386 "OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 387 "OSParseosol.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 388 "OSParseosol.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 390 "OSParseosol.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 391 "OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 392 "OSParseosol.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 393 "OSParseosol.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 395 "OSParseosol.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 396 "OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 397 "OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 398 "OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 400 "OSParseosol.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 401 "OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 402 "OSParseosol.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 403 "OSParseosol.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 405 "OSParseosol.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 406 "OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 407 "OSParseosol.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 408 "OSParseosol.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* environments and comments */
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 413 "OSParseosol.l"
{ YY_PRINT; yylval->sval = strdup( yytext); /*  yylval->sval = yytext;*/ yyextra->errorText = yylval->sval;  return (ELEMENTTEXT); }
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 414 "OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 416 "OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 249:
#line 418 "OSParseosol.l"
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 418 "OSParseosol.l"
;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 419 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 421 "OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 253:
#line 423 "OSParseosol.l"
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 423 "OSParseosol.l"
;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 424 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 427 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 428 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 429 "OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 433 "OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 445 "OSParseosol.l"
ECHO;
	YY_BREAK
#line 3907 "OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2101 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2101 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2100);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 445 "OSParseosol.l"





