#line 2 "OSParseosol.cpp"

#line 4 "OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osollex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 238
#define YY_END_OF_BUFFER 239
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1921] =
    {   0,
        1,    1,  236,  236,  234,  234,  235,  235,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  239,  237,
        1,    2,  224,    2,  224,    6,  224,    5,  237,    4,
      224,    2,  236,  238,  234,  235,  225,  227,  228,  227,
      231,  232,  231,    1,  224,  224,    6,  224,    5,    0,
        4,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,    3,    6,    6,  224,    7,
        5,    0,    0,  230,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    4,  224,  236,  234,  235,  225,    0,  233,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,    0,  224,    6,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  132,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    6,  229,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,    0,  224,  224,  224,  224,  224,

      224,  224,    6,  226,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  210,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   94,    0,    0,    0,  202,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  194,    0,    0,    0,
        0,    0,  196,  224,  224,  224,  224,  224,   27,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
        0,   78,   79,  224,  224,  224,  224,  224,  224,  224,

        6,    0,    0,    0,    0,    0,    0,    0,  133,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  144,
        0,    0,    0,    0,    0,    0,    0,  134,    0,    0,
        0,  224,  224,  224,    0,  224,   27,  224,   82,  224,
      224,  224,  224,  224,   83,  224,    0,  224,  224,  224,

      224,  224,  224,    0,  224,  224,  224,    0,  224,  224,
        0,    0,    0,    0,    0,  211,    0,    0,    0,    0,
      133,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   95,    0,    0,    0,    0,    0,    0,    0,  203,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  195,    0,    0,    0,    0,    0,    0,    0,
      197,    0,    0,    0,    0,  178,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      221,  106,    0,    0,    0,    0,    0,    0,    0,   86,
       85,  120,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  224,  224,    0,   76,
       77,  224,   82,  224,  224,  224,  224,   83,    0,   48,
       49,  224,  224,  224,  224,  224,    0,   56,   57,  224,
      224,    0,   66,   67,  224,    0,  224,    0,    0,    0,
        0,  211,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  222,   95,    0,    0,    0,
        0,    0,    0,  203,    0,    0,    0,   87,    0,    0,
        0,    0,  145,    0,    0,    0,    0,    0,    0,  195,
        0,    0,    0,    0,  135,    0,    0,  197,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  184,  223,  221,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   90,    0,    0,    0,
      224,  224,  224,  224,  224,  224,  224,   46,   47,  224,
      224,   84,  224,    0,  224,   28,  224,   54,   55,  224,
      224,   64,   65,    0,   70,   71,  224,    0,    0,    0,
        0,    0,  179,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  222,    0,  107,    0,
        0,    0,    0,    0,    0,    0,   87,    0,  121,    0,
        0,    0,  145,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  135,    0,    0,    0,  180,  182,    0,    0,
      116,    0,    0,    0,    0,   88,    0,    0,    0,    0,
        0,  223,    0,  110,  136,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  168,    0,    0,   92,
        0,    0,    0,    0,  188,    0,    0,  224,  224,  224,
      224,  224,    0,  224,  224,  224,   84,    0,   52,   53,
       28,  224,  224,  224,    0,   68,   69,    0,   74,   75,
        0,    0,    0,  179,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  185,  107,    0,
        0,    0,    0,    0,    0,    0,    0,  121,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   91,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  114,  156,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  112,    0,  224,    0,  224,  224,  224,
        0,   42,   43,  224,  224,    0,  224,  224,  224,  224,
      224,  224,  224,  224,   50,   51,  224,  224,    0,   62,
       63,   72,   73,    0,  181,    0,  183,    0,    0,    0,
      117,    0,    0,    0,    0,    0,    0,   89,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  185,    0,  111,
        0,  137,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  169,    0,    0,    0,    0,   93,
        0,    0,    0,    0,    0,    0,   91,    0,  189,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  170,    0,
       34,   35,  224,  224,  224,   40,   41,  224,    0,   80,
       81,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      224,  224,  224,  224,  224,   60,   61,  181,  183,    0,
        0,  117,    0,    0,    0,    0,    0,   89,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  111,  137,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      115,    0,  157,  169,    0,    0,    0,    0,   93,    0,
        0,    0,    0,    0,    0,  189,    0,  113,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  198,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   98,    0,    0,    0,  186,   32,   33,  224,  224,

      224,  224,  224,  224,   10,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  115,  157,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  113,    0,  171,    0,  206,
        0,    0,  218,    0,  150,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  126,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  100,    0,
        0,    0,  224,    0,  224,   29,  224,   30,  224,  224,

       25,  224,   10,  224,  224,  224,  224,   23,  224,  224,
      224,  224,  224,   21,  224,  224,   20,  224,  224,  224,
       31,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  199,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   99,    0,    0,    0,    0,  187,
      171,    0,  140,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  102,    0,    0,  220,  128,  122,    0,
       96,  118,    0,    0,    0,    0,    0,    0,  216,    0,
        0,    0,   38,   39,   29,   30,  224,    0,   25,  224,

      224,  224,  224,   23,  224,  224,  224,  224,  224,   21,
      224,   20,  224,  224,   31,    0,    0,  207,    0,    0,
        0,  219,    0,    0,  151,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  127,    0,    0,
      199,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      101,   99,    0,    0,    0,  187,    0,    0,  164,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  220,  124,
        0,    0,    0,    0,    0,  146,  214,    0,    0,   36,
       37,    0,   45,   44,  224,  224,  224,   13,  224,  224,
      224,  224,  224,  224,  224,   12,  224,  224,  224,  224,

        0,    0,  207,    0,  141,    0,  219,    0,  151,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  103,    0,
        0,  129,  127,    0,  123,    0,    0,   97,    0,  119,
        0,    0,    0,    0,    0,    0,  101,    0,  217,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  108,
        0,  224,  224,   13,  224,    9,  224,  224,  224,  224,
      224,  224,   12,  224,  224,  224,    0,   59,   58,    0,
      141,    0,    0,    0,  165,    0,    0,    0,    0,    0,
        0,    0,    0,  103,    0,  129,  123,    0,  125,   97,

      119,    0,    0,    0,    0,    0,    0,  147,  217,    0,
      215,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  166,    0,    0,
        0,  224,  224,    9,  224,  224,  224,  224,  224,  224,
      224,  224,  224,    0,    0,    0,  165,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  125,    0,    0,    0,
        0,    0,  147,  215,    0,  109,    0,  130,    0,    0,
        0,    0,    0,    0,    0,    0,  154,  104,    0,    0,
        0,    0,    0,    0,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      167,    0,    0,  109,    0,    0,  148,    0,    0,  212,
        0,    0,    0,    0,    0,    0,  160,    0,    0,    0,
      224,  224,  224,  224,  224,  224,  224,  224,   14,  224,
       15,  224,  224,   16,    0,  131,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  155,    0,  105,    0,
        0,    0,  167,    0,    0,    0,    0,  176,    0,    0,
        0,    0,    0,    0,    0,  138,    0,    0,  224,  224,
      224,   17,  224,  224,  224,  224,   14,   15,  224,   16,
      131,    0,    0,  149,    0,    0,    0,  213,    0,    0,

        0,    0,  155,  105,    0,    0,    0,  161,    0,    0,
        0,  162,    0,    0,    0,    0,    0,    0,    0,  142,
        0,  224,   18,  224,   17,  224,  224,  224,  224,  224,
        0,  149,    0,  177,    0,  213,    0,    0,    0,    0,
        0,    0,  161,    0,  139,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   18,  224,   11,  224,  224,
      224,    8,  224,  224,    0,  163,  177,    0,    0,    0,
        0,    0,    0,    0,  139,    0,  143,    0,    0,    0,
        0,  172,    0,    0,    0,    0,   11,  224,  224,    8,
      224,  224,   26,  163,    0,    0,    0,    0,    0,    0,

        0,  143,    0,    0,  204,  200,    0,  152,    0,    0,
        0,  224,  224,  224,   26,    0,    0,    0,    0,  173,
        0,    0,    0,    0,    0,  208,    0,    0,  158,    0,
      224,  224,  224,    0,    0,  205,    0,  201,  173,    0,
        0,  153,    0,    0,    0,    0,    0,    0,  224,  224,
      224,    0,  209,  205,  201,    0,  153,    0,    0,  159,
        0,    0,    0,    0,  224,  224,  224,  209,    0,    0,
      159,    0,    0,    0,    0,  224,  224,  224,    0,    0,
        0,  174,    0,  192,  224,  224,  224,    0,    0,    0,
        0,  224,  224,  224,   19,    0,  175,    0,    0,  193,

        0,  224,  224,   22,   19,  175,    0,  193,    0,  224,
       24,   22,    0,  190,   24,    0,    0,  191,  191,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    1,    1,    7,    1,
        1,    6,    8,    1,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,    6,   24,   25,   26,   27,   28,   29,   30,   31,
        6,   32,   33,   34,   35,   36,   37,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,    1,   64,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1933] =
    {   0,
        0,   64, 2925, 2924, 2935, 2934, 2931, 2930,    0,    0,
        0,    0, 2921, 2920,   16,   17,    3,   19, 2934, 2943,
      127, 2928,  189, 2925,   17,   41, 2914,   48,  246,   30,
     2901, 2943,    0, 2943,    0,    0,    0, 2943, 2943, 2920,
     2943, 2943, 2911,    0,    0,   35,   82, 2910,   89,   24,
       32, 2897, 2887, 2882, 2868, 2867,    5,    0,   48,   49,
       62,   57,   54, 2883, 2878, 2943,   95,  209,  108, 2943,
      123, 2910,  268, 2943, 2861, 2879, 2864,   81,   64, 2869,
     2872,  158, 2861, 2866,   72,  202,    2, 2869,  166, 2848,
      154, 2871,  132, 2885,    0,    0,    0,    0, 2890, 2943,

     2849, 2849, 2852, 2851, 2841, 2861,    2, 2860, 2851, 2849,
     2847, 2846, 2832,  170,  191, 2856, 2840,  206, 2846, 2842,
     2844,  183,  240,  259, 2880, 2831, 2849, 2834,  174,   94,
     2839, 2842,  212, 2831, 2836,  179,  277,  227, 2839,  280,
     2818,  219, 2841,  209, 2822, 2826, 2823, 2820, 2943, 2816,
     2824, 2821,  221, 2848, 2828, 2830, 2828, 2806, 2815, 2818,
     2807, 2811, 2817, 2804,  223, 2808, 2805, 2803,  227, 2804,
     2800, 2802, 2806, 2811, 2797,  326, 2943, 2809, 2810, 2799,
     2790,  334, 2792, 2788, 2807, 2806, 2801, 2785, 2799, 2801,
     2797, 2779, 2813,  337,  341, 2785, 2793, 2776, 2795, 2775,

     2773, 2786,  349, 2943,  314, 2773, 2777, 2774, 2771,  352,
     2767, 2775, 2772,  311, 2799, 2779, 2781, 2779, 2757, 2766,
     2769, 2758, 2762, 2768, 2755,  302, 2759, 2756, 2754,  316,
     2755, 2751, 2753, 2757, 2762, 2748, 2750, 2748,  314,  314,
     2758, 2757, 2748, 2755, 2754, 2738, 2736, 2736, 2750, 2736,
     2740, 2765, 2746, 2753,  353, 2744, 2739, 2735, 2741, 2729,
     2725, 2735, 2739, 2720, 2718, 2717, 2739, 2732, 2716, 2730,
     2720, 2715, 2723, 2724, 2712,  373, 2713,  375,  377,  380,
     2727, 2715, 2706, 2742,  382,  384, 2719, 2730, 2717, 2717,
      390, 2943, 2943, 2701,  399, 2718, 2706,  401, 2712, 2708,

      403, 2700, 2698,  348,  405, 2708, 2707,  407,  409, 2698,
     2705, 2704, 2688, 2686, 2686, 2700, 2686, 2690,  411, 2697,
     2704,  398,  427, 2691, 2687, 2693, 2681, 2677, 2687, 2691,
     2672, 2670, 2669,  429, 2685, 2669, 2683, 2673, 2668,  431,
     2662, 2668, 2706, 2679, 2661, 2679, 2665, 2675, 2672, 2657,
     2657, 2665, 2653, 2671, 2664, 2665,  434, 2685, 2654, 2658,
     2672, 2656, 2659, 2660, 2649,  436, 2643, 2639, 2636, 2664,
     2652,  374, 2647, 2650, 2653, 2635, 2647, 2943, 2636, 2658,
     2648, 2633, 2638,  438,  453, 2646,  440,  447,  464, 2633,
     2623, 2634, 2627,  468,  470,  472,  476, 2623, 2634, 2621,

     2614, 2621,  483,  487, 2624, 2614,  493,  495,  501, 2614,
     2610, 2616, 2654, 2627,  503,  505, 2609, 2627, 2613, 2623,
      508, 2620, 2605, 2605, 2613, 2601, 2619, 2612, 2613,  510,
      512,  516, 2633, 2602, 2606, 2620, 2604, 2607,  519,  521,
     2608, 2597,  523, 2591, 2587, 2584,  528, 2601,  379, 2596,
     2599,  530,  532, 2602, 2584, 2596,  535, 2585, 2607,  539,
      541, 2597, 2592, 2591, 2619, 2943, 2576, 2590, 2588, 2571,
     2572, 2592, 2587, 2586,  324, 2572, 2580, 2579,  546, 2603,
      551, 2943, 2563, 2568, 2582, 2560, 2565, 2557, 2567,  548,
     2943, 2582, 2554, 2558, 2571, 2552, 2551, 2551, 2565, 2549,

     2548, 2563, 2551, 2540, 2561, 2559, 2542, 2543,  565, 2943,
     2943, 2553,  558, 2558, 2551, 2540, 2538,  571,  573, 2585,
     2582, 2558,  579,  581,  583, 2535,  585, 2581, 2578, 2548,
     2541,  591, 2577, 2574,  598,  600,  606, 2538, 2537, 2565,
      608,  610, 2522, 2536, 2534, 2517, 2518, 2538, 2533, 2532,
      436, 2518, 2526, 2525,  613,  615,  617,  621, 2510, 2515,
     2529, 2507, 2512,  624, 2504, 2514,  626,  629,  631, 2502,
     2506,  633,  637, 2519, 2500, 2499, 2499, 2513, 2497,  639,
     2496, 2511, 2499,  642,  644, 2488, 2509,  649, 2507, 2490,
     2489, 2524, 2504, 2484, 2498, 2487, 2500, 2485, 2487, 2486,

     2488, 2487, 2492, 2476, 2943,  651,  653, 2519, 2487, 2486,
      394, 2479, 2474, 2479, 2461, 2470,  459, 2467, 2475, 2464,
     2462, 2476, 2475,  434, 2470, 2477, 2943, 2463, 2463, 2463,
     2449, 2453, 2463, 2470,  655, 2456, 2444, 2943, 2943, 2462,
      660,  662,  664,  667,  675,  679, 2449, 2943, 2943, 2465,
      681, 2943, 2943,  683, 2497, 2494,  690,  693, 2445, 2444,
     2479,  699,  701, 2459, 2439, 2453, 2442, 2455, 2440, 2442,
     2441, 2443, 2442, 2447, 2431,  705,  707,  709,  711, 2443,
     2442,  458, 2435, 2430, 2435, 2417,  715,  717,  721, 2426,
      541, 2423,  725, 2431, 2420, 2418, 2432, 2431,  645, 2426,

     2433,  727,  729, 2419, 2419, 2419, 2943, 2943, 2421, 2420,
     2943, 2414, 2409, 2406,  518, 2943,  716, 2407, 2412, 2418,
     2423,  736, 2412, 2943, 2943, 2399, 2403, 2422, 2399, 2393,
     2408, 2383, 2347, 2345, 2349, 2334, 2346, 2345, 2345,  208,
       36,   48,   94,  178, 2943,  214,  224,  738,  235,  247,
      245,  740,  746,  263,  755,  739,  763,  771,  295,  306,
      765,  262,  282,  777,  779, 2943, 2943,  785,  361,  381,
      792,  794,  353,  796,  401,  798,  401,  421,  436,  666,
      800,  786,  446,  467,  486,  519,  810,  816,  818,  821,
      823,  500,  516,  538,  522,  520,  551,  826,  534,  558,

      560,  580,  582,  828,  607,  619,  830,  620,  637,  661,
      649,  832,  834,  839,  673,  679,  674,  682,  705,  701,
      704,  713,  722,  724,  725,  725,  746,  751,  749,  762,
      781,  776,  782,  793,  802,  793,  786,  808,  794,  806,
      798,  805, 2943, 2943,  799,  816,  837,  823,  830,  806,
      840,  827,  821, 2943,  812,  869,  871,  817,  830,  819,
      877,  876,  876,  824,  885,  887,  839,  844,  839,  845,
      859,  862,  869,  864, 2943, 2943,  869,  846,  903,  902,
      902, 2943, 2943,  909,  911,  916,  920,  864,  869,  922,
      925,  889,  884,  885,  890,  896,  933,  935,  902,  889,

      884,  904,  906,  903,  904,  920,  910,  949,  951,  953,
      955,  957,  911,  920,  910,  902,  923,  909,  921,  914,
      921,  971,  973,  975,  977,  915,  940,  961,  983,  991,
      945,  955,  932,  967,  956,  950,  995,  999, 1001, 1003,
      943,  969,  951,  963,  968,  959,  963,  965,  958,  964,
      979,  971,  964,  981,  966,  971,  986,  970,  984,  988,
      986,  991,  997,  975,  986,  981,  992,  993, 1002, 1004,
      992,  993,  990, 1017,  996,  992,  995, 1005, 2943, 1044,
     1043, 1043, 1001,  996, 1012, 2943, 2943, 1002, 1054, 2943,
     2943, 1007, 1060, 1002, 1022, 1026, 1019, 1022, 1011, 1017,

     1037, 1022, 1017, 1011, 1032, 2943, 2943, 1075, 1077, 1037,
     1024, 1080, 1038, 1043, 1034, 1038, 1040, 1087, 1035, 1041,
     1055, 1047, 1040, 1056, 1041, 1046, 1061, 1045, 1099, 1101,
     1066, 1064, 1069, 1075, 1053, 1064, 1059, 1070, 1071, 1112,
     1114, 1116, 1118, 1120, 1090, 1092, 1080, 1081, 1128, 1078,
     1108, 1088, 1084, 1087, 1097, 1136, 1138, 1140, 1142, 1091,
     1091, 1106, 1093, 1099, 1109, 1110, 1107, 1098, 1107, 1115,
     1112, 1103, 1127, 1122, 1113, 1118, 1115, 1124, 1126, 1128,
     1123, 2943, 1118, 1120, 1132, 1117, 1122, 1118, 1121, 1128,
     1136, 2943, 1127, 1121, 1139, 2943, 2943, 2943, 1180, 1182,

     1184, 1146, 1187, 1189, 1191, 1145, 1147, 1175, 1199, 1162,
     1161, 1167, 1206, 1151, 1209, 1160, 1214, 1159, 1162, 1177,
     1164, 1170, 1181, 1182, 1180, 1171, 1179, 1187, 1185, 1175,
     1199, 1194, 1185, 1190, 1195, 1197, 1199, 1194, 1242, 1190,
     1195, 1207, 1192, 1247, 1249, 1201, 1197, 1201, 1208, 1216,
     1258, 1210, 1204, 1222, 1263, 1265, 1267, 1269, 1211, 2943,
     1218, 1242, 2943, 1220, 2943, 1222, 1222, 1245, 1242, 1245,
     1233, 1234, 1249, 1246, 1251, 1288, 1237, 2943, 1251, 1231,
     1244, 1240, 1240, 1264, 1273, 1262, 1259, 1260, 2943, 1252,
     1252, 1287, 1305, 1307, 1313, 1315, 1317, 1320, 1322, 1324,

     1328, 1254, 1332, 1271, 1272, 1311, 1334, 1339, 1299, 1288,
     1313, 1303, 1344, 1346, 1309, 1350, 1352, 1318, 1315, 1356,
     1359, 1301, 1362, 1311, 1334, 1368, 1316, 1372, 1320, 1320,
     1342, 1340, 1343, 1330, 1331, 1346, 1344, 1349, 1333, 1388,
     1350, 1330, 1392, 1394, 1347, 1343, 1343, 1367, 1376, 1365,
     1362, 1364, 1405, 1408, 1410, 1363, 1363, 1397, 1415, 1417,
     1421, 1400, 2943, 1374, 1385, 1395, 1374, 1392, 1374, 1394,
     1379, 1407, 1379, 2943, 1398, 1436, 1438, 2943, 2943, 1400,
     2943, 2943, 1391, 1392, 1399, 1391, 1407, 1392, 1393, 1402,
     1396, 1452, 1447, 1449, 1458, 1460, 1462, 1464, 1470, 1403,

     1413, 1472, 1414, 1474, 1422, 1460, 1443, 1481, 1426, 1483,
     1432, 1489, 1450, 1491, 1496, 1474, 1498, 1500, 1502, 1454,
     1506, 1508, 1470, 1511, 1514, 1485, 1465, 1483, 1465, 1485,
     1470, 1498, 1470, 1527, 1492, 1530, 1532, 1534, 1536, 1498,
     1539, 1543, 1548, 1491, 1496, 1506, 1499, 1515, 1500, 1555,
     1559, 1561, 1564, 1511, 1513, 1567, 1533, 1552, 2943, 1517,
     1537, 1527, 1531, 1529, 1533, 1530, 1537, 1535, 1583, 2943,
     1532, 1560, 1540, 1533, 1534, 2943, 2943, 1550, 1555, 2943,
     2943, 1592, 2943, 2943, 1558, 1560, 1598, 1600, 1602, 1560,
     1555, 1569, 1571, 1564, 1609, 1613, 1557, 1587, 1570, 1621,

     1624, 1583, 1630, 1632, 1636, 1615, 1638, 1642, 1644, 1571,
     1592, 1593, 1602, 1601, 1605, 1600, 1607, 1652, 1654, 1609,
     1658, 1660, 1662, 1664, 1668, 1670, 1674, 1676, 1680, 1682,
     1613, 1646, 1631, 1629, 1631, 1687, 1690, 1692, 1696, 1698,
     1654, 1664, 1646, 1663, 1668, 1669, 1662, 1652, 1652, 1670,
     1671, 1655, 1664, 1675, 1672, 1667, 1671, 1687, 1670, 2943,
     1672, 1678, 1668, 1724, 1726, 1728, 1673, 1682, 1687, 1678,
     1681, 1682, 1736, 1698, 1688, 1701, 1742, 2943, 2943, 1689,
     1748, 1706, 1714, 1751, 1753, 1719, 1712, 1701, 1701, 1719,
     1720, 1704, 1712, 1763, 1725, 1767, 1769, 1771, 1773, 1775,

     1777, 1735, 1730, 1734, 1750, 1733, 1784, 1787, 1789, 1791,
     1793, 1795, 1748, 1762, 1753, 1755, 1747, 1754, 1764, 1765,
     1773, 1754, 1769, 1762, 1795, 1773, 1757, 2943, 1771, 1763,
     1779, 1769, 1775, 1820, 1782, 1769, 1784, 1781, 1782, 1773,
     1774, 1774, 1776, 1795, 1785, 1787, 1834, 1781, 1788, 1798,
     1799, 1806, 1787, 1802, 1794, 1827, 1845, 1807, 1791, 1849,
     1807, 1799, 1853, 1855, 1857, 1859, 1823, 2943, 1822, 1823,
     1809, 1811, 1813, 1851, 1833, 1838, 2943, 2943, 1818, 1819,
     1834, 1827, 1832, 1834, 1823, 1829, 1826, 1826, 1844, 1833,
     1848, 1886, 1888, 1846, 1891, 1893, 1855, 1856, 1841, 1843,

     1845, 1884, 1867, 1872, 1906, 1909, 1858, 1858, 1873, 1914,
     1916, 1871, 1876, 1922, 1882, 1871, 2943, 1873, 1894, 2943,
     1880, 1895, 1885, 1883, 1898, 1903, 2943, 1896, 1897, 1894,
     1885, 1891, 1941, 1890, 1889, 1896, 1909, 1947, 1949, 1951,
     1953, 1906, 1957, 1959, 1962, 1966, 1909, 1968, 1916, 1938,
     1973, 1925, 1940, 1931, 1929, 1980, 1984, 1986, 1989, 1946,
     1959, 1992, 1996, 1954, 1958, 1955, 1960, 2943, 1966, 1947,
     1957, 1949, 1980, 1959, 1959, 2943, 1956, 1962, 2012, 1960,
     2015, 2017, 1983, 1976, 1967, 1975, 2023, 2027, 1976, 2030,
     2032, 1994, 2035, 2037, 2039, 2005, 2042, 2044, 1990, 2000,

     1992, 2023, 2051, 2055, 2004, 2008, 2059, 2061, 2063, 2011,
     2017, 2943, 2020, 2019, 2013, 2030, 2021, 2034, 2047, 2943,
     2033, 2076, 2079, 2081, 2083, 2041, 2029, 2087, 2049, 2037,
     2092, 2096, 2098, 2102, 2047, 2104, 2051, 2050, 2068, 2059,
     2072, 2085, 2114, 2116, 2118, 2120, 2070, 2066, 2084, 2084,
     2071, 2069, 2084, 2078, 2094, 2132, 2136, 2138, 2081, 2094,
     2140, 2142, 2116, 2145, 2147, 2151, 2155, 2093, 2114, 2117,
     2104, 2103, 2118, 2113, 2164, 2166, 2168, 2135, 2131, 2118,
     2119, 2143, 2135, 2132, 2120, 2138, 2179, 2127, 2155, 2184,
     2135, 2187, 2189, 2191, 2153, 2140, 2141, 2196, 2158, 2155,

     2143, 2202, 2164, 2151, 2943, 2943, 2151, 2943, 2158, 2168,
     2165, 2182, 2161, 2158, 2214, 2162, 2217, 2219, 2221, 2223,
     2170, 2228, 2177, 2190, 2187, 2943, 2180, 2193, 2943, 2195,
     2187, 2184, 2196, 2241, 2244, 2246, 2248, 2250, 2252, 2201,
     2257, 2260, 2213, 2264, 2220, 2222, 2232, 2225, 2214, 2226,
     2221, 2273, 2275, 2277, 2280, 2238, 2283, 2250, 2286, 2289,
     2248, 2243, 2253, 2239, 2251, 2246, 2248, 2298, 2251, 2262,
     2303, 2250, 2264, 2263, 2254, 2259, 2261, 2257, 2270, 2269,
     2260, 2943, 2273, 2943, 2267, 2263, 2318, 2320, 2280, 2323,
     2282, 2272, 2327, 2329, 2333, 2336, 2339, 2288, 2344, 2346,

     2287, 2348, 2352, 2354, 2356, 2360, 2295, 2363, 2304, 2367,
     2369, 2371, 2311, 2943, 2373, 2375, 2377, 2379, 2382, 2943,
     2394, 2399, 2404, 2409, 2414, 2419, 2424, 2429, 2434, 2438,
     2443, 2448
    } ;

static yyconst flex_int16_t yy_def[1933] =
    {   0,
     1921, 1921, 1922, 1922, 1923, 1923, 1924, 1924, 1925, 1925,
     1925, 1925, 1926, 1926, 1927, 1927, 1928, 1928, 1920, 1920,
     1920, 1920,   21, 1920,   23,   23,   23,   23, 1920, 1920,
       23, 1920, 1929, 1920, 1930, 1931, 1932, 1920, 1920, 1920,
     1920, 1920, 1920,   21,   23,   23,   23,   23,   23,   29,
     1920,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 1920,   23,   23,   23, 1920,
       23, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920,   23, 1929, 1930, 1931, 1932, 1920, 1920,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 1920,   23,   23, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920,   23, 1920,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 1920,   23,   23,   23,   23,   23,

       23,   23, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920,   23,   23,   23,   23,   23, 1920,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     1920, 1920, 1920,   23,   23,   23,   23,   23,   23,   23,

     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920,   23,   23,   23, 1920,   23, 1920,   23, 1920,   23,
       23,   23,   23,   23, 1920,   23, 1920,   23,   23,   23,

       23,   23,   23, 1920,   23,   23,   23, 1920,   23,   23,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,

     1920, 1920, 1920, 1920, 1920, 1920,   23,   23, 1920, 1920,
     1920,   23, 1920,   23,   23,   23,   23, 1920, 1920, 1920,
     1920,   23,   23,   23,   23,   23, 1920, 1920, 1920,   23,
       23, 1920, 1920, 1920,   23, 1920,   23, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,

     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
       23,   23,   23,   23,   23,   23,   23, 1920, 1920,   23,
       23, 1920,   23, 1920,   23, 1920,   23, 1920, 1920,   23,
       23, 1920, 1920, 1920, 1920, 1920,   23, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,

     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920,   23,   23,   23,
       23,   23, 1920,   23,   23,   23, 1920, 1920, 1920, 1920,
     1920,   23,   23,   23, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,

     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920,   23, 1920,   23,   23,   23,
     1920, 1920, 1920,   23,   23, 1920,   23,   23,   23,   23,
       23,   23,   23,   23, 1920, 1920,   23,   23, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,

     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920,   23,   23,   23, 1920, 1920,   23, 1920, 1920,
     1920,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,   23,   23,

       23,   23,   23,   23, 1920,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920,   23, 1920,   23, 1920,   23, 1920,   23,   23,

     1920,   23, 1920,   23,   23,   23,   23, 1920,   23,   23,
       23,   23,   23, 1920,   23,   23, 1920,   23,   23,   23,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920,   23, 1920, 1920,   23,

       23,   23,   23, 1920,   23,   23,   23,   23,   23, 1920,
       23, 1920,   23,   23, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920,   23,   23,   23, 1920,   23,   23,
       23,   23,   23,   23,   23, 1920,   23,   23,   23,   23,

     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920,   23,   23, 1920,   23, 1920,   23,   23,   23,   23,
       23,   23, 1920,   23,   23,   23, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,

     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920,   23,   23, 1920,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 1920, 1920, 1920, 1920, 1920,

     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
       23,   23,   23,   23,   23,   23,   23,   23, 1920,   23,
     1920,   23,   23, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,   23,   23,
       23, 1920,   23,   23,   23,   23, 1920, 1920,   23, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,

     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920,   23, 1920,   23, 1920,   23,   23,   23,   23,   23,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920,   23, 1920,   23,   23,
       23, 1920,   23,   23, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920,   23,   23, 1920,
       23,   23, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,

     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920,   23,   23,   23, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
       23,   23,   23, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,   23,   23,
       23, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920,   23,   23,   23, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920,   23,   23,   23, 1920, 1920,
     1920, 1920, 1920, 1920,   23,   23,   23, 1920, 1920, 1920,
     1920,   23,   23,   23, 1920, 1920, 1920, 1920, 1920, 1920,

     1920,   23,   23, 1920, 1920, 1920, 1920, 1920, 1920,   23,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,    0,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920
    } ;

static yyconst flex_int16_t yy_nxt[3008] =
    {   0,
       20,   21,   21,   20,   22,   42,   24,   20,   25,   26,
       27,   28,   28,   28,   29,   20,   30,   20,   39,   39,
       43,   42,  184,   31,   40,   40,   47, 1920,   49,   49,
       49,   93,   93,   93,   93, 1920,   43,  185,  107,  165,
       52, 1920,   67,   67,   47,  105,   49,   49,   49,   71,
       71,  108,   68,   68,   68,  106,  166,   47,   52,   49,
       49,   49,   69,   32,   20,   21,   21,   20,   22,   69,
       24,   20,   25,   26,   27,   28,   28,   28,   29,   20,
       30,   20,   69,   67,   67,  109,  111,   31,  850,   69,
       71,   71,  118,   68,   68,   68,   67,   67,   47,  851,

       49,   49,   49,   69,  119,  110,  112,  113,  115,  158,
       69,  116,  149,  114,  150,  122,  123,  159,  117,  124,
      124,  124,  147,   69,   71,   71,  148,   32,   44,   44,
       69,  852,   45,   93,   93,   46,   47,   48,   49,   49,
       49,   50,  210,   51,  211,   45,   45,   45,   45,   45,
       52,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   53,   54,   45,   55,
       56,   45,   57,   45,   45,   58,   59,   60,   45,   45,
       45,   45,   61,   62,   63,   64,   65,   45,   45,   45,
       45,   45,  194,  194,  203,  203,  203,   45,   45,   45,

       45,   45,   45, 1920,  173, 1920,  195,  168,  153,  174,
       67,   67,   45,  154,  155,  208,  219,  169,  192,  209,
       68,   68,   68,  170,  220,  193,  198,  171,   45,   45,
       69,   45,   45,  853,   45,  237,  848,   45,   45,   45,
      160,  199,  849,  238,   45,   45,   45,   45,   45,   72,
       69,  124,  124,  124,  161,  854,   73,  162,  163,  164,
       67,   67,  214,   74,  226,  855,  246,  215,  216,  234,
      124,  124,  124,  247,  235,  266,  248,  249,  261,  262,
      858,  227,  267,   75,   76,   77,   78,   79,   80,   81,
      859,   82,   83,  860,   84,   85,  864,   86,   87,  875,

       88,   89,   90,   91,   92,  126,  127,  128,  129,  130,
      131,  132,  876,  133,  134,  221,  135,  136,  877,  137,
      138,  229,  139,  140,  141,  142,  143,   67,   67,  222,
      878,  230,  223,  224,  225,  278,  278,  231,  194,  194,
      302,  232,  291,  291,  601,  292,  602,  293,  303,  279,
      301,  301,  195,  308,  308,  343,  313,  328,  329,  344,
      203,  203,  203,  314,  333,  882,  315,  316,  309,  345,
      346,  334,  361,  362,  384,  384,  278,  278,  387,  387,
      363,  388,  388,  394,  394,  396,  396,  883,  385,  413,
      279,  291,  291,  414,  292,  389,  293,  395,  888,  397,

      403,  403,  407,  407,  301,  301,  415,  415,  308,  308,
      421,  421,  431,  431,  404,  497,  408,  436,  437,  498,
      576,  416,  726,  309,  577,  438,  727,  432,  439,  439,
      452,  452,  460,  460,  433,  479,  479,  490,  490,  384,
      384,  387,  387,  440,  480,  453,  889,  461,  388,  388,
      481,  892,  491,  385,  509,  509,  672,  510,  673,  511,
      417,  418,  389,  741,  454,  513,  513,  742,  441,  394,
      394,  518,  518,  396,  396,  893,  462,  519,  519,  733,
      520,  734,  521,  395,  403,  403,  792,  397,  527,  527,
      793,  528,  894,  529,  407,  407,  532,  532,  404,  533,

      904,  534,  535,  535,  415,  415,  542,  542,  408,  421,
      421,  555,  555,  431,  431,  905,  536,  557,  557,  416,
      439,  439,  564,  564,  567,  567,  556,  906,  432,  572,
      572,  452,  452,  580,  580,  440,  584,  584,  822,  568,
      460,  460,  588,  588,  573,  823,  453,  479,  479,  490,
      490,  585,  607,  607,  907,  461,  480,  913,  574,  513,
      513,  800,  481,  801,  491,  608,  509,  509,  914,  510,
      915,  511,  518,  518,  519,  519,  916,  520,  917,  521,
      641,  641,  643,  643,  645,  645,  527,  527,  918,  528,
      919,  529,  532,  532,  642,  533,  644,  534,  646,  535,

      535,  654,  654,  920,  655,  921,  656,  657,  657,  662,
      662,  542,  542,  536,  555,  555,  677,  677,  557,  557,
      922,  658,  678,  678,  663,  564,  564,  567,  567,  556,
      687,  687,  688,  688,  572,  572,  923,  679,  693,  693,
      580,  580,  568,  584,  584,  703,  703,  689,  927,  573,
      588,  588,  722,  722,  607,  607,  752,  752,  585,  928,
      690,  641,  641,  757,  757,  643,  643,  608,  758,  758,
      753,  759,  933,  760,  808,  642,  645,  645,  809,  644,
      761,  761,  764,  764,  654,  654,  895,  655,  934,  656,
      646,  657,  657,  896,  768,  768,  765,  769,  935,  770,

      662,  662,  774,  774,  936,  658,  787,  787,  677,  677,
      678,  678,  789,  789,  940,  663,  687,  687,  688,  688,
      941,  788,  798,  798,  942,  679,  693,  693,  812,  812,
      703,  703,  943,  689,  824,  825,  826,  722,  722,  856,
      856,  752,  752,  813,  944,  827,  945,  861,  861,  946,
      862,  828,  863,  857,  947,  753,  865,  865,  867,  948,
      868,  949,  869,  870,  757,  757,  761,  761,  871,  872,
      866,  873,  758,  758,  874,  759,  950,  760,  764,  764,
      879,  879,  951,  880,  952,  881,  768,  768,  953,  769,
      954,  770,  765,  884,  884,  886,  886,  774,  774,  890,

      890,  897,  897,  955,  899,  900,  901,  956,  885,  957,
      887,  787,  787,  958,  891,  902,  898,  908,  908,  789,
      789,  903,  909,  909,  911,  911,  788,  798,  798,  924,
      924,  929,  929,  812,  812,  937,  937,  910,  959,  912,
      938,  938,  960,  961,  925,  962,  930,  963,  813,  964,
      965,  966,  967,  968,  969,  939,  970,  971,  931,  972,
      973,  974,  975,  976,  932,  977,  978,  979,  983,  926,
      856,  856,  980,  980,  984,  981,  985,  982,  861,  861,
      986,  862,  987,  863,  857,  988,  865,  865,  989,  989,
      992,  990,  993,  991,  994,  995,  996,  997, 1001,  999,

      866, 1003, 1004, 1005,  879,  879, 1006,  880, 1007,  881,
      884,  884, 1008, 1008, 1010,  998, 1000,  886,  886, 1011,
     1002, 1009, 1009,  890,  890,  885, 1012, 1012, 1013, 1014,
     1015, 1016,  887, 1017,  897,  897, 1018, 1018,  891, 1019,
     1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1027,  898,
      908,  908,  909,  909, 1029, 1029,  911,  911, 1030, 1030,
     1031, 1032, 1033, 1034, 1035, 1036, 1037,  910, 1038, 1039,
     1045,  912, 1040, 1040, 1042, 1042,  924,  924, 1044, 1044,
     1046, 1047, 1050, 1048,  929,  929, 1051, 1041, 1052, 1043,
     1053,  925, 1049, 1049, 1054, 1055,  937,  937, 1059,  930,

      938,  938, 1056, 1056, 1057, 1057, 1060, 1061, 1062, 1063,
     1064, 1065, 1066, 1067, 1068,  939, 1069, 1070, 1071, 1058,
     1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
     1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
     1092, 1093, 1094, 1095, 1096,  980,  980, 1097,  981, 1098,
      982, 1099, 1100, 1101, 1102,  989,  989, 1103,  990, 1106,
      991, 1104, 1104, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
     1114, 1115, 1116, 1117, 1118, 1105, 1008, 1008, 1009, 1009,
     1119, 1012, 1012, 1120, 1121, 1122, 1123, 1124, 1018, 1018,
     1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,

     1029, 1029, 1030, 1030, 1135, 1136, 1137, 1138, 1139, 1140,
     1141, 1142, 1143, 1040, 1040, 1144, 1144, 1042, 1042, 1145,
     1145, 1044, 1044, 1146, 1147, 1148, 1149, 1150, 1041, 1049,
     1049, 1151, 1043, 1152, 1153, 1154, 1155, 1056, 1056, 1057,
     1057, 1156, 1156, 1157, 1157, 1159, 1160, 1161, 1162, 1163,
     1164, 1165, 1166, 1167, 1058, 1168, 1169, 1170, 1158, 1171,
     1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
     1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
     1192, 1193, 1193, 1195, 1195, 1197, 1197, 1199, 1200, 1200,
     1104, 1104, 1203, 1203, 1204, 1194, 1205, 1196, 1206, 1198,

     1207, 1207, 1201, 1210, 1105, 1211, 1212, 1213, 1213, 1215,
     1216, 1216, 1219, 1222, 1208, 1220, 1220, 1223, 1224, 1225,
     1226, 1214, 1227, 1228, 1217, 1229, 1230, 1231, 1232, 1221,
     1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
     1209, 1245, 1202, 1243, 1243, 1246, 1247, 1248, 1144, 1144,
     1145, 1145, 1249, 1250, 1218, 1251, 1252, 1253, 1244, 1254,
     1254, 1256, 1257, 1258, 1259, 1259, 1156, 1156, 1157, 1157,
     1261, 1261, 1262, 1263, 1255, 1264, 1265, 1266, 1267, 1260,
     1268, 1269, 1270, 1158, 1271, 1272, 1273, 1274, 1275, 1276,
     1276, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,

     1287, 1288, 1289, 1290, 1277, 1291, 1193, 1193, 1292, 1292,
     1300, 1293, 1301, 1294, 1195, 1195, 1295, 1295, 1197, 1197,
     1194, 1296, 1296, 1297, 1297, 1200, 1200, 1302, 1196, 1299,
     1299, 1303, 1198, 1203, 1203, 1207, 1207, 1298, 1305, 1201,
     1304, 1304, 1306, 1307, 1309, 1213, 1213, 1310, 1310, 1208,
     1311, 1216, 1216, 1312, 1312, 1313, 1314, 1220, 1220, 1214,
     1315, 1315, 1316, 1317, 1317, 1217, 1319, 1320, 1308, 1321,
     1321, 1221, 1323, 1324, 1324, 1326, 1327, 1328, 1318, 1329,
     1330, 1331, 1332, 1333, 1322, 1334, 1335, 1336, 1325, 1337,
     1337, 1339, 1340, 1243, 1243, 1341, 1341, 1342, 1343, 1344,

     1345, 1346, 1347, 1348, 1338, 1349, 1350, 1350, 1244, 1254,
     1254, 1352, 1352, 1353, 1354, 1355, 1259, 1259, 1356, 1356,
     1357, 1351, 1261, 1261, 1255, 1358, 1359, 1360, 1361, 1362,
     1363, 1260, 1364, 1365, 1366, 1367, 1368, 1276, 1276, 1369,
     1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
     1379, 1380, 1277, 1292, 1292, 1381, 1293, 1385, 1294, 1295,
     1295, 1296, 1296, 1297, 1297, 1382, 1382, 1386, 1383, 1389,
     1384, 1299, 1299, 1387, 1387, 1304, 1304, 1298, 1390, 1391,
     1394, 1397, 1395, 1395, 1310, 1310, 1398, 1388, 1399, 1392,
     1312, 1312, 1400, 1400, 1402, 1393, 1396, 1315, 1315, 1317,

     1317, 1403, 1403, 1404, 1404, 1406, 1401, 1321, 1321, 1407,
     1407, 1408, 1324, 1324, 1318, 1409, 1409, 1410, 1405, 1411,
     1412, 1413, 1322, 1414, 1415, 1416, 1417, 1325, 1418, 1418,
     1420, 1421, 1421, 1337, 1337, 1423, 1423, 1424, 1424, 1426,
     1341, 1341, 1431, 1419, 1427, 1427, 1422, 1432, 1338, 1429,
     1429, 1433, 1425, 1434, 1435, 1436, 1350, 1350, 1441, 1428,
     1437, 1437, 1352, 1352, 1430, 1438, 1438, 1442, 1356, 1356,
     1443, 1351, 1444, 1446, 1447, 1448, 1449, 1450, 1451, 1445,
     1439, 1452, 1453, 1454, 1369, 1369, 1455, 1456, 1457, 1458,
     1459, 1460, 1461, 1382, 1382, 1462, 1383, 1463, 1384, 1387,

     1387, 1464, 1464, 1465, 1465, 1467, 1468, 1469, 1471, 1472,
     1395, 1395, 1474, 1388, 1473, 1473, 1475, 1466, 1476, 1440,
     1480, 1470, 1400, 1400, 1396, 1477, 1477, 1486, 1478, 1487,
     1479, 1403, 1403, 1404, 1404, 1482, 1401, 1481, 1481, 1407,
     1407, 1488, 1483, 1484, 1484, 1409, 1409, 1489, 1405, 1490,
     1491, 1492, 1493, 1418, 1418, 1494, 1494, 1495, 1485, 1421,
     1421, 1496, 1496, 1423, 1423, 1424, 1424, 1502, 1419, 1497,
     1497, 1498, 1498, 1503, 1422, 1427, 1427, 1500, 1500, 1504,
     1425, 1429, 1429, 1501, 1501, 1505, 1499, 1506, 1507, 1507,
     1428, 1437, 1437, 1438, 1438, 1512, 1430, 1509, 1509, 1510,

     1510, 1513, 1514, 1508, 1515, 1516, 1517, 1518, 1439, 1519,
     1520, 1521, 1522, 1523, 1511, 1524, 1525, 1526, 1527, 1528,
     1529, 1530, 1531, 1532, 1533, 1464, 1464, 1465, 1465, 1534,
     1534, 1535, 1536, 1537, 1538, 1539, 1540, 1473, 1473, 1541,
     1542, 1466, 1543, 1477, 1477, 1544, 1478, 1545, 1479, 1481,
     1481, 1546, 1484, 1484, 1547, 1547, 1548, 1549, 1550, 1551,
     1552, 1553, 1554, 1555, 1494, 1494, 1556, 1485, 1496, 1496,
     1497, 1497, 1498, 1498, 1557, 1557, 1500, 1500, 1501, 1501,
     1558, 1559, 1560, 1561, 1562, 1507, 1507, 1499, 1563, 1563,
     1509, 1509, 1510, 1510, 1564, 1564, 1565, 1565, 1567, 1568,

     1508, 1569, 1570, 1571, 1572, 1573, 1574, 1511, 1575, 1576,
     1577, 1566, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
     1586, 1534, 1534, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
     1594, 1595, 1596, 1597, 1598, 1547, 1547, 1599, 1600, 1601,
     1602, 1603, 1604, 1605, 1606, 1607, 1557, 1557, 1608, 1609,
     1610, 1610, 1612, 1613, 1563, 1563, 1564, 1564, 1565, 1565,
     1614, 1614, 1615, 1616, 1617, 1611, 1618, 1619, 1620, 1621,
     1623, 1624, 1625, 1566, 1626, 1627, 1628, 1629, 1630, 1631,
     1632, 1633, 1634, 1635, 1636, 1637, 1622, 1638, 1638, 1640,
     1640, 1642, 1643, 1643, 1645, 1645, 1647, 1648, 1649, 1650,

     1651, 1639, 1652, 1641, 1654, 1655, 1644, 1656, 1656, 1646,
     1658, 1658, 1660, 1661, 1662, 1610, 1610, 1663, 1663, 1653,
     1664, 1665, 1657, 1614, 1614, 1659, 1666, 1667, 1668, 1669,
     1611, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
     1679, 1680, 1681, 1681, 1683, 1684, 1685, 1686, 1638, 1638,
     1687, 1687, 1640, 1640, 1688, 1688, 1682, 1689, 1643, 1643,
     1690, 1690, 1639, 1645, 1645, 1692, 1641, 1691, 1691, 1693,
     1693, 1695, 1644, 1696, 1697, 1697, 1699, 1700, 1646, 1701,
     1702, 1656, 1656, 1705, 1694, 1703, 1703, 1658, 1658, 1698,
     1704, 1704, 1706, 1707, 1707, 1709, 1657, 1663, 1663, 1710,

     1711, 1712, 1659, 1713, 1714, 1715, 1716, 1717, 1708, 1718,
     1719, 1720, 1721, 1722, 1722, 1724, 1681, 1681, 1725, 1725,
     1726, 1727, 1728, 1729, 1687, 1687, 1730, 1723, 1688, 1688,
     1682, 1690, 1690, 1691, 1691, 1731, 1693, 1693, 1732, 1732,
     1733, 1733, 1735, 1697, 1697, 1736, 1736, 1737, 1738, 1739,
     1740, 1694, 1703, 1703, 1741, 1734, 1704, 1704, 1698, 1742,
     1707, 1707, 1743, 1743, 1744, 1744, 1746, 1747, 1748, 1749,
     1750, 1751, 1752, 1753, 1754, 1708, 1755, 1722, 1722, 1745,
     1756, 1756, 1757, 1757, 1725, 1725, 1759, 1760, 1761, 1761,
     1763, 1723, 1764, 1765, 1765, 1768, 1758, 1732, 1732, 1733,

     1733, 1769, 1762, 1767, 1767, 1736, 1736, 1770, 1766, 1771,
     1772, 1773, 1774, 1778, 1734, 1743, 1743, 1744, 1744, 1775,
     1775, 1776, 1776, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
     1786, 1788, 1745, 1756, 1756, 1789, 1777, 1757, 1757, 1787,
     1787, 1761, 1761, 1790, 1790, 1791, 1792, 1792, 1765, 1765,
     1795, 1758, 1794, 1794, 1796, 1762, 1767, 1767, 1797, 1798,
     1793, 1799, 1800, 1766, 1801, 1775, 1775, 1776, 1776, 1802,
     1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
     1787, 1787, 1777, 1812, 1813, 1790, 1790, 1814, 1792, 1792,
     1815, 1815, 1794, 1794, 1816, 1817, 1818, 1819, 1819, 1822,

     1823, 1824, 1793, 1802, 1802, 1825, 1826, 1827, 1828, 1829,
     1830, 1831, 1820, 1832, 1833, 1815, 1815, 1834, 1835, 1835,
     1837, 1837, 1819, 1819, 1839, 1839, 1840, 1843, 1821, 1841,
     1841, 1844, 1845, 1836, 1846, 1838, 1847, 1820, 1848, 1849,
     1850, 1851, 1852, 1852, 1842, 1835, 1835, 1854, 1854, 1837,
     1837, 1855, 1855, 1839, 1839, 1856, 1858, 1853, 1841, 1841,
     1836, 1857, 1857, 1861, 1838, 1859, 1859, 1862, 1863, 1864,
     1865, 1866, 1867, 1842, 1852, 1852, 1868, 1868, 1854, 1854,
     1860, 1855, 1855, 1869, 1857, 1857, 1870, 1859, 1859, 1853,
     1871, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1868,

     1868, 1879, 1860, 1880, 1871, 1871, 1881, 1882, 1883, 1884,
     1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
     1894, 1896, 1896, 1898, 1899, 1899, 1901, 1902, 1903, 1903,
     1894, 1894, 1907, 1895, 1905, 1905, 1897, 1896, 1896, 1900,
     1906, 1906, 1904, 1909, 1895, 1899, 1899, 1908, 1908, 1910,
     1910, 1913, 1897, 1903, 1903, 1912, 1912, 1905, 1905, 1914,
     1900, 1906, 1906, 1911, 1908, 1908, 1916, 1904, 1910, 1910,
     1915, 1915, 1912, 1912, 1915, 1915, 1917, 1917, 1917, 1917,
     1919, 1919, 1911, 1919, 1919,  847,  846,  845,  844,  843,
      842, 1918,  841, 1918,   23,   23,   23,   23,   23,   33,

       33,   33,   33,   33,   35,   35,   35,   35,   35,   36,
       36,   36,   36,   36,   34,   34,   34,   34,   34,   37,
       37,   37,   37,   37,   38,   38,   38,   38,   38,   41,
       41,   41,   41,   41,   95,   95,   95,   95,   96,  840,
       96,   96,   96,   97,   97,  839,   97,   97,   98,   98,
       98,  838,   98,  837,  836,  835,  834,  833,  832,  831,
      830,  829,  821,  820,  819,  818,  817,  816,  815,  814,
      811,  810,  807,  806,  805,  804,  803,  802,  799,  797,
      796,  795,  794,  791,  790,  786,  785,  784,  783,  782,
      781,  780,  779,  778,  777,  776,  775,  773,  772,  771,

      767,  766,  763,  762,  756,  755,  754,  751,  750,  749,
      748,  747,  746,  745,  744,  743,  740,  739,  738,  737,
      736,  735,  732,  731,  730,  729,  728,  725,  724,  723,
      721,  720,  719,  718,  717,  716,  715,  714,  713,  712,
      711,  710,  709,  708,  707,  706,  705,  704,  702,  701,
      700,  699,  698,  697,  696,  695,  694,  692,  691,  686,
      685,  684,  683,  682,  681,  680,  676,  675,  674,  671,
      670,  669,  668,  667,  666,  665,  664,  661,  660,  659,
      653,  652,  651,  650,  649,  648,  647,  640,  639,  638,
      637,  636,  635,  634,  633,  632,  631,  630,  629,  628,

      627,  626,  625,  624,  623,  622,  621,  620,  619,  618,
      617,  616,  615,  614,  613,  612,  611,  610,  609,  606,
      605,  604,  603,  600,  599,  598,  597,  596,  595,  594,
      593,  592,  591,  590,  589,  587,  586,  583,  582,  581,
      579,  578,  575,  571,  570,  569,  566,  565,  563,  562,
      561,  560,  559,  558,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  541,  540,  539,  538,
      537,  531,  530,  526,  525,  524,  523,  522,  517,  516,
      515,  514,  512,  508,  507,  506,  505,  504,  503,  502,
      501,  500,  499,  496,  495,  494,  493,  492,  489,  488,

      487,  486,  485,  484,  483,  482,  478,  477,  476,  475,
      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  459,  458,  457,  456,  455,  451,  450,  449,
      448,  447,  446,  445,  444,  443,  442,  435,  434,  430,
      429,  428,  427,  426,  425,  424,  423,  422,  420,  419,
      412,  411,  410,  409,  406,  405,  402,  401,  400,  399,
      398,  393,  392,  391,  390,  386,  383,  382,  381,  380,
      379,  378,  377,  376,  375,  374,  373,  372,  371,  370,
      369,  368,  367,  366,  365,  364,  360,  359,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,

      342,  341,  340,  339,  338,  337,  336,  335,  332,  331,
      330,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      318,  317,  312,  311,  310,  307,  306,  305,  304,  300,
      299,  298,  297,  296,  295,  294,  290,  289,  288,  287,
      286,  285,  284,  283,  282,  281,  280,  277,  276,  275,
      274,  273,  272,  271,  270,  269,  268,  265,  264,  263,
      260,  259,  258,  257,  256,  255,  254,  253,  252,  251,
      250,  245,  244,  243,  242,  241,  240,  239,  236,  233,
      228,  218,  217,  213,  212,  207,  206,  205,  204,  202,
      201,  200,  197,  196,  191,  190,  189,  188,  187,  186,

      183,  182,  181,  180,  179,  178,  177,  176,  175,  172,
      167,  157,  156,  152,  151,  146,  145,  144,  125,  121,
      120,  104,  103,  102,  101,   94,   70,  100,   99,   94,
       70,   66,   66, 1920,   34,   34,   34,   34,   34,   34,
       34,   34,   19, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,

     1920, 1920, 1920, 1920, 1920, 1920, 1920
    } ;

static yyconst flex_int16_t yy_chk[3008] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   15,   16,
       17,   18,  107,    1,   15,   16,   25,   50,   25,   25,
       25,   30,   30,   51,   51,    0,   18,  107,   58,   87,
       25,   50,   26,   26,   46,   57,   46,   46,   46,   28,
       28,   58,   26,   26,   26,   57,   87,   28,   46,   28,
       28,   28,   26,    1,    2,    2,    2,    2,    2,   28,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   26,   47,   47,   59,   60,    2,  741,   28,
       49,   49,   63,   47,   47,   47,   67,   67,   49,  742,

       49,   49,   49,   47,   63,   59,   60,   61,   62,   85,
       49,   62,   79,   61,   79,   69,   69,   85,   62,   69,
       69,   69,   78,   47,   71,   71,   78,    2,   21,   21,
       49,  743,   21,   93,   93,   21,   21,   21,   21,   21,
       21,   21,  130,   21,  130,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       23,   23,  115,  115,  122,  122,  122,   23,   23,   23,

       23,   23,   23,   23,   91,   23,  115,   89,   82,   91,
       68,   68,   23,   82,   82,  129,  136,   89,  114,  129,
       68,   68,   68,   89,  136,  114,  118,   89,   23,   23,
       68,   23,   23,  744,   23,  144,  740,   23,   23,   23,
       86,  118,  740,  144,   23,   23,   23,   23,   23,   29,
       68,  123,  123,  123,   86,  746,   29,   86,   86,   86,
      124,  124,  133,   29,  138,  747,  153,  133,  133,  142,
      124,  124,  124,  153,  142,  169,  153,  153,  165,  165,
      749,  138,  169,   29,   29,   29,   29,   29,   29,   29,
      750,   29,   29,  751,   29,   29,  754,   29,   29,  759,

       29,   29,   29,   29,   29,   73,   73,   73,   73,   73,
       73,   73,  760,   73,   73,  137,   73,   73,  762,   73,
       73,  140,   73,   73,   73,   73,   73,  176,  176,  137,
      763,  140,  137,  137,  137,  182,  182,  140,  194,  194,
      205,  140,  195,  195,  475,  195,  475,  195,  205,  182,
      203,  203,  194,  210,  210,  239,  214,  226,  226,  239,
      203,  203,  203,  214,  230,  769,  214,  214,  210,  240,
      240,  230,  255,  255,  276,  276,  278,  278,  279,  279,
      255,  280,  280,  285,  285,  286,  286,  770,  276,  304,
      278,  291,  291,  304,  291,  280,  291,  285,  773,  286,

      295,  295,  298,  298,  301,  301,  305,  305,  308,  308,
      309,  309,  319,  319,  295,  372,  298,  322,  322,  372,
      449,  305,  611,  308,  449,  322,  611,  319,  323,  323,
      334,  334,  340,  340,  319,  357,  357,  366,  366,  384,
      384,  387,  387,  323,  357,  334,  775,  340,  388,  388,
      357,  777,  366,  384,  385,  385,  551,  385,  551,  385,
      305,  305,  388,  624,  334,  389,  389,  624,  323,  394,
      394,  395,  395,  396,  396,  778,  340,  397,  397,  617,
      397,  617,  397,  394,  403,  403,  682,  396,  404,  404,
      682,  404,  779,  404,  407,  407,  408,  408,  403,  408,

      783,  408,  409,  409,  415,  415,  416,  416,  407,  421,
      421,  430,  430,  431,  431,  784,  409,  432,  432,  415,
      439,  439,  440,  440,  443,  443,  430,  785,  431,  447,
      447,  452,  452,  453,  453,  439,  457,  457,  715,  443,
      460,  460,  461,  461,  447,  715,  452,  479,  479,  490,
      490,  457,  481,  481,  786,  460,  479,  792,  447,  513,
      513,  691,  479,  691,  490,  481,  509,  509,  793,  509,
      794,  509,  518,  518,  519,  519,  795,  519,  796,  519,
      523,  523,  524,  524,  525,  525,  527,  527,  797,  527,
      799,  527,  532,  532,  523,  532,  524,  532,  525,  535,

      535,  536,  536,  800,  536,  801,  536,  537,  537,  541,
      541,  542,  542,  535,  555,  555,  556,  556,  557,  557,
      802,  537,  558,  558,  541,  564,  564,  567,  567,  555,
      568,  568,  569,  569,  572,  572,  803,  558,  573,  573,
      580,  580,  567,  584,  584,  585,  585,  569,  805,  572,
      588,  588,  606,  606,  607,  607,  635,  635,  584,  806,
      569,  641,  641,  642,  642,  643,  643,  607,  644,  644,
      635,  644,  808,  644,  699,  641,  645,  645,  699,  643,
      646,  646,  651,  651,  654,  654,  780,  654,  809,  654,
      645,  657,  657,  780,  658,  658,  651,  658,  810,  658,

      662,  662,  663,  663,  811,  657,  676,  676,  677,  677,
      678,  678,  679,  679,  815,  662,  687,  687,  688,  688,
      816,  676,  689,  689,  817,  678,  693,  693,  702,  702,
      703,  703,  818,  688,  717,  717,  717,  722,  722,  748,
      748,  752,  752,  702,  819,  717,  820,  753,  753,  821,
      753,  717,  753,  748,  822,  752,  755,  755,  756,  823,
      756,  824,  756,  756,  757,  757,  761,  761,  756,  756,
      755,  756,  758,  758,  756,  758,  825,  758,  764,  764,
      765,  765,  826,  765,  827,  765,  768,  768,  828,  768,
      829,  768,  764,  771,  771,  772,  772,  774,  774,  776,

      776,  781,  781,  830,  782,  782,  782,  831,  771,  831,
      772,  787,  787,  832,  776,  782,  781,  788,  788,  789,
      789,  782,  790,  790,  791,  791,  787,  798,  798,  804,
      804,  807,  807,  812,  812,  813,  813,  790,  833,  791,
      814,  814,  834,  835,  804,  836,  807,  837,  812,  838,
      839,  840,  841,  842,  845,  814,  846,  847,  807,  847,
      848,  849,  850,  851,  807,  852,  853,  855,  858,  804,
      856,  856,  857,  857,  859,  857,  860,  857,  861,  861,
      862,  861,  863,  861,  856,  864,  865,  865,  866,  866,
      867,  866,  868,  866,  868,  869,  870,  871,  873,  872,

      865,  874,  877,  878,  879,  879,  880,  879,  881,  879,
      884,  884,  885,  885,  888,  871,  872,  886,  886,  889,
      873,  887,  887,  890,  890,  884,  891,  891,  892,  893,
      894,  895,  886,  896,  897,  897,  898,  898,  890,  899,
      900,  901,  902,  903,  904,  905,  906,  907,  906,  897,
      908,  908,  909,  909,  910,  910,  911,  911,  912,  912,
      913,  914,  915,  916,  917,  918,  919,  909,  920,  921,
      926,  911,  922,  922,  923,  923,  924,  924,  925,  925,
      927,  928,  931,  928,  929,  929,  932,  922,  933,  923,
      934,  924,  930,  930,  935,  936,  937,  937,  941,  929,

      938,  938,  939,  939,  940,  940,  942,  943,  944,  945,
      946,  947,  948,  949,  950,  938,  951,  952,  953,  940,
      954,  955,  956,  957,  958,  959,  960,  961,  962,  963,
      964,  965,  966,  967,  968,  969,  970,  971,  972,  973,
      974,  975,  976,  977,  978,  980,  980,  981,  980,  982,
      980,  983,  984,  985,  988,  989,  989,  992,  989,  994,
      989,  993,  993,  995,  996,  997,  998,  999, 1000, 1001,
     1002, 1003, 1004, 1005, 1010,  993, 1008, 1008, 1009, 1009,
     1011, 1012, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1018,
     1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,

     1029, 1029, 1030, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
     1037, 1038, 1039, 1040, 1040, 1041, 1041, 1042, 1042, 1043,
     1043, 1044, 1044, 1045, 1046, 1047, 1048, 1050, 1040, 1049,
     1049, 1051, 1042, 1052, 1053, 1054, 1055, 1056, 1056, 1057,
     1057, 1058, 1058, 1059, 1059, 1060, 1061, 1062, 1063, 1064,
     1065, 1066, 1067, 1068, 1057, 1069, 1070, 1071, 1059, 1072,
     1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083,
     1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1094,
     1095, 1099, 1099, 1100, 1100, 1101, 1101, 1102, 1103, 1103,
     1104, 1104, 1105, 1105, 1106, 1099, 1107, 1100, 1108, 1101,

     1109, 1109, 1103, 1110, 1104, 1111, 1112, 1113, 1113, 1114,
     1115, 1115, 1116, 1118, 1109, 1117, 1117, 1119, 1120, 1121,
     1122, 1113, 1123, 1124, 1115, 1125, 1126, 1127, 1128, 1117,
     1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
     1109, 1140, 1103, 1139, 1139, 1141, 1142, 1143, 1144, 1144,
     1145, 1145, 1146, 1147, 1115, 1148, 1149, 1150, 1139, 1151,
     1151, 1152, 1153, 1154, 1155, 1155, 1156, 1156, 1157, 1157,
     1158, 1158, 1159, 1161, 1151, 1162, 1164, 1166, 1167, 1155,
     1168, 1169, 1170, 1157, 1171, 1172, 1173, 1174, 1175, 1176,
     1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,

     1187, 1188, 1190, 1191, 1176, 1192, 1193, 1193, 1194, 1194,
     1202, 1194, 1204, 1194, 1195, 1195, 1196, 1196, 1197, 1197,
     1193, 1198, 1198, 1199, 1199, 1200, 1200, 1205, 1195, 1201,
     1201, 1206, 1197, 1203, 1203, 1207, 1207, 1199, 1209, 1200,
     1208, 1208, 1210, 1211, 1212, 1213, 1213, 1214, 1214, 1207,
     1215, 1216, 1216, 1217, 1217, 1218, 1219, 1220, 1220, 1213,
     1221, 1221, 1222, 1223, 1223, 1216, 1224, 1225, 1211, 1226,
     1226, 1220, 1227, 1228, 1228, 1229, 1230, 1231, 1223, 1232,
     1233, 1234, 1235, 1236, 1226, 1237, 1238, 1239, 1228, 1240,
     1240, 1241, 1242, 1243, 1243, 1244, 1244, 1245, 1246, 1247,

     1248, 1249, 1250, 1251, 1240, 1252, 1253, 1253, 1243, 1254,
     1254, 1255, 1255, 1256, 1257, 1258, 1259, 1259, 1260, 1260,
     1262, 1253, 1261, 1261, 1254, 1264, 1265, 1266, 1267, 1268,
     1269, 1259, 1270, 1271, 1272, 1273, 1275, 1276, 1276, 1277,
     1277, 1280, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290,
     1291, 1293, 1276, 1292, 1292, 1294, 1292, 1300, 1292, 1295,
     1295, 1296, 1296, 1297, 1297, 1298, 1298, 1301, 1298, 1303,
     1298, 1299, 1299, 1302, 1302, 1304, 1304, 1297, 1305, 1306,
     1307, 1309, 1308, 1308, 1310, 1310, 1311, 1302, 1313, 1306,
     1312, 1312, 1314, 1314, 1316, 1306, 1308, 1315, 1315, 1317,

     1317, 1318, 1318, 1319, 1319, 1320, 1314, 1321, 1321, 1322,
     1322, 1323, 1324, 1324, 1317, 1325, 1325, 1326, 1319, 1327,
     1328, 1329, 1321, 1330, 1331, 1332, 1333, 1324, 1334, 1334,
     1335, 1336, 1336, 1337, 1337, 1338, 1338, 1339, 1339, 1340,
     1341, 1341, 1344, 1334, 1342, 1342, 1336, 1345, 1337, 1343,
     1343, 1346, 1339, 1347, 1348, 1349, 1350, 1350, 1354, 1342,
     1351, 1351, 1352, 1352, 1343, 1353, 1353, 1355, 1356, 1356,
     1357, 1350, 1358, 1360, 1361, 1362, 1363, 1364, 1365, 1358,
     1353, 1366, 1367, 1368, 1369, 1369, 1371, 1372, 1373, 1374,
     1375, 1378, 1379, 1382, 1382, 1385, 1382, 1386, 1382, 1387,

     1387, 1388, 1388, 1389, 1389, 1390, 1391, 1392, 1393, 1394,
     1395, 1395, 1397, 1387, 1396, 1396, 1398, 1389, 1399, 1353,
     1402, 1392, 1400, 1400, 1395, 1401, 1401, 1410, 1401, 1411,
     1401, 1403, 1403, 1404, 1404, 1406, 1400, 1405, 1405, 1407,
     1407, 1412, 1406, 1408, 1408, 1409, 1409, 1413, 1404, 1414,
     1415, 1416, 1417, 1418, 1418, 1419, 1419, 1420, 1408, 1421,
     1421, 1422, 1422, 1423, 1423, 1424, 1424, 1431, 1418, 1425,
     1425, 1426, 1426, 1432, 1421, 1427, 1427, 1428, 1428, 1433,
     1424, 1429, 1429, 1430, 1430, 1434, 1426, 1435, 1436, 1436,
     1427, 1437, 1437, 1438, 1438, 1441, 1429, 1439, 1439, 1440,

     1440, 1442, 1443, 1436, 1444, 1445, 1446, 1447, 1438, 1448,
     1449, 1450, 1451, 1452, 1440, 1453, 1454, 1455, 1456, 1457,
     1458, 1459, 1461, 1462, 1463, 1464, 1464, 1465, 1465, 1466,
     1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1473, 1474,
     1475, 1465, 1476, 1477, 1477, 1480, 1477, 1482, 1477, 1481,
     1481, 1483, 1484, 1484, 1485, 1485, 1486, 1487, 1488, 1489,
     1490, 1491, 1492, 1493, 1494, 1494, 1495, 1484, 1496, 1496,
     1497, 1497, 1498, 1498, 1499, 1499, 1500, 1500, 1501, 1501,
     1502, 1503, 1504, 1505, 1506, 1507, 1507, 1498, 1508, 1508,
     1509, 1509, 1510, 1510, 1511, 1511, 1512, 1512, 1513, 1514,

     1507, 1515, 1516, 1517, 1518, 1519, 1520, 1510, 1521, 1522,
     1523, 1512, 1524, 1525, 1526, 1527, 1529, 1530, 1531, 1532,
     1533, 1534, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541,
     1542, 1543, 1544, 1545, 1546, 1547, 1547, 1548, 1549, 1550,
     1551, 1552, 1553, 1554, 1555, 1556, 1557, 1557, 1558, 1559,
     1560, 1560, 1561, 1562, 1563, 1563, 1564, 1564, 1565, 1565,
     1566, 1566, 1567, 1569, 1570, 1560, 1571, 1572, 1573, 1574,
     1575, 1576, 1579, 1565, 1580, 1581, 1582, 1583, 1584, 1585,
     1586, 1587, 1588, 1589, 1590, 1591, 1574, 1592, 1592, 1593,
     1593, 1594, 1595, 1595, 1596, 1596, 1597, 1598, 1599, 1600,

     1601, 1592, 1602, 1593, 1603, 1604, 1595, 1605, 1605, 1596,
     1606, 1606, 1607, 1608, 1609, 1610, 1610, 1611, 1611, 1602,
     1612, 1613, 1605, 1614, 1614, 1606, 1615, 1616, 1618, 1619,
     1610, 1621, 1622, 1623, 1624, 1625, 1626, 1628, 1629, 1630,
     1631, 1632, 1633, 1633, 1634, 1635, 1636, 1637, 1638, 1638,
     1639, 1639, 1640, 1640, 1641, 1641, 1633, 1642, 1643, 1643,
     1644, 1644, 1638, 1645, 1645, 1647, 1640, 1646, 1646, 1648,
     1648, 1649, 1643, 1650, 1651, 1651, 1652, 1653, 1645, 1654,
     1655, 1656, 1656, 1660, 1648, 1657, 1657, 1658, 1658, 1651,
     1659, 1659, 1661, 1662, 1662, 1664, 1656, 1663, 1663, 1665,

     1666, 1667, 1658, 1669, 1670, 1671, 1672, 1673, 1662, 1674,
     1675, 1677, 1678, 1679, 1679, 1680, 1681, 1681, 1682, 1682,
     1683, 1684, 1685, 1686, 1687, 1687, 1689, 1679, 1688, 1688,
     1681, 1690, 1690, 1691, 1691, 1692, 1693, 1693, 1694, 1694,
     1695, 1695, 1696, 1697, 1697, 1698, 1698, 1699, 1700, 1701,
     1702, 1693, 1703, 1703, 1705, 1695, 1704, 1704, 1697, 1706,
     1707, 1707, 1708, 1708, 1709, 1709, 1710, 1711, 1713, 1714,
     1715, 1716, 1717, 1718, 1719, 1707, 1721, 1722, 1722, 1709,
     1723, 1723, 1724, 1724, 1725, 1725, 1726, 1727, 1728, 1728,
     1729, 1722, 1730, 1731, 1731, 1735, 1724, 1732, 1732, 1733,

     1733, 1737, 1728, 1734, 1734, 1736, 1736, 1738, 1731, 1739,
     1740, 1741, 1742, 1747, 1733, 1743, 1743, 1744, 1744, 1745,
     1745, 1746, 1746, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
     1755, 1759, 1744, 1756, 1756, 1760, 1746, 1757, 1757, 1758,
     1758, 1761, 1761, 1762, 1762, 1763, 1764, 1764, 1765, 1765,
     1768, 1757, 1766, 1766, 1769, 1761, 1767, 1767, 1770, 1771,
     1764, 1772, 1773, 1765, 1774, 1775, 1775, 1776, 1776, 1777,
     1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786,
     1787, 1787, 1776, 1788, 1789, 1790, 1790, 1791, 1792, 1792,
     1793, 1793, 1794, 1794, 1795, 1796, 1797, 1798, 1798, 1799,

     1800, 1801, 1792, 1802, 1802, 1803, 1804, 1807, 1809, 1810,
     1811, 1812, 1798, 1813, 1814, 1815, 1815, 1816, 1817, 1817,
     1818, 1818, 1819, 1819, 1820, 1820, 1821, 1823, 1798, 1822,
     1822, 1824, 1825, 1817, 1827, 1818, 1828, 1819, 1830, 1831,
     1832, 1833, 1834, 1834, 1822, 1835, 1835, 1836, 1836, 1837,
     1837, 1838, 1838, 1839, 1839, 1840, 1843, 1834, 1841, 1841,
     1835, 1842, 1842, 1845, 1837, 1844, 1844, 1846, 1847, 1848,
     1849, 1850, 1851, 1841, 1852, 1852, 1853, 1853, 1854, 1854,
     1844, 1855, 1855, 1856, 1857, 1857, 1858, 1859, 1859, 1852,
     1860, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868,

     1868, 1869, 1859, 1870, 1871, 1871, 1872, 1873, 1874, 1875,
     1876, 1877, 1878, 1879, 1880, 1881, 1883, 1885, 1886, 1887,
     1887, 1888, 1888, 1889, 1890, 1890, 1891, 1892, 1893, 1893,
     1894, 1894, 1898, 1887, 1895, 1895, 1888, 1896, 1896, 1890,
     1897, 1897, 1893, 1901, 1894, 1899, 1899, 1900, 1900, 1902,
     1902, 1907, 1896, 1903, 1903, 1904, 1904, 1905, 1905, 1909,
     1899, 1906, 1906, 1902, 1908, 1908, 1913, 1903, 1910, 1910,
     1911, 1911, 1912, 1912, 1915, 1915, 1916, 1916, 1917, 1917,
     1918, 1918, 1910, 1919, 1919,  739,  738,  737,  736,  735,
      734, 1916,  733, 1917, 1921, 1921, 1921, 1921, 1921, 1922,

     1922, 1922, 1922, 1922, 1923, 1923, 1923, 1923, 1923, 1924,
     1924, 1924, 1924, 1924, 1925, 1925, 1925, 1925, 1925, 1926,
     1926, 1926, 1926, 1926, 1927, 1927, 1927, 1927, 1927, 1928,
     1928, 1928, 1928, 1928, 1929, 1929, 1929, 1929, 1930,  732,
     1930, 1930, 1930, 1931, 1931,  731, 1931, 1931, 1932, 1932,
     1932,  730, 1932,  729,  728,  727,  726,  723,  721,  720,
      719,  718,  714,  713,  712,  710,  709,  706,  705,  704,
      701,  700,  698,  697,  696,  695,  694,  692,  690,  686,
      685,  684,  683,  681,  680,  675,  674,  673,  672,  671,
      670,  669,  668,  667,  666,  665,  664,  661,  660,  659,

      656,  655,  650,  647,  640,  637,  636,  634,  633,  632,
      631,  630,  629,  628,  626,  625,  623,  622,  621,  620,
      619,  618,  616,  615,  614,  613,  612,  610,  609,  608,
      604,  603,  602,  601,  600,  599,  598,  597,  596,  595,
      594,  593,  592,  591,  590,  589,  587,  586,  583,  582,
      581,  579,  578,  577,  576,  575,  574,  571,  570,  566,
      565,  563,  562,  561,  560,  559,  554,  553,  552,  550,
      549,  548,  547,  546,  545,  544,  543,  540,  539,  538,
      534,  533,  531,  530,  529,  528,  526,  522,  521,  520,
      517,  516,  515,  514,  512,  508,  507,  506,  505,  504,

      503,  502,  501,  500,  499,  498,  497,  496,  495,  494,
      493,  492,  489,  488,  487,  486,  485,  484,  483,  480,
      478,  477,  476,  474,  473,  472,  471,  470,  469,  468,
      467,  465,  464,  463,  462,  459,  458,  456,  455,  454,
      451,  450,  448,  446,  445,  444,  442,  441,  438,  437,
      436,  435,  434,  433,  429,  428,  427,  426,  425,  424,
      423,  422,  420,  419,  418,  417,  414,  413,  412,  411,
      410,  406,  405,  402,  401,  400,  399,  398,  393,  392,
      391,  390,  386,  383,  382,  381,  380,  379,  377,  376,
      375,  374,  373,  371,  370,  369,  368,  367,  365,  364,

      363,  362,  361,  360,  359,  358,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  339,  338,  337,  336,  335,  333,  332,  331,
      330,  329,  328,  327,  326,  325,  324,  321,  320,  318,
      317,  316,  315,  314,  313,  312,  311,  310,  307,  306,
      303,  302,  300,  299,  297,  296,  294,  290,  289,  288,
      287,  284,  283,  282,  281,  277,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  266,  265,  264,  263,  262,
      261,  260,  259,  258,  257,  256,  254,  253,  252,  251,
      250,  249,  248,  247,  246,  245,  244,  243,  242,  241,

      238,  237,  236,  235,  234,  233,  232,  231,  229,  228,
      227,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  213,  212,  211,  209,  208,  207,  206,  202,
      201,  200,  199,  198,  197,  196,  193,  192,  191,  190,
      189,  188,  187,  186,  185,  184,  183,  181,  180,  179,
      178,  175,  174,  173,  172,  171,  170,  168,  167,  166,
      164,  163,  162,  161,  160,  159,  158,  157,  156,  155,
      154,  152,  151,  150,  148,  147,  146,  145,  143,  141,
      139,  135,  134,  132,  131,  128,  127,  126,  125,  121,
      120,  119,  117,  116,  113,  112,  111,  110,  109,  108,

      106,  105,  104,  103,  102,  101,   99,   94,   92,   90,
       88,   84,   83,   81,   80,   77,   76,   75,   72,   65,
       64,   56,   55,   54,   53,   52,   48,   43,   40,   31,
       27,   24,   22,   19,   14,   13,    8,    7,    6,    5,
        4,    3, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,

     1920, 1920, 1920, 1920, 1920, 1920, 1920
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[239] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "OSParseosol.l"
/* $Id$ */
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2011, Horand Gassmann, Jun Ma, Kipp Martin,
 * Dalhousie University, Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 15 "OSParseosol.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream>  

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 

//#define PARSERDEBUG
#ifdef PARSERDEBUG

	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
#include "OSoLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;









#line 103 "OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 1857 "OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 113 "OSParseosol.l"


 
#line 2102 "OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1921 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2943 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 120 "OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 122 "OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 123 "OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 125 "OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 141 "OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 143 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 144 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 145 "OSParseosol.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 146 "OSParseosol.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 147 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 148 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 149 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 150 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 151 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 152 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 153 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 154 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 155 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 156 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 157 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 158 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 159 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 160 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 161 "OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 162 "OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 163 "OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 164 "OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 165 "OSParseosol.l"
{YY_PRINT; return(LBDUALVALUEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 166 "OSParseosol.l"
{YY_PRINT; return(UBDUALVALUEATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 170 "OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 171 "OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 172 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 173 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 174 "OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 175 "OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 176 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 177 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 178 "OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 179 "OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 180 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 181 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 182 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 183 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 184 "OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 185 "OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 186 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 187 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 188 "OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 189 "OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 190 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 191 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 192 "OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 193 "OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 194 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 195 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 196 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 197 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 198 "OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 199 "OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 200 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 201 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 202 "OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 203 "OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 204 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 205 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 206 "OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 207 "OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 208 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 209 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 210 "OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 211 "OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 212 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 213 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 215 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 216 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 217 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 218 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 219 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 220 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 222 "OSParseosol.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 223 "OSParseosol.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 224 "OSParseosol.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 226 "OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 227 "OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 228 "OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 230 "OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 231 "OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 233 "OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 234 "OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 236 "OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 237 "OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 239 "OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 240 "OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 242 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 243 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 245 "OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 246 "OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 247 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 248 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 249 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 250 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 251 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 252 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 253 "OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 254 "OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 255 "OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 256 "OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 257 "OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 258 "OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 259 "OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 260 "OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 261 "OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 262 "OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 263 "OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 264 "OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 265 "OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 266 "OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 267 "OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 268 "OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 270 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 271 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 272 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 273 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 274 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 275 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 276 "OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 277 "OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 278 "OSParseosol.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 279 "OSParseosol.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 280 "OSParseosol.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 281 "OSParseosol.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 283 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 284 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 286 "OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 287 "OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 288 "OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 289 "OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 290 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 291 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 292 "OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 293 "OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 294 "OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 295 "OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 296 "OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 297 "OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 298 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 299 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 300 "OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 301 "OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 302 "OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 303 "OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 304 "OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 305 "OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 306 "OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 307 "OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 308 "OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 309 "OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 310 "OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 311 "OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 312 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 313 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 314 "OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 315 "OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 316 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 317 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 318 "OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 319 "OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 322 "OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 323 "OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 324 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 325 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 326 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 327 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 328 "OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 329 "OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 330 "OSParseosol.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 331 "OSParseosol.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 332 "OSParseosol.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 333 "OSParseosol.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 334 "OSParseosol.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 335 "OSParseosol.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 336 "OSParseosol.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 337 "OSParseosol.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 338 "OSParseosol.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 339 "OSParseosol.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 340 "OSParseosol.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 341 "OSParseosol.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 342 "OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 343 "OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 344 "OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 345 "OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 346 "OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 347 "OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 348 "OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 349 "OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 350 "OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 351 "OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 352 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 353 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 354 "OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 355 "OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 356 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 357 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 358 "OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 359 "OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 360 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 361 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 362 "OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 363 "OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 364 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 365 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 366 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 367 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 368 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 369 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 370 "OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 371 "OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
/* The <item> element is treated specially because it may legitimately contain special characters */
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 376 "OSParseosol.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 377 "OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 378 "OSParseosol.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 379 "OSParseosol.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
/* environments and comments */
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 383 "OSParseosol.l"
{ YY_PRINT; yylval->sval = strdup( yytext); /*  yylval->sval = yytext;*/ yyextra->errorText = yylval->sval;  return (ELEMENTTEXT); }
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 384 "OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 386 "OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 227:
#line 388 "OSParseosol.l"
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 388 "OSParseosol.l"
;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 389 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 391 "OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 231:
#line 393 "OSParseosol.l"
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 393 "OSParseosol.l"
;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 394 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 397 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 398 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 399 "OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 403 "OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 415 "OSParseosol.l"
ECHO;
	YY_BREAK
#line 3643 "OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1921 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1921 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1920);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 415 "OSParseosol.l"





