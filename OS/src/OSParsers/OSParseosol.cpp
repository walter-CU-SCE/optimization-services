#line 2 "OSParseosol.cpp"

#line 4 "OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osollex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 164
#define YY_END_OF_BUFFER 165
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1500] =
    {   0,
        0,    0,  162,  162,  160,  160,  161,  161,    0,    0,
        0,    0,    0,    0,    0,    0,  165,  163,    1,    1,
        1,    2,  151,  163,    5,  163,    4,  163,    3,  151,
      162,  164,  160,  161,  153,  154,  153,  157,  158,  157,
        0,    0,    0,    3,    0,    0,    0,    0,    0,    0,
        0,  151,  151,  151,  151,  151,  151,  151,  151,  151,
        5,    4,    0,    5,  151,    6,    5,    4,    0,    0,
      156,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  151,  162,  160,  161,
        0,  159,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  151,  151,  151,  151,  151,  151,  151,  151,  151,
        5,    0,    0,    0,    5,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    5,  155,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  151,  151,  151,  151,
      151,  151,  151,  151,  151,    5,    5,  152,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  147,    0,    0,    0,    0,    0,    0,    0,
       57,    0,    0,    0,  139,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  133,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  151,
      151,  151,  151,  151,  151,  151,  151,  151,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   99,    0,    0,    0,

        0,    0,   87,    0,    0,    0,    0,   31,    0,    0,
        0,    0,    0,    0,    0,    0,  151,  151,  151,  151,
      151,  151,  151,  151,    0,  148,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   58,    0,    0,    0,
        0,    0,    0,    0,  140,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      134,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   71,    0,    0,    0,    0,    0,    0,    0,   49,
       61,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   11,   12,    0,    0,    0,    0,

        0,  151,  151,  151,  151,  151,  151,  151,  148,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   58,    0,
        0,    0,    0,    0,    0,  140,    0,    0,    0,   50,
        0,    0,    0,    0,  100,    0,    0,    0,    0,    0,
        0,   88,    0,  134,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   53,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   33,  151,  151,
      151,  151,  151,  151,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   72,    0,    0,    0,    0,    0,

        0,    0,   50,    0,   62,    0,    0,  100,    0,    0,
        0,    0,    0,   88,    0,    0,    0,   79,    0,    0,
        0,   51,    0,    0,    0,   73,   89,    0,    0,    0,
        0,    0,    0,    0,  127,    0,    0,   55,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  151,  151,
      151,  151,  151,  151,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   72,    0,    0,    0,    0,    0,    0,
        0,   62,    0,    0,    0,    0,    0,    0,    0,   54,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   77,

        0,    0,    0,    0,    0,   75,    0,    0,    0,   37,
        0,    0,    0,    0,    0,    0,    0,    0,   39,  151,
      151,  151,  151,  151,  151,  151,  151,    0,    0,   80,
        0,    0,    0,    0,    0,   52,    0,    0,    0,    0,
        0,    0,    0,   74,    0,   90,    0,    0,    0,    0,
        0,    0,    0,    0,  128,    0,    0,    0,    0,   56,
        0,    0,   54,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  129,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,    0,
       80,    0,    0,    0,    0,   52,    0,    0,    0,    0,
        0,    0,    0,   74,   90,    0,    0,    0,    0,    0,
        0,    0,   78,  128,    0,    0,    0,   56,    0,    0,
        0,   76,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  135,    0,
        0,    0,    0,    0,    0,   63,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   78,    0,    0,    0,    0,    0,
       76,    0,  130,  143,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   85,    0,    0,    0,    0,
        0,    0,    0,   65,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      136,    0,    0,    0,    0,    0,    0,    0,   64,  130,
       93,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       67,   81,    0,   59,    0,    0,    0,    0,    0,   35,
       36,    0,    0,    0,   47,    0,    0,    0,   43,    0,
        0,    0,    0,    0,   29,    0,    0,  151,  151,  151,
      151,  151,  151,  151,  151,  151,    0,  144,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       86,    0,    0,  136,    0,    0,    0,    0,    0,    0,
       66,   64,    0,  103,  123,    0,    0,    0,    0,    0,
        0,    0,   83,    0,    0,    0,    0,    0,    7,    8,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  144,    0,   94,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   68,   86,    0,   82,
        0,    0,   60,    0,    0,    0,    0,   66,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   15,    0,    0,    0,    9,   10,  151,  151,  151,
      151,  151,  151,  151,  151,  151,   94,    0,    0,    0,
      104,    0,  124,    0,    0,    0,    0,    0,    0,    0,
       68,   82,    0,   84,   60,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  125,    0,    0,    0,    0,   13,    0,    0,    0,
        0,    0,    0,    0,  151,  151,  151,  151,  151,  151,
      151,  151,    0,    0,  104,  124,    0,    0,    0,    0,
        0,    0,    0,   84,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   69,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      151,  151,  151,  151,  151,  151,  151,  151,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      126,    0,    0,    0,  101,    0,  149,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  151,  151,
      151,  151,  151,  151,  151,  151,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   70,    0,
        0,  126,    0,    0,    0,    0,    0,    0,    0,    0,
      107,    0,  111,    0,    0,    0,    0,    0,   91,    0,
        0,    0,    0,    0,    0,    0,    0,   17,    0,   19,
      151,  151,  151,  151,  151,  151,    0,    0,  102,    0,
        0,  150,    0,    0,    0,    0,    0,    0,    0,   70,
        0,    0,    0,    0,    0,    0,  121,    0,    0,    0,
        0,    0,    0,    0,  115,    0,  119,    0,    0,    0,

        0,   21,    0,    0,    0,    0,  151,  151,  151,  151,
      151,    0,  102,    0,  150,    0,    0,    0,    0,    0,
      108,    0,    0,  112,    0,    0,    0,    0,    0,    0,
       92,    0,    0,    0,    0,  105,  109,    0,    0,    0,
        0,   23,    0,    0,    0,    0,    0,  151,  151,  151,
      151,    0,  122,    0,    0,    0,    0,    0,  108,    0,
      112,    0,    0,  116,    0,    0,  120,    0,   92,    0,
        0,    0,  131,  113,  117,    0,    0,    0,    0,   25,
        0,  151,  151,  151,  122,    0,    0,    0,    0,    0,
      106,    0,  110,    0,  116,    0,  120,    0,    0,  141,

      137,    0,    0,    0,    0,  151,  151,  151,    0,    0,
        0,    0,  132,  106,  110,    0,  114,    0,  118,    0,
      145,    0,    0,    0,    0,  151,  151,  151,    0,    0,
      142,    0,  138,  132,  114,  118,    0,    0,    0,    0,
        0,  151,  151,  151,    0,  146,  142,  138,    0,    0,
        0,    0,    0,  151,  151,  151,  146,    0,    0,    0,
        0,    0,  151,  151,  151,    0,   97,    0,    0,    0,
      151,  151,  151,    0,    0,    0,    0,    0,  151,  151,
      151,    0,   98,    0,    0,    0,    0,   27,  151,  151,
       98,    0,    0,    0,   41,  151,    0,   45,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    7,    1,    1,    8,    1,
        1,    7,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    7,    1,   14,
       15,   16,   17,    7,   18,   19,   20,   21,   22,   23,
        7,    7,   24,   25,   26,   27,   28,   29,   30,   31,
        7,   32,   33,   34,   35,   36,    7,    7,    1,    1,
        1,    1,    1,    1,    7,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,    1,   63,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[64] =
    {   0,
        1,    2,    2,    2,    1,    3,    2,    4,    1,    1,
        2,    2,    2,    2,    1,    5,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1
    } ;

static yyconst flex_int16_t yy_base[1511] =
    {   0,
        0,   63, 3337, 3336, 3345, 3344, 3341, 3340,    0,    0,
        0,    0,   15,   16,    4,   17, 3347, 3354,  125,  182,
      239, 3354,   21,   16,   29, 3330,   79,  293, 3354,   82,
        0, 3354,    0,    0, 3354, 3354, 3335, 3354, 3354, 3328,
        0, 3327,   27, 3354, 3301, 3301,    1,    1, 3286, 3301,
     3301,    0,   34,   45,   98,  105,  120,  133,  128,  160,
       75,  137, 3308,  177,  193, 3354,  232,  245, 3326,  313,
     3354, 3284,    8, 3289, 3292, 3282, 3280, 3285,   17,   47,
       52, 3288,   92, 3267, 3272, 3289,  198,    0,    0,    0,
     3309, 3354, 3269, 3263, 3286, 3282, 3271, 3270, 3281, 3281,

     3268,  217,  248,  199,  264,  269,  288,  297,  310,  315,
      139,  145, 3292, 3301,  364, 3303, 3261,   15, 3266, 3269,
     3259, 3257, 3262,   68,  236,   71, 3265,  282, 3244, 3249,
     3266, 3252, 3249, 3246, 3251, 3248,  171, 3259, 3257, 3235,
     3244, 3247, 3236, 3240, 3246, 3233,   27, 3237, 3234, 3242,
     3231, 3229, 3231, 3241, 3227,  370, 3354, 3241,  385, 3242,
     3241, 3236, 3238, 3225, 3237, 3216,  379,  394,  399,  400,
      405,  418,  426,  427,  433, 3259, 3354, 3354, 3221, 3218,
     3215, 3220, 3217,  399, 3228, 3226, 3204, 3213, 3216, 3205,
     3209, 3215, 3202,   68, 3206, 3203, 3211, 3200, 3198, 3200,

     3210, 3196,  108, 3208, 3207, 3206, 3205, 3189, 3187, 3187,
     3218, 3200, 3206,  249, 3198, 3193, 3189, 3195, 3183, 3179,
     3189, 3193, 3174, 3189, 3171, 3172, 3186, 3172, 3180, 3170,
      455,  312, 3175, 3166,  458, 3180, 3165, 3171, 3177,  451,
      477,  470,  483,  498,  492,  505,  513,  514,  520, 3176,
     3175, 3174, 3173, 3157, 3155, 3155,  538, 3169, 3175,  403,
      541, 3163, 3159, 3165, 3153, 3149, 3159, 3163, 3144, 3159,
     3141, 3142, 3156, 3142,  547, 3139, 3157, 3143, 3153, 3136,
     3136, 3144, 3132, 3150, 3165, 3135, 3139, 3152, 3137, 3140,
     3141, 3130,  165, 3124, 3120, 3117, 3354, 3134, 3129, 3133,

     3127, 3130, 3354, 3141, 3132, 3123,  371, 3354, 3110, 3121,
      544,  562, 3111, 3112, 3106,  569,  565,  581,  584,  587,
      592,  603,  609,  628,  610,  401, 3106, 3124, 3110, 3120,
     3103, 3103, 3111, 3099, 3117,  631,  423, 3132, 3102, 3106,
     3119, 3104, 3107,  646,  649, 3108, 3097,  654, 3091, 3087,
     3084,  657, 3101, 3096, 3100, 3094, 3097,  661, 3108,  665,
      672, 3099, 3081, 3095, 3093, 3076, 3097, 3093, 3092, 3105,
     3077, 3354, 3071, 3076, 3089, 3068, 3073, 3065, 3075,  676,
     3354, 3063, 3067, 3062, 3062, 3058, 3075, 3064, 3075, 3073,
     3058, 3068, 3057,  680, 3354, 3354, 3077, 3055, 3064,  687,

      690,  683,  698,  699,  704,  705,  724,  729,  701, 3050,
     3064, 3062, 3045, 3066, 3062, 3061, 3074, 3046,  720,  726,
     3040, 3045, 3058, 3037, 3042,  744, 3034, 3044,  750,  755,
      758, 3032, 3036,  765,  768, 3031, 3031, 3027, 3044, 3033,
      773,  776, 3044,  780, 3042, 3042, 3022, 3036, 3025, 3024,
     3026, 3025, 3027, 3032, 3029, 3028, 3035, 3020, 3015, 3020,
     3002, 3040, 3008, 3006, 3019, 3011, 3017, 3354, 3008, 3008,
     2999,  783, 3004, 3011, 2998,  788,  791, 3354,  794,  809,
      802,  803,  818,  824, 3014, 2994, 3008, 2997, 2996, 2998,
     2997, 2999, 3004,  839,  798, 3001, 3000, 3007, 2992, 2987,

     2992, 2974,  844,  854,  857, 3012, 2980,  860, 2978, 2991,
     2983, 2989,  863,  871, 2980, 2980, 2982, 3354, 2975, 2965,
      204, 3354,  848, 2963, 2969, 3354, 3354, 2918, 2934, 2912,
     2907, 2919, 2910, 2898, 2892, 2891, 2889,   80, 2885, 2875,
     2864,  878,  883, 2874,  869, 2836,  893,  899,  902,  907,
      915,  923,  918,  948, 2842,  942, 2835, 2830,  216,  953,
      945, 2832, 2838,  938,  968,  974, 2822, 2839, 2816, 2811,
     2829,  983, 2820, 2823,  989, 2822, 2813,  992,  995,  998,
     2811, 2806, 2793, 2803, 2790, 2775, 2786, 2774, 2766, 2782,
     2781, 2775,    1, 2771, 2755, 2744, 2760, 2743, 2749, 3354,

     2739, 2769, 2736, 2737, 2740, 3354, 2716, 2718, 1010, 3354,
     2692, 2700, 2688,  263,  134, 2701, 2702, 1020, 3354, 1017,
     1023, 1024, 1030, 1039, 1045, 1046, 1062, 2671, 1063, 1013,
     2681, 2670, 2660, 2671, 1069, 1084, 2660, 2635, 2653, 2652,
     2644,  236, 1087, 1090, 1098, 1102, 2636, 2616, 2599, 2614,
     2598, 2597, 1105, 1108, 1113, 2582, 2614, 2587, 1116, 1123,
     2588, 2584, 1126, 1131, 2549, 2547, 2553, 2556, 2554, 2526,
     2522, 2528, 2517, 2489, 2480, 2483, 2483, 2478, 2477, 2479,
     2455, 2458, 2449, 2455, 2442, 2440, 2423, 2443, 3354, 2416,
     2412, 2413, 2420, 2411, 2399, 2385, 2389, 2381, 2373, 1129,

     1134, 1137, 1140,  625, 1153, 1156, 1159, 1178, 1179, 2376,
     1160, 2386, 2373, 2371, 2362, 1180, 2358, 2369, 2355, 2345,
     2338, 2339, 2349, 1196, 1199, 2340, 2319, 2322, 2292, 2297,
     2300, 1202, 1205, 1211, 2295, 2279, 2289, 1217, 2270, 2293,
     1220, 1223, 1226, 2260, 2272, 2253, 2267, 2252, 2237, 2240,
     2238, 2233, 2238, 2231, 2213, 2221, 2217, 2210, 3354, 2196,
     2191, 2190, 2186, 2182, 2196, 3354, 1231, 2188, 1235, 2199,
     1241, 2180, 2172, 2176, 1249, 2158, 1245, 1256, 1263, 1269,
     1284, 1289, 1290, 1305, 1308, 1324, 2153, 2165, 2149, 2162,
       14,   63,   98,  110,  115,  158,  165,  159,  177,  181,

      183, 1311,  198,  197, 1329,  217,  221,  226,  253, 1339,
     1343, 1346, 1354, 3354,  251,  273,  269,  272,  274,  304,
      315,  320,  309,  346,  344, 3354,  349,  330,  344,  365,
      396,  392,  411, 3354, 1357, 1361, 1371, 1375, 1379,  394,
      431, 1389, 1392,  416,  412,  413,  428, 1395, 1399,  434,
      433, 1409, 1414, 1429, 1434, 1435, 1450, 1455, 1456, 1461,
     1472, 1477, 1483, 1503, 1498,  420,  443,  422,  427,  431,
      452,  457,  461,  452,  472,  470, 1505,  479,  469, 1520,
     1436,  482,  500,  509,  496,  501, 1523, 1526, 1457, 1529,
     3354,  501,  512,  515,  504,  532,  518,  540,  560,  529,

     3354, 3354,  546, 3354,  556,  564,  577,  564, 1543, 3354,
     3354, 1550, 1553, 1560, 3354,  566,  567, 1567, 3354,  568,
      953, 1570,  573, 1574, 3354,  598, 1577, 1584, 1581, 1589,
     1592, 1600, 1607, 1613, 1626, 1643, 1647, 1629, 1650,  594,
      613,  631,  633,  659,  652,  671,  735,  669, 1658, 1667,
     1673, 1676,  686, 1682, 1685,  686,  704,  712,  710, 1691,
     1694, 1700,  801, 3354, 3354,  736,  740,  752,  759,  758,
      780,  788, 3354,  870,  787,  781,  788, 1706, 3354, 3354,
      812, 1713,  806,  802,  854,  817, 1716, 1719,  816,  828,
     1722, 1730, 1727, 1742, 1747, 1753, 1758, 1764, 1779, 1773,

     1786, 1803, 1748, 1809, 1818,  905, 1827, 1833,  840,  835,
      843,  864,  862,  864,  879, 1836, 1842, 1851, 1854, 1857,
     1860, 1863, 1869,  908,  890,  905,  911, 1878,  927,  942,
      935,  925,  930,  962,  952,  948,  956,  958,  959,  972,
      983, 1009, 1000, 1881, 1884,  991, 1000, 1006,  998, 1002,
     1887, 3354, 1022, 1028, 1895, 3354, 3354, 1892, 1907, 1900,
     1913, 1916, 1922, 1929, 1938, 1945, 1962, 1029, 1043, 1965,
     1968, 1971, 1986, 1052, 1041, 1055, 1081, 1071, 1079, 1087,
     1989, 1992, 1995, 1998, 2001, 1089, 1093, 1109, 1108, 1126,
     1118, 1127, 1126, 1136, 1144, 1152, 1128, 1155, 1161, 1164,

     1159, 3354, 1177, 1196, 1204, 2004, 3354, 1214, 1207, 1222,
     1224, 1228, 1219, 1221, 2007, 2008, 2013, 2014, 1937, 2029,
     2030, 2036, 1232, 1237, 2031, 2056, 1239, 1254, 1267, 1273,
     1255, 1287, 1279, 2059, 1283, 1279, 2062, 1285, 1306, 1311,
     1313, 1310, 1313, 1352, 1333, 1385, 1386, 3354, 1319, 1343,
     1340, 1340, 1349, 1351, 1358, 1376, 1371, 1390, 2067, 2073,
     2078, 2081, 2084, 2087, 2100, 2105, 2129, 2144, 1393, 1394,
     1386, 1400, 1468, 1439, 1514, 1584, 2102, 1417, 1441, 2106,
     2121, 1438, 1447, 1442, 3354, 1467, 3354, 1455, 1474, 1464,
     1464, 1483, 1481, 1487, 1590, 1603, 1499, 1500, 1488, 2135,

     1496, 1502, 1510, 1528, 2150, 2159, 2166, 2169, 2162, 2180,
     2173, 2186, 2189, 2195, 2210, 2216, 1511, 2232, 1548, 2241,
     1538, 1553, 1569, 1580, 1588, 1587, 1592, 2247, 2125, 1633,
     1677, 2250, 1624, 1631, 1632, 1644, 1625, 1642, 1634, 1648,
     3354, 1654, 3354, 1652, 1662, 1676, 1684, 1685, 3354, 2256,
     2262, 2265, 1705, 1702, 1693, 1705, 2272, 3354, 2279, 3354,
     2282, 2287, 2293, 2298, 2304, 2309, 1721, 2324, 2329, 1731,
     2332, 2335, 1714, 1725, 1720, 1728, 2342, 1733, 2347, 2350,
     1732, 1739, 1743, 1748, 1748, 2358, 3354, 1760, 1759, 1757,
     1775, 1774, 1775, 1775, 3354, 1776, 3354, 1814, 2362, 2365,

     2368, 3354, 1788, 1783, 2376, 1801, 2380, 2373, 2386, 2401,
     2395, 2417, 2420, 1799, 2423, 1798, 1793, 1810, 1819, 2426,
     2435, 1820, 2443, 2446, 1823, 2449, 1824, 2452, 1859, 2458,
     2467, 1821, 1853, 1859, 1850, 3354, 3354, 1858, 1864, 1867,
     2473, 3354, 1870, 1885, 2476, 2480, 1903, 2483, 2484, 2490,
     2499, 2505, 2514, 1878, 1902, 1903, 1891, 2520, 2524, 2528,
     2535, 1899, 2538, 2543, 1906, 2546, 2549, 1906, 2553, 1919,
     1921, 1922, 3354, 3354, 3354, 1940, 1928, 1955, 2556, 3354,
     1961, 2559, 2564, 2565, 2566, 1973, 1962, 1963, 2580, 2583,
     2586, 2589, 2598, 2604, 2607, 2610, 2619, 1996, 1982, 3354,

     3354, 2016, 2010, 1995, 1995, 2616, 2617, 2622, 1998, 2637,
     2640, 2645, 2648, 2655, 2660, 2663, 2668, 2671, 2678, 2031,
     3354, 2011, 2015, 2016, 2028, 2674, 2681, 2682, 2697, 2700,
     2703, 2706, 2715, 2721, 2726, 2729, 2034, 2033, 2028, 2042,
     2060, 2732, 2733, 2738, 2739, 2754, 2757, 2760, 2065, 2074,
     2075, 2079, 2085, 2763, 2768, 2771, 2764, 2108, 2100, 2106,
     2116, 2124, 2779, 2784, 2790, 2125, 3354, 2136, 2135, 2807,
     2801, 2812, 2834, 2837, 2138, 2829, 2853, 2856, 2859, 2874,
     2879, 2894, 2897, 2900, 2903, 2909, 2917, 3354, 2920, 2925,
     2940, 2943, 2946, 2949, 3354, 2957, 2960, 3354, 3354, 2973,

     2978, 2983, 2988, 2993, 2998, 3003, 3007, 3012, 3016, 3021
    } ;

static yyconst flex_int16_t yy_def[1511] =
    {   0,
     1500, 1500, 1501, 1501, 1502, 1502, 1503, 1503, 1504, 1504,
     1504, 1504, 1505, 1505, 1506, 1506, 1499, 1499, 1499, 1507,
     1507, 1499, 1507, 1499, 1507, 1499, 1507, 1499, 1499, 1507,
     1508, 1499, 1509, 1510, 1499, 1499, 1499, 1499, 1499, 1499,
       19, 1499,   28, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499,   21, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1499, 1499, 1499, 1507, 1507, 1499, 1507, 1507, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1507, 1508, 1509, 1510,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1499, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1499, 1499, 1499, 1499, 1507, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1507, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1499, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1507, 1507,
     1507, 1507, 1507, 1507, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1507, 1507,
     1507, 1507, 1507, 1507, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1507,

     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,

     1507, 1507, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1507, 1507, 1507, 1507, 1507, 1507, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1499, 1499, 1499, 1499, 1499, 1499, 1507, 1507, 1507, 1507,
     1507, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1507, 1507, 1507,
     1507, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1507, 1507, 1507, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1499, 1499, 1499, 1499, 1499, 1507, 1507, 1507, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1507, 1507, 1507, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1507, 1507, 1507, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1507, 1507, 1507, 1499, 1499, 1499, 1499,
     1499, 1499, 1507, 1507, 1507, 1499, 1499, 1499, 1499, 1499,
     1507, 1507, 1507, 1499, 1499, 1499, 1499, 1499, 1507, 1507,
     1507, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1507, 1507,
     1499, 1499, 1499, 1499, 1499, 1507, 1499, 1499,    0, 1499,

     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499
    } ;

static yyconst flex_int16_t yy_nxt[3418] =
    {   0,
       18,   19,   20,   21,   18,   22,   39,   22,   18,   24,
       25,   26,   27,   28,   18,   29,   18,   36,   36,   39,
       40, 1499, 1499,   30,   37,   37,   61,  676,   62,  677,
     1499, 1499, 1499,   40, 1499, 1499, 1499,   97,   95,   63,
     1499,   64, 1499, 1499, 1499, 1499, 1499, 1499,  133, 1499,
       65,   96,  134,  140,  869,  180, 1499,   98, 1499,  181,
     1499,  141,   22,   18,   19,   20,   21,   18,   22,   65,
       22,   18,   24,   25,   26,   27,   28,   18,   29,   18,
     1499,  220,  221, 1499,  142,  102,   30,  111,  147,   67,
     1499,   68, 1499, 1499, 1499, 1499,  112, 1499,  143, 1499,

       65,  144,  145,  146,  187,  148, 1499,  194,  604, 1499,
       87, 1499,  188, 1499,  605,  112, 1499,  870, 1499,   65,
     1499, 1499,  266,  267,  195,   22,   41,   41,   41, 1499,
      150, 1499,  151, 1499, 1499, 1499,   42,  103,   43, 1499,
       44, 1499,  104, 1499, 1499,  871, 1499,   61, 1499,   62,
      872,  111,  152,  114,  114,  105,  106,  176,  112,  873,
      112, 1499,  276,  277,   45,  109,  380,  380,  380,   46,
      696, 1499,   47, 1499,   48, 1499,  107,  112, 1499,  112,
       49,   50,   51,   41,   52,   52,  108,  697, 1499,   64,
     1499,  874, 1499,   42, 1499,   43,  110,   44,   65, 1499,

     1499,  114,  114,  875, 1499,  115, 1499,  876, 1499, 1499,
     1499, 1499, 1499, 1499, 1499,  208,  877,   65, 1499,  878,
      156,   54,  209,  586,  587,  210,   55,  879, 1499,   56,
     1499,   57, 1499, 1499,  169,  633,  634,   58,   59,   60,
       41,   52,   52, 1499,   64, 1499, 1499, 1499,  882, 1499,
       42,  883,   43,   65,   44,   67, 1499,   68, 1499, 1499,
     1499, 1499,  722, 1499,  723, 1499,   65,  884,  288,  289,
     1499,  167,   65,  189,  885, 1499,  290, 1499,   54, 1499,
     1499,  886, 1499,   55, 1499,   65,   56,  190,   57, 1499,
      191,  192,  193,  887,   58,   59,   60,   69, 1499, 1499,

      694, 1499,  170, 1499,   70,  891,  892,  168, 1499,   71,
     1499, 1499, 1499,  307,  307,  307, 1499,  171,  695,  308,
      197, 1499,  198, 1499,  893, 1499, 1499,  894, 1499,  895,
     1499,   72,   73,  173,   74,   75,  172,   76,   77,  896,
       78,   79,  199,   80,   81,  174,   82,   83,   84,   85,
       86,  117,  118,  897,  119,  120,  898,  121,  122,  899,
      123,  124,  175,  125,  126, 1499,  127,  128,  129,  130,
      131, 1499,  307,  307,  307, 1499,  115, 1499,  308, 1499,
     1499, 1499,  900, 1499,  901, 1499,  231,  231,  231,  902,
     1499,  903, 1499,  904, 1499,  231,  241,  241,  905,  232,

     1499, 1499,  409,  409,  409, 1499, 1499, 1499,  232, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499,  240, 1499, 1499,
     1499,  906,  341,  342,  419,  419,  419, 1499, 1499, 1499,
      343, 1499,  907, 1499, 1499,  242,  243, 1499, 1499, 1499,
     1499, 1499, 1499,  254, 1499,  244, 1499,  908, 1499,  916,
      255,  917, 1499,  256,  920,  245,  231,  231,  231,  311,
      311,  311, 1499,  247, 1499,  921, 1499,  922,  923,  232,
      926, 1499,  312,  927,  939,  246,  940,  941,  231,  241,
      241, 1499,  942, 1499, 1499, 1499,  943,  944, 1499,  248,
     1499,  232, 1499, 1499, 1499,  945, 1499,  946, 1499,  311,

      320,  320,  947, 1499,  317, 1499, 1499, 1499,  948, 1499,
      949, 1499,  312, 1499, 1499, 1499, 1499,  318, 1499,  952,
     1499,  325,  325,  325, 1499, 1499, 1499, 1499, 1499, 1499,
      953,  955,  321,  956,  957,  326,  958,  959,  319,  336,
      336,  336,  344,  344,  344,  311,  311,  311,  360,  360,
      360,  963,  964,  337,  324,  965,  345,  966,  312,  322,
      323,  338,  361,  394,  394,  394, 1499,  395,  967,  396,
      400,  400,  400,  968,  327,  328, 1499,  969, 1499,  970,
     1499,  346, 1499,  401,  972, 1499,  973,  971,  311,  320,
      320,  362, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1499,  312, 1499, 1499, 1499, 1499,  974, 1499,  975,  402,
     1499,  325,  325,  325, 1499,  976, 1499,  977, 1499,  981,
     1499,  982, 1499,  983, 1499,  326, 1499,  989,  404,  400,
      408,  408,  336,  336,  336,  990, 1499,  403, 1499, 1499,
     1499, 1499,  401, 1499, 1006,  405,  337,  344,  344,  344,
      426,  426,  426, 1007,  406,  429,  429,  429,  434,  434,
      434,  345,  441,  441,  441,  407,  360,  360,  360,  430,
      781, 1008,  435,  444,  444,  444,  442,  380,  380,  380,
      361,  394,  394,  394, 1499,  395, 1009,  396,  400,  400,
      400,  477,  477,  477, 1499, 1010, 1499,  478, 1499, 1499,

     1499,  401,  409,  409,  409, 1499, 1499, 1011, 1012, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499,  419,  419,  419, 1015, 1499, 1021,  494,  494,  494,
      400,  408,  408,  482,  479, 1499, 1024, 1499,  480, 1499,
     1499,  495, 1499,  401, 1499,  426,  426,  426, 1025,  481,
     1026,  429,  429,  429, 1013,  483,  503,  503,  503,  504,
      504,  504, 1014, 1027,  484,  430,  434,  434,  434,  508,
      508,  508, 1031,  505,  441,  441,  441,  514,  514,  514,
      435,  444,  444,  444,  542,  542,  542, 1032,  442,  547,
      547,  547,  477,  477,  477, 1499, 1033,  543,  478,  564,

      564,  564,  548, 1499, 1499, 1499, 1034, 1499, 1035, 1499,
      542,  550,  550, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1029, 1499,  543, 1499,  547,  554,  554, 1030, 1499,
     1036, 1499, 1037, 1499, 1040, 1499, 1041, 1499,  548, 1499,
      494,  494,  494, 1042,  552,  503,  503,  503, 1043,  549,
     1046,  551, 1047, 1050,  495,  504,  504,  504,  572,  572,
      572,  508,  508,  508,  579,  579,  579,  588,  589,  505,
     1053,  553,  514,  514,  514, 1054, 1074,  590,  580,  542,
      542,  542, 1075,  591,  609,  609,  609, 1076,  612, 1038,
      610, 1048,  543,  613,  547,  547,  547, 1039,  614,  615,

      618,  618,  618, 1499,  616, 1049,  619,  548,  542,  550,
      550, 1077, 1078, 1499, 1079, 1499, 1499, 1499, 1499, 1499,
     1499,  543, 1499, 1080, 1499, 1068, 1499, 1086, 1499, 1499,
     1499, 1499, 1069, 1499, 1499, 1087, 1499, 1088, 1499,  564,
      564,  564,  622,  629,  629,  629,  620,  623,  621,  547,
      554,  554,  624,  625,  635,  635,  635,  630,  626, 1499,
     1089, 1499,  548, 1499,  637,  638, 1090, 1091,  636,  643,
      643,  643,  984,  627,  639,  645,  645,  645, 1092, 1093,
      640, 1094,  985,  644,  572,  572,  572, 1095,  986,  646,
      654,  654,  654,  659,  659,  659,  579,  579,  579,  663,

      663,  663, 1096, 1097,  655, 1098, 1099,  660, 1100, 1101,
      580,  609,  609,  609,  711,  711,  711,  610, 1499, 1102,
      661,  618,  618,  618, 1499, 1499,  662,  619, 1499,  656,
     1499, 1499, 1499, 1103, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1104, 1499, 1105, 1499, 1499, 1499, 1108, 1109,
     1499, 1110, 1499, 1111, 1499, 1112, 1499, 1499, 1499, 1499,
     1499, 1499, 1113, 1499,  629,  629,  629,  700, 1114, 1123,
      635,  635,  635, 1499,  702, 1499,  704, 1499,  630, 1124,
      703,  706,  708,  701,  636,  716,  716,  716,  643,  643,
      643,  724,  724,  724,  705,  709, 1127, 1128,  707,  645,

      645,  645,  644,  725,  725,  725,  732,  732,  732,  654,
      654,  654, 1129,  646,  734,  734,  734,  659,  659,  659,
      733, 1130, 1131,  655,  738,  738,  738,  663,  663,  663,
     1499,  660,  741,  741,  741, 1499, 1132, 1133, 1499, 1135,
     1499, 1499, 1499, 1136, 1499, 1499,  742, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1137, 1499, 1138, 1139,
     1499,  711,  711,  711, 1499, 1140, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1141, 1499, 1142, 1143,  780,  777, 1499,
     1499,  716,  716,  716, 1144,  778,  779, 1145, 1146, 1499,
     1499, 1499, 1499, 1499, 1499, 1147,  782,  724,  724,  724,

      725,  725,  725,  732,  732,  732,  805,  805,  805,  784,
     1148,  783,  734,  734,  734, 1149, 1150,  733,  738,  738,
      738,  741,  741,  741,  811,  811,  811,  812,  812,  812,
     1151,  785,  835,  835,  835,  742,  838,  838,  838,  786,
     1152,  813,  842,  842,  842,  836,  835,  852,  852,  839,
      848,  848,  848, 1153, 1154,  843, 1499, 1499, 1499,  836,
     1499, 1155, 1156,  849,  838,  854,  854, 1499, 1157, 1499,
     1499, 1499, 1158, 1159, 1499, 1160, 1499,  839, 1499, 1169,
     1499,  844, 1499, 1170, 1499,  842,  857,  857, 1171,  840,
     1499, 1499,  856,  850, 1172, 1499,  853, 1499,  843, 1499,

     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1173, 1174,  848,
      862,  862,  880,  880,  880, 1175, 1499,  855, 1499, 1499,
     1499, 1499,  849, 1499,  858, 1499,  881, 1176, 1177,  859,
      805,  805,  805,  860, 1178, 1499, 1179, 1499, 1182, 1499,
      888,  888,  888,  861,  811,  811,  811,  812,  812,  812,
     1183, 1184,  863, 1185,  889,  890,  890,  890,  835,  835,
      835,  813,  909,  909,  909, 1186,  910, 1187,  911, 1190,
     1188,  836,  912,  912,  912,  864,  838,  838,  838, 1195,
      914,  914,  914, 1196, 1197,  913,  915, 1189, 1198,  839,
      842,  842,  842,  918,  918,  918,  848,  848,  848,  919,

      924,  924,  924,  843, 1199, 1200,  925, 1191, 1193,  849,
      835,  852,  852, 1201, 1202,  912,  928,  928, 1192, 1194,
     1499, 1203, 1499,  836, 1499, 1499, 1204, 1499,  913, 1499,
      838,  854,  854, 1217, 1218, 1499, 1499,  954,  954,  954,
     1499, 1219, 1499,  839, 1499, 1499, 1499, 1499, 1499, 1499,
     1499,  842,  857,  857, 1220,  930, 1499, 1499,  962,  962,
      962, 1499, 1499, 1499,  843, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1223, 1499, 1230,  848,  862,
      862, 1231, 1233, 1499, 1499, 1499, 1221, 1499, 1499,  929,
     1499,  849, 1499,  931, 1499, 1234, 1499, 1235, 1499,  937,

      937,  937, 1236, 1222, 1499, 1237,  950,  950,  950,  932,
     1238, 1239,  934,  938, 1499,  933, 1499, 1240, 1499,  935,
      951,  880,  880,  880,  960,  960,  960,  888,  888,  888,
      890,  890,  890, 1241, 1242,  881, 1224, 1243,  961, 1248,
     1249,  889, 1250,  936,  909,  909,  909, 1225,  910, 1253,
      911,  912,  912,  912,  978,  978,  978, 1254,  979, 1255,
      980,  914,  914,  914,  913, 1256, 1267,  915,  918,  918,
      918,  987,  987,  987,  919,  924,  924,  924,  991,  991,
      991,  925, 1499, 1270,  988,  912,  928,  928, 1273, 1274,
     1499,  992, 1499, 1499, 1499, 1499, 1499, 1499,  913, 1499,

     1499, 1499, 1499, 1499, 1499, 1499, 1226, 1499,  987,  999,
      999, 1499, 1244, 1499, 1499, 1499, 1275, 1227, 1499,  996,
     1499,  988, 1499, 1245, 1499, 1246, 1499, 1499, 1499,  997,
     1003, 1003, 1003, 1276,  993,  998, 1247, 1499, 1277, 1499,
     1278, 1499, 1279,  994,  991, 1002, 1002,  995,  937,  937,
      937, 1004, 1004, 1004, 1499, 1281, 1499,  992, 1499, 1016,
     1016, 1016,  938, 1001, 1285, 1005, 1282, 1000,  950,  950,
      950, 1286, 1287, 1017, 1018, 1018, 1018, 1019, 1019, 1019,
     1288, 1289,  951,  954,  954,  954, 1022, 1022, 1022, 1290,
     1291, 1020,  960,  960,  960, 1028, 1028, 1028, 1292, 1283,

     1023,  962,  962,  962, 1293, 1294,  961,  978,  978,  978,
     1284,  979, 1295,  980, 1044, 1044, 1044,  987,  987,  987,
     1051, 1051, 1051,  991,  991,  991, 1052, 1045, 1499, 1296,
      988, 1055, 1055, 1055, 1297, 1056,  992, 1057, 1499, 1298,
     1499, 1303, 1499, 1044, 1059, 1059, 1304, 1305, 1499, 1003,
     1003, 1003, 1306, 1499, 1499, 1499, 1045, 1499, 1499, 1499,
     1499, 1312, 1499, 1058, 1499, 1499, 1499, 1314, 1499, 1499,
     1316, 1499, 1317, 1499, 1499, 1499, 1318, 1499, 1319, 1499,
      987,  999,  999, 1322, 1499, 1325, 1499, 1499, 1499, 1326,
     1499, 1060, 1499,  988, 1499, 1062, 1327, 1499, 1328, 1499,

     1064, 1499, 1329, 1061,  991, 1002, 1002, 1332, 1333, 1063,
     1004, 1004, 1004, 1334, 1499, 1335, 1499,  992, 1499, 1067,
     1067, 1067, 1336, 1337, 1005, 1338, 1339, 1065, 1070, 1070,
     1070, 1340, 1343, 1066, 1072, 1072, 1072, 1016, 1016, 1016,
     1344, 1347, 1071, 1081, 1081, 1081, 1354, 1355, 1073, 1356,
     1357, 1017, 1018, 1018, 1018, 1019, 1019, 1019, 1082, 1082,
     1082, 1083, 1083, 1083, 1022, 1022, 1022, 1358, 1360, 1020,
     1085, 1085, 1085, 1362, 1365, 1084, 1368, 1370, 1023, 1028,
     1028, 1028, 1044, 1044, 1044, 1106, 1106, 1106, 1051, 1051,
     1051, 1107, 1371, 1499, 1052, 1045, 1055, 1055, 1055, 1372,

     1056, 1499, 1057, 1499, 1373, 1499, 1374, 1499, 1044, 1059,
     1059, 1499, 1375, 1499, 1499, 1499, 1376, 1499, 1499, 1377,
     1499, 1045, 1499, 1499, 1499, 1378, 1499, 1499, 1499, 1499,
     1499, 1499, 1381, 1499, 1386, 1499, 1115, 1499, 1499, 1499,
     1499, 1387, 1499, 1388, 1499, 1389, 1499, 1394, 1499, 1499,
     1499, 1499, 1499, 1499, 1396, 1398, 1499, 1116, 1499, 1399,
     1499, 1118, 1117, 1067, 1067, 1067, 1070, 1070, 1070, 1125,
     1125, 1125, 1072, 1072, 1072, 1400, 1401, 1119, 1121, 1402,
     1071, 1165, 1120, 1403, 1404, 1122, 1073, 1126, 1126, 1126,
     1081, 1081, 1081, 1082, 1082, 1082, 1083, 1083, 1083, 1134,

     1134, 1134, 1085, 1085, 1085, 1106, 1106, 1106, 1499, 1499,
     1084, 1107, 1405, 1409, 1499, 1499, 1410, 1411, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1125, 1125, 1125, 1420, 1421, 1499, 1422, 1423,
     1499, 1499, 1499, 1499, 1499, 1499, 1424, 1499, 1162, 1499,
     1425, 1499, 1429, 1437, 1164, 1438, 1161, 1126, 1126, 1126,
     1134, 1134, 1134, 1180, 1180, 1180, 1439, 1163, 1205, 1205,
     1205, 1440, 1441, 1166, 1207, 1207, 1207, 1181, 1449, 1499,
     1450, 1206, 1499, 1451, 1167, 1499, 1452, 1208, 1499, 1499,
     1168, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1499, 1499, 1499, 1228, 1228, 1228, 1499, 1180, 1180, 1180,
     1453, 1499, 1458, 1499, 1459, 1499, 1499, 1229, 1499, 1460,
     1499, 1181, 1232, 1232, 1232, 1212, 1280, 1280, 1280, 1461,
     1205, 1215, 1215, 1209, 1462, 1210, 1251, 1251, 1251, 1211,
     1499, 1214, 1499, 1206, 1499, 1207, 1216, 1216, 1466, 1252,
     1213, 1205, 1205, 1205, 1467, 1499, 1468, 1499, 1208, 1499,
     1257, 1257, 1257, 1499, 1206, 1469, 1258, 1207, 1207, 1207,
     1259, 1259, 1259, 1499, 1499, 1499, 1260, 1499, 1470, 1474,
     1208, 1251, 1262, 1262, 1499, 1475, 1499, 1499, 1499, 1476,
     1499, 1499, 1484, 1499, 1252, 1499, 1499, 1499,  868, 1499,

     1499, 1499, 1499,  867, 1499,  866, 1499,  865, 1499,  851,
     1499, 1205, 1215, 1215,  847,  846, 1261, 1207, 1216, 1216,
      845, 1499,  841, 1499, 1206, 1499, 1263, 1499,  837, 1499,
     1208, 1499, 1266, 1268, 1268, 1268,  834,  833, 1265,  832,
      831, 1264, 1271, 1271, 1271,  830,  829, 1269, 1228, 1228,
     1228, 1232, 1232, 1232,  828,  827, 1272, 1299, 1299, 1299,
      826,  825, 1229, 1251, 1251, 1251, 1301, 1301, 1301,  824,
     1300,  823, 1302, 1257, 1257, 1257, 1252,  822,  821, 1258,
     1259, 1259, 1259, 1299, 1307, 1307, 1260,  820, 1251, 1262,
     1262,  819,  818, 1499, 1499, 1499, 1300, 1499, 1499, 1499,

     1499, 1252, 1499,  817, 1499, 1499, 1499,  816, 1499, 1499,
     1499, 1499,  815, 1499,  814, 1499,  810, 1499,  809, 1499,
     1499,  808, 1499,  807, 1499, 1268, 1268, 1268,  806, 1308,
     1313, 1313, 1313, 1271, 1271, 1271, 1315, 1315, 1315, 1269,
      804,  803, 1309, 1320, 1320, 1320,  802, 1272, 1323, 1323,
     1323, 1280, 1280, 1280,  801,  800, 1311, 1321, 1310, 1330,
     1330, 1330, 1324, 1299, 1299, 1299, 1341, 1341, 1341, 1301,
     1301, 1301, 1342, 1331, 1499, 1302, 1300, 1345, 1345, 1345,
      799, 1299, 1307, 1307, 1499,  798, 1499, 1499, 1499,  797,
     1346, 1499,  796, 1499, 1300, 1499, 1499, 1499,  795, 1499,

      794, 1499, 1345, 1350, 1350,  793, 1499,  792, 1499,  791,
     1499,  790, 1499,  789, 1499, 1346, 1499, 1348, 1352, 1352,
     1352, 1313, 1313, 1313, 1315, 1315, 1315, 1320, 1320, 1320,
      788,  787, 1353,  776,  775, 1351, 1359, 1359, 1359,  774,
      773, 1321,  772, 1349, 1323, 1323, 1323, 1361, 1361, 1361,
     1363, 1363, 1363, 1366, 1366, 1366,  771,  770, 1324, 1330,
     1330, 1330,  769,  768, 1364,  767,  766, 1367, 1369, 1369,
     1369,  765,  764, 1331, 1341, 1341, 1341, 1345, 1345, 1345,
     1342, 1379, 1379, 1379, 1499, 1499,  763, 1380,  762,  761,
     1346, 1345, 1350, 1350, 1499, 1499, 1499, 1499, 1499, 1499,

     1499, 1499,  760, 1499, 1346, 1499, 1352, 1352, 1352,  759,
     1499,  758, 1499,  757, 1499, 1385, 1385, 1385,  756,  755,
     1353, 1390, 1390, 1390, 1383, 1359, 1359, 1359, 1384, 1392,
     1392, 1392, 1382,  754,  753, 1391, 1361, 1361, 1361, 1363,
     1363, 1363,  752, 1393, 1395, 1395, 1395, 1366, 1366, 1366,
     1397, 1397, 1397, 1364, 1369, 1369, 1369, 1379, 1379, 1379,
     1499, 1367,  751, 1380,  750, 1499, 1499, 1385, 1385, 1385,
     1499,  749, 1499,  748, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1412, 1412, 1412, 1390, 1390, 1390, 1414, 1414, 1414,
     1392, 1392, 1392, 1407,  747, 1413,  746,  745, 1391, 1415,

     1415, 1415,  744,  743, 1393, 1416, 1416, 1416, 1395, 1395,
     1395, 1418, 1418, 1418, 1406,  740, 1408, 1499, 1499, 1417,
     1397, 1397, 1397, 1499,  739, 1419,  737, 1499, 1499, 1499,
     1499, 1499, 1499, 1499,  736, 1499,  735, 1499, 1430, 1430,
     1430, 1432, 1432, 1432,  731, 1426, 1412, 1412, 1412, 1434,
     1434, 1434, 1431,  730,  729, 1433, 1414, 1414, 1414,  728,
     1413, 1415, 1415, 1415, 1416, 1416, 1416,  727, 1427, 1435,
     1435, 1435, 1418, 1418, 1418, 1499,  726, 1428, 1417, 1436,
     1436, 1436, 1499, 1499,  721, 1499, 1419, 1499,  720, 1499,
      719,  718, 1499, 1499, 1499, 1499, 1499, 1499, 1445, 1445,

     1445, 1430, 1430, 1430, 1447, 1447, 1447, 1432, 1432, 1432,
      717,  715, 1446,  714,  713, 1431, 1448, 1448, 1448,  712,
      710, 1433, 1434, 1434, 1434, 1442, 1444, 1435, 1435, 1435,
     1436, 1436, 1436, 1499, 1499,  699, 1443,  698,  693, 1499,
     1445, 1445, 1445, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
      692, 1499,  691, 1499, 1446, 1457, 1457, 1457, 1447, 1447,
     1447, 1448, 1448, 1448, 1499, 1457, 1457, 1457,  690, 1499,
      689,  688, 1499,  687, 1499,  686, 1499, 1455, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1454, 1456,  685,
     1499, 1499, 1499,  684, 1499, 1499,  683, 1499,  682, 1499,

      681, 1499, 1499, 1499,  680, 1499,  679, 1463, 1477, 1477,
     1477,  678, 1499, 1499, 1499,  675, 1499,  674, 1464,  673,
     1465, 1478,  672, 1499,  671, 1499,  670, 1499,  669, 1471,
     1485, 1485, 1485, 1472,  668, 1477, 1481, 1481, 1482, 1482,
     1482,  667,  666, 1486, 1473, 1499,  665, 1499, 1478, 1499,
     1479,  664, 1483,  658, 1477, 1477, 1477, 1487, 1487, 1487,
     1499,  657,  653, 1488,  652,  651, 1480, 1478,  650,  649,
     1499,  648, 1499,  647, 1499, 1485, 1490, 1490,  642,  641,
     1477, 1481, 1481,  632,  631, 1499,  628, 1499, 1486, 1499,
     1499,  617, 1499, 1478, 1499, 1482, 1482, 1482, 1491, 1491,

     1491, 1492, 1492, 1492, 1485, 1485, 1485,  611,  608, 1483,
     1494, 1494, 1494, 1489, 1493,  607, 1495, 1486, 1487, 1487,
     1487, 1492, 1496, 1496, 1488,  606, 1485, 1490, 1490,  603,
      602, 1499,  601, 1499, 1493, 1499, 1499,  600, 1499, 1486,
     1499, 1491, 1491, 1491, 1492, 1492, 1492, 1497, 1497, 1497,
     1494, 1494, 1494, 1498,  599,  598, 1495, 1493, 1492, 1496,
     1496, 1497, 1497, 1497,  597,  596,  595, 1498, 1499,  594,
     1499, 1493, 1499,   23,   23,   23,   23,   23,   31,   31,
       31,   31,   31,   33,   33,   33,   33,   33,   34,   34,
       34,   34,   34,   32,   32,   32,   32,   32,   35,   35,

       35,   35,   35,   38,   38,   38,   38,   38,   53,  593,
      592,   53,   88,   88,   88,   88,   89,   89,  585,   89,
       89,   90,   90,   90,  584,   90,  583,  582,  581,  578,
      577,  576,  575,  574,  573,  571,  570,  569,  568,  567,
      566,  565,  563,  562,  561,  560,  559,  558,  557,  556,
      555,  546,  545,  544,  541,  540,  539,  538,  537,  536,
      535,  534,  533,  532,  531,  530,  529,  528,  527,  526,
      525,  524,  523,  522,  521,  520,  519,  518,  517,  516,
      515,  513,  512,  511,  510,  509,  507,  506,  502,  501,
      500,  499,  498,  497,  496,  493,  492,  491,  490,  489,

      488,  487,  486,  485,  476,  475,  474,  473,  472,  471,
      470,  469,  468,  467,  466,  465,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  451,
      450,  449,  448,  447,  446,  445,  443,  440,  439,  438,
      437,  436,  433,  432,  431,  428,  427,  425,  424,  423,
      422,  421,  420,  418,  417,  416,  415,  414,  413,  412,
      411,  410,  399,  398,  397,  393,  392,  391,  390,  389,
      388,  387,  386,  385,  384,  383,  382,  381,  379,  378,
      377,  376,  375,  374,  373,  372,  371,  370,  369,  368,
      367,  366,  365,  364,  363,  359,  358,  357,  356,  355,

      354,  353,  352,  351,  350,  349,  348,  347,  340,  339,
      335,  334,  333,  332,  331,  330,  329,  316,  315,  314,
      313,  310,  309,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  291,  287,
      286,  285,  284,  283,  282,  281,  280,  279,  278,  275,
      274,  273,  272,  271,  270,  269,  268,  265,  264,  263,
      262,  261,  260,  259,  258,  257,  253,  252,  251,  250,
      249,  176,  239,  238,  237,  236,  235,  234,  233,  230,
      229,  228,  227,  226,  225,  224,  223,  222,  219,  218,
      217,  216,  215,  214,  213,  212,  211,  207,  206,  205,

      204,  203,  202,  201,  200,  196,  186,  185,  184,  183,
      182,  179,  178,  176,  177,  166,  165,  164,  163,  162,
      161,  160,  159,  158,  157,  155,  154,  153,  149,  139,
      138,  137,  136,  135,  132,  116,  113,  101,  100,   99,
       94,   93,   66,   92,   91,   66, 1499,   32,   32,   32,
       32,   32,   32,   17, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499
    } ;

static yyconst flex_int16_t yy_chk[3418] =
    {   0,
        1,    1,    1,    1,    1,    1,   15,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   13,   14,   16,
       15,    0,   23,    1,   13,   14,   24,  593,   24,  593,
       25,   43,   23,   16,   23,   53,   23,   48,   47,   24,
       25,   25,   25,   43,   25,   53,   54,   53,   73,   53,
       25,   47,   73,   79,  791,  118,   54,   48,   54,  118,
       54,   79,    1,    2,    2,    2,    2,    2,    2,   25,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       27,  147,  147,   30,   80,   54,    2,   61,   81,   27,
       27,   27,   27,   30,   27,   30,   61,   30,   80,   55,

       27,   80,   80,   80,  124,   81,   56,  126,  538,   55,
       30,   55,  124,   55,  538,   61,   56,  792,   56,   27,
       56,   57,  194,  194,  126,    2,   19,   19,   19,   59,
       83,   57,   83,   57,   58,   57,   19,   55,   19,   59,
       19,   59,   56,   59,   58,  793,   58,   62,   58,   62,
      794,  111,   83,  112,  112,   56,   57,  112,   62,  795,
      111,   60,  203,  203,   19,   59,  293,  293,  293,   19,
      615,   60,   19,   60,   19,   60,   57,   62,   64,  111,
       19,   19,   19,   20,   20,   20,   58,  615,   64,   64,
       64,  796,   64,   20,   65,   20,   60,   20,   64,   87,

      104,   65,   65,  797,   65,   65,   65,  798,   65,   87,
      104,   87,  104,   87,  104,  137,  799,   64,  102,  800,
       87,   20,  137,  521,  521,  137,   20,  801,  102,   20,
      102,   20,  102,   67,  104,  559,  559,   20,   20,   20,
       21,   21,   21,   67,   67,   67,   68,   67,  803,  103,
       21,  804,   21,   67,   21,   68,   68,   68,   68,  103,
       68,  103,  642,  103,  642,  105,   68,  806,  214,  214,
      106,  102,   67,  125,  807,  105,  214,  105,   21,  105,
      106,  808,  106,   21,  106,   68,   21,  125,   21,  107,
      125,  125,  125,  809,   21,   21,   21,   28,  108,  107,

      614,  107,  105,  107,   28,  815,  816,  103,  108,   28,
      108,  109,  108,  232,  232,  232,  110,  106,  614,  232,
      128,  109,  128,  109,  817,  109,  110,  818,  110,  819,
      110,   28,   28,  108,   28,   28,  107,   28,   28,  820,
       28,   28,  128,   28,   28,  109,   28,   28,   28,   28,
       28,   70,   70,  821,   70,   70,  822,   70,   70,  823,
       70,   70,  110,   70,   70,  115,   70,   70,   70,   70,
       70,  156,  307,  307,  307,  115,  115,  115,  307,  115,
      167,  156,  824,  156,  825,  156,  159,  159,  159,  827,
      167,  828,  167,  829,  167,  168,  168,  168,  830,  159,

      169,  170,  326,  326,  326,  168,  171,  168,  168,  168,
      169,  170,  169,  170,  169,  170,  171,  167,  171,  172,
      171,  831,  260,  260,  337,  337,  337,  173,  174,  172,
      260,  172,  832,  172,  175,  169,  170,  173,  174,  173,
      174,  173,  174,  184,  175,  171,  175,  833,  175,  840,
      184,  841,  240,  184,  844,  172,  231,  231,  231,  235,
      235,  235,  240,  174,  240,  845,  240,  846,  847,  231,
      850,  242,  235,  851,  866,  173,  867,  868,  241,  241,
      241,  242,  869,  242,  243,  242,  870,  871,  241,  175,
      241,  241,  241,  245,  243,  872,  243,  873,  243,  244,

      244,  244,  874,  245,  240,  245,  246,  245,  875,  244,
      876,  244,  244,  244,  247,  248,  246,  242,  246,  878,
      246,  249,  249,  249,  247,  248,  247,  248,  247,  248,
      879,  882,  245,  883,  884,  249,  885,  886,  243,  257,
      257,  257,  261,  261,  261,  311,  311,  311,  275,  275,
      275,  892,  893,  257,  248,  894,  261,  895,  311,  246,
      247,  257,  275,  312,  312,  312,  317,  312,  896,  312,
      316,  316,  316,  897,  249,  249,  317,  898,  317,  899,
      317,  261,  318,  316,  900,  319,  903,  899,  320,  320,
      320,  275,  318,  321,  318,  319,  318,  319,  320,  319,

      320,  320,  320,  321,  322,  321,  905,  321,  906,  317,
      323,  325,  325,  325,  322,  907,  322,  908,  322,  916,
      323,  917,  323,  920,  323,  325,  704,  923,  319,  324,
      324,  324,  336,  336,  336,  926,  704,  318,  704,  324,
      704,  324,  324,  324,  940,  321,  336,  344,  344,  344,
      345,  345,  345,  941,  322,  348,  348,  348,  352,  352,
      352,  344,  358,  358,  358,  323,  360,  360,  360,  348,
      704,  942,  352,  361,  361,  361,  358,  380,  380,  380,
      360,  394,  394,  394,  402,  394,  943,  394,  400,  400,
      400,  401,  401,  401,  402,  944,  402,  401,  402,  403,

      404,  400,  409,  409,  409,  405,  406,  945,  946,  403,
      404,  403,  404,  403,  404,  405,  406,  405,  406,  405,
      406,  419,  419,  419,  948,  407,  953,  420,  420,  420,
      408,  408,  408,  405,  402,  407,  956,  407,  403,  407,
      408,  420,  408,  408,  408,  426,  426,  426,  957,  404,
      958,  429,  429,  429,  947,  406,  430,  430,  430,  431,
      431,  431,  947,  959,  407,  429,  434,  434,  434,  435,
      435,  435,  966,  431,  441,  441,  441,  442,  442,  442,
      434,  444,  444,  444,  472,  472,  472,  967,  441,  476,
      476,  476,  477,  477,  477,  479,  968,  472,  477,  495,

      495,  495,  476,  481,  482,  479,  969,  479,  970,  479,
      480,  480,  480,  481,  482,  481,  482,  481,  482,  483,
      480,  963,  480,  480,  480,  484,  484,  484,  963,  483,
      971,  483,  972,  483,  975,  484,  976,  484,  484,  484,
      494,  494,  494,  977,  482,  503,  503,  503,  981,  479,
      983,  481,  984,  986,  494,  504,  504,  504,  505,  505,
      505,  508,  508,  508,  513,  513,  513,  523,  523,  504,
      989,  483,  514,  514,  514,  990, 1009,  523,  513,  542,
      542,  542, 1010,  523,  543,  543,  543, 1011,  545,  974,
      543,  985,  542,  545,  547,  547,  547,  974,  545,  545,

      548,  548,  548,  549,  545,  985,  548,  547,  550,  550,
      550, 1012, 1013,  549, 1014,  549,  551,  549,  550,  553,
      550,  550,  550, 1015,  552, 1006,  551, 1024,  551,  553,
      551,  553, 1006,  553,  552, 1024,  552, 1025,  552,  564,
      564,  564,  552,  556,  556,  556,  549,  552,  551,  554,
      554,  554,  552,  552,  560,  560,  560,  556,  552,  554,
     1026,  554,  554,  554,  561,  561, 1027, 1029,  560,  565,
      565,  565,  921,  553,  561,  566,  566,  566, 1030, 1031,
      561, 1032,  921,  565,  572,  572,  572, 1033,  921,  566,
      575,  575,  575,  578,  578,  578,  579,  579,  579,  580,

      580,  580, 1034, 1035,  575, 1036, 1037,  578, 1038, 1039,
      579,  609,  609,  609,  630,  630,  630,  609,  620, 1040,
      578,  618,  618,  618,  621,  622,  578,  618,  620,  575,
      620,  623,  620, 1041,  621,  622,  621,  622,  621,  622,
      624,  623, 1042,  623, 1043,  623,  625,  626, 1046, 1047,
      624, 1048,  624, 1049,  624, 1050,  625,  626,  625,  626,
      625,  626, 1053,  627,  629,  629,  629,  620, 1054, 1068,
      635,  635,  635,  627,  622,  627,  624,  627,  629, 1069,
      623,  625,  626,  621,  635,  636,  636,  636,  643,  643,
      643,  644,  644,  644,  624,  627, 1074, 1075,  625,  645,

      645,  645,  643,  646,  646,  646,  653,  653,  653,  654,
      654,  654, 1076,  645,  655,  655,  655,  659,  659,  659,
      653, 1077, 1078,  654,  660,  660,  660,  663,  663,  663,
      700,  659,  664,  664,  664,  701, 1079, 1080,  702, 1086,
      700,  703,  700, 1087,  700,  701,  664,  701,  702,  701,
      702,  703,  702,  703,  705,  703, 1088,  706, 1089, 1090,
      707,  711,  711,  711,  705, 1091,  705,  706,  705,  706,
      707,  706,  707, 1092,  707, 1093, 1094,  703,  700,  708,
      709,  716,  716,  716, 1095,  701,  702, 1096, 1097,  708,
      709,  708,  709,  708,  709, 1098,  705,  724,  724,  724,

      725,  725,  725,  732,  732,  732,  733,  733,  733,  707,
     1099,  706,  734,  734,  734, 1100, 1101,  732,  738,  738,
      738,  741,  741,  741,  742,  742,  742,  743,  743,  743,
     1103,  708,  767,  767,  767,  741,  769,  769,  769,  709,
     1104,  743,  771,  771,  771,  767,  777,  777,  777,  769,
      775,  775,  775, 1105, 1108,  771,  777,  778,  777,  777,
      777, 1109, 1110,  775,  779,  779,  779,  778, 1111,  778,
      780,  778, 1112, 1113,  779, 1114,  779,  779,  779, 1123,
      780,  771,  780, 1124,  780,  781,  781,  781, 1127,  769,
      782,  783,  780,  775, 1128,  781,  778,  781,  781,  781,

      782,  783,  782,  783,  782,  783,  784, 1129, 1130,  785,
      785,  785,  802,  802,  802, 1131,  784,  779,  784,  785,
      784,  785,  785,  785,  781,  786,  802, 1132, 1133,  782,
      805,  805,  805,  783, 1135,  786, 1136,  786, 1138,  786,
      810,  810,  810,  784,  811,  811,  811,  812,  812,  812,
     1139, 1140,  785, 1141,  810,  813,  813,  813,  835,  835,
      835,  812,  836,  836,  836, 1142,  836, 1143,  836, 1145,
     1144,  835,  837,  837,  837,  786,  838,  838,  838, 1149,
      839,  839,  839, 1150, 1151,  837,  839, 1144, 1152,  838,
      842,  842,  842,  843,  843,  843,  848,  848,  848,  843,

      849,  849,  849,  842, 1153, 1154,  849, 1146, 1147,  848,
      852,  852,  852, 1155, 1156,  853,  853,  853, 1146, 1147,
      852, 1157,  852,  852,  852,  853, 1158,  853,  853,  853,
      854,  854,  854, 1169, 1170,  855,  856,  881,  881,  881,
      854, 1171,  854,  854,  854,  855,  856,  855,  856,  855,
      856,  857,  857,  857, 1172,  856,  858,  859,  889,  889,
      889,  857,  860,  857,  857,  857,  858,  859,  858,  859,
      858,  859,  860,  861,  860, 1174,  860, 1178,  862,  862,
      862, 1179, 1182,  861,  863,  861, 1173,  861,  862,  855,
      862,  862,  862,  858,  863, 1183,  863, 1184,  863,  865,

      865,  865, 1186, 1173,  864, 1188,  877,  877,  877,  859,
     1189, 1190,  861,  865,  864,  860,  864, 1191,  864,  863,
      877,  880,  880,  880,  887,  887,  887,  888,  888,  888,
      890,  890,  890, 1192, 1193,  880, 1175, 1194,  887, 1197,
     1198,  888, 1199,  864,  909,  909,  909, 1175,  909, 1201,
      909,  912,  912,  912,  913,  913,  913, 1202,  913, 1203,
      913,  914,  914,  914,  912, 1204, 1217,  914,  918,  918,
      918,  922,  922,  922,  918,  924,  924,  924,  927,  927,
      927,  924,  929, 1219,  922,  928,  928,  928, 1221, 1222,
      930,  927,  929,  931,  929,  928,  929,  928,  928,  928,

      930,  932,  930,  931,  930,  931, 1176,  931,  933,  933,
      933,  932, 1195,  932,  934,  932, 1223, 1176,  933,  932,
      933,  933,  933, 1195,  934, 1196,  934,  935,  934,  932,
      938,  938,  938, 1224,  929,  932, 1196,  935, 1225,  935,
     1226,  935, 1227,  930,  936,  936,  936,  931,  937,  937,
      937,  939,  939,  939,  936, 1230,  936,  936,  936,  949,
      949,  949,  937,  935, 1233,  939, 1230,  934,  950,  950,
      950, 1234, 1235,  949,  951,  951,  951,  952,  952,  952,
     1236, 1237,  950,  954,  954,  954,  955,  955,  955, 1238,
     1239,  952,  960,  960,  960,  961,  961,  961, 1240, 1231,

      955,  962,  962,  962, 1242, 1244,  960,  978,  978,  978,
     1231,  978, 1245,  978,  982,  982,  982,  987,  987,  987,
      988,  988,  988,  991,  991,  991,  988,  982,  993, 1246,
      987,  992,  992,  992, 1247,  992,  991,  992,  993, 1248,
      993, 1253,  993,  994,  994,  994, 1254, 1255,  995, 1003,
     1003, 1003, 1256,  994,  996,  994,  994,  994,  995,  997,
      995, 1267,  995,  993,  996,  998,  996, 1270,  996,  997,
     1273,  997, 1274,  997, 1000,  998, 1275,  998, 1276,  998,
      999,  999,  999, 1278, 1000, 1281, 1000, 1001, 1000, 1282,
      999,  995,  999,  999,  999,  997, 1283, 1001, 1284, 1001,

      998, 1001, 1285,  996, 1002, 1002, 1002, 1288, 1289,  997,
     1004, 1004, 1004, 1290, 1002, 1291, 1002, 1002, 1002, 1005,
     1005, 1005, 1292, 1293, 1004, 1294, 1296, 1000, 1007, 1007,
     1007, 1298, 1303, 1001, 1008, 1008, 1008, 1016, 1016, 1016,
     1304, 1306, 1007, 1017, 1017, 1017, 1314, 1316, 1008, 1317,
     1318, 1016, 1018, 1018, 1018, 1019, 1019, 1019, 1020, 1020,
     1020, 1021, 1021, 1021, 1022, 1022, 1022, 1319, 1322, 1019,
     1023, 1023, 1023, 1325, 1327, 1021, 1329, 1332, 1022, 1028,
     1028, 1028, 1044, 1044, 1044, 1045, 1045, 1045, 1051, 1051,
     1051, 1045, 1333, 1058, 1051, 1044, 1055, 1055, 1055, 1334,

     1055, 1060, 1055, 1058, 1335, 1058, 1338, 1058, 1059, 1059,
     1059, 1060, 1339, 1060, 1061, 1060, 1340, 1062, 1059, 1343,
     1059, 1059, 1059, 1063, 1061, 1344, 1061, 1062, 1061, 1062,
     1064, 1062, 1347, 1063, 1354, 1063, 1058, 1063, 1119, 1065,
     1064, 1355, 1064, 1356, 1064, 1357, 1066, 1362, 1119, 1065,
     1119, 1065, 1119, 1065, 1365, 1368, 1066, 1060, 1066, 1370,
     1066, 1062, 1061, 1067, 1067, 1067, 1070, 1070, 1070, 1071,
     1071, 1071, 1072, 1072, 1072, 1371, 1372, 1063, 1065, 1376,
     1070, 1119, 1064, 1377, 1378, 1066, 1072, 1073, 1073, 1073,
     1081, 1081, 1081, 1082, 1082, 1082, 1083, 1083, 1083, 1084,

     1084, 1084, 1085, 1085, 1085, 1106, 1106, 1106, 1115, 1116,
     1083, 1106, 1381, 1386, 1117, 1118, 1387, 1388, 1115, 1116,
     1115, 1116, 1115, 1116, 1117, 1118, 1117, 1118, 1117, 1118,
     1120, 1121, 1125, 1125, 1125, 1398, 1399, 1122, 1402, 1403,
     1120, 1121, 1120, 1121, 1120, 1121, 1404, 1122, 1116, 1122,
     1405, 1122, 1409, 1420, 1118, 1422, 1115, 1126, 1126, 1126,
     1134, 1134, 1134, 1137, 1137, 1137, 1423, 1117, 1159, 1159,
     1159, 1424, 1425, 1120, 1160, 1160, 1160, 1137, 1437, 1161,
     1438, 1159, 1162, 1439, 1121, 1163, 1440, 1160, 1164, 1161,
     1122, 1161, 1162, 1161, 1162, 1163, 1162, 1163, 1164, 1163,

     1164, 1165, 1164, 1177, 1177, 1177, 1166, 1180, 1180, 1180,
     1441, 1165, 1449, 1165, 1450, 1165, 1166, 1177, 1166, 1451,
     1166, 1180, 1181, 1181, 1181, 1164, 1229, 1229, 1229, 1452,
     1167, 1167, 1167, 1161, 1453, 1162, 1200, 1200, 1200, 1163,
     1167, 1166, 1167, 1167, 1167, 1168, 1168, 1168, 1458, 1200,
     1165, 1205, 1205, 1205, 1459, 1168, 1460, 1168, 1168, 1168,
     1206, 1206, 1206, 1209, 1205, 1461, 1206, 1207, 1207, 1207,
     1208, 1208, 1208, 1209, 1211, 1209, 1208, 1209, 1462, 1466,
     1207, 1210, 1210, 1210, 1211, 1468, 1211, 1212, 1211, 1469,
     1213, 1210, 1475, 1210, 1210, 1210, 1214, 1212,  790, 1212,

     1213, 1212, 1213,  789, 1213,  788, 1214,  787, 1214,  776,
     1214, 1215, 1215, 1215,  774,  773, 1209, 1216, 1216, 1216,
      772, 1215,  770, 1215, 1215, 1215, 1211, 1216,  768, 1216,
     1216, 1216, 1214, 1218, 1218, 1218,  765,  764, 1213,  763,
      762, 1212, 1220, 1220, 1220,  761,  760, 1218, 1228, 1228,
     1228, 1232, 1232, 1232,  758,  757, 1220, 1250, 1250, 1250,
      756,  755, 1228, 1251, 1251, 1251, 1252, 1252, 1252,  754,
     1250,  753, 1252, 1257, 1257, 1257, 1251,  752,  751, 1257,
     1259, 1259, 1259, 1261, 1261, 1261, 1259,  750, 1262, 1262,
     1262,  749,  748, 1261, 1263, 1261, 1261, 1261, 1262, 1264,

     1262, 1262, 1262,  747, 1263, 1265, 1263,  746, 1263, 1264,
     1266, 1264,  745, 1264,  744, 1265,  740, 1265,  739, 1265,
     1266,  737, 1266,  736, 1266, 1268, 1268, 1268,  735, 1263,
     1269, 1269, 1269, 1271, 1271, 1271, 1272, 1272, 1272, 1268,
      731,  730, 1264, 1277, 1277, 1277,  729, 1271, 1279, 1279,
     1279, 1280, 1280, 1280,  728,  727, 1266, 1277, 1265, 1286,
     1286, 1286, 1279, 1299, 1299, 1299, 1300, 1300, 1300, 1301,
     1301, 1301, 1300, 1286, 1308, 1301, 1299, 1305, 1305, 1305,
      726, 1307, 1307, 1307, 1308,  723, 1308, 1309, 1308,  722,
     1305, 1307,  721, 1307, 1307, 1307, 1311, 1309,  720, 1309,

      719, 1309, 1310, 1310, 1310,  718, 1311,  717, 1311,  715,
     1311,  714, 1310,  713, 1310, 1310, 1310, 1308, 1312, 1312,
     1312, 1313, 1313, 1313, 1315, 1315, 1315, 1320, 1320, 1320,
      712,  710, 1312,  699,  698, 1311, 1321, 1321, 1321,  697,
      696, 1320,  695, 1309, 1323, 1323, 1323, 1324, 1324, 1324,
     1326, 1326, 1326, 1328, 1328, 1328,  694,  693, 1323, 1330,
     1330, 1330,  692,  691, 1326,  690,  688, 1328, 1331, 1331,
     1331,  687,  686, 1330, 1341, 1341, 1341, 1345, 1345, 1345,
     1341, 1346, 1346, 1346, 1348, 1349,  685, 1346,  684,  683,
     1345, 1350, 1350, 1350, 1348, 1349, 1348, 1349, 1348, 1349,

     1351, 1350,  682, 1350, 1350, 1350, 1352, 1352, 1352,  681,
     1351,  680, 1351,  679, 1351, 1353, 1353, 1353,  678,  677,
     1352, 1358, 1358, 1358, 1349, 1359, 1359, 1359, 1351, 1360,
     1360, 1360, 1348,  676,  675, 1358, 1361, 1361, 1361, 1363,
     1363, 1363,  674, 1360, 1364, 1364, 1364, 1366, 1366, 1366,
     1367, 1367, 1367, 1363, 1369, 1369, 1369, 1379, 1379, 1379,
     1382, 1366,  673, 1379,  672, 1383, 1384, 1385, 1385, 1385,
     1382,  671, 1382,  670, 1382, 1383, 1384, 1383, 1384, 1383,
     1384, 1389, 1389, 1389, 1390, 1390, 1390, 1391, 1391, 1391,
     1392, 1392, 1392, 1383,  669, 1389,  668,  667, 1390, 1393,

     1393, 1393,  666,  665, 1392, 1394, 1394, 1394, 1395, 1395,
     1395, 1396, 1396, 1396, 1382,  662, 1384, 1406, 1407, 1394,
     1397, 1397, 1397, 1408,  661, 1396,  658, 1406, 1407, 1406,
     1407, 1406, 1407, 1408,  657, 1408,  656, 1408, 1410, 1410,
     1410, 1411, 1411, 1411,  652, 1406, 1412, 1412, 1412, 1413,
     1413, 1413, 1410,  651,  650, 1411, 1414, 1414, 1414,  649,
     1412, 1415, 1415, 1415, 1416, 1416, 1416,  648, 1407, 1417,
     1417, 1417, 1418, 1418, 1418, 1426,  647, 1408, 1416, 1419,
     1419, 1419, 1427, 1428,  641, 1426, 1418, 1426,  640, 1426,
      639,  638, 1427, 1428, 1427, 1428, 1427, 1428, 1429, 1429,

     1429, 1430, 1430, 1430, 1431, 1431, 1431, 1432, 1432, 1432,
      637,  634, 1429,  633,  632, 1430, 1433, 1433, 1433,  631,
      628, 1432, 1434, 1434, 1434, 1426, 1428, 1435, 1435, 1435,
     1436, 1436, 1436, 1442, 1443,  617, 1427,  616,  613, 1444,
     1445, 1445, 1445, 1442, 1443, 1442, 1443, 1442, 1443, 1444,
      612, 1444,  611, 1444, 1445, 1446, 1446, 1446, 1447, 1447,
     1447, 1448, 1448, 1448, 1454, 1457, 1457, 1457,  608, 1455,
      607,  605, 1456,  604, 1454,  603, 1454, 1443, 1454, 1455,
     1463, 1455, 1456, 1455, 1456, 1464, 1456, 1442, 1444,  602,
     1463, 1465, 1463,  601, 1463, 1464,  599, 1464,  598, 1464,

      597, 1465, 1471, 1465,  596, 1465,  595, 1454, 1470, 1470,
     1470,  594, 1471, 1472, 1471,  592, 1471,  591, 1455,  590,
     1456, 1470,  589, 1472,  588, 1472,  587, 1472,  586, 1463,
     1476, 1476, 1476, 1464,  585, 1473, 1473, 1473, 1474, 1474,
     1474,  584,  583, 1476, 1465, 1473,  582, 1473, 1473, 1473,
     1471,  581, 1474,  577, 1477, 1477, 1477, 1478, 1478, 1478,
     1479,  576,  574, 1478,  573,  571, 1472, 1477,  570,  569,
     1479,  568, 1479,  567, 1479, 1480, 1480, 1480,  563,  562,
     1481, 1481, 1481,  558,  557, 1480,  555, 1480, 1480, 1480,
     1481,  546, 1481, 1481, 1481, 1482, 1482, 1482, 1483, 1483,

     1483, 1484, 1484, 1484, 1485, 1485, 1485,  544,  541, 1482,
     1486, 1486, 1486, 1479, 1484,  540, 1486, 1485, 1487, 1487,
     1487, 1489, 1489, 1489, 1487,  539, 1490, 1490, 1490,  537,
      536, 1489,  535, 1489, 1489, 1489, 1490,  534, 1490, 1490,
     1490, 1491, 1491, 1491, 1492, 1492, 1492, 1493, 1493, 1493,
     1494, 1494, 1494, 1493,  533,  532, 1494, 1492, 1496, 1496,
     1496, 1497, 1497, 1497,  531,  530,  529, 1497, 1496,  528,
     1496, 1496, 1496, 1500, 1500, 1500, 1500, 1500, 1501, 1501,
     1501, 1501, 1501, 1502, 1502, 1502, 1502, 1502, 1503, 1503,
     1503, 1503, 1503, 1504, 1504, 1504, 1504, 1504, 1505, 1505,

     1505, 1505, 1505, 1506, 1506, 1506, 1506, 1506, 1507,  525,
      524, 1507, 1508, 1508, 1508, 1508, 1509, 1509,  520, 1509,
     1509, 1510, 1510, 1510,  519, 1510,  517,  516,  515,  512,
      511,  510,  509,  507,  506,  502,  501,  500,  499,  498,
      497,  496,  493,  492,  491,  490,  489,  488,  487,  486,
      485,  475,  474,  473,  471,  470,  469,  467,  466,  465,
      464,  463,  462,  461,  460,  459,  458,  457,  456,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      443,  440,  439,  438,  437,  436,  433,  432,  428,  427,
      425,  424,  423,  422,  421,  418,  417,  416,  415,  414,

      413,  412,  411,  410,  399,  398,  397,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  379,
      378,  377,  376,  375,  374,  373,  371,  370,  369,  368,
      367,  366,  365,  364,  363,  362,  359,  357,  356,  355,
      354,  353,  351,  350,  349,  347,  346,  343,  342,  341,
      340,  339,  338,  335,  334,  333,  332,  331,  330,  329,
      328,  327,  315,  314,  313,  310,  309,  306,  305,  304,
      302,  301,  300,  299,  298,  296,  295,  294,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  274,  273,  272,  271,  270,

      269,  268,  267,  266,  265,  264,  263,  262,  259,  258,
      256,  255,  254,  253,  252,  251,  250,  239,  238,  237,
      236,  234,  233,  230,  229,  228,  227,  226,  225,  224,
      223,  222,  221,  220,  219,  218,  217,  216,  215,  213,
      212,  211,  210,  209,  208,  207,  206,  205,  204,  202,
      201,  200,  199,  198,  197,  196,  195,  193,  192,  191,
      190,  189,  188,  187,  186,  185,  183,  182,  181,  180,
      179,  176,  166,  165,  164,  163,  162,  161,  160,  158,
      155,  154,  153,  152,  151,  150,  149,  148,  146,  145,
      144,  143,  142,  141,  140,  139,  138,  136,  135,  134,

      133,  132,  131,  130,  129,  127,  123,  122,  121,  120,
      119,  117,  116,  114,  113,  101,  100,   99,   98,   97,
       96,   95,   94,   93,   91,   86,   85,   84,   82,   78,
       77,   76,   75,   74,   72,   69,   63,   51,   50,   49,
       46,   45,   42,   40,   37,   26,   17,    8,    7,    6,
        5,    4,    3, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[165] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 
    1, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "OSParseosol.l"
/** @file parseosol.l
 * 
 * @author  Robert Fourer, Gus Gassmann, Jun Ma, Kipp Martin, 
 * @version 1.1, 10/07/2008
 * @since   OS1.1
 *
 * \remarks
 * Copyright (C) 2005-2008, Robert Fourer, Gus Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "OSParseosol.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

 
#include <sstream>  
#include "OSoLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
    
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", osoltext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;








#line 79 "OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 1781 "OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 89 "OSParseosol.l"


 
#line 2027 "OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1500 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3354 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 92 "OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 97 "OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 98 "OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 101 "OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 115 "OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 118 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 119 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 120 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 121 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 122 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 123 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 124 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 125 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 126 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 127 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 128 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 129 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 130 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 131 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 132 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 133 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 134 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 135 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 136 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 137 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 138 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 139 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 140 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFVARATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 141 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFVARATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 142 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(IDXATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 143 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(IDXATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 144 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 145 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 146 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 147 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 148 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 149 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 150 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 151 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 152 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 153 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 154 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOBJATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 155 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOBJATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 156 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 157 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 158 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFCONATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 159 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFCONATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 162 "OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 163 "OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 164 "OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 165 "OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 166 "OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 167 "OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 168 "OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 169 "OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 170 "OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 171 "OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 172 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 173 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 174 "OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 175 "OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 177 "OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 178 "OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 179 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 180 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 181 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 182 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 183 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 184 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 185 "OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 186 "OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 187 "OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 188 "OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 189 "OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 190 "OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 191 "OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 192 "OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 193 "OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 194 "OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 196 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 197 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 198 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZESTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 199 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZEEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 200 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 201 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 203 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 204 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 206 "OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 207 "OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 208 "OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 209 "OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 210 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 211 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 212 "OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 213 "OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 214 "OSParseosol.l"
{YY_PRINT; return(REQDIRSTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 215 "OSParseosol.l"
{YY_PRINT; return(REQDIREND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 216 "OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 217 "OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 218 "OSParseosol.l"
{YY_PRINT; return(MAKEDIRSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 219 "OSParseosol.l"
{YY_PRINT; return(MAKEDIREND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 220 "OSParseosol.l"
{YY_PRINT; return(MAKEFILESTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 221 "OSParseosol.l"
{YY_PRINT; return(MAKEFILEEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 222 "OSParseosol.l"
{YY_PRINT; return(INPUTCOPYFROMSTART);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 223 "OSParseosol.l"
{YY_PRINT; return(INPUTCOPYFROMEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 224 "OSParseosol.l"
{YY_PRINT; return(INPUTCOPYTOSTART);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 225 "OSParseosol.l"
{YY_PRINT; return(INPUTCOPYTOEND);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 226 "OSParseosol.l"
{YY_PRINT; return(INPUTMOVEFROMSTART);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 227 "OSParseosol.l"
{YY_PRINT; return(INPUTMOVEFROMEND);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 228 "OSParseosol.l"
{YY_PRINT; return(INPUTMOVETOSTART);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 229 "OSParseosol.l"
{YY_PRINT; return(INPUTMOVETOEND);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 230 "OSParseosol.l"
{YY_PRINT; return(OUTPUTCOPYFROMSTART);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 231 "OSParseosol.l"
{YY_PRINT; return(OUTPUTCOPYFROMEND);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 232 "OSParseosol.l"
{YY_PRINT; return(OUTPUTCOPYTOSTART);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 233 "OSParseosol.l"
{YY_PRINT; return(OUTPUTCOPYTOEND);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 234 "OSParseosol.l"
{YY_PRINT; return(OUTPUTMOVEFROMSTART);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 235 "OSParseosol.l"
{YY_PRINT; return(OUTPUTMOVEFROMEND);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 236 "OSParseosol.l"
{YY_PRINT; return(OUTPUTMOVETOSTART);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 237 "OSParseosol.l"
{YY_PRINT; return(OUTPUTMOVETOEND);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 238 "OSParseosol.l"
{YY_PRINT; return(DELDIRSTART);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 239 "OSParseosol.l"
{YY_PRINT; return(DELDIREND);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 240 "OSParseosol.l"
{YY_PRINT; return(DELFILESTART);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 241 "OSParseosol.l"
{YY_PRINT; return(DELFILEEND);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 242 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 243 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 244 "OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 245 "OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 248 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONVARIABLESSTART);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 249 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONVARIABLESEND);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 250 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLESSTART);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 251 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLESEND);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 252 "OSParseosol.l"
{YY_PRINT; return(INITIALVARSTART);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 253 "OSParseosol.l"
{YY_PRINT; return(INITIALVAREND);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 254 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONOBJECTIVESSTART);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 255 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONOBJECTIVESEND);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 256 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJVALUESSTART);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 257 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJVALUESEND);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 258 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONINITIALOBJSTART);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 259 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONINITIALOBJEND);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 260 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJBOUNDSSTART);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 261 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJBOUNDSEND);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 262 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONCONSTRAINTSSTART);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 263 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONCONSTRAINTSEND);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 264 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTSSTART);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 265 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTSEND);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 266 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTART);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 267 "OSParseosol.l"
{YY_PRINT; return(INITIALCONEND);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 268 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALSSTART);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 269 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALSEND);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 272 "OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext);   yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 275 "OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 153:
#line 277 "OSParseosol.l"
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 277 "OSParseosol.l"
;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 278 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 280 "OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 157:
#line 282 "OSParseosol.l"
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 282 "OSParseosol.l"
;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 283 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 286 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 287 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 288 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSOLATTRIBUTETEXT);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 290 "OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 302 "OSParseosol.l"
ECHO;
	YY_BREAK
#line 3116 "OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1500 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1500 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1499);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 302 "OSParseosol.l"





