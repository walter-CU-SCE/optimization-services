#line 2 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

#line 4 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osollex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 174
#define YY_END_OF_BUFFER 175
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1496] =
    {   0,
        0,    0,  172,  172,  170,  170,  171,  171,    0,    0,
        0,    0,    0,    0,    0,    0,  175,  173,    1,    1,
        1,    2,  161,  161,    5,  161,    4,  173,    3,  161,
      172,  174,  170,  171,  163,  164,  163,  167,  168,  167,
      161,  161,  161,    0,    3,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,    5,    4,  161,    5,
      161,    6,    0,    0,  166,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      161,  172,  170,  171,    0,  169,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,

      161,  161,    0,  161,    5,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    5,  165,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,    0,
      161,  161,  161,  161,  161,    5,  162,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  153,    0,    0,    0,    0,    0,    0,    0,

       59,    0,    0,    0,  145,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  139,
      161,  161,  161,  161,   22,  161,  161,  161,  161,  161,
      161,    0,   37,   38,  161,  161,  161,  161,  161,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  105,    0,
        0,    0,    0,    0,    0,   95,    0,    0,  161,  161,

      161,    0,   22,  161,  161,  161,  161,    0,  161,  161,
      161,  161,    0,  161,  161,    0,  161,    0,  154,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   60,
        0,    0,    0,    0,    0,    0,    0,  146,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  140,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   71,    0,    0,    0,    0,
        0,    0,    0,   51,   85,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  161,  161,    0,   35,
       36,  161,  161,  161,    0,   27,   28,  161,  161,  161,

        0,   45,   46,  161,    0,   33,   34,  161,    0,  154,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   60,
        0,    0,    0,    0,    0,    0,  146,    0,    0,    0,
       52,    0,    0,    0,    0,  106,    0,    0,    0,    0,
        0,    0,    0,    0,   96,    0,  140,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   55,    0,    0,  161,  161,  161,
      161,  161,  161,  161,    0,  161,  161,    0,   29,   30,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   72,    0,    0,    0,    0,    0,    0,    0,   52,
        0,   86,    0,    0,    0,  106,    0,    0,    0,    0,
        0,    0,    0,   96,    0,    0,    0,   81,    0,    0,
        0,   53,    0,    0,    0,    0,   75,   97,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  129,
        0,    0,   57,    0,    0,    0,    0,  161,  161,  161,
        0,  161,  161,  161,    0,   41,   42,  161,  161,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       72,    0,    0,    0,    0,    0,    0,    0,    0,   86,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   56,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   79,  117,    0,
        0,    0,    0,    0,    0,    0,   77,    0,  161,    0,
      161,    0,   47,   48,  161,  161,    0,  161,  161,  161,
      161,  161,  161,  161,    0,   49,   50,    0,    0,   82,
        0,    0,    0,    0,    0,   54,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   76,    0,   98,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      130,    0,    0,    0,    0,   58,    0,    0,    0,    0,

       56,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  131,    0,   43,   44,  161,  161,
        0,   39,   40,  161,  161,  161,  161,  161,  161,  161,
      161,  161,    0,   82,    0,    0,    0,    0,   54,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   76,   98,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       80,    0,  118,  130,    0,    0,    0,    0,   58,    0,
        0,    0,    0,    0,   78,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  141,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   63,    0,    0,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   80,  118,    0,    0,    0,    0,    0,    0,    0,
        0,   78,    0,  132,  149,    0,    0,    0,  111,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   91,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       65,    0,    0,  161,    0,  161,  161,   20,  161,  161,
      161,   18,  161,  161,  161,  161,  161,  161,   16,  161,
      161,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      142,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   64,    0,    0,  132,  101,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   67,   93,   87,    0,
       61,   83,    0,    0,    0,    0,    0,    0,  159,    0,
        0,   31,   32,  161,    0,   20,  161,  161,   18,  161,
      161,  161,  161,  161,  161,   16,  161,  161,    0,  150,

        0,    0,    0,    0,  112,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   92,    0,    0,  142,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   66,
       64,    0,    0,    0,  125,    0,    0,    0,    0,    0,
        0,    0,    0,   89,    0,    0,    0,    0,  107,    0,
      157,    0,    0,   23,   24,  161,  161,  161,  161,  161,
      161,  161,  161,    9,  161,  161,  161,  161,    0,  150,
        0,  102,    0,    0,  112,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   68,    0,   94,   92,    0,   88,
        0,    0,   62,    0,   84,    0,    0,    0,    0,    0,

        0,   66,    0,  160,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   73,  161,  161,    8,  161,  161,  161,  161,  161,
      161,    9,  161,  161,  161,    0,   25,   26,  102,    0,
        0,    0,  126,    0,    0,    0,    0,    0,    0,    0,
        0,   68,   94,   88,    0,   90,   62,   84,    0,    0,
        0,    0,    0,  108,    0,  160,    0,  158,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  127,    0,    0,  161,    8,  161,  161,  161,  161,
      161,  161,  161,  161,  161,    0,    0,  126,    0,    0,

        0,    0,    0,    0,    0,    0,   90,    0,    0,    0,
        0,  108,    0,  158,    0,   74,    0,    0,    0,    0,
        0,    0,    0,    0,  115,   69,    0,    0,    0,    0,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  128,    0,    0,   74,    0,  109,    0,
        0,  155,    0,    0,    0,    0,    0,  121,    0,    0,
      161,  161,  161,  161,  161,  161,  161,   10,  161,   11,
      161,  161,   12,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  116,    0,   70,    0,    0,  128,    0,

        0,    0,  137,    0,    0,    0,    0,    0,    0,    0,
       99,  161,  161,   13,  161,  161,  161,  161,   10,   11,
      161,   12,    0,    0,  110,    0,    0,    0,  156,    0,
        0,    0,    0,  116,   70,    0,    0,  122,    0,    0,
      123,    0,    0,    0,    0,    0,    0,  103,  161,   14,
       13,  161,  161,  161,  161,  161,    0,  110,    0,  138,
        0,  156,    0,    0,    0,    0,    0,  122,    0,    0,
      100,    0,    0,    0,    0,    0,    0,   14,  161,  161,
      161,    7,  161,  161,    0,  124,  138,    0,    0,    0,
        0,    0,    0,    0,  104,  100,    0,    0,    0,  133,

        0,    0,  161,  161,    7,  161,  161,   21,  124,    0,
        0,    0,    0,    0,    0,  104,    0,  147,  143,    0,
      113,    0,  161,  161,  161,   21,    0,    0,    0,    0,
      134,    0,    0,    0,  151,    0,  119,  161,  161,  161,
        0,    0,  148,    0,  144,  134,    0,    0,  114,    0,
        0,  161,  161,  161,    0,  152,  148,  144,    0,  114,
        0,  120,    0,  161,  161,  161,  152,    0,  120,    0,
      161,  161,  161,    0,  135,  161,  161,  161,    0,  161,
      161,  161,   15,    0,  136,  161,  161,   17,   15,  136,
      161,   19,   17,   19,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    7,    1,    1,    8,    1,
        1,    7,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    7,    1,   14,
       15,   16,   17,    7,    7,   18,   19,   20,   21,   22,
        7,    7,   23,   24,   25,   26,   27,   28,   29,   30,
        7,   31,   32,   33,   34,   35,    7,    7,    7,    7,
        1,    7,    1,    1,    7,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,    1,   62,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    2,    2,    2,    1,    3,    2,    4,    1,    2,
        2,    2,    2,    2,    1,    5,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    1
    } ;

static yyconst flex_int16_t yy_base[1507] =
    {   0,
        0,   62, 3087, 3086, 3095, 3094, 3091, 3090,    0,    0,
        0,    0,   15,   16,    4,   17, 3097, 3104,  123,  179,
        0, 3104,    8,   16,   29,   17,   40,  232, 3104,   21,
        0, 3104,    0,    0, 3104, 3104, 3086, 3104, 3104, 3079,
        0,   22,   30,   23, 3104,   67,   44,   41,   72,   73,
       76,   77,   81,   88,   85,   82,  129,  133,   91,  144,
      176, 3104, 3084,  252, 3104, 3043,    8, 3048, 3051, 3041,
     3039, 3044,   64,  150,   79, 3047,  159, 3026, 3031, 3048,
      114,    0,    0,    0, 3067, 3104,  100,  160,  152,  137,
      194,  184,  197,  216,  224,  231,  251,  225,  244,  234,

      296,  297, 3069,  243,  301, 3071, 3030,   77, 3035, 3038,
     3028, 3026, 3031,  171,  267,  189, 3034,  286, 3013, 3018,
     3035, 3021, 3018, 3015, 3020, 3017,  276, 3028, 3026, 3004,
     3013, 3016, 3005, 3009, 3015, 3002,  197, 3006, 3003, 3011,
     3000, 3005, 2997, 2999, 3009, 2995,  315, 3104,  318,  319,
      323,  339,  331,  334,  335,  345,  346,  349,  374,  378,
      350,  358,  377,  378,  381, 3034, 3104, 2997, 2994, 2991,
     2996, 2993,  356, 3004, 3002, 2980, 2989, 2992, 2981, 2985,
     2991, 2978,  208, 2982, 2979, 2987, 2976, 2981, 2973, 2975,
     2985, 2971,  314, 2983, 2982, 2981, 2980, 2964, 2962, 2962,

     2993, 2975, 2981,  382, 2973, 2968, 2964, 2970, 2958, 2954,
     2964, 2968, 2949, 2964, 2946, 2945, 2946, 2960, 2946, 2954,
      389,  398,  413,  420,  416,  416,  424,  425,  443,  434,
      438,  458, 3104, 3104,  439,  466,  451,  469,  461,  484,
     2957, 2956, 2955, 2954, 2938, 2936, 2936,  487, 2950, 2956,
      475,  502, 2944, 2940, 2946, 2934, 2930, 2940, 2944, 2925,
     2940, 2922, 2921, 2922, 2936, 2922,  505, 2919, 2937, 2923,
     2933, 2916, 2916, 2924, 2912, 2930, 2945, 2915, 2919, 2932,
     2917, 2920, 2921, 2910,  509, 2904, 2900, 2897, 2924, 2913,
     2908, 2912, 2906, 2909, 2908, 3104, 2919, 2910,  483,  500,

      520,  523,  543,  501,  514,  527,  548,  563,  539,  540,
      545,  570,  595,  554,  602,  605,  617,  578,  585, 2890,
     2908, 2894, 2904, 2887, 2887, 2895, 2883, 2901,  620,  623,
     2916, 2886, 2890, 2903, 2888, 2891,  626,  635, 2892, 2881,
      641, 2875, 2871, 2868,  644, 2885, 2880, 2884, 2878, 2881,
     2880,  647, 2891,  650,  665, 2882, 2864, 2878, 2876, 2859,
     2880, 2876, 2875,  556, 2861, 3104, 2855, 2860, 2873, 2852,
     2857, 2849, 2859,  668, 2873, 2846, 2850, 2863, 2844, 2844,
     2840, 2857, 2841, 2845, 2856, 2854,  642,  645,  673, 3104,
     3104,  648,  664,  668,  683, 3104, 3104,  586,  690,  683,

      705, 3104, 3104,  684,  714, 3104, 3104,  723,  726,  699,
     2837, 2851, 2849, 2832, 2853, 2849, 2848,  592, 2834,  738,
      741, 2828, 2833, 2846, 2825, 2830,  744, 2822, 2832,  747,
      750,  756, 2820, 2824,  762,  765, 2837, 2818, 2818, 2814,
     2831, 2815, 2819,  771,  777, 2830,  780, 2828, 2828, 2808,
     2822, 2811, 2810, 2812, 2811, 2813, 2812, 2817, 2814, 2813,
      124, 2806, 2801, 2806, 2788, 2797,  690, 2794, 2802, 2791,
     2804, 2796, 2802,  130, 3104, 2793, 2793,  772,  707,  787,
      778,  779,  782,  802,  805,  783,  826,  818, 3104, 3104,
     2803, 2783, 2797, 2786, 2785, 2787, 2786, 2788, 2787, 2792,

      831,  841, 2789, 2788,  184, 2781, 2776, 2781, 2763,  846,
      849,  852, 2772,  790, 2769,  855, 2777, 2766, 2779, 2771,
     2777,  323,  858,  864, 2768, 2768, 2770, 3104, 2764, 2759,
      204, 3104,  851, 2758, 2763, 2769, 3104, 3104, 2752, 2756,
     2774, 2752, 2747, 2767, 2747, 2757, 2756, 2760, 2745, 2757,
     2757, 2755,   13, 2743, 2743, 2752, 2751,  873,  865,  880,
      895,  877,  902,  905,  924, 3104, 3104,  876,  939,  942,
     2746,  909, 2740, 2735,  248,  954,  942, 2734, 2739, 2745,
      961,  964,  970, 2728, 2732, 2750, 2728, 2723, 2743,  979,
     2723, 2733, 2732, 2736, 2721,  985, 2734, 2732,  988, 2720,

     2720,  991,  994, 2729, 2728, 2718, 2728, 2721, 2724, 2727,
     2726, 2711, 2704, 2722, 2722, 2717, 2716,  874, 2707, 2714,
     2702, 2692, 2711, 2695, 2705, 2695, 2700, 3104, 3104, 2692,
      900, 2706, 2708, 2712, 2687, 2718, 3104, 2686, 1015, 1006,
      935, 1030, 3104, 3104,  986, 1037, 1041, 1007, 1010, 1021,
     1034, 1040, 1045, 1049, 1065, 3104, 3104, 2690, 1075, 1081,
     2700, 2693, 2696, 2699, 1090, 1093, 2698, 2683, 2676, 2694,
     2694, 2689, 2688,  910, 1096, 1099, 1105, 1111, 2679, 2686,
     2674, 2664, 2683, 2667, 2677, 2667, 2672, 1114, 1120, 1123,
     1129, 2664,  956, 2678, 1138, 1141, 2680, 2684, 2659, 2690,

     1144, 1147, 2658, 2656, 2666, 2669, 2661, 2661, 2652, 2656,
     2668, 2658, 2649, 2663, 2646, 2649, 2662, 2660, 2656, 2659,
     2662, 2639, 2648, 2641, 2650, 2649, 2655, 2643, 2642, 2653,
     2636, 2660, 2638, 2632, 3104, 1153, 3104, 3104, 1121, 1144,
     1163, 3104, 3104, 1148, 1159,  997, 1158, 1050, 1162, 1072,
     1058, 1163, 2625, 1178, 2635, 2638, 2630, 2630, 1181, 2621,
     2625, 2637, 2627, 2618, 2632, 2615, 2618, 2631, 1184, 1187,
     2629, 2625, 2628, 2631, 2608, 2617, 2610, 2619, 2618, 1190,
     1196, 1200, 1205, 1211, 2624, 2612, 2611, 2622, 1215, 2605,
     2629, 2607, 2601, 1218, 1222, 1225, 2595, 2608, 2593, 2606,

     2605, 2600, 2589, 2595, 2601, 2596, 2584, 2605, 2599, 2588,
     2595, 2595, 2595, 2588, 3104, 2581, 2581, 2591, 2574, 2577,
     2573, 2578, 2568, 2577, 3104, 2559, 2551, 1228, 1219, 1234,
     1231, 1249, 1241, 1242,  989, 1246, 1264, 1255, 2478, 2475,
     2455, 2466, 2465, 2453, 2442, 2444, 2450, 2439, 2418, 2431,
     2422, 2411, 2407, 2368,   21,   38, 1270,   56,   60,   82,
       75, 1273, 1280,   90,  122,  141,  139,  163, 1288,  171,
      189, 1291, 1294, 1297, 3104,  227,  251,  237, 3104,  244,
      246,  281,  281,  289,  278,  288,  337,  339,  334, 3104,
      356,  343,  359,  357,  366,  392,  401,  402,  403,  413,

     3104,  407,  426, 1309, 1312, 1324, 1327, 1330, 1291, 1331,
     1346, 1333, 1338, 1303, 1339, 1343, 1349, 1364, 1368, 1359,
     1368, 1383,  438,  463,  464, 1388,  466,  477,  502,  502,
      512,  510,  525,  543,  543,  537, 1394,  551,  534, 1398,
     1403,  585,  581,  585,  608,  630,  625,  633,  647, 1409,
     1413, 1416,  641,  665, 1419, 3104,  681,  695,  704,  702,
      720,  706,  733,  718,  749,  722, 3104, 3104, 3104,  760,
     3104, 3104,  764,  765,  775,  787,  777,  784,  784,  800,
     1424, 3104, 3104, 1431, 1434, 1446, 1425, 1437, 1452, 1443,
     1444, 1448, 1466, 1451, 1458, 1473, 1469, 1485, 1491, 1500,

     1506,  813,  824, 1510, 1513,  840,  820,  842,  830,  870,
      855,  887,  860, 1516, 1521, 1525, 1531, 1536,  883, 1540,
     1543, 1546,  883,  889,  903,  914,  905,  916, 1551, 1554,
     1561, 1566,  929,  979, 3104,  924,  948,  968,  976,  981,
     1011, 1012, 1031, 3104, 1027, 1062, 1057, 1055, 3104, 1065,
     3104, 1088, 1569, 3104, 3104, 1560, 1576, 1567, 1571, 1572,
     1579, 1583, 1598, 1601, 1476, 1602, 1592, 1622, 1626, 1638,
     1641, 1644, 1219, 1647, 1650, 1074, 1098, 1091, 1108, 1106,
     1124, 1155, 1166, 1656, 1662, 1665, 1671, 1674, 1680, 1683,
     1686, 1689, 1695, 1704, 1707, 1158, 1213, 1214, 1215, 1710,

     1232, 1713, 1719, 1725, 1728, 1262, 1269, 1285, 1286, 1300,
     1302, 1307, 1334, 1337, 1324, 1338, 1350, 1353, 1362, 1374,
     1398, 3104, 1720, 1735, 1738, 1729, 1732, 1738, 1739, 1603,
     1742, 1757, 1749, 1619, 1752, 1767, 3104, 3104, 1774, 1403,
     1408, 1794, 1797, 1416, 1417, 1410, 1414, 1446, 1456, 1440,
     1471, 1800, 1803, 1809, 1812, 1815, 1818, 1821, 1487, 1486,
     1504, 1510, 1827, 1830, 1528, 1833, 1836, 1842, 1845, 1519,
     1538, 1534, 1545, 1558, 1567, 1575, 1568, 1615, 1612, 1622,
     1614, 3104, 1626, 1636, 1777, 1851, 1768, 1842, 1843, 1846,
     1849, 1850, 1853, 1854, 1857, 1647, 1649, 1872, 1645, 1652,

     1663, 1664, 1683, 1665, 1684, 1676, 1875, 1693, 1690, 1878,
     1704, 1882, 1718, 1885, 1896, 1899, 1727, 1732, 1718, 1724,
     1726, 1873, 1749, 1754, 3104, 3104, 1734, 1750, 1765, 1779,
     1881, 1899, 1900, 1903, 1904, 1907, 1923, 1930, 1908, 1945,
     1801, 1802, 1794, 1796, 1818, 1922, 1856, 1872, 1926, 1960,
     1852, 1870, 1963, 1966, 1887, 1887, 1969, 1895, 3104, 1897,
     1921, 3104, 1908, 1938, 1928, 1927, 1945, 3104, 1940, 1941,
     1968, 1983, 1974, 1975, 1979, 1978, 1998, 2001, 2004, 2007,
     2007, 2022, 2029, 1928, 2037, 1942, 1981, 2040, 1967, 1993,
     1987, 1985, 2043, 2046, 2058, 2061, 2018, 2064, 2067, 2012,

     2014, 2015, 3104, 2022, 2016, 2026, 2019, 2049, 2027, 2024,
     3104, 2079, 2082, 2085, 2076, 2085, 2086, 2089, 2104, 2107,
     2099, 2114, 2039, 2117, 2120, 2123, 2055, 2128, 2139, 2048,
     2067, 2072, 2107, 2143, 2147, 2085, 2150, 2153, 2083, 2156,
     3104, 2091, 2112, 2106, 2123, 2114, 2138, 3104, 2165, 2171,
     2174, 2168, 2169, 2184, 2175, 2176, 2191, 2199, 2202, 2206,
     2123, 2217, 2122, 2140, 2157, 2161, 2186, 2220, 2225, 2229,
     2232, 2158, 2177, 2177, 2171, 2180, 2188, 2240, 2232, 2233,
     2248, 2251, 2242, 2263, 2266, 2257, 2272, 2183, 2201, 2217,
     2218, 2223, 2233, 2282, 2285, 2288, 2253, 2240, 2241, 2264,

     2257, 2242, 2286, 2287, 2302, 2293, 2308, 2311, 2315, 2268,
     2266, 2267, 2323, 2288, 2272, 2328, 2279, 3104, 3104, 2279,
     3104, 2295, 2322, 2326, 2329, 2344, 2283, 2350, 2354, 2357,
     2360, 2294, 2365, 2310, 3104, 2312, 3104, 2358, 2362, 2366,
     2383, 2386, 2389, 2392, 2401, 2409, 2318, 2412, 2416, 2419,
     2331, 2384, 2410, 2411, 2427, 2430, 2434, 2438, 2335, 2442,
     2446, 2449, 2334, 2441, 2442, 2449, 2464, 2348, 2467, 2359,
     2458, 2461, 2462, 2364, 3104, 2465, 2466, 2485, 2491, 2470,
     2515, 2519, 2500, 2509, 2524, 2534, 2537, 2540, 2543, 2552,
     2555, 2558, 2561, 2564, 3104, 2571, 2576, 2581, 2586, 2591,

     2596, 2601, 2605, 2610, 2614, 2619
    } ;

static yyconst flex_int16_t yy_def[1507] =
    {   0,
     1496, 1496, 1497, 1497, 1498, 1498, 1499, 1499, 1500, 1500,
     1500, 1500, 1501, 1501, 1502, 1502, 1495, 1495, 1503, 1503,
       20, 1495, 1503, 1503, 1503, 1503, 1503, 1495, 1495, 1503,
     1504, 1495, 1505, 1506, 1495, 1495, 1495, 1495, 1495, 1495,
       20, 1503, 1503,   28, 1495, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1503, 1504, 1505, 1506, 1495, 1495, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,

     1503, 1503, 1495, 1503, 1503, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1503, 1495, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1495,
     1503, 1503, 1503, 1503, 1503, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1503, 1503, 1503, 1503, 1495, 1503, 1503, 1503, 1503, 1503,
     1503, 1495, 1495, 1495, 1503, 1503, 1503, 1503, 1503, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1503, 1503,

     1503, 1495, 1495, 1503, 1503, 1503, 1503, 1495, 1503, 1503,
     1503, 1503, 1495, 1503, 1503, 1495, 1503, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1503, 1503, 1495, 1495,
     1495, 1503, 1503, 1503, 1495, 1495, 1495, 1503, 1503, 1503,

     1495, 1495, 1495, 1503, 1495, 1495, 1495, 1503, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1495, 1503, 1503, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1503, 1503, 1503,
     1495, 1503, 1503, 1503, 1495, 1495, 1495, 1503, 1503, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1503, 1495,
     1503, 1495, 1495, 1495, 1503, 1503, 1495, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1503, 1503,
     1495, 1495, 1495, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1503, 1495, 1503, 1503, 1495, 1503, 1503,
     1503, 1495, 1503, 1503, 1503, 1503, 1503, 1503, 1495, 1503,
     1503, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1503, 1495, 1495, 1503, 1503, 1495, 1503,
     1503, 1503, 1503, 1503, 1503, 1495, 1503, 1503, 1495, 1495,

     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1495, 1503, 1503, 1503, 1503, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1503, 1503, 1495, 1503, 1503, 1503, 1503, 1503,
     1503, 1495, 1503, 1503, 1503, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1503, 1495, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1495, 1503, 1495,
     1503, 1503, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1503, 1503, 1495, 1503, 1503, 1503, 1503, 1495, 1495,
     1503, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1503, 1495,
     1495, 1503, 1503, 1503, 1503, 1503, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1503, 1503,
     1503, 1495, 1503, 1503, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1503, 1503, 1495, 1503, 1503, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1503, 1503, 1503, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1503, 1503, 1503,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1503, 1503, 1503, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1503, 1503, 1503, 1495, 1495, 1495, 1495,
     1503, 1503, 1503, 1495, 1495, 1503, 1503, 1503, 1495, 1503,
     1503, 1503, 1495, 1495, 1495, 1503, 1503, 1495, 1495, 1495,
     1503, 1495, 1495, 1495,    0, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1495, 1495, 1495, 1495
    } ;

static yyconst flex_int16_t yy_nxt[3167] =
    {   0,
       18,   19,   20,   21,   18,   22,   39,   22,   18,   24,
       25,   26,   27,   28,   18,   29,   18,   36,   36,   39,
       40, 1495,   30, 1495,   37,   37,   57, 1495,   58, 1495,
     1495, 1495,   62,   40, 1495, 1495, 1495, 1495,   59, 1495,
      633,   60, 1495, 1495, 1495,   62,  634,  123,   81,   61,
       57,  124,   58, 1495, 1495, 1495, 1495, 1495,  938, 1495,
       61,   22,   18,   19,   20,   21,   18,   22,   61,   22,
       18,   24,   25,   26,   27,   28,   18,   29,   18,   61,
     1495,  939, 1495,   88,   30, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495,   89, 1495, 1495, 1495, 1495, 1495,  130,

     1495, 1495,   87, 1495, 1495,  942, 1495,  131,  943,   91,
       90,   93,   94, 1495,  137, 1495,  169,  102,   81,  944,
      170,  100,   92,   22,   41,   41,   41, 1495,  945, 1495,
       96,  138,   95,  101,   43,  147,   44,   97,   45,  946,
       98,   60, 1495,   57, 1495,   58, 1495,   99, 1495,   61,
     1495,  539, 1495,   61,  149,  540,   60, 1495,  554, 1495,
       46,   47,  555,   48,   61, 1495,   49, 1495,   61,   50,
       51,   52,   61, 1495,  947, 1495,   53,   54,   55,   56,
       41,   41,   41,   61,  103,  104,  132,  948,  105, 1495,
       43, 1495,   44,  949,   45,  152,  140, 1495,  141, 1495,

      133,  151,  950,  134,  135,  136,  176, 1495,  142, 1495,
     1495,  584, 1495,  150,  177,  585,   46,   47,  143,   48,
      953,  154,   49,  609,  183,   50,   51,   52,  153, 1495,
      610, 1495,   53,   54,   55,   56,   63, 1495, 1495, 1495,
     1495,  184,  155,   64, 1495,  954, 1495, 1495,   65, 1495,
      210,  211,  159,  159,  159,  105, 1495, 1495, 1495, 1495,
      161,  257,  258,  156, 1495,  160, 1495,  663,  163,   66,
       67,  157,   68,   69,  664,   70,   71,  158,   72,   73,
      956,   74,   75,  957,   76,   77,   78,   79,   80,  107,
      108,  958,  109,  110,  162,  111,  112,  959,  113,  114,

      960,  115,  116,  178,  117,  118,  119,  120,  121, 1495,
     1495, 1495, 1495,  105, 1495,  961, 1495,  179,  962,  198,
      180,  181,  182,  186,  963,  187,  199,  964, 1495,  200,
     1495, 1495, 1495, 1495, 1495,  188, 1495,  965, 1495,  164,
      224,  224,  224,  165, 1495,  189, 1495, 1495, 1495, 1495,
     1495,  600, 1495,  225, 1495,  601,  222,  221, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495,  226,  268,  269,  227,
      223, 1495,  966, 1495,  228,  159,  159,  159,  967,  232,
      232,  232,  230,  233,  229,  234,  968, 1495,  160, 1495,
     1495, 1495, 1495, 1495, 1495,  969, 1495,  236,  235,  245,

      280,  281, 1495,  970, 1495,  231,  246,  971,  282,  247,
      972, 1495,  237, 1495,  301,  301,  301,  303,  303,  303,
      973,  224,  224,  224,  974,  975, 1495,  302, 1495, 1495,
      299, 1495,  238, 1495,  225, 1495,  239, 1495, 1495, 1495,
     1495,  976,  977,  306,  307,  307,  307, 1495,  978, 1495,
      300, 1495, 1495, 1495, 1495,  979, 1495,  308, 1495,  232,
      232,  232,  304,  233, 1495,  234, 1495,  312,  312,  312,
      315,  315,  315,  309, 1495,  980, 1495,  310,  305, 1495,
      313, 1495, 1495,  316, 1495,  318,  318,  318,  329,  329,
      329, 1001,  311,  334,  335, 1002, 1495,  314, 1495,  319,

      317,  336,  330,  337,  337,  337,  354,  354,  354,  331,
      374,  374,  374, 1495, 1495, 1495, 1495,  338, 1003, 1006,
      355,  301,  301,  301,  389,  389,  389, 1495,  390, 1495,
      391, 1007,  387, 1495,  302, 1495, 1008,  320,  321, 1009,
     1495,  339, 1495,  388,  303,  303,  303, 1010,  356,  307,
      307,  307, 1495, 1495, 1495, 1495,  392,  393, 1495, 1011,
     1495, 1495,  308, 1495,  395,  395,  395, 1495,  396, 1495,
      397,  312,  312,  312, 1012,  456,  394,  457, 1013,  318,
      318,  318, 1014, 1495,  313, 1495,  410,  410,  410, 1015,
     1018,  398,  399,  319, 1019,  400,  401,  401,  401, 1495,

      402, 1495,  403,  315,  315,  315,  405,  405,  405,  404,
      406,  498,  407,  499,  483, 1495,  316, 1495,  408,  408,
      408,  329,  329,  329,  420,  420,  420,  337,  337,  337,
     1495,  409, 1495, 1021, 1022,  330,  427,  427,  427, 1023,
     1024,  338,  430,  430,  430,  435,  435,  435,  444,  444,
      444,  354,  354,  354, 1025, 1495,  431, 1495, 1495,  436,
     1495, 1495,  445, 1495, 1026,  355,  447,  447,  447,  374,
      374,  374, 1027,  437,  389,  389,  389, 1495,  390, 1495,
      391, 1495, 1028, 1495,  395,  395,  395,  480,  396, 1032,
      397,  484,  484,  484,  478,  479, 1495, 1495, 1495, 1495,

      410,  410,  410, 1495,  485, 1495,  401,  401,  401,  546,
      402,  547,  403,  481, 1033,  405,  405,  405,  482,  406,
     1495,  407, 1495,  487,  408,  408,  408,  488,  488,  488,
     1034,  489,  486,  490, 1035, 1036, 1495,  409, 1495,  420,
      420,  420,  501,  501,  501,  427,  427,  427,  430,  430,
      430,  510,  510,  510, 1037, 1038,  502,  511,  511,  511,
     1039,  559,  431,  435,  435,  435,  516,  516,  516, 1040,
     1041,  512,  444,  444,  444, 1042, 1043,  436,  524,  524,
      524,  447,  447,  447,  513, 1495,  445, 1495,  560,  560,
      560, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1044,

     1495,  561, 1495,  484,  484,  484,  565,  565,  565,  592,
      566,  593,  567, 1045, 1046, 1495,  485, 1495, 1047,  488,
      488,  488,  564,  489, 1048,  490,  562,  569,  569,  569,
     1049,  558,  501,  501,  501,  568, 1050, 1051,  563, 1495,
      570, 1495,  581,  581,  581, 1052,  502,  510,  510,  510,
      511,  511,  511,  590,  590,  590,  516,  516,  516,  602,
      602,  602, 1073, 1074,  512,  524,  524,  524,  611,  612,
      613, 1076, 1077,  603,  639,  639,  639, 1078, 1495,  614,
     1495,  560,  560,  560, 1079,  615, 1495,  640, 1495, 1495,
     1495, 1495, 1495, 1495,  561, 1495,  642,  642,  642,  716,

      643,  717,  644,  646,  646,  646, 1080, 1081,  641,  645,
      659,  659,  659, 1082, 1083, 1495,  647, 1495, 1495,  728,
     1495,  729, 1091,  648,  660,  565,  565,  565,  649,  566,
      654,  567, 1096,  650,  651,  767,  652,  768, 1097,  653,
      569,  569,  569,  655,  655,  655, 1098,  656, 1495,  657,
     1495, 1099, 1495,  570, 1495,  665,  665,  665, 1100,  667,
      668,  669,  581,  581,  581,  675,  675,  675, 1101,  666,
      670,  677,  677,  677, 1106,  786,  671,  787, 1109,  676,
      590,  590,  590, 1110,  739,  678,  690,  690,  690,  695,
      695,  695,  602,  602,  602,  701,  701,  701, 1107, 1495,

      691, 1495, 1495,  696, 1495, 1108,  603,  736,  736,  736,
     1495,  737, 1495,  738, 1111,  697,  639,  639,  639, 1112,
     1495,  698, 1495, 1495,  692, 1495,  916, 1113, 1495,  640,
     1495,  642,  642,  642, 1495,  643, 1495,  644,  646,  646,
      646,  832,  741,  741,  741,  740,  742, 1495,  743, 1495,
     1495,  647, 1495, 1495, 1114, 1495,  744,  746, 1495,  745,
     1495, 1115, 1495, 1495, 1495, 1495,  655,  655,  655,  748,
      656, 1495,  657, 1495, 1116,  747,  659,  659,  659, 1117,
      751,  752,  754,  754,  754, 1495,  749, 1495, 1118,  750,
      660,  665,  665,  665,  759,  759,  759,  675,  675,  675,

      769,  769,  769, 1119,  834,  666,  677,  677,  677, 1120,
      837,  676,  770,  770,  770,  780,  780,  780,  836, 1121,
      678,  782,  782,  782,  690,  690,  690, 1122, 1144,  781,
      784,  784,  784, 1145, 1495,  783, 1495, 1146,  691,  695,
      695,  695,  789,  789,  789,  701,  701,  701,  794,  794,
      794, 1147, 1148,  696,  736,  736,  736, 1495,  737, 1495,
      738, 1495,  795, 1495,  741,  741,  741, 1149,  742,  828,
      743, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,  754,
      754,  754,  759,  759,  759,  769,  769,  769,  770,  770,
      770,  780,  780,  780,  829,  831,  830,  862,  862,  862,

      833,  782,  782,  782, 1150,  781,  863,  863,  863, 1151,
     1159,  835,  784,  784,  784,  783,  789,  789,  789,  794,
      794,  794,  838,  872,  872,  872,  873,  873,  873,  904,
      904,  904, 1495,  795, 1495,  907,  907,  907, 1140, 1160,
      874, 1495,  905, 1495, 1495, 1141, 1495, 1495,  908, 1495,
      911,  911,  911,  910, 1495, 1495, 1495, 1495,  906, 1495,
     1161, 1495, 1495,  912, 1495,  918,  918,  918, 1495, 1162,
     1495,  940,  940,  940,  862,  862,  862, 1495,  919, 1495,
      914,  863,  863,  863,  915,  941, 1165,  909,  913,  951,
      951,  951,  872,  872,  872,  873,  873,  873,  955,  955,

      955, 1169,  917,  952, 1495,  921, 1495,  920, 1170,  874,
      904,  904,  904,  981,  981,  981, 1495,  982, 1495,  983,
     1171, 1172, 1495,  905, 1495,  984,  984,  984,  907,  907,
      907,  986,  986,  986,  989,  989,  989, 1495,  985, 1495,
     1495,  908, 1495, 1173, 1495,  987, 1495,  911,  911,  911,
      988, 1495, 1495, 1495, 1495,  991, 1495, 1174, 1495, 1495,
      912, 1495, 1495, 1175, 1495,  918,  918,  918,  992,  996,
      996,  996, 1495, 1176, 1495,  990, 1177, 1495,  919, 1495,
     1178, 1495,  994, 1495,  999,  999,  999, 1179,  995, 1004,
     1004, 1004,  993, 1180,  997, 1016, 1016, 1016, 1000,  940,

      940,  940, 1181, 1005, 1020, 1020, 1020,  998, 1182, 1017,
     1029, 1029, 1029,  941,  951,  951,  951, 1031, 1031, 1031,
      955,  955,  955, 1183, 1030,  981,  981,  981,  952,  982,
     1184,  983,  984,  984,  984, 1053, 1053, 1053, 1495, 1054,
     1495, 1055, 1196, 1197, 1495,  985, 1495,  986,  986,  986,
     1495, 1199, 1495,  989,  989,  989, 1495, 1495, 1495, 1495,
     1200, 1495, 1059, 1495, 1495, 1201, 1495, 1063, 1063, 1063,
     1202, 1495, 1060, 1495,  996,  996,  996, 1056, 1061, 1495,
     1064, 1495, 1495, 1062, 1495, 1203, 1068, 1068, 1068, 1495,
     1057, 1495,  999,  999,  999, 1204, 1205, 1058, 1495, 1069,

     1495, 1070, 1070, 1070, 1065, 1067, 1000, 1071, 1071, 1071,
     1066, 1004, 1004, 1004, 1075, 1075, 1075, 1084, 1084, 1084,
     1206, 1072, 1086, 1086, 1086, 1005, 1016, 1016, 1016, 1133,
     1208, 1085, 1088, 1088, 1088, 1209, 1087, 1089, 1089, 1089,
     1017, 1020, 1020, 1020, 1092, 1092, 1092, 1094, 1094, 1094,
     1210, 1090, 1029, 1029, 1029, 1102, 1102, 1102, 1093, 1211,
     1213, 1095, 1031, 1031, 1031, 1217, 1030, 1103, 1103, 1103,
     1053, 1053, 1053, 1495, 1054, 1495, 1055, 1124, 1124, 1124,
     1495, 1104, 1495, 1218, 1495, 1495, 1495, 1495, 1219, 1495,
     1125, 1495, 1495, 1220, 1495, 1123, 1495, 1221, 1495, 1063,

     1063, 1063, 1132, 1132, 1132, 1495, 1222, 1495, 1128, 1223,
     1126, 1495, 1064, 1495, 1130, 1495, 1495, 1495, 1495, 1105,
     1127, 1224, 1129, 1068, 1068, 1068, 1131, 1136, 1136, 1136,
     1134, 1137, 1495, 1138, 1495, 1495, 1069, 1495, 1135, 1070,
     1070, 1070, 1071, 1071, 1071, 1139, 1139, 1139, 1142, 1142,
     1142, 1075, 1075, 1075, 1225, 1191, 1072, 1084, 1084, 1084,
     1226, 1227, 1143, 1152, 1152, 1152, 1086, 1086, 1086, 1194,
     1228, 1085, 1153, 1153, 1153, 1088, 1088, 1088, 1229, 1230,
     1087, 1089, 1089, 1089, 1154, 1154, 1154, 1155, 1155, 1155,
     1092, 1092, 1092, 1241, 1242, 1090, 1157, 1157, 1157, 1243,

     1244, 1156, 1245, 1246, 1093, 1094, 1094, 1094, 1158, 1158,
     1158, 1163, 1163, 1163, 1102, 1102, 1102, 1247, 1248, 1095,
     1103, 1103, 1103, 1249, 1250, 1164, 1166, 1166, 1166, 1167,
     1167, 1167, 1251, 1495, 1104, 1495, 1124, 1124, 1124, 1186,
     1186, 1186, 1495, 1168, 1495, 1495, 1252, 1495, 1495, 1125,
     1495, 1495, 1495, 1495, 1495, 1495, 1255, 1495, 1132, 1132,
     1132, 1256, 1495, 1185, 1495, 1495, 1258, 1495, 1136, 1136,
     1136, 1259, 1137, 1260, 1138, 1139, 1139, 1139, 1261, 1262,
     1188, 1495, 1189, 1495, 1265, 1187, 1266, 1267, 1193, 1268,
     1495, 1195, 1495, 1190, 1192, 1142, 1142, 1142, 1198, 1198,

     1198, 1152, 1152, 1152, 1153, 1153, 1153, 1232, 1269, 1143,
     1154, 1154, 1154, 1155, 1155, 1155, 1207, 1207, 1207, 1157,
     1157, 1157, 1158, 1158, 1158, 1231, 1270, 1156, 1163, 1163,
     1163, 1212, 1212, 1212, 1166, 1166, 1166, 1167, 1167, 1167,
     1284, 1285, 1164, 1214, 1214, 1214, 1215, 1215, 1215, 1286,
     1287, 1168, 1186, 1186, 1186, 1495, 1495, 1495, 1495, 1495,
     1216, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1288, 1495, 1198, 1198, 1198, 1207, 1207, 1207, 1253,
     1253, 1253, 1234, 1212, 1212, 1212, 1214, 1214, 1214, 1235,
     1263, 1291, 1236, 1254, 1495, 1233, 1495, 1215, 1215, 1215,

     1257, 1257, 1257, 1237, 1292, 1297, 1238, 1264, 1239, 1298,
     1240, 1216, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1277, 1277, 1277, 1293, 1293, 1293,
     1300, 1279, 1279, 1279, 1301, 1271, 1495, 1278, 1495, 1289,
     1274, 1294, 1276, 1495, 1280, 1495, 1282, 1282, 1282, 1302,
     1303, 1281, 1272, 1275, 1273, 1304, 1290, 1305, 1495, 1283,
     1495, 1295, 1295, 1295, 1253, 1253, 1253, 1299, 1299, 1299,
     1257, 1257, 1257, 1306, 1307, 1296, 1308, 1309, 1254, 1310,
     1311, 1495, 1323, 1495, 1313, 1313, 1313, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1326, 1495, 1314, 1495, 1277,

     1277, 1277, 1319, 1319, 1319, 1279, 1279, 1279, 1320, 1320,
     1320, 1495, 1278, 1495, 1318, 1327, 1330, 1495, 1280, 1495,
     1495, 1312, 1495, 1282, 1282, 1282, 1315, 1317, 1331, 1316,
     1322, 1322, 1322, 1332, 1333, 1495, 1283, 1495, 1324, 1324,
     1324, 1328, 1328, 1328, 1293, 1293, 1293, 1334, 1334, 1334,
     1336, 1339, 1325, 1340, 1341, 1329, 1321, 1342, 1294, 1295,
     1295, 1295, 1335, 1335, 1335, 1337, 1337, 1337, 1299, 1299,
     1299, 1343, 1344, 1296, 1345, 1346, 1347, 1348, 1357, 1338,
     1349, 1349, 1349, 1313, 1313, 1313, 1351, 1351, 1351, 1495,
     1361, 1495, 1495, 1350, 1495, 1495, 1314, 1495, 1495, 1495,

     1495, 1495, 1495, 1363, 1495, 1319, 1319, 1319, 1320, 1320,
     1320, 1352, 1495, 1364, 1495, 1322, 1322, 1322, 1324, 1324,
     1324, 1358, 1358, 1358, 1359, 1359, 1359, 1365, 1353, 1328,
     1328, 1328, 1325, 1366, 1367, 1355, 1369, 1372, 1360, 1354,
     1362, 1362, 1362, 1329, 1334, 1334, 1334, 1356, 1335, 1335,
     1335, 1337, 1337, 1337, 1368, 1368, 1368, 1370, 1370, 1370,
     1373, 1374, 1375, 1376, 1377, 1338, 1349, 1349, 1349, 1388,
     1389, 1371, 1378, 1378, 1378, 1351, 1351, 1351, 1495, 1350,
     1495, 1495, 1495, 1495, 1495, 1381, 1381, 1381, 1495, 1495,
     1495, 1495, 1385, 1385, 1385, 1390, 1391, 1495, 1382, 1495,

     1358, 1358, 1358, 1359, 1359, 1359, 1386, 1387, 1387, 1387,
     1392, 1379, 1393, 1397, 1383, 1398, 1399, 1360, 1362, 1362,
     1362, 1368, 1368, 1368, 1400, 1380, 1394, 1394, 1394, 1384,
     1370, 1370, 1370, 1396, 1396, 1396, 1401, 1402, 1410, 1411,
     1395, 1378, 1378, 1378, 1371, 1495, 1495, 1495, 1495, 1381,
     1381, 1381, 1405, 1405, 1405, 1495, 1412, 1495, 1409, 1409,
     1409, 1495, 1382, 1495, 1407, 1407, 1407, 1385, 1385, 1385,
     1406, 1413, 1404, 1387, 1387, 1387, 1495, 1408, 1495, 1414,
     1403, 1386, 1415, 1394, 1394, 1394, 1416, 1416, 1416, 1396,
     1396, 1396, 1417, 1418, 1419, 1420, 1421, 1395, 1422, 1495,

     1495, 1495, 1495, 1405, 1405, 1405, 1495, 1427, 1495, 1407,
     1407, 1407, 1426, 1426, 1426, 1424, 1409, 1409, 1409, 1428,
     1429, 1495, 1408, 1495, 1430, 1430, 1430, 1433, 1434, 1416,
     1416, 1416, 1435, 1436, 1437, 1495, 1441, 1495, 1431, 1495,
     1423, 1495, 1495, 1425, 1495, 1426, 1426, 1426, 1447, 1450,
     1438, 1442, 1442, 1442, 1432, 1444, 1444, 1444, 1430, 1430,
     1430, 1446, 1446, 1446, 1451, 1443, 1448, 1448, 1448, 1445,
     1459, 1495, 1431, 1495, 1463, 1495, 1439, 1495, 1468, 1495,
     1449, 1495, 1470, 1440, 1455, 1455, 1455, 1442, 1442, 1442,
     1457, 1457, 1457, 1444, 1444, 1444, 1474, 1495, 1456, 1495,

     1475, 1443, 1458, 1458, 1458, 1479,  937, 1445, 1452, 1454,
     1446, 1446, 1446, 1448, 1448, 1448, 1453, 1460, 1460, 1460,
     1461, 1461, 1461, 1495, 1495, 1495, 1495, 1449, 1455, 1455,
     1455, 1467, 1467, 1467, 1462, 1457, 1457, 1457, 1464, 1458,
     1458, 1458, 1456, 1460, 1460, 1460,  936, 1461, 1461, 1461,
     1469, 1469, 1469, 1465, 1495, 1495, 1495, 1495,  935,  934,
     1466, 1462, 1495,  933, 1495, 1467, 1467, 1467, 1469, 1469,
     1469, 1495,  932, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495,  931, 1495, 1471, 1495, 1482, 1482, 1482,  930,
      929, 1472, 1484, 1484, 1484,  928,  927, 1473, 1495, 1483,

     1495, 1489, 1489, 1489,  926,  925, 1485, 1476,  924, 1477,
     1484, 1484, 1484, 1480,  923, 1478, 1487, 1487, 1487, 1481,
     1482, 1482, 1482, 1486, 1485, 1490, 1490, 1490, 1495, 1488,
     1495,  922, 1495, 1483, 1495, 1491, 1491, 1491, 1487, 1487,
     1487, 1493, 1493, 1493, 1489, 1489, 1489, 1495, 1492, 1495,
     1495, 1488, 1495, 1490, 1490, 1490, 1491, 1491, 1491, 1494,
     1494, 1494, 1493, 1493, 1493, 1494, 1494, 1494, 1495, 1492,
     1495,   23,   23,   23,   23,   23,   31,   31,   31,   31,
       31,   33,   33,   33,   33,   33,   34,   34,   34,   34,
       34,   32,   32,   32,   32,   32,   35,   35,   35,   35,

       35,   38,   38,   38,   38,   38,   42,  903,  902,   42,
       82,   82,   82,   82,   83,   83,  901,   83,   83,   84,
       84,   84,  900,   84,  899,  898,  897,  896,  895,  894,
      893,  892,  891,  890,  889,  888,  887,  886,  885,  884,
      883,  882,  881,  880,  879,  878,  877,  876,  875,  871,
      870,  869,  868,  867,  866,  865,  864,  861,  860,  859,
      858,  857,  856,  855,  854,  853,  852,  851,  850,  849,
      848,  847,  846,  845,  844,  843,  842,  841,  840,  839,
      827,  826,  825,  824,  823,  822,  821,  820,  819,  818,
      817,  816,  815,  814,  813,  812,  811,  810,  809,  808,

      807,  806,  805,  804,  803,  802,  801,  800,  799,  798,
      797,  796,  793,  792,  791,  790,  788,  785,  779,  778,
      777,  776,  775,  774,  773,  772,  771,  766,  765,  764,
      763,  762,  761,  760,  758,  757,  756,  755,  753,  735,
      734,  733,  732,  731,  730,  727,  726,  725,  724,  723,
      722,  721,  720,  719,  718,  715,  714,  713,  712,  711,
      710,  709,  708,  707,  706,  705,  704,  703,  702,  700,
      699,  694,  693,  689,  688,  687,  686,  685,  684,  683,
      682,  681,  680,  679,  674,  673,  672,  662,  661,  658,
      638,  637,  636,  635,  632,  631,  630,  629,  628,  627,

      626,  625,  624,  623,  622,  621,  620,  619,  618,  617,
      616,  608,  607,  606,  605,  604,  599,  598,  597,  596,
      595,  594,  591,  589,  588,  587,  586,  583,  582,  580,
      579,  578,  577,  576,  575,  574,  573,  572,  571,  557,
      556,  553,  552,  551,  550,  549,  548,  545,  544,  543,
      542,  541,  538,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  526,  525,  523,  522,  521,  520,
      519,  518,  517,  515,  514,  509,  508,  507,  506,  505,
      504,  503,  500,  497,  496,  495,  494,  493,  492,  491,
      477,  476,  475,  474,  473,  472,  471,  470,  469,  468,

      467,  466,  465,  464,  463,  462,  461,  460,  459,  458,
      455,  454,  453,  452,  451,  450,  449,  448,  446,  443,
      442,  441,  440,  439,  438,  434,  433,  432,  429,  428,
      426,  425,  424,  423,  422,  421,  419,  418,  417,  416,
      415,  414,  413,  412,  411,  386,  385,  384,  383,  382,
      381,  380,  379,  378,  377,  376,  375,  373,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,
      360,  359,  358,  357,  353,  352,  351,  350,  349,  348,
      347,  346,  345,  344,  343,  342,  341,  340,  333,  332,
      328,  327,  326,  325,  324,  323,  322,  298,  297,  296,

      295,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  267,  266,  265,  264,  263,  262,  261,
      260,  259,  256,  255,  254,  253,  252,  251,  250,  249,
      248,  244,  243,  242,  241,  240,  166,  220,  219,  218,
      217,  216,  215,  214,  213,  212,  209,  208,  207,  206,
      205,  204,  203,  202,  201,  197,  196,  195,  194,  193,
      192,  191,  190,  185,  175,  174,  173,  172,  171,  168,
      167,  166,  148,  146,  145,  144,  139,  129,  128,  127,
      126,  125,  122,  106,   86,   85, 1495,   32,   32,   32,

       32,   32,   32,   17, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495
    } ;

static yyconst flex_int16_t yy_chk[3167] =
    {   0,
        1,    1,    1,    1,    1,    1,   15,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   13,   14,   16,
       15,   23,    1,   23,   13,   14,   24,   44,   24,   24,
       26,   24,   26,   16,   30,   42,   30,   42,   24,   44,
      553,   25,   25,   43,   25,   43,  553,   67,   30,   25,
       27,   67,   27,   27,   48,   27,   48,   47,  855,   47,
       27,    1,    2,    2,    2,    2,    2,    2,   25,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,   27,
       46,  856,   46,   47,    2,   49,   50,   49,   50,   51,
       52,   51,   52,   48,   53,   56,   53,   56,   55,   73,

       55,   54,   46,   54,   59,  858,   59,   73,  859,   50,
       49,   51,   52,   87,   75,   87,  108,   56,   59,  860,
      108,   55,   50,    2,   19,   19,   19,   81,  861,   81,
       53,   75,   52,   55,   19,   81,   19,   54,   19,  864,
       54,   57,   57,   58,   57,   58,   58,   54,   58,   57,
       90,  461,   90,   58,   87,  461,   60,   60,  474,   60,
       19,   19,  474,   19,   60,   89,   19,   89,   57,   19,
       19,   19,   58,   88,  865,   88,   19,   19,   19,   19,
       20,   20,   20,   60,   61,   61,   74,  866,   61,   61,
       20,   61,   20,  867,   20,   90,   77,   92,   77,   92,

       74,   89,  868,   74,   74,   74,  114,   91,   77,   91,
       93,  505,   93,   88,  114,  505,   20,   20,   77,   20,
      870,   92,   20,  531,  116,   20,   20,   20,   91,   94,
      531,   94,   20,   20,   20,   20,   28,   95,   98,   95,
       98,  116,   93,   28,   96,  871,   96,  100,   28,  100,
      137,  137,   97,   97,   97,  104,  104,   99,  104,   99,
       98,  183,  183,   94,   97,   97,   97,  575,  100,   28,
       28,   95,   28,   28,  575,   28,   28,   96,   28,   28,
      876,   28,   28,  877,   28,   28,   28,   28,   28,   64,
       64,  878,   64,   64,   99,   64,   64,  880,   64,   64,

      881,   64,   64,  115,   64,   64,   64,   64,   64,  101,
      102,  101,  102,  105,  105,  882,  105,  115,  883,  127,
      115,  115,  115,  118,  884,  118,  127,  885,  147,  127,
      147,  149,  150,  149,  150,  118,  151,  886,  151,  101,
      152,  152,  152,  102,  153,  118,  153,  154,  155,  154,
      155,  522,  152,  152,  152,  522,  150,  149,  156,  157,
      156,  157,  158,  161,  158,  161,  153,  193,  193,  154,
      151,  162,  887,  162,  155,  159,  159,  159,  888,  160,
      160,  160,  157,  160,  156,  160,  889,  159,  159,  159,
      163,  164,  163,  164,  165,  891,  165,  162,  161,  173,

      204,  204,  221,  892,  221,  158,  173,  893,  204,  173,
      894,  222,  163,  222,  223,  223,  223,  225,  225,  225,
      895,  224,  224,  224,  896,  897,  223,  223,  223,  226,
      221,  226,  164,  224,  224,  224,  165,  227,  228,  227,
      228,  898,  899,  228,  229,  229,  229,  230,  900,  230,
      222,  231,  235,  231,  235,  902,  229,  229,  229,  232,
      232,  232,  226,  232,  237,  232,  237,  236,  236,  236,
      238,  238,  238,  230,  239,  903,  239,  231,  227,  236,
      236,  236,  238,  238,  238,  240,  240,  240,  248,  248,
      248,  923,  235,  251,  251,  924,  299,  237,  299,  240,

      239,  251,  248,  252,  252,  252,  267,  267,  267,  248,
      285,  285,  285,  300,  304,  300,  304,  252,  925,  927,
      267,  301,  301,  301,  302,  302,  302,  305,  302,  305,
      302,  928,  299,  301,  301,  301,  929,  240,  240,  930,
      306,  252,  306,  300,  303,  303,  303,  931,  267,  307,
      307,  307,  309,  310,  309,  310,  304,  305,  311,  932,
      311,  307,  307,  307,  308,  308,  308,  314,  308,  314,
      308,  312,  312,  312,  933,  364,  306,  364,  934,  318,
      318,  318,  935,  312,  312,  312,  319,  319,  319,  936,
      938,  309,  310,  318,  939,  311,  313,  313,  313,  398,

      313,  398,  313,  315,  315,  315,  316,  316,  316,  314,
      316,  418,  316,  418,  398,  315,  315,  315,  317,  317,
      317,  329,  329,  329,  330,  330,  330,  337,  337,  337,
      317,  317,  317,  942,  943,  329,  338,  338,  338,  944,
      945,  337,  341,  341,  341,  345,  345,  345,  352,  352,
      352,  354,  354,  354,  946,  387,  341,  387,  388,  345,
      388,  392,  352,  392,  947,  354,  355,  355,  355,  374,
      374,  374,  948,  345,  389,  389,  389,  393,  389,  393,
      389,  394,  949,  394,  395,  395,  395,  392,  395,  953,
      395,  399,  399,  399,  387,  388,  400,  404,  400,  404,

      410,  410,  410,  399,  399,  399,  401,  401,  401,  467,
      401,  467,  401,  393,  954,  405,  405,  405,  394,  405,
      479,  405,  479,  404,  408,  408,  408,  409,  409,  409,
      957,  409,  400,  409,  958,  959,  408,  408,  408,  420,
      420,  420,  421,  421,  421,  427,  427,  427,  430,  430,
      430,  431,  431,  431,  960,  961,  421,  432,  432,  432,
      962,  479,  430,  435,  435,  435,  436,  436,  436,  963,
      964,  432,  444,  444,  444,  965,  966,  435,  445,  445,
      445,  447,  447,  447,  432,  478,  444,  478,  480,  480,
      480,  481,  482,  481,  482,  483,  486,  483,  486,  970,

      480,  480,  480,  484,  484,  484,  485,  485,  485,  514,
      485,  514,  485,  973,  974,  484,  484,  484,  975,  488,
      488,  488,  483,  488,  976,  488,  481,  487,  487,  487,
      977,  478,  501,  501,  501,  486,  978,  979,  482,  487,
      487,  487,  502,  502,  502,  980,  501,  510,  510,  510,
      511,  511,  511,  512,  512,  512,  516,  516,  516,  523,
      523,  523, 1002, 1003,  511,  524,  524,  524,  533,  533,
      533, 1006, 1007,  523,  558,  558,  558, 1008,  559,  533,
      559,  560,  560,  560, 1009,  533,  558,  558,  558,  568,
      562,  568,  562,  560,  560,  560,  561,  561,  561,  618,

      561,  618,  561,  563,  563,  563, 1010, 1011,  559,  562,
      572,  572,  572, 1012, 1013,  563,  563,  563,  564,  631,
      564,  631, 1019,  564,  572,  565,  565,  565,  564,  565,
      568,  565, 1023,  564,  564,  674,  564,  674, 1024,  564,
      569,  569,  569,  570,  570,  570, 1025,  570,  641,  570,
      641, 1026,  569,  569,  569,  576,  576,  576, 1027,  577,
      577,  577,  581,  581,  581,  582,  582,  582, 1028,  576,
      577,  583,  583,  583, 1033,  693,  577,  693, 1036,  582,
      590,  590,  590, 1037,  641,  583,  596,  596,  596,  599,
      599,  599,  602,  602,  602,  603,  603,  603, 1034,  645,

      596,  645,  835,  599,  835, 1034,  602,  640,  640,  640,
      746,  640,  746,  640, 1038,  599,  639,  639,  639, 1039,
      648,  599,  648,  649,  596,  649,  835, 1040,  639,  639,
      639,  642,  642,  642,  650,  642,  650,  642,  646,  646,
      646,  746,  647,  647,  647,  645,  647,  651,  647,  651,
      646,  646,  646,  652, 1041,  652,  648,  650,  653,  649,
      653, 1042,  654,  748,  654,  748,  655,  655,  655,  651,
      655,  751,  655,  751, 1043,  650,  659,  659,  659, 1045,
      653,  654,  660,  660,  660,  750,  651,  750, 1046,  652,
      659,  665,  665,  665,  666,  666,  666,  675,  675,  675,

      676,  676,  676, 1047,  748,  665,  677,  677,  677, 1048,
      751,  675,  678,  678,  678,  688,  688,  688,  750, 1050,
      677,  689,  689,  689,  690,  690,  690, 1052, 1076,  688,
      691,  691,  691, 1077,  739,  689,  739, 1078,  690,  695,
      695,  695,  696,  696,  696,  701,  701,  701,  702,  702,
      702, 1079, 1080,  695,  736,  736,  736,  740,  736,  740,
      736,  744,  702,  744,  741,  741,  741, 1081,  741,  739,
      741,  747,  745,  747,  745,  749,  752,  749,  752,  754,
      754,  754,  759,  759,  759,  769,  769,  769,  770,  770,
      770,  780,  780,  780,  740,  745,  744,  781,  781,  781,

      747,  782,  782,  782, 1082,  780,  783,  783,  783, 1083,
     1096,  749,  784,  784,  784,  782,  789,  789,  789,  794,
      794,  794,  752,  795,  795,  795,  796,  796,  796,  828,
      828,  828,  829,  794,  829,  830,  830,  830, 1073, 1097,
      796,  828,  828,  828,  831, 1073,  831,  830,  830,  830,
      832,  832,  832,  831,  833,  834,  833,  834,  829,  836,
     1098,  836,  832,  832,  832,  837,  837,  837,  838, 1099,
      838,  857,  857,  857,  862,  862,  862,  837,  837,  837,
      833,  863,  863,  863,  834,  857, 1101,  830,  832,  869,
      869,  869,  872,  872,  872,  873,  873,  873,  874,  874,

      874, 1106,  836,  869,  909,  838,  909,  837, 1107,  873,
      904,  904,  904,  905,  905,  905,  914,  905,  914,  905,
     1108, 1109,  904,  904,  904,  906,  906,  906,  907,  907,
      907,  908,  908,  908,  912,  912,  912,  906,  906,  906,
      907,  907,  907, 1110,  910,  909,  910,  911,  911,  911,
      910,  913,  915,  913,  915,  914,  916, 1111,  916,  911,
      911,  911,  917, 1112,  917,  918,  918,  918,  915,  919,
      919,  919,  920, 1113,  920,  913, 1114,  918,  918,  918,
     1115,  921,  916,  921,  922,  922,  922, 1116,  917,  926,
      926,  926,  915, 1117,  920,  937,  937,  937,  922,  940,

      940,  940, 1118,  926,  941,  941,  941,  921, 1119,  937,
      950,  950,  950,  940,  951,  951,  951,  952,  952,  952,
      955,  955,  955, 1120,  950,  981,  981,  981,  951,  981,
     1121,  981,  984,  984,  984,  985,  985,  985,  987,  985,
      987,  985, 1140, 1141,  984,  984,  984,  986,  986,  986,
      988, 1144,  988,  989,  989,  989,  990,  991,  990,  991,
     1145,  992,  991,  992,  994, 1146,  994,  993,  993,  993,
     1147,  995,  991,  995,  996,  996,  996,  987,  991,  993,
      993,  993,  997,  992,  997, 1148,  998,  998,  998, 1065,
      988, 1065,  999,  999,  999, 1149, 1150,  990,  998,  998,

      998, 1000, 1000, 1000,  994,  997,  999, 1001, 1001, 1001,
      995, 1004, 1004, 1004, 1005, 1005, 1005, 1014, 1014, 1014,
     1151, 1001, 1015, 1015, 1015, 1004, 1016, 1016, 1016, 1065,
     1159, 1014, 1017, 1017, 1017, 1160, 1015, 1018, 1018, 1018,
     1016, 1020, 1020, 1020, 1021, 1021, 1021, 1022, 1022, 1022,
     1161, 1018, 1029, 1029, 1029, 1030, 1030, 1030, 1021, 1162,
     1165, 1022, 1031, 1031, 1031, 1170, 1029, 1032, 1032, 1032,
     1053, 1053, 1053, 1056, 1053, 1056, 1053, 1057, 1057, 1057,
     1058, 1032, 1058, 1171, 1059, 1060, 1059, 1060, 1172, 1057,
     1057, 1057, 1061, 1173, 1061, 1056, 1062, 1174, 1062, 1063,

     1063, 1063, 1064, 1064, 1064, 1067, 1175, 1067, 1060, 1176,
     1058, 1063, 1063, 1063, 1061, 1066, 1130, 1066, 1130, 1032,
     1059, 1177, 1060, 1068, 1068, 1068, 1062, 1069, 1069, 1069,
     1066, 1069, 1134, 1069, 1134, 1068, 1068, 1068, 1067, 1070,
     1070, 1070, 1071, 1071, 1071, 1072, 1072, 1072, 1074, 1074,
     1074, 1075, 1075, 1075, 1178, 1130, 1071, 1084, 1084, 1084,
     1179, 1180, 1074, 1085, 1085, 1085, 1086, 1086, 1086, 1134,
     1181, 1084, 1087, 1087, 1087, 1088, 1088, 1088, 1183, 1184,
     1086, 1089, 1089, 1089, 1090, 1090, 1090, 1091, 1091, 1091,
     1092, 1092, 1092, 1196, 1197, 1089, 1093, 1093, 1093, 1199,

     1200, 1091, 1201, 1202, 1092, 1094, 1094, 1094, 1095, 1095,
     1095, 1100, 1100, 1100, 1102, 1102, 1102, 1203, 1204, 1094,
     1103, 1103, 1103, 1205, 1206, 1100, 1104, 1104, 1104, 1105,
     1105, 1105, 1208, 1123, 1103, 1123, 1124, 1124, 1124, 1125,
     1125, 1125, 1126, 1105, 1126, 1127, 1209, 1127, 1124, 1124,
     1124, 1128, 1129, 1128, 1129, 1131, 1211, 1131, 1132, 1132,
     1132, 1213, 1133, 1123, 1133, 1135, 1217, 1135, 1136, 1136,
     1136, 1218, 1136, 1219, 1136, 1139, 1139, 1139, 1220, 1221,
     1127, 1187, 1128, 1187, 1223, 1126, 1224, 1227, 1133, 1228,
     1185, 1135, 1185, 1129, 1131, 1142, 1142, 1142, 1143, 1143,

     1143, 1152, 1152, 1152, 1153, 1153, 1153, 1187, 1229, 1142,
     1154, 1154, 1154, 1155, 1155, 1155, 1156, 1156, 1156, 1157,
     1157, 1157, 1158, 1158, 1158, 1185, 1230, 1155, 1163, 1163,
     1163, 1164, 1164, 1164, 1166, 1166, 1166, 1167, 1167, 1167,
     1241, 1242, 1163, 1168, 1168, 1168, 1169, 1169, 1169, 1243,
     1244, 1167, 1186, 1186, 1186, 1188, 1189, 1188, 1189, 1190,
     1169, 1190, 1191, 1192, 1191, 1192, 1193, 1194, 1193, 1194,
     1195, 1245, 1195, 1198, 1198, 1198, 1207, 1207, 1207, 1210,
     1210, 1210, 1189, 1212, 1212, 1212, 1214, 1214, 1214, 1190,
     1222, 1247, 1191, 1210, 1231, 1188, 1231, 1215, 1215, 1215,

     1216, 1216, 1216, 1192, 1248, 1251, 1193, 1222, 1194, 1252,
     1195, 1215, 1232, 1233, 1232, 1233, 1234, 1235, 1234, 1235,
     1236, 1239, 1236, 1239, 1237, 1237, 1237, 1249, 1249, 1249,
     1255, 1238, 1238, 1238, 1256, 1231, 1237, 1237, 1237, 1246,
     1234, 1249, 1236, 1238, 1238, 1238, 1240, 1240, 1240, 1258,
     1260, 1239, 1232, 1235, 1233, 1261, 1246, 1263, 1240, 1240,
     1240, 1250, 1250, 1250, 1253, 1253, 1253, 1254, 1254, 1254,
     1257, 1257, 1257, 1264, 1265, 1250, 1266, 1267, 1253, 1269,
     1270, 1271, 1284, 1271, 1272, 1272, 1272, 1273, 1274, 1273,
     1274, 1276, 1275, 1276, 1275, 1286, 1272, 1272, 1272, 1277,

     1277, 1277, 1278, 1278, 1278, 1279, 1279, 1279, 1280, 1280,
     1280, 1277, 1277, 1277, 1276, 1287, 1289, 1279, 1279, 1279,
     1281, 1271, 1281, 1282, 1282, 1282, 1273, 1275, 1290, 1274,
     1283, 1283, 1283, 1291, 1292, 1282, 1282, 1282, 1285, 1285,
     1285, 1288, 1288, 1288, 1293, 1293, 1293, 1294, 1294, 1294,
     1297, 1300, 1285, 1301, 1302, 1288, 1281, 1304, 1293, 1295,
     1295, 1295, 1296, 1296, 1296, 1298, 1298, 1298, 1299, 1299,
     1299, 1305, 1306, 1295, 1307, 1308, 1309, 1310, 1323, 1298,
     1312, 1312, 1312, 1313, 1313, 1313, 1314, 1314, 1314, 1315,
     1327, 1315, 1312, 1312, 1312, 1313, 1313, 1313, 1316, 1317,

     1316, 1317, 1318, 1330, 1318, 1319, 1319, 1319, 1320, 1320,
     1320, 1315, 1321, 1331, 1321, 1322, 1322, 1322, 1324, 1324,
     1324, 1325, 1325, 1325, 1326, 1326, 1326, 1332, 1316, 1328,
     1328, 1328, 1324, 1333, 1336, 1318, 1339, 1342, 1326, 1317,
     1329, 1329, 1329, 1328, 1334, 1334, 1334, 1321, 1335, 1335,
     1335, 1337, 1337, 1337, 1338, 1338, 1338, 1340, 1340, 1340,
     1343, 1344, 1345, 1346, 1347, 1337, 1349, 1349, 1349, 1361,
     1363, 1340, 1350, 1350, 1350, 1351, 1351, 1351, 1349, 1349,
     1349, 1352, 1353, 1352, 1353, 1354, 1354, 1354, 1355, 1356,
     1355, 1356, 1357, 1357, 1357, 1364, 1365, 1354, 1354, 1354,

     1358, 1358, 1358, 1359, 1359, 1359, 1357, 1360, 1360, 1360,
     1366, 1352, 1367, 1372, 1355, 1373, 1374, 1359, 1362, 1362,
     1362, 1368, 1368, 1368, 1375, 1353, 1369, 1369, 1369, 1356,
     1370, 1370, 1370, 1371, 1371, 1371, 1376, 1377, 1388, 1389,
     1369, 1378, 1378, 1378, 1370, 1379, 1380, 1379, 1380, 1381,
     1381, 1381, 1382, 1382, 1382, 1383, 1390, 1383, 1386, 1386,
     1386, 1381, 1381, 1381, 1384, 1384, 1384, 1385, 1385, 1385,
     1383, 1391, 1380, 1387, 1387, 1387, 1384, 1384, 1384, 1392,
     1379, 1385, 1393, 1394, 1394, 1394, 1395, 1395, 1395, 1396,
     1396, 1396, 1397, 1398, 1399, 1400, 1401, 1394, 1402, 1403,

     1404, 1403, 1404, 1405, 1405, 1405, 1406, 1410, 1406, 1407,
     1407, 1407, 1408, 1408, 1408, 1404, 1409, 1409, 1409, 1411,
     1412, 1407, 1407, 1407, 1413, 1413, 1413, 1414, 1415, 1416,
     1416, 1416, 1417, 1420, 1422, 1423, 1427, 1423, 1413, 1424,
     1403, 1424, 1425, 1406, 1425, 1426, 1426, 1426, 1432, 1434,
     1423, 1428, 1428, 1428, 1413, 1429, 1429, 1429, 1430, 1430,
     1430, 1431, 1431, 1431, 1436, 1428, 1433, 1433, 1433, 1429,
     1447, 1438, 1430, 1438, 1451, 1439, 1424, 1439, 1459, 1440,
     1433, 1440, 1463, 1425, 1441, 1441, 1441, 1442, 1442, 1442,
     1443, 1443, 1443, 1444, 1444, 1444, 1468, 1452, 1441, 1452,

     1470, 1442, 1445, 1445, 1445, 1474,  854, 1444, 1438, 1440,
     1446, 1446, 1446, 1448, 1448, 1448, 1439, 1449, 1449, 1449,
     1450, 1450, 1450, 1453, 1454, 1453, 1454, 1448, 1455, 1455,
     1455, 1456, 1456, 1456, 1450, 1457, 1457, 1457, 1452, 1458,
     1458, 1458, 1455, 1460, 1460, 1460,  853, 1461, 1461, 1461,
     1462, 1462, 1462, 1453, 1464, 1465, 1464, 1465,  852,  851,
     1454, 1461, 1466,  850, 1466, 1467, 1467, 1467, 1469, 1469,
     1469, 1471,  849, 1471, 1472, 1473, 1472, 1473, 1476, 1477,
     1476, 1477,  848, 1480, 1464, 1480, 1478, 1478, 1478,  847,
      846, 1465, 1479, 1479, 1479,  845,  844, 1466, 1478, 1478,

     1478, 1483, 1483, 1483,  843,  842, 1479, 1471,  841, 1472,
     1484, 1484, 1484, 1476,  840, 1473, 1481, 1481, 1481, 1477,
     1482, 1482, 1482, 1480, 1484, 1485, 1485, 1485, 1481, 1481,
     1481,  839, 1482, 1482, 1482, 1486, 1486, 1486, 1487, 1487,
     1487, 1488, 1488, 1488, 1489, 1489, 1489, 1486, 1486, 1486,
     1487, 1487, 1487, 1490, 1490, 1490, 1491, 1491, 1491, 1492,
     1492, 1492, 1493, 1493, 1493, 1494, 1494, 1494, 1491, 1491,
     1491, 1496, 1496, 1496, 1496, 1496, 1497, 1497, 1497, 1497,
     1497, 1498, 1498, 1498, 1498, 1498, 1499, 1499, 1499, 1499,
     1499, 1500, 1500, 1500, 1500, 1500, 1501, 1501, 1501, 1501,

     1501, 1502, 1502, 1502, 1502, 1502, 1503,  827,  826, 1503,
     1504, 1504, 1504, 1504, 1505, 1505,  824, 1505, 1505, 1506,
     1506, 1506,  823, 1506,  822,  821,  820,  819,  818,  817,
      816,  814,  813,  812,  811,  810,  809,  808,  807,  806,
      805,  804,  803,  802,  801,  800,  799,  798,  797,  793,
      792,  791,  790,  788,  787,  786,  785,  779,  778,  777,
      776,  775,  774,  773,  772,  771,  768,  767,  766,  765,
      764,  763,  762,  761,  760,  758,  757,  756,  755,  753,
      734,  733,  732,  731,  730,  729,  728,  727,  726,  725,
      724,  723,  722,  721,  720,  719,  718,  717,  716,  715,

      714,  713,  712,  711,  710,  709,  708,  707,  706,  705,
      704,  703,  700,  699,  698,  697,  694,  692,  687,  686,
      685,  684,  683,  682,  681,  680,  679,  673,  672,  671,
      670,  669,  668,  667,  664,  663,  662,  661,  658,  638,
      636,  635,  634,  633,  632,  630,  627,  626,  625,  624,
      623,  622,  621,  620,  619,  617,  616,  615,  614,  613,
      612,  611,  610,  609,  608,  607,  606,  605,  604,  601,
      600,  598,  597,  595,  594,  593,  592,  591,  589,  588,
      587,  586,  585,  584,  580,  579,  578,  574,  573,  571,
      557,  556,  555,  554,  552,  551,  550,  549,  548,  547,

      546,  545,  544,  543,  542,  541,  540,  539,  536,  535,
      534,  530,  529,  527,  526,  525,  521,  520,  519,  518,
      517,  515,  513,  509,  508,  507,  506,  504,  503,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  477,
      476,  473,  472,  471,  470,  469,  468,  466,  465,  464,
      463,  462,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  448,  446,  443,  442,  441,  440,
      439,  438,  437,  434,  433,  429,  428,  426,  425,  424,
      423,  422,  419,  417,  416,  415,  414,  413,  412,  411,
      386,  385,  384,  383,  382,  381,  380,  379,  378,  377,

      376,  375,  373,  372,  371,  370,  369,  368,  367,  365,
      363,  362,  361,  360,  359,  358,  357,  356,  353,  351,
      350,  349,  348,  347,  346,  344,  343,  342,  340,  339,
      336,  335,  334,  333,  332,  331,  328,  327,  326,  325,
      324,  323,  322,  321,  320,  298,  297,  295,  294,  293,
      292,  291,  290,  289,  288,  287,  286,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  266,  265,  264,  263,  262,  261,
      260,  259,  258,  257,  256,  255,  254,  253,  250,  249,
      247,  246,  245,  244,  243,  242,  241,  220,  219,  218,

      217,  216,  215,  214,  213,  212,  211,  210,  209,  208,
      207,  206,  205,  203,  202,  201,  200,  199,  198,  197,
      196,  195,  194,  192,  191,  190,  189,  188,  187,  186,
      185,  184,  182,  181,  180,  179,  178,  177,  176,  175,
      174,  172,  171,  170,  169,  168,  166,  146,  145,  144,
      143,  142,  141,  140,  139,  138,  136,  135,  134,  133,
      132,  131,  130,  129,  128,  126,  125,  124,  123,  122,
      121,  120,  119,  117,  113,  112,  111,  110,  109,  107,
      106,  103,   85,   80,   79,   78,   76,   72,   71,   70,
       69,   68,   66,   63,   40,   37,   17,    8,    7,    6,

        5,    4,    3, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[175] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin, 
 * @version 1.1, 10/07/2008
 * @since   OS1.1
 *
 * \remarks
 * Copyright (C) 2005-2008, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSoLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"

#define PARSERDEBUG

#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;








#line 100 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 1746 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 110 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"


 
#line 1992 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1496 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3104 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 113 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 118 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 119 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 120 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 122 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 136 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 138 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 139 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 140 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 141 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 142 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 143 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 144 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 145 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 146 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 147 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 148 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 149 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 150 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 151 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 152 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 153 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 155 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 156 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 157 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 158 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 159 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 160 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 161 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 162 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 163 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 164 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 165 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 166 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 167 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 168 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 169 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 170 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 171 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 172 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 173 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 174 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 175 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 176 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 177 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 178 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 179 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 180 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 181 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 182 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 185 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 186 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 187 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 188 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 189 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 190 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 191 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 192 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 193 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 194 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 195 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 196 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 198 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 199 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 200 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 201 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 202 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 203 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 204 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 205 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 206 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 207 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 208 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 209 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 210 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 211 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 212 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 213 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 214 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 215 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 216 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 217 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 218 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 219 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 220 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 221 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 223 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 224 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 225 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZESTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 226 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZEEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 227 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 228 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 229 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 230 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 232 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 233 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 235 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 236 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 237 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 238 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 239 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 240 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 241 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 242 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 243 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 244 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 245 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 246 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 247 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 248 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 249 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 250 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 251 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 252 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 253 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 254 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 255 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 256 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 257 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 258 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 259 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 260 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 261 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 262 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 263 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 264 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 265 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 266 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 267 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 268 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 271 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 272 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 273 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 274 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 275 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 276 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 277 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 278 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 279 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 280 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 281 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 282 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 283 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 284 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 285 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 286 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 287 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 288 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 289 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 290 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 291 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 292 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 293 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 294 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 295 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 296 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 297 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 298 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 299 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 300 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 303 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; /*yylval->sval = strdup( yytext);*/   yylval->sval = yytext; yyextra->errorText = yylval->sval;  return (ELEMENTTEXT); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 306 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 163:
#line 308 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 308 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 309 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 311 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 167:
#line 313 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 313 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 314 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 317 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 318 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;  return(ATTRIBUTETEXT);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 319 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 321 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 333 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 3141 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1496 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1496 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1495);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 333 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"





