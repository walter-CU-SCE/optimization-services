#line 2 "OSParseosol.cpp"

#line 4 "OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osollex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 186
#define YY_END_OF_BUFFER 187
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1754] =
    {   0,
        0,    0,  184,  184,  182,  182,  183,  183,    0,    0,
        0,    0,    0,    0,    0,    0,  187,  185,    1,    1,
        1,    2,  173,  185,    5,  185,    4,  185,    3,  173,
      184,  186,  182,  183,  175,  176,  175,  179,  180,  179,
        0,    0,    0,    3,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,    5,    4,
        0,    5,  173,    6,    5,    4,    0,    0,  178,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  173,  184,  182,  183,    0,  181,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,    5,    0,    0,    0,    5,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    5,  177,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  173,  173,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,    5,    5,  174,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  165,    0,    0,    0,    0,    0,    0,    0,   75,
        0,    0,    0,  157,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  151,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   29,   30,    0,    0,    0,    0,    0,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  173,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  121,    0,    0,    0,    0,    0,    0,  111,
        0,    0,    0,    0,    0,    0,    0,   45,   46,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,    0,  166,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   76,
        0,    0,    0,    0,    0,    0,    0,  158,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  152,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   87,    0,    0,    0,    0,
        0,    0,    0,   67,  101,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   27,
       28,    0,    0,    0,    0,   13,   14,    0,    0,    0,
        0,   51,   52,    0,    0,   19,   20,    0,    0,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  166,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   76,
        0,    0,    0,    0,    0,    0,  158,    0,    0,    0,
       68,    0,    0,    0,    0,  122,    0,    0,    0,    0,
        0,    0,    0,    0,  112,    0,  152,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   71,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   15,   16,
      173,  173,  173,  173,  173,  173,  173,  173,  173,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       88,    0,    0,    0,    0,    0,    0,    0,   68,    0,
      102,    0,    0,    0,  122,    0,    0,    0,    0,    0,
        0,    0,  112,    0,    0,    0,   97,    0,    0,    0,
       69,    0,    0,    0,    0,   91,  113,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  145,    0,
        0,   73,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   47,   48,    0,    0,    0,  173,
      173,  173,  173,  173,  173,  173,  173,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   88,    0,    0,
        0,    0,    0,    0,    0,    0,  102,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   95,  133,    0,    0,    0,    0,    0,
        0,    0,   93,    0,    0,    0,    0,    0,   53,   54,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   55,   56,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,    0,    0,   98,    0,    0,    0,
        0,    0,   70,    0,    0,    0,    0,    0,    0,    0,
        0,   92,    0,  114,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  146,    0,    0,    0,
        0,   74,    0,    0,    0,    0,   72,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  147,
        0,   49,   50,    0,    0,    0,   31,   32,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,    0,   98,
        0,    0,    0,    0,   70,    0,    0,    0,    0,    0,
        0,    0,    0,   92,  114,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   96,    0,  134,  146,    0,
        0,    0,    0,   74,    0,    0,    0,    0,    0,   94,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  153,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   79,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   96,  134,    0,    0,    0,

        0,    0,    0,    0,    0,   94,    0,  148,  161,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  107,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   81,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  154,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   80,    0,    0,

      148,  117,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   83,  109,  103,    0,   77,   99,    0,    0,
        0,    0,    0,    0,  171,    0,    0,   17,   18,    0,
        0,    0,   63,   64,    0,    0,    0,   59,   60,    0,
        0,    0,    0,    0,    0,    0,   43,   44,    0,    0,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,    0,  162,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  108,    0,    0,
      154,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       82,   80,    0,    0,    0,  127,  141,    0,    0,    0,

        0,    0,    0,    0,  105,    0,    0,    0,    0,  123,
        0,  169,    0,    0,    7,    8,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  162,    0,  118,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   84,    0,  110,  108,
        0,  104,    0,    0,   78,    0,  100,    0,    0,    0,
        0,    0,    0,   82,    0,  172,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   89,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   23,   24,    0,    0,    0,    0,    9,
       10,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  118,    0,    0,    0,  128,    0,  142,    0,
        0,    0,    0,    0,    0,    0,   84,  110,  104,    0,
      106,   78,  100,    0,    0,    0,    0,    0,  124,    0,
      172,    0,  170,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  143,    0,    0,    0,    0,
       21,   22,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,    0,    0,  128,  142,    0,    0,    0,    0,    0,

        0,    0,  106,    0,    0,    0,    0,  124,    0,  170,
        0,   90,    0,    0,    0,    0,    0,    0,    0,  131,
       85,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  144,    0,    0,
       90,    0,  125,    0,  167,    0,    0,    0,    0,    0,
      137,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  132,    0,   86,    0,    0,
      144,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  115,    0,    0,    0,    0,    0,    0,    0,    0,
       25,   26,    0,   33,   34,    0,    0,   35,   36,  173,
      173,  173,  173,  173,  173,  173,    0,    0,  126,    0,
        0,  168,    0,    0,    0,    0,  132,   86,    0,    0,
      138,    0,    0,  139,    0,    0,    0,    0,    0,    0,
      119,    0,    0,    0,   37,   38,    0,    0,    0,    0,
        0,  173,  173,  173,  173,  173,  173,    0,  126,    0,
      168,    0,    0,    0,    0,    0,  138,    0,    0,  116,

        0,    0,    0,    0,    0,    0,    0,   39,   40,    0,
        0,    0,    0,    0,    0,  173,  173,  173,  173,  173,
        0,  140,    0,    0,    0,    0,    0,    0,    0,  120,
      116,    0,    0,    0,  149,    0,    0,    0,    0,    0,
       11,   12,    0,    0,    0,  173,  173,  173,  173,  140,
        0,    0,    0,    0,    0,    0,  120,    0,  159,  155,
      129,    0,    0,    0,    0,    0,   65,   66,  173,  173,
      173,    0,    0,    0,    0,  150,    0,    0,  163,  135,
        0,    0,    0,  173,  173,  173,    0,    0,  160,    0,
      156,  150,    0,  130,    0,    0,    0,    0,  173,  173,

      173,    0,  164,  160,  156,  130,    0,  136,    0,    0,
        0,  173,  173,  173,  164,  136,    0,    0,    0,  173,
      173,  173,    0,    0,    0,  173,  173,  173,    0,    0,
        0,    0,  173,  173,  173,    0,    0,    0,    0,   41,
       42,  173,  173,    0,    0,    0,   57,   58,  173,    0,
       61,   62,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    7,    1,    1,    8,    1,
        1,    7,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    7,    1,   14,
       15,   16,   17,    7,    7,   18,   19,   20,   21,   22,
        7,    7,   23,   24,   25,   26,   27,   28,   29,   30,
        7,   31,   32,   33,   34,   35,    7,    7,    1,    1,
        1,    1,    1,    1,    7,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,    1,   62,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    2,    2,    2,    1,    3,    2,    4,    1,    1,
        2,    2,    2,    2,    1,    5,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    1
    } ;

static yyconst flex_int16_t yy_base[1765] =
    {   0,
        0,   62, 4047, 4046, 4055, 4054, 4051, 4050,    0,    0,
        0,    0,   15,   16,    4,   17, 4057, 4064,  123,  179,
      235, 4064,   25,   17,   40, 4040,   79,  288, 4064,   31,
        0, 4064,    0,    0, 4064, 4064, 4045, 4064, 4064, 4038,
        0, 4037,   19, 4064, 4016, 4011, 3997, 4010,    1, 4012,
       13, 3997,   34,    9, 4010,    0,   87,   94,  100,   95,
      120,  139,  172,  185,  140,  190,  250,  242,  107,  110,
     4017,  294,  307, 4064,  335,  348, 4034,  351, 4064, 3993,
        4, 3998, 4001, 3991, 3989, 3994,   69,  159,   62, 3997,
      125, 3976, 3981, 3998,  243,    0,    0,    0, 4017, 4064,

     3977, 3977, 3980, 3970, 3993, 3989, 3980, 3977, 3976, 3976,
      142, 3986, 3970, 3985, 3975, 3971,  356,  364,  365,  371,
      398,  407,  415,  420,  423,  426,  444,  439,  450,  465,
      468,  474,  190,   22, 3995, 4003,  481, 4005, 3964,   42,
     3969, 3972, 3962, 3960, 3965,  122,  216,  107, 3968,  169,
     3947, 3952, 3969, 3955, 3952, 3949, 3954, 3951,    6, 3962,
     3960, 3938, 3947, 3950, 3939, 3943, 3949, 3936,   63, 3940,
     3937, 3945, 3934, 3939, 3931, 3933, 3943, 3929,  490, 4064,
     3941, 3942, 3931,  299, 3942, 3941, 3936, 3935, 3937, 3916,
      309,  505, 3923, 3931, 3934, 3914, 3912,  503,  508,  514,

      533,  538,  539,  554,  555,  570,  571,  576,  587,  594,
      602,  603,  609, 3954, 4064, 4064, 3917, 3914, 3911, 3916,
     3913,  244, 3924, 3922, 3900, 3909, 3912, 3901, 3905, 3911,
     3898,  114, 3902, 3899, 3907, 3896, 3901, 3893, 3895, 3905,
     3891,  170, 3903, 3902, 3901, 3900, 3884, 3882, 3882, 3913,
     3895, 3901,  241, 3893, 3888, 3884, 3890, 3878, 3874, 3884,
     3888, 3869, 3884, 3866, 3865, 3866, 3880, 3866, 3874, 3875,
     3863,  350,  529,  557, 3868, 3859, 3894,  627, 3872, 3871,
      637, 4064, 4064, 3856,  644, 3862,  647, 3868,  610,  652,
      667,  672,  678,  683,  694,  700,  705,  716,  721,  737,

      732,  755,  748,  770, 3867, 3866, 3865, 3864, 3848, 3846,
     3846,  774, 3860, 3866,  430,  778, 3854, 3850, 3856, 3844,
     3840, 3850, 3854, 3835, 3850, 3832, 3831, 3832, 3846, 3832,
      789, 3829, 3847, 3833, 3843, 3826, 3826, 3834, 3822, 3840,
     3855, 3825, 3829, 3842, 3827, 3830, 3831, 3820,  653, 3814,
     3810, 3807, 3834, 3823, 3818, 3822, 3816, 3819, 3818, 4064,
     3829, 3820, 3805, 3810,  781,  796,  804, 4064, 4064, 3797,
     3808, 3801,  811,  826, 3796, 3790, 3784,  833,  836, 3778,
      843,  847,  857,  807,  850,  865,  871,  872,  887,  893,
      888,  908,  909,  928,  933,  950,  955,  910,  889, 3739,

     3755, 3740, 3743, 3720, 3719, 3718, 3702, 3719,  970,  915,
     3734, 3701, 3705, 3713, 3697, 3696,  974,  977, 3696, 3681,
      980, 3675, 3670, 3664,  989, 3680, 3660, 3663, 3656, 3659,
     3654,  995, 3663,  998, 1004, 3649, 3627, 3637, 3633, 3616,
     3629, 3624, 3621,  178, 3604, 4064, 3596, 3600, 3609, 3581,
     3586, 3577, 3586, 1013, 3599, 3566, 3559, 3571, 3552, 3551,
     3545, 3538, 3499, 3502, 3513, 3492, 3471, 3471, 1018, 4064,
     4064, 3480, 3469, 3462, 1025, 4064, 4064, 3475, 1032, 3453,
     1035, 4064, 4064, 3457, 1042, 4064, 4064, 1049, 1052,  934,
     1047, 1055, 1060, 1063, 1068, 1087, 1071, 1092, 1113, 1109,

     3441, 3454, 3452, 3422, 3442, 3437, 3432,  226, 3417, 1116,
     1120, 3410, 3412, 3425, 3402, 3405, 1131, 3382, 3385, 1135,
     1138, 1141, 3352, 3350, 1144, 1150, 3363, 3340, 3340, 3321,
     3335, 3319, 3322, 1159, 1162, 3333, 1165, 3325, 3324, 3304,
     3317, 3305, 3299, 3300, 3296, 3297, 3295, 3299, 3290, 3276,
      101, 3256, 3251, 3255, 3237, 3245,  255, 3242, 3237, 3217,
     3229, 3220, 3226,  183, 4064, 3216, 3216, 3198, 3201, 1169,
     3202, 3187, 3202, 1174, 1177, 3186, 1184, 1188, 4064, 4064,
     1191, 1198, 1213, 1206, 1207, 1222, 1228, 1233, 1254, 3196,
     3172, 3186, 3172, 3163, 3155, 3153, 3151, 3150, 3148, 1257,

     1272, 3140, 3138,  253, 3130, 3125, 3125, 3103, 1275, 1278,
     1281, 3111,  335, 3107, 1285, 3114, 3099, 3109, 3091, 3097,
      289, 1288, 1293, 3085, 3085, 3083, 4064, 3076, 3067,  212,
     4064,  707, 3065, 3066, 3071, 4064, 4064, 3050, 3053, 3067,
     3045, 3039, 3055, 3035, 3032, 3031, 3031, 3016, 3027, 3027,
     3010,  235, 2993, 2992, 2998, 2997, 1296, 2987, 1299, 1304,
     2996, 1313, 1294, 1328, 4064, 4064, 2973, 1318, 1335, 1342,
     1347, 1362, 1367, 1382, 1399, 1390, 1405, 2982, 1422, 2969,
     2963,  424, 1433,  975, 2962, 2964, 2965, 1348, 1437, 1440,
     2947, 2950, 2966, 2943, 2937, 2957, 1368, 2935, 2939, 2935,

     2937, 2919, 1444, 2927, 2925, 1448, 2912, 2902, 1455, 1385,
     2910, 2902, 2892, 2900, 2892, 2868, 2880, 2868, 2861, 2876,
     2875, 2858, 2856,  356, 2844, 2850, 2834, 2816, 2833, 2814,
     2824, 2811, 2815, 4064, 4064, 2803,  404, 2812, 2799, 2803,
     2777, 2808, 4064, 2774, 1459, 1464, 2769, 1475, 4064, 4064,
     2744, 1483, 1486, 2753, 2748,  249,  169, 2747, 2747, 2738,
     1493, 4064, 4064, 1500, 1505, 1506, 1521, 1526, 1527, 1532,
     1545, 1551, 1548, 1556, 2720, 1576, 1507, 2725, 2718, 2707,
     2718, 1591, 1528, 2706, 2697, 2714, 2713, 2705, 2703,  437,
     1600, 1571, 1606, 1609, 2690, 2694, 2681, 2669, 2685, 2668,

     2672, 2656, 2653, 1615, 1621, 1624, 1630, 2645,  452, 2646,
     1639, 1642, 2648, 2629, 2603, 2629, 1645, 1648, 2597, 2579,
     2588, 2583, 2580, 2571, 2568, 2578, 2567, 2557, 2570, 2553,
     2555, 2567, 2564, 2554, 2554, 2556, 2525, 2533, 2523, 2528,
     2526, 2529, 2516, 2502, 2506,    7,   60,   44,   55, 4064,
     1654, 4064, 4064,   89,   98, 1663, 4064, 4064,  124,  157,
      197,  237,  239,  247,  278,  275,  271, 1661, 1666, 1672,
     1677, 1683, 1688, 1699, 1706, 1721, 1722, 1727,  285, 1703,
      302,  323,  331,  327, 1723,  337,  355,  349,  344,  365,
      359,  366,  384, 1742, 1745,  417,  429,  442,  453,  433,

      445,  441,  456,  458, 1748, 1755, 1758, 1763, 1767,  466,
      459,  470,  486, 1774,  475,  502,  483,  480, 1777, 1780,
     1786,  480,  498,  485,  506,  518,  510,  529,  537,  537,
      538,  564,  560,  552,  562,  570,  575,  576, 4064,  577,
      583,  595,  581,  587,  591,  606,  605,  621, 4064,  613,
      610, 1792,  632, 1795,  650, 1801,  637,  635,  651,  634,
     1809,  642, 1815, 1820, 1836, 1821, 1843, 1852, 1859, 1860,
     1865, 1885, 1868,  644,  660,  647,  673,  671,  666,  675,
      684,  685,  676,  710,  709,  706,  715,  722,  725,  721,
     1891,  716,  719,  749,  735, 1901, 1906,  745,  748,  756,

      756,  776, 1909,  767,  763, 1912, 1924, 1928, 4064,  768,
      794,  776,  786,  788,  819,  818,  827,  815,  820,  835,
      835,  823, 4064,  838,  821,  849,  852,  860,  895,  904,
      893,  894,  902, 4064,  890,  901, 1931, 1935, 1945, 1948,
     1951,  900,  936, 1962, 1965,  925,  915,  955,  935,  948,
     1972, 1976,  967,  972, 1986, 1991, 2006, 2011, 2012, 2027,
     2032, 2033, 2038, 2049, 2055, 2094, 2071, 2060, 2075,  959,
      985,  968,  970,  975,  997, 1002, 1006, 1016, 1018, 1042,
     1041, 1033, 2078, 1048, 1031, 2099, 2013, 1044, 1042, 1045,
     1072, 1082, 1069, 1086, 1094, 2109, 2114, 2034, 1082, 1099,

     2056, 4064, 1100, 1115, 1116, 1105, 1123, 1119, 1145, 1142,
     1170, 1143, 4064, 4064, 4064, 1161, 4064, 4064, 1152, 1154,
     1162, 1173, 1159, 1173, 1179, 1191, 2118, 4064, 4064, 2125,
     2129, 2139, 4064, 4064, 1186, 1187, 2146, 4064, 4064, 1191,
     1290, 1212, 2153, 1196, 1199, 2156, 4064, 4064, 1217, 2163,
     2167, 2161, 2172, 2178, 2172, 2183, 2206, 2201, 2222, 2223,
     2228, 2225, 2243, 2246, 1212, 1224, 1225, 1218, 1236, 1238,
     1268, 1274, 1308, 1285, 2249, 2254, 2264, 2269, 2274, 1302,
     2279, 2282, 2285, 1297, 1298, 1309, 1317, 1306, 1309, 2289,
     2292, 2300, 2304, 1321, 1348, 4064, 4064, 1337, 1333, 1338,

     1343, 1349, 1345, 1355, 4064, 1350, 1378, 1363, 1357, 4064,
     1359, 4064, 1376, 2307, 4064, 4064, 1386, 2314, 1383, 1380,
     1418, 1396, 1389, 2319, 2322, 1400, 1436, 1426, 2329, 2333,
     2336, 2351, 2345, 2362, 2367, 2378, 2383, 2405, 2384, 2399,
     2420, 2427, 2421, 2442, 2445, 1473, 2448, 2452, 1439, 1433,
     1447, 1458, 1462, 1463, 1482, 2457, 2467, 2472, 2475, 2478,
     2481, 2487, 2490, 2496, 2499, 2505, 2511, 1474, 1518, 1502,
     1496, 2514, 1497, 2520, 2523, 2529, 2532, 1514, 1516, 1535,
     1538, 1527, 1528, 1546, 1548, 1533, 1541, 1552, 1547, 1552,
     1550, 1572, 4064, 1562, 2538, 2541, 1557, 1566, 1575, 1566,

     1576, 1577, 2548, 4064, 4064, 1595, 1585, 1598, 2555, 4064,
     4064, 2553, 2568, 2562, 2573, 2579, 2584, 2590, 2597, 2613,
     2614, 2619, 2634, 1599, 1617, 2638, 2642, 2645, 2653, 1610,
     1603, 1604, 1630, 1632, 1619, 1631, 2660, 2664, 2667, 2670,
     2673, 2676, 2679, 1639, 1637, 1645, 1644, 2685, 2688, 1663,
     2691, 2694, 2700, 2703, 1651, 1657, 1660, 1672, 1676, 1684,
     1676, 1692, 1691, 1702, 1696, 4064, 1702, 1719, 1723, 2709,
     4064, 4064, 1733, 1731, 1746, 1747, 1748, 1746, 1747, 1751,
     1754, 2706, 2712, 2719, 2725, 2728, 2734, 2745, 2752, 2765,
     2768, 1762, 1768, 2772, 2783, 1766, 1780, 1781, 1790, 1772,

     1788, 1793, 2786, 1803, 1799, 2789, 1810, 2792, 1821, 2798,
     2805, 2808, 1829, 1838, 1830, 1832, 1888, 1855, 1863, 4064,
     4064, 1863, 1878, 1876, 1873, 1869, 1882, 1887, 1906, 1895,
     1920, 2811, 2814, 1914, 2821, 2825, 2828, 2831, 2836, 2844,
     2847, 2863, 2885, 2879, 2900, 1921, 1922, 1915, 1918, 2070,
     1945, 1950, 2868, 2903, 1931, 1946, 2906, 2851, 1947, 1944,
     2922, 1941, 4064, 1962, 4064, 1949, 1968, 1964, 1962, 1986,
     4064, 1993, 2013, 2001, 2925, 2003, 2009, 2026, 2047, 2928,
     2931, 2942, 2945, 2040, 2952, 2956, 2959, 2966, 2972, 2975,
     2983, 2990, 3005, 3031, 2998, 3037, 2038, 3020, 2064, 3052,

     2054, 2078, 2072, 2073, 3055, 3058, 3061, 3070, 2101, 3076,
     3079, 2096, 2098, 2099, 2108, 2090, 2104, 2097, 2134, 2122,
     2122, 4064, 3082, 3085, 3099, 2151, 2145, 2139, 2151, 3106,
     4064, 4064, 3113, 4064, 4064, 2151, 3120, 4064, 4064, 3127,
     3132, 3138, 3143, 3149, 3154, 3165, 2165, 3169, 3091, 2170,
     3180, 3186, 2155, 2165, 2160, 2196, 3189, 3195, 2204, 3202,
     3205, 2205, 3208, 4064, 2214, 2214, 2208, 2229, 2224, 2252,
     4064, 3213, 3217, 3227, 4064, 4064, 2253, 2242, 3234, 2260,
     2258, 3238, 3232, 3243, 3258, 3263, 3266, 3281, 3284, 2267,
     3287, 2270, 2271, 2300, 2292, 2316, 3290, 3302, 3305, 3308,

     2289, 2307, 2309, 2297, 2299, 2310, 3311, 4064, 4064, 2313,
     2328, 3320, 3323, 2341, 3330, 3326, 3334, 3349, 3342, 3364,
     3379, 3382, 2315, 2334, 2335, 2323, 2325, 2334, 3385, 3388,
     3394, 2347, 2334, 2337, 4064, 2353, 2345, 2348, 2376, 3400,
     4064, 4064, 2355, 3407, 3410, 3403, 3418, 3419, 3424, 3421,
     2370, 2362, 2372, 3439, 2393, 2378, 3442, 2383, 4064, 4064,
     4064, 2400, 2424, 2406, 2407, 3446, 4064, 4064, 3449, 3455,
     3460, 2409, 3477, 3480, 3483, 3486, 3498, 2425, 4064, 4064,
     2415, 2417, 2442, 3493, 3496, 3509, 3514, 3524, 3529, 3532,
     3535, 3539, 3543, 3552, 3558, 2432, 2451, 2446, 3555, 3556,

     3561, 3562, 3577, 3580, 3583, 3586, 3589, 3592, 2460, 2455,
     2461, 3600, 3601, 3606, 3595, 3621, 2461, 2470, 2466, 3617,
     3624, 3625, 2479, 2475, 3643, 3640, 3647, 3662, 2483, 3666,
     3680, 3684, 3691, 3694, 3709, 3712, 3715, 3729, 3736, 4064,
     4064, 3744, 3749, 3764, 3767, 3774, 4064, 4064, 3781, 3784,
     4064, 4064, 4064, 3797, 3802, 3807, 3812, 3817, 3822, 3827,
     3831, 3836, 3840, 3845
    } ;

static yyconst flex_int16_t yy_def[1765] =
    {   0,
     1754, 1754, 1755, 1755, 1756, 1756, 1757, 1757, 1758, 1758,
     1758, 1758, 1759, 1759, 1760, 1760, 1753, 1753, 1753, 1761,
     1761, 1753, 1761, 1753, 1761, 1753, 1761, 1753, 1753, 1761,
     1762, 1753, 1763, 1764, 1753, 1753, 1753, 1753, 1753, 1753,
       19, 1753,   28, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753,   21, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1753, 1753,
     1753, 1761, 1761, 1753, 1761, 1761, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1761, 1762, 1763, 1764, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1753, 1753, 1753, 1753, 1761, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1761, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1761, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,

     1761, 1761, 1761, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1753, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1761, 1761, 1761, 1761,  675, 1761, 1761, 1761, 1761, 1761,
     1761, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1753, 1753, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1761, 1761, 1761, 1761, 1761, 1761, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1761, 1761, 1761, 1761, 1761,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1761, 1761, 1761, 1761, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1761, 1761,
     1761, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1761, 1761, 1761, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1761, 1761,

     1761, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1761, 1761, 1761, 1753, 1753, 1753, 1753, 1753, 1761,
     1761, 1761, 1753, 1753, 1753, 1761, 1761, 1761, 1753, 1753,
     1753, 1753, 1761, 1761, 1761, 1753, 1753, 1753, 1753, 1753,
     1753, 1761, 1761, 1753, 1753, 1753, 1753, 1753, 1761, 1753,
     1753, 1753,    0, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753
    } ;

static yyconst flex_int16_t yy_nxt[4127] =
    {   0,
       18,   19,   20,   21,   18,   22,   39,   22,   18,   24,
       25,   26,   27,   28,   18,   29,   18,   36,   36,   39,
       40, 1753,   30, 1753,   37,   37, 1753,   69, 1753,   70,
      136,  136, 1753,   40,  214, 1753, 1753,  105, 1753,   71,
     1753, 1753, 1753,  155, 1753,  114, 1753,  156,  108,  247,
      106, 1753,   72, 1753,  948, 1753,  248,  115,   95,  249,
       73,   22,   18,   19,   20,   21,   18,   22,  109,   22,
       18,   24,   25,   26,   27,   28,   18,   29,   18,   73,
     1753,  218,  949,  111,   30,  219,  112,  950, 1753,   75,
     1753,   76, 1753,  113, 1753, 1753, 1753,  169, 1753,   73,

     1753, 1753, 1753,  951,  162, 1753, 1753, 1753, 1753, 1753,
     1753, 1753,  163, 1753,  170, 1753,  259,  260,   73,  133,
       69, 1753,   70,   22,   41,   41,   41,  134,  638,  117,
      134, 1753,  639, 1753,   42, 1753,   43,  952,   44,  118,
     1753, 1753,  232,  191,  191,  191,  134,  119,  953,  134,
     1753, 1753, 1753, 1753, 1753, 1753,  192,  225,  120,  233,
       45,   46,  172,   47,  173,  226,   48,  321,  322,   49,
       50,   51,  954, 1753,  174,  121,   52,   53,   54,   55,
       41,   56,   56, 1753,  175, 1753, 1753, 1753,  122,  126,
       42, 1753,   43,  955,   44,  164, 1753,  546, 1753,  547,

     1753, 1753,  133, 1753,  863, 1753,  235,  123,  236,  165,
      134,  653,  166,  167,  168,  654,   58,   59,  237,   60,
      124,  864,   61,  332,  333,   62,   63,   64,  238,  134,
      716,  717,   65,   66,   67,   68,   41,   56,   56,  127,
      125,  956,  128, 1753, 1753,  597,   42,  598,   43,  129,
       44, 1753,  227, 1753, 1753, 1753, 1753, 1753, 1753,  344,
      345, 1753,  739, 1753,  179, 1753,  228,  346,  740,  229,
      230,  231,   58,   59,  645,   60,  646,  132,   61,  957,
      691,   62,   63,   64,  692,  861,  130,  309,   65,   66,
       67,   68,   77,  958,  310, 1753,  959,  311,  131,   78,

      273,  273,  273,  862,   79, 1753,   72, 1753, 1753, 1753,
      191,  191,  191,  274,   73,  136,  136,  707, 1753,  137,
     1753,  708, 1753,  192,  960,   80,   81,  961,   82,   83,
      962,   84,   85,   73,   86,   87, 1753,   88,   89,  974,
       90,   91,   92,   93,   94,  975, 1753,   72, 1753, 1753,
     1753,  365,  365,  365,  699,   73,  700, 1753,   75, 1753,
       76, 1753,  976, 1753,  366, 1753, 1753, 1753,   73, 1753,
      977, 1753, 1753,  978,   73, 1753, 1753, 1753, 1753, 1753,
     1753,  831, 1753,  832, 1753,  979, 1753,   73,  139,  140,
      980,  141,  142,  981,  143,  144,  982,  145,  146, 1753,

      147,  148,  983,  149,  150,  151,  152,  153, 1753, 1753,
      198, 1753,  984, 1753,  200,  985, 1753,  199, 1753,  986,
     1753, 1753, 1753,  843, 1753,  844, 1753, 1753, 1753,  201,
     1753, 1753,  202, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753,  780,  781,  203,  191,  208,  208,  414,  415,
     1753, 1753, 1753,  987, 1753, 1753,  416, 1753,  192, 1753,
      204, 1753,  892, 1753,  893, 1753, 1753,  205,  988, 1753,
      206,  911,  207,  912,  209, 1753, 1753,  989, 1753, 1753,
     1753, 1753, 1753, 1753,  990, 1753,  991, 1753,  992, 1753,
      993, 1753, 1753,  137, 1753,  994, 1753,  995,  998,  211,

      210, 1753,  999, 1753, 1753, 1753,  281,  281,  281, 1753,
      282,  212,  283, 1000, 1753, 1753, 1753, 1001, 1753, 1753,
      213, 1753, 1002, 1753, 1003, 1753, 1004, 1753, 1005, 1753,
      273,  273,  273, 1009,  273,  292,  292, 1010, 1011, 1753,
     1753, 1012,  289,  274, 1753,  290, 1753,  274, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1013,  367,  367,
      367,  291,  368, 1014,  369, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753,  293,  294, 1015, 1016,  191,  208,  208,
     1017, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
      192, 1753, 1018,  295,  296, 1753, 1019, 1020, 1753, 1021,

     1753, 1022, 1753, 1753, 1753, 1753,  297, 1753, 1023, 1753,
     1753, 1753, 1024, 1753, 1753, 1753, 1753, 1753, 1753, 1025,
     1753, 1753, 1753, 1753, 1753, 1753, 1026,  298,  373,  373,
      373, 1027, 1028,  300, 1029,  299, 1030,  301,  281,  281,
      281,  374,  282, 1031,  283,  378,  378,  378,  381,  381,
      381,  384, 1032, 1753,  454,  454,  454,  302,  379, 1033,
     1034,  382, 1035, 1753,  303, 1753, 1036, 1753,  365,  386,
      386, 1039, 1043,  273,  292,  292, 1047, 1048, 1753, 1753,
     1753,  366, 1753, 1753, 1753, 1753,  274, 1753, 1049, 1753,
     1050, 1753, 1054, 1753, 1753, 1753, 1753, 1069, 1753, 1070,

     1071,  373,  390,  390,  385, 1753, 1753, 1753, 1072, 1753,
     1073, 1753,  389, 1753,  374, 1753, 1753, 1753, 1753, 1074,
     1753, 1075, 1753, 1076,  387,  718,  719, 1753, 1077, 1753,
     1078, 1753, 1753, 1753, 1753,  720, 1753,  388,  378,  394,
      394,  721, 1079, 1753,  391, 1753, 1080, 1753, 1753, 1753,
     1753,  379, 1753, 1081, 1082,  392,  381,  396,  396, 1753,
     1083, 1753, 1084, 1753, 1085, 1088, 1753, 1089, 1753,  382,
     1753,  398,  398,  398,  393,  409,  409,  409,  395,  417,
      417,  417,  365,  365,  365,  399, 1090,  397, 1091,  410,
      434,  434,  434,  418, 1092,  366,  411,  469,  469,  469,

     1093,  470, 1094,  471,  435,  367,  367,  367, 1753,  368,
     1095,  369,  373,  373,  373, 1096, 1099,  419, 1753, 1100,
     1753, 1102, 1753,  400,  401,  374, 1103,  475,  475,  475,
     1104,  476,  436,  477,  378,  378,  378,  481,  481,  481,
     1105,  482, 1106,  483,  381,  381,  381,  379,  485,  485,
      485, 1753,  486, 1107,  487, 1108,  490,  382,  488,  488,
      488, 1753, 1109, 1753, 1110, 1753,  365,  386,  386, 1111,
     1112,  489, 1753, 1753, 1113, 1114, 1753, 1115, 1753,  366,
     1753, 1116, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
      500,  500,  500,  491,  373,  390,  390, 1117, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1118, 1753,  374, 1753, 1753,
     1753,  398,  398,  398, 1119,  493,  510,  510,  510, 1753,
     1753, 1753, 1753, 1753, 1753,  399,  492, 1120, 1121,  378,
      394,  394, 1122, 1123, 1753, 1753,  494, 1124, 1125, 1753,
      495, 1753,  379, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1126,  381,  396,  396, 1135, 1136,  488,  499,  499,  497,
      496, 1753, 1140, 1753,  382, 1753, 1753, 1141, 1753,  489,
     1753,  409,  409,  409, 1144,  417,  417,  417,  517,  517,
      517,  520,  520,  520, 1142,  410,  581, 1145,  498,  418,
      525,  525,  525,  784,  785,  521,  534,  534,  534,  434,

      434,  434, 1149,  786,  526,  537,  537,  537, 1143,  787,
      535, 1150, 1164,  435,  454,  454,  454, 1165,  527,  469,
      469,  469, 1166,  470, 1167,  471,  475,  475,  475, 1168,
      476, 1169,  477,  574,  574,  574,  481,  481,  481, 1170,
      482, 1171,  483,  485,  485,  485,  575,  486, 1753,  487,
      488,  488,  488,  578,  578,  578, 1753,  579, 1753,  580,
     1753, 1753, 1753,  489, 1753, 1172, 1753, 1173, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1174, 1753, 1753,
     1175, 1753, 1753, 1753, 1753, 1176, 1753, 1179,  574,  587,
      587, 1180, 1182, 1753,  583, 1183,  586,  582, 1753, 1184,

     1753,  575, 1753, 1753, 1185, 1753, 1186, 1753, 1187,  584,
      500,  500,  500,  585,  488,  499,  499,  510,  510,  510,
      588,  600,  600,  600, 1753, 1188, 1753,  489, 1753, 1189,
     1193,  589,  517,  517,  517,  601,  520,  520,  520,  609,
      609,  609,  610,  610,  610,  525,  525,  525, 1194, 1195,
      521,  615,  615,  615, 1196, 1197,  611, 1198, 1199,  526,
      534,  534,  534,  623,  623,  623,  537,  537,  537,  612,
      659,  659,  659, 1200,  535,  574,  574,  574,  664,  664,
      664, 1201,  665,  660,  666,  668,  668,  668,  575,  578,
      578,  578, 1753,  579, 1202,  580, 1203, 1204,  669, 1753,

     1205, 1206, 1753, 1207, 1753, 1208, 1753, 1753, 1753, 1753,
     1209, 1753, 1210, 1753,  659,  672,  672, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1211, 1753,  660, 1753,  574,
      587,  587, 1212, 1753, 1753, 1753, 1213, 1753, 1217, 1753,
     1218, 1753,  575, 1753, 1753, 1219, 1753, 1223, 1753, 1226,
      670, 1227,  671, 1228,  673,  668,  677,  677,  600,  600,
      600, 1246,  675, 1247, 1248, 1753,  674, 1753,  669, 1753,
     1249, 1250,  601,  688,  688,  688,  609,  609,  609,  610,
      610,  610,  697,  697,  697,  676,  615,  615,  615,  709,
      709,  709, 1251,  611,  623,  623,  623,  745,  745,  745,

      659,  659,  659,  710, 1252,  748,  748,  748, 1220,  749,
      746,  750,  754,  660,  752,  752,  752,  755, 1221,  668,
      668,  668,  756,  757, 1222,  758, 1253,  753,  759,  664,
      664,  664,  669,  665, 1254,  666,  761,  761,  761, 1255,
      762, 1263,  763,  745,  764,  764, 1268, 1269, 1753,  688,
      688,  688, 1270, 1753, 1271, 1753,  746, 1753, 1753, 1272,
     1753, 1273, 1753,  659,  672,  672, 1278, 1279, 1753,  697,
      697,  697, 1281, 1753, 1280, 1753,  660, 1753, 1753, 1282,
     1753, 1283, 1753,  752,  767,  767,  817,  817,  817, 1284,
      765, 1753, 1285, 1753, 1286, 1753,  753, 1753, 1287,  766,

     1753, 1753, 1288, 1753, 1289, 1753,  668,  677,  677, 1290,
     1753, 1291, 1753, 1292, 1753, 1293, 1753,  768, 1753,  669,
     1753, 1294,  769,  776,  776,  776, 1297,  770,  771, 1298,
      772, 1301, 1302,  773,  782,  782,  782,  777,  791,  791,
      791,  793,  793,  793,  774,  806,  806,  806,  783,  811,
      811,  811,  792, 1306, 1299,  794,  709,  709,  709,  807,
      745,  745,  745,  812, 1307,  851,  851,  851, 1300,  852,
      710,  853, 1308,  746, 1330,  813,  748,  748,  748, 1331,
      749,  814,  750,  808,  752,  752,  752,  856,  856,  856,
     1332,  857, 1324,  858,  761,  761,  761,  753,  762, 1325,

      763,  745,  764,  764, 1333, 1334, 1753, 1753,  880,  880,
      880, 1753, 1335, 1753,  746, 1753, 1753, 1753, 1753, 1753,
     1753, 1753,  752,  767,  767, 1336, 1344, 1753, 1753,  885,
      885,  885, 1753, 1753, 1753,  753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1345, 1753, 1753, 1753, 1346, 1753,
     1347, 1350, 1753, 1354,  868, 1355, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753,  869, 1753, 1753,  872, 1753,
     1356, 1753,  894,  894,  894,  870,  871,  776,  776,  776,
      874, 1357, 1358,  877, 1359, 1360,  873, 1361,  878, 1362,
     1363,  777,  782,  782,  782, 1364, 1365,  875, 1366, 1367,

      876,  791,  791,  791, 1368, 1369,  783,  793,  793,  793,
      895,  895,  895, 1373, 1374,  792,  905,  905,  905, 1375,
     1376,  794,  907,  907,  907,  806,  806,  806, 1377, 1378,
      906,  909,  909,  909, 1379, 1380,  908, 1381, 1392,  807,
      811,  811,  811,  914,  914,  914,  817,  817,  817,  919,
      919,  919, 1393, 1396,  812,  851,  851,  851, 1397,  852,
     1398,  853, 1753,  920,  856,  856,  856, 1753,  857, 1399,
      858, 1400, 1753, 1753, 1753, 1401, 1753, 1753, 1753, 1753,
     1402, 1753, 1404, 1753, 1753, 1753, 1405, 1753, 1753, 1753,
     1753, 1406, 1753, 1407, 1753, 1409, 1753, 1413, 1753, 1753,

     1753, 1753, 1414, 1753,  880,  880,  880, 1753, 1415,  963,
     1753, 1416, 1753,  966, 1753, 1417,  964, 1753, 1418, 1753,
      965, 1753, 1753, 1753,  885,  885,  885,  967, 1753, 1419,
      968, 1420, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1421,
     1753, 1422, 1753,  894,  894,  894,  895,  895,  895,  905,
      905,  905, 1423,  969, 1424,  970,  996,  996,  996,  907,
      907,  907, 1425,  906,  997,  997,  997,  971,  909,  909,
      909, 1426, 1427,  908,  972,  914,  914,  914,  919,  919,
      919, 1006, 1006, 1006, 1428, 1429,  973, 1007, 1007, 1007,
     1430, 1431,  920, 1037, 1037, 1037, 1040, 1040, 1040, 1432,

     1433, 1008, 1044, 1044, 1044, 1434, 1038, 1435, 1446, 1041,
     1051, 1051, 1051, 1447, 1448, 1045, 1037, 1055, 1055, 1449,
     1450, 1753, 1753, 1052, 1451, 1452, 1753, 1453, 1753, 1038,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1040, 1057, 1057,
     1046, 1454, 1455, 1059, 1044, 1060, 1060, 1753, 1042, 1753,
     1041, 1753, 1053, 1753, 1753, 1456, 1753, 1045, 1753, 1056,
     1753, 1753, 1459, 1753, 1460, 1753, 1753, 1753, 1462, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1463, 1753, 1753,
     1753, 1753, 1061, 1753, 1464, 1465, 1051, 1066, 1066, 1058,
     1468, 1062, 1086, 1086, 1086, 1469, 1753, 1064, 1753, 1052,

     1753, 1063,  996,  996,  996, 1466, 1087,  997,  997,  997,
     1097, 1097, 1097, 1006, 1006, 1006, 1470, 1471, 1068, 1472,
     1473, 1065, 1467, 1474, 1098, 1007, 1007, 1007, 1067, 1101,
     1101, 1101, 1037, 1037, 1037, 1475, 1127, 1127, 1127, 1008,
     1128, 1476, 1129, 1477, 1478, 1038, 1130, 1130, 1130, 1040,
     1040, 1040, 1132, 1132, 1132, 1479, 1133, 1484, 1134, 1131,
     1497, 1498, 1041, 1044, 1044, 1044, 1137, 1137, 1137, 1499,
     1138, 1500, 1139, 1051, 1051, 1051, 1045, 1146, 1146, 1146,
     1503, 1147, 1504, 1148, 1509, 1510, 1052, 1037, 1055, 1055,
     1512, 1513, 1130, 1151, 1151, 1514, 1515, 1753, 1516, 1753,

     1038, 1753, 1753, 1517, 1753, 1131, 1753, 1040, 1057, 1057,
     1518, 1519, 1753, 1753, 1181, 1181, 1181, 1753, 1520, 1753,
     1041, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1044, 1060,
     1060, 1153, 1521, 1753, 1753, 1192, 1192, 1192, 1753, 1753,
     1753, 1045, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1522, 1753, 1523, 1526, 1753, 1101, 1101, 1101,
     1753, 1753, 1753, 1527, 1753, 1152, 1753, 1156, 1753, 1154,
     1753, 1753, 1753, 1753, 1528, 1753, 1162, 1162, 1162, 1177,
     1177, 1177, 1753, 1529, 1753, 1155, 1753, 1501, 1158, 1536,
     1163, 1157, 1547, 1178, 1159, 1051, 1066, 1066, 1550, 1161,

     1086, 1086, 1086, 1553, 1502, 1753, 1160, 1753, 1052, 1753,
     1190, 1190, 1190, 1554, 1087, 1097, 1097, 1097, 1555, 1127,
     1127, 1127, 1556, 1128, 1191, 1129, 1130, 1130, 1130, 1098,
     1214, 1214, 1214, 1559, 1215, 1562, 1216, 1563, 1564, 1131,
     1132, 1132, 1132, 1565, 1133, 1566, 1134, 1137, 1137, 1137,
     1567, 1138, 1568, 1139, 1224, 1224, 1224, 1146, 1146, 1146,
     1569, 1147, 1753, 1148, 1229, 1229, 1229, 1225, 1130, 1151,
     1151, 1570, 1753, 1753, 1753, 1571, 1753, 1230, 1753, 1753,
     1753, 1131, 1753, 1753, 1753, 1753, 1577, 1753, 1578, 1753,
     1234, 1753, 1579, 1753, 1753,   57, 1753, 1580, 1753, 1581,

     1235,   57, 1753,   57, 1588, 1590, 1236, 1224, 1238, 1238,
     1592, 1593, 1753, 1231, 1753, 1594, 1753, 1753, 1237, 1753,
     1225, 1753, 1595, 1753, 1753, 1232, 1162, 1162, 1162, 1229,
     1242, 1242, 1233, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1163, 1753, 1230, 1753, 1243, 1243, 1243, 1244, 1244, 1244,
     1256, 1256, 1256, 1596, 1239, 1258, 1258, 1258, 1598, 1241,
     1601, 1245, 1602, 1603, 1257, 1177, 1177, 1177, 1604, 1259,
     1260, 1260, 1260, 1605, 1240, 1261, 1261, 1261, 1606, 1178,
     1181, 1181, 1181, 1264, 1264, 1264, 1266, 1266, 1266, 1262,
     1190, 1190, 1190, 1274, 1274, 1274, 1610, 1265, 1611, 1614,

     1267, 1192, 1192, 1192, 1191, 1275, 1275, 1275, 1214, 1214,
     1214, 1615, 1215, 1623, 1216, 1295, 1295, 1295, 1624, 1276,
     1224, 1224, 1224, 1303, 1303, 1303, 1625, 1304, 1296, 1305,
     1229, 1229, 1229, 1225, 1309, 1309, 1309, 1753, 1310, 1626,
     1311, 1627, 1628, 1230, 1632, 1633, 1753, 1753, 1634, 1753,
     1635, 1753, 1295, 1313, 1313, 1636, 1753, 1277, 1753, 1637,
     1753, 1638, 1753, 1753, 1753, 1296, 1753, 1639, 1753, 1643,
     1651, 1312, 1652, 1753, 1653, 1753, 1654, 1753, 1753, 1753,
     1753, 1655, 1753, 1656, 1753, 1753, 1658, 1659, 1314, 1753,
     1660, 1753, 1661, 1753, 1753, 1753, 1753, 1753, 1753, 1753,

     1753, 1662, 1663, 1316, 1664, 1665, 1224, 1238, 1238, 1672,
     1753, 1315, 1753, 1318, 1753, 1673, 1753, 1317, 1753, 1225,
     1753, 1753, 1243, 1243, 1243, 1674, 1319, 1321, 1229, 1242,
     1242, 1753, 1677, 1753, 1678, 1753, 1679, 1320, 1753, 1680,
     1753, 1230, 1753, 1244, 1244, 1244, 1323, 1323, 1323, 1326,
     1326, 1326, 1681, 1328, 1328, 1328, 1682, 1245, 1256, 1256,
     1256, 1683, 1687, 1327, 1695, 1696, 1322, 1329, 1337, 1337,
     1337, 1697, 1257, 1258, 1258, 1258, 1338, 1338, 1338, 1260,
     1260, 1260, 1261, 1261, 1261, 1698, 1709, 1259, 1339, 1339,
     1339, 1340, 1340, 1340, 1710, 1711, 1262, 1264, 1264, 1264,

     1342, 1342, 1342, 1717, 1718, 1341, 1266, 1266, 1266, 1719,
     1723, 1265, 1343, 1343, 1343, 1348, 1348, 1348, 1724, 1725,
     1267, 1274, 1274, 1274, 1275, 1275, 1275, 1729, 1730, 1349,
     1351, 1351, 1351, 1352, 1352, 1352, 1736,  947, 1276, 1295,
     1295, 1295, 1370, 1370, 1370,  946, 1371, 1353, 1372, 1303,
     1303, 1303, 1296, 1304, 1753, 1305, 1309, 1309, 1309,  945,
     1310,  944, 1311, 1753, 1753,  943, 1753,  942, 1753, 1295,
     1313, 1313,  941, 1753, 1753, 1753,  940, 1753,  939, 1753,
     1753, 1753, 1296, 1753, 1753, 1753, 1753,  938, 1753,  937,
     1753, 1753, 1753,  936, 1753, 1753, 1382, 1753, 1753, 1753,

      935, 1753,  934, 1753,  933, 1753,  932,  931, 1753,  930,
     1753,  929, 1753,  928, 1753, 1753,  927,  926, 1383,  925,
     1753, 1384,  924, 1385, 1753, 1753, 1753, 1753, 1753, 1753,
     1753,  923, 1753,  922, 1753, 1323, 1323, 1323, 1386, 1326,
     1326, 1326, 1387, 1394, 1394, 1394, 1328, 1328, 1328, 1388,
      921,  918, 1389, 1327, 1395, 1395, 1395,  917, 1391,  916,
     1329, 1337, 1337, 1337, 1390, 1338, 1338, 1338, 1339, 1339,
     1339, 1340, 1340, 1340, 1403, 1403, 1403, 1342, 1342, 1342,
     1343, 1343, 1343,  915,  913, 1341, 1348, 1348, 1348, 1408,
     1408, 1408, 1351, 1351, 1351, 1352, 1352, 1352,  910,  904,

     1349, 1410, 1410, 1410, 1411, 1411, 1411, 1753,  903, 1353,
     1370, 1370, 1370, 1753, 1371,  902, 1372, 1753, 1412, 1753,
     1753, 1753,  901, 1753,  900, 1753, 1753, 1753,  899, 1753,
     1753,  898, 1753,  897, 1753, 1753, 1753,  896, 1753, 1753,
     1753, 1753,  891, 1753,  890, 1753, 1753, 1753,  889, 1753,
      888, 1437,  887, 1753, 1436,  886, 1753,  884, 1753,  883,
     1753,  882,  881, 1753, 1439, 1753, 1753, 1753,  879, 1753,
      867, 1440, 1438, 1394, 1394, 1394, 1753, 1441, 1753, 1753,
     1753, 1753,  866, 1753, 1395, 1395, 1395, 1403, 1403, 1403,
     1457, 1457, 1457, 1408, 1408, 1408,  865,  860, 1442, 1410,

     1410, 1410,  859,  855, 1458, 1443, 1411, 1411, 1411, 1461,
     1461, 1461, 1480, 1480, 1480, 1482, 1482, 1482,  854, 1444,
     1412, 1445, 1485, 1485, 1485, 1481, 1753,  850, 1483, 1753,
      849,  848, 1753,  847,  846, 1486, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
      845, 1753, 1511, 1511, 1511, 1753,  842, 1753, 1753, 1753,
     1753,  841, 1753,  840, 1480, 1493, 1493,  839,  838, 1505,
     1505, 1505,  837, 1490, 1753,  836, 1753, 1481, 1753, 1487,
     1753, 1488, 1492, 1506,  835, 1489, 1482, 1494, 1494,  834,
     1753,  833, 1753, 1491, 1753,  830, 1753,  829, 1753, 1483,

     1753, 1485, 1496, 1496, 1507, 1507, 1507, 1457, 1457, 1457,
      828, 1753,  827, 1753, 1486, 1753,  826,  825, 1508,  824,
      823, 1458, 1495, 1461, 1461, 1461, 1524, 1524, 1524, 1480,
     1480, 1480, 1530, 1530, 1530,  822, 1531,  821, 1532, 1525,
      820,  819, 1481, 1482, 1482, 1482, 1533, 1533, 1533,  818,
     1534,  816, 1535, 1485, 1485, 1485, 1483, 1537, 1537, 1537,
     1753, 1538,  815, 1539,  810,  809, 1486, 1524, 1541, 1541,
     1753,  805, 1753, 1753, 1753,  804, 1753, 1753,  803, 1753,
     1525, 1753,  802, 1753, 1753, 1753, 1753, 1753, 1753,  801,
     1753, 1753,  800,  799, 1753,  798, 1753,  797, 1753, 1753,

      796, 1753,  795, 1753,  790, 1753, 1480, 1493, 1493, 1753,
      789, 1753, 1540, 1753,  788,  779, 1753,  778, 1753, 1481,
     1753, 1548, 1548, 1548, 1542,  775, 1545,  760,  751, 1543,
      747, 1544, 1482, 1494, 1494, 1549,  744,  743, 1485, 1496,
     1496,  742, 1753,  741, 1753, 1483, 1753, 1546, 1753,  738,
     1753, 1486, 1753, 1551, 1551, 1551, 1505, 1505, 1505, 1557,
     1557, 1557, 1507, 1507, 1507,  737,  736, 1552,  735,  734,
     1506, 1558, 1558, 1558,  733,  732, 1508, 1560, 1560, 1560,
     1511, 1511, 1511, 1572, 1572, 1572, 1524, 1524, 1524,  731,
      730, 1561, 1589, 1589, 1589,  729, 1573,  728,  727, 1525,

     1574, 1574, 1574,  726, 1575,  725, 1576, 1530, 1530, 1530,
      724, 1531,  723, 1532, 1533, 1533, 1533,  722, 1534,  715,
     1535, 1537, 1537, 1537,  714, 1538,  713, 1539, 1572, 1582,
     1582,  712,  711, 1524, 1541, 1541,  706,  705, 1753, 1753,
     1753, 1573, 1753, 1753, 1753, 1753, 1525, 1753,  704, 1753,
     1753, 1753,  703, 1753, 1753, 1753, 1753,  702, 1753,  701,
     1753,  698, 1753,  696, 1753, 1753, 1753, 1753,  695, 1753,
     1548, 1548, 1548, 1583,  694,  693, 1753,  690, 1753,  689,
     1753, 1551, 1551, 1551, 1549,  687, 1584, 1591, 1591, 1591,
     1557, 1557, 1557,  686,  685, 1552, 1558, 1558, 1558,  684,

     1586,  683, 1585, 1560, 1560, 1560, 1597, 1597, 1597, 1599,
     1599, 1599,  682, 1587, 1572, 1572, 1572, 1561, 1607, 1607,
     1607,  681, 1608, 1600, 1609,  680,  679, 1573, 1574, 1574,
     1574,  678, 1575, 1753, 1576, 1612, 1612, 1612,  667, 1572,
     1582, 1582,  663, 1753, 1753, 1753,  662, 1753, 1613, 1753,
      661, 1753, 1573, 1753, 1753,  658, 1753,  657, 1753, 1612,
     1618, 1618,  656,  655, 1753,  652,  651, 1753,  650, 1753,
      649, 1753, 1613, 1753, 1753, 1616, 1753, 1753, 1753, 1753,
      648, 1753, 1621, 1621, 1621, 1589, 1589, 1589, 1591, 1591,
     1591, 1597, 1597, 1597,  647,  644, 1622,  643,  642, 1617,

      641,  640, 1619, 1629, 1629, 1629, 1599, 1599, 1599, 1631,
     1631, 1631, 1607, 1607, 1607,  637, 1608, 1630, 1609, 1620,
     1600, 1612, 1612, 1612, 1640, 1640, 1640, 1753, 1641,  636,
     1642, 1644, 1644, 1644, 1613, 1753,  635, 1753,  634, 1753,
      633, 1753,  632, 1753, 1645, 1753,  631, 1753,  630, 1753,
     1612, 1618, 1618, 1753,  629, 1753,  628, 1753,  627,  626,
     1753,  625, 1753, 1613, 1753, 1644, 1649, 1649,  624,  622,
     1648,  621,  620, 1647, 1646, 1753,  619, 1753, 1645, 1753,
     1621, 1621, 1621, 1650, 1650, 1650, 1629, 1629, 1629, 1657,
     1657, 1657,  618,  617, 1622, 1631, 1631, 1631,  616,  614,

     1630, 1640, 1640, 1640, 1753, 1641,  613, 1642, 1644, 1644,
     1644, 1666, 1666, 1666, 1753, 1667, 1753, 1668, 1753, 1753,
     1753, 1645, 1650, 1650, 1650, 1644, 1649, 1649,  608, 1753,
     1753, 1753, 1753, 1753, 1753, 1753,  607, 1753, 1645, 1753,
     1675, 1675, 1675, 1657, 1657, 1657, 1670, 1666, 1666, 1666,
     1753, 1667,  606, 1668, 1676,  605, 1753, 1669,  604,  603,
     1753, 1753, 1753,  602, 1753,  599, 1753,  596, 1753, 1671,
     1753, 1753,  595, 1753,  594, 1753,  593, 1684, 1688, 1688,
     1688, 1690, 1690, 1690, 1675, 1675, 1675, 1692, 1692, 1692,
      592,  591, 1689,  590, 1753, 1691,  577, 1753, 1676, 1693,

     1693, 1693,  576,  573, 1753, 1685, 1753, 1753, 1753, 1753,
     1753, 1753,  572, 1694, 1686, 1702, 1702, 1702,  571,  570,
     1753,  569, 1753,  568, 1753, 1688, 1688, 1688,  567, 1703,
     1704, 1704, 1704, 1690, 1690, 1690, 1705, 1705, 1705, 1689,
     1692, 1692, 1692, 1699, 1693, 1693, 1693, 1691,  566,  565,
     1700,  564, 1701, 1706, 1706, 1706, 1753, 1753, 1694, 1707,
     1707, 1707, 1753, 1702, 1702, 1702, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1708, 1753,  563, 1753, 1703, 1715, 1715,
     1715, 1704, 1704, 1704, 1705, 1705, 1705, 1706, 1706, 1706,
     1707, 1707, 1707, 1716, 1716, 1716, 1715, 1715, 1715, 1713,

      562, 1753, 1753,  561, 1708,  560,  559, 1753,  558, 1712,
     1714, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
      557, 1753, 1716, 1716, 1716, 1753, 1753,  556, 1753,  555,
     1753,  554, 1753,  553,  552, 1753, 1753, 1753, 1753, 1753,
     1753, 1753,  551, 1720, 1731, 1731, 1731,  550, 1753,  549,
     1721, 1753,  548, 1753, 1722, 1753,  545, 1732, 1753,  544,
     1753,  543, 1753, 1731, 1735, 1735, 1726, 1737, 1737, 1737,
      542,  541, 1727, 1753,  540, 1753, 1732, 1753, 1728,  539,
     1738, 1731, 1731, 1731,  538, 1739, 1739, 1739, 1733, 1740,
      536, 1741, 1753,  533, 1732, 1737, 1743, 1743,  532,  531,

     1734,  530, 1753,  529, 1753, 1753, 1753, 1753, 1738, 1753,
     1731, 1735, 1735, 1744, 1744, 1744, 1737, 1737, 1737,  528,
     1753,  524, 1753, 1732, 1753,  523, 1745,  522,  519, 1738,
     1746, 1746, 1746,  518, 1747,  516, 1748, 1739, 1739, 1739,
      515, 1740,  514, 1741, 1742, 1744, 1749, 1749,  513,  512,
     1737, 1743, 1743,  511,  509, 1753,  508, 1753, 1745, 1753,
     1753,  507, 1753, 1738, 1753, 1744, 1744, 1744, 1750, 1750,
     1750,  506, 1751,  505, 1752, 1746, 1746, 1746, 1745, 1747,
      504, 1748, 1744, 1749, 1749, 1750, 1750, 1750,  503, 1751,
      502, 1752, 1753,  501, 1753, 1745, 1753,   23,   23,   23,

       23,   23,   31,   31,   31,   31,   31,   33,   33,   33,
       33,   33,   34,   34,   34,   34,   34,   32,   32,   32,
       32,   32,   35,   35,   35,   35,   35,   38,   38,   38,
       38,   38,   57,  484,  480,   57,   96,   96,   96,   96,
       97,   97,  479,   97,   97,   98,   98,   98,  478,   98,
      474,  473,  472,  468,  467,  466,  465,  464,  463,  462,
      461,  460,  459,  458,  457,  456,  455,  453,  452,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  437,  433,  432,  431,  430,  429,  428,
      427,  426,  425,  424,  423,  422,  421,  420,  413,  412,

      408,  407,  406,  405,  404,  403,  402,  383,  380,  377,
      376,  375,  372,  371,  370,  364,  363,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  348,  347,  343,  342,  341,  340,  339,  338,  337,
      336,  335,  334,  331,  330,  329,  328,  327,  326,  325,
      324,  323,  320,  319,  318,  317,  316,  315,  314,  313,
      312,  308,  307,  306,  305,  304,  214,  288,  287,  286,
      285,  284,  280,  279,  278,  277,  276,  275,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,
      258,  257,  256,  255,  254,  253,  252,  251,  250,  246,

      245,  244,  243,  242,  241,  240,  239,  234,  224,  223,
      222,  221,  220,  217,  216,  214,  215,  197,  196,  195,
      194,  193,  190,  189,  188,  187,  186,  185,  184,  183,
      182,  181,  180,  178,  177,  176,  171,  161,  160,  159,
      158,  157,  154,  138,  135,  116,  110,  107,  104,  103,
      102,  101,   74,  100,   99,   74, 1753,   32,   32,   32,
       32,   32,   32,   17, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753
    } ;

static yyconst flex_int16_t yy_chk[4127] =
    {   0,
        1,    1,    1,    1,    1,    1,   15,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   13,   14,   16,
       15,    0,    1,   43,   13,   14,   23,   24,    0,   24,
      134,  134,   30,   16,  134,   43,   23,   49,   23,   24,
       23,   25,   30,   81,   30,   54,   30,   81,   51,  159,
       49,   25,   25,   25,  846,   25,  159,   54,   30,  159,
       25,    1,    2,    2,    2,    2,    2,    2,   51,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,   25,
       27,  140,  847,   53,    2,  140,   53,  848,   57,   27,
       27,   27,   27,   53,   27,   58,   60,   89,   57,   27,

       57,   59,   57,  849,   87,   58,   60,   58,   60,   58,
       60,   59,   87,   59,   89,   59,  169,  169,   27,   69,
       70,   61,   70,    2,   19,   19,   19,   69,  551,   58,
       70,   61,  551,   61,   19,   61,   19,  854,   19,   59,
       62,   65,  148,  111,  111,  111,   69,   60,  855,   70,
       62,   65,   62,   65,   62,   65,  111,  146,   61,  148,
       19,   19,   91,   19,   91,  146,   19,  232,  232,   19,
       19,   19,  859,   63,   91,   62,   19,   19,   19,   19,
       20,   20,   20,   63,   91,   63,   64,   63,   62,   65,
       20,   66,   20,  860,   20,   88,   64,  444,   64,  444,

       64,   66,  133,   66,  757,   66,  150,   63,  150,   88,
      133,  564,   88,   88,   88,  564,   20,   20,  150,   20,
       64,  757,   20,  242,  242,   20,   20,   20,  150,  133,
      630,  630,   20,   20,   20,   20,   21,   21,   21,   66,
       64,  861,   66,   68,   95,  508,   21,  508,   21,   66,
       21,   67,  147,   68,   95,   68,   95,   68,   95,  253,
      253,   67,  652,   67,   95,   67,  147,  253,  652,  147,
      147,  147,   21,   21,  557,   21,  557,   68,   21,  862,
      604,   21,   21,   21,  604,  756,   67,  222,   21,   21,
       21,   21,   28,  863,  222,   72,  864,  222,   67,   28,

      184,  184,  184,  756,   28,   72,   72,   72,   73,   72,
      191,  191,  191,  184,   72,   73,   73,  621,   73,   73,
       73,  621,   73,  191,  865,   28,   28,  866,   28,   28,
      867,   28,   28,   72,   28,   28,   75,   28,   28,  879,
       28,   28,   28,   28,   28,  881,   75,   75,   75,   76,
       75,  272,  272,  272,  613,   75,  613,  117,   76,   76,
       76,   76,  882,   76,  272,  118,  119,  117,   76,  117,
      883,  117,  120,  884,   75,  118,  119,  118,  119,  118,
      119,  724,  120,  724,  120,  886,  120,   76,   78,   78,
      887,   78,   78,  888,   78,   78,  889,   78,   78,  121,

       78,   78,  890,   78,   78,   78,   78,   78,  122,  121,
      117,  121,  891,  121,  119,  892,  123,  118,  122,  893,
      122,  124,  122,  737,  125,  737,  123,  126,  123,  120,
      123,  124,  121,  124,  125,  124,  125,  126,  125,  126,
      128,  126,  682,  682,  122,  127,  127,  127,  315,  315,
      128,  129,  128,  896,  128,  127,  315,  127,  127,  127,
      123,  129,  790,  129,  790,  129,  130,  124,  897,  131,
      125,  809,  126,  809,  128,  132,  130,  898,  130,  131,
      130,  131,  137,  131,  899,  132,  900,  132,  901,  132,
      902,  179,  137,  137,  137,  903,  137,  904,  910,  130,

      129,  179,  911,  179,  198,  179,  192,  192,  192,  199,
      192,  131,  192,  912,  198,  200,  198,  913,  198,  199,
      132,  199,  915,  199,  916,  200,  917,  200,  918,  200,
      273,  273,  273,  922,  201,  201,  201,  923,  924,  202,
      203,  925,  198,  273,  201,  199,  201,  201,  201,  202,
      203,  202,  203,  202,  203,  204,  205,  926,  274,  274,
      274,  200,  274,  927,  274,  204,  205,  204,  205,  204,
      205,  206,  207,  202,  203,  928,  929,  208,  208,  208,
      930,  206,  207,  206,  207,  206,  207,  208,  209,  208,
      208,  208,  931,  204,  205,  210,  932,  933,  209,  934,

      209,  935,  209,  211,  212,  210,  206,  210,  936,  210,
      213,  289,  937,  211,  212,  211,  212,  211,  212,  938,
      213,  289,  213,  289,  213,  289,  940,  207,  278,  278,
      278,  941,  942,  210,  943,  209,  944,  211,  281,  281,
      281,  278,  281,  945,  281,  285,  285,  285,  287,  287,
      287,  289,  946,  290,  349,  349,  349,  212,  285,  947,
      948,  287,  950,  290,  213,  290,  951,  290,  291,  291,
      291,  953,  955,  292,  292,  292,  957,  958,  291,  293,
      291,  291,  291,  292,  294,  292,  292,  292,  959,  293,
      960,  293,  962,  293,  294,  295,  294,  974,  294,  975,

      976,  296,  296,  296,  290,  295,  297,  295,  977,  295,
      978,  296,  295,  296,  296,  296,  297,  298,  297,  979,
      297,  980,  299,  981,  293,  632,  632,  298,  982,  298,
      983,  298,  299,  301,  299,  632,  299,  294,  300,  300,
      300,  632,  984,  301,  297,  301,  985,  301,  300,  303,
      300,  300,  300,  986,  987,  298,  302,  302,  302,  303,
      988,  303,  989,  303,  990,  992,  302,  993,  302,  302,
      302,  304,  304,  304,  299,  312,  312,  312,  301,  316,
      316,  316,  365,  365,  365,  304,  994,  303,  995,  312,
      331,  331,  331,  316,  998,  365,  312,  366,  366,  366,

      999,  366, 1000,  366,  331,  367,  367,  367,  384,  367,
     1001,  367,  373,  373,  373, 1002, 1004,  316,  384, 1005,
      384, 1010,  384,  304,  304,  373, 1011,  374,  374,  374,
     1012,  374,  331,  374,  378,  378,  378,  379,  379,  379,
     1013,  379, 1014,  379,  381,  381,  381,  378,  382,  382,
      382,  385,  382, 1015,  382, 1016,  384,  381,  383,  383,
      383,  385, 1017,  385, 1018,  385,  386,  386,  386, 1019,
     1020,  383,  387,  388, 1021, 1022,  386, 1024,  386,  386,
      386, 1025,  387,  388,  387,  388,  387,  388,  389,  391,
      399,  399,  399,  385,  390,  390,  390, 1026,  389,  391,

      389,  391,  389,  391,  390, 1027,  390,  390,  390,  392,
      393,  398,  398,  398, 1028,  388,  410,  410,  410,  392,
      393,  392,  393,  392,  393,  398,  387, 1029, 1030,  394,
      394,  394, 1031, 1032,  395,  490,  389, 1033, 1035,  394,
      391,  394,  394,  394,  395,  490,  395,  490,  395,  490,
     1036,  396,  396,  396, 1042, 1043,  397,  397,  397,  393,
      392,  396, 1046,  396,  396,  396,  397, 1047,  397,  397,
      397,  409,  409,  409, 1049,  417,  417,  417,  418,  418,
      418,  421,  421,  421, 1048,  409,  490, 1050,  395,  417,
      425,  425,  425,  684,  684,  421,  432,  432,  432,  434,

      434,  434, 1053,  684,  425,  435,  435,  435, 1048,  684,
      432, 1054, 1070,  434,  454,  454,  454, 1071,  425,  469,
      469,  469, 1072,  469, 1073,  469,  475,  475,  475, 1074,
      475, 1075,  475,  479,  479,  479,  481,  481,  481, 1076,
      481, 1077,  481,  485,  485,  485,  479,  485,  491,  485,
      488,  488,  488,  489,  489,  489,  492,  489,  491,  489,
      491,  493,  491,  488,  494, 1078,  492, 1079,  492,  495,
      492,  493,  497,  493,  494,  493,  494, 1080,  494,  495,
     1081,  495,  497,  495,  497, 1082,  497, 1084,  496,  496,
      496, 1085, 1088,  498,  492, 1089,  495,  491,  496, 1090,

      496,  496,  496,  498, 1091,  498, 1092,  498, 1093,  493,
      500,  500,  500,  494,  499,  499,  499,  510,  510,  510,
      497,  511,  511,  511,  499, 1094,  499,  499,  499, 1095,
     1099,  498,  517,  517,  517,  511,  520,  520,  520,  521,
      521,  521,  522,  522,  522,  525,  525,  525, 1100, 1103,
      520,  526,  526,  526, 1104, 1105,  522, 1106, 1107,  525,
      534,  534,  534,  535,  535,  535,  537,  537,  537,  522,
      570,  570,  570, 1108,  534,  574,  574,  574,  575,  575,
      575, 1109,  575,  570,  575,  577,  577,  577,  574,  578,
      578,  578,  581,  578, 1110,  578, 1111, 1112,  577,  582,

     1116, 1119,  581, 1120,  581, 1121,  581,  584,  585,  582,
     1122,  582, 1123,  582,  583,  583,  583,  584,  585,  584,
      585,  584,  585,  586,  583, 1124,  583,  583,  583,  587,
      587,  587, 1125,  586,  588,  586, 1126,  586, 1135,  587,
     1136,  587,  587,  587,  588, 1140,  588, 1142,  588, 1144,
      581, 1145,  582, 1149,  584,  589,  589,  589,  600,  600,
      600, 1165,  586, 1166, 1167,  589,  585,  589,  589,  589,
     1168, 1169,  600,  601,  601,  601,  609,  609,  609,  610,
      610,  610,  611,  611,  611,  588,  615,  615,  615,  622,
      622,  622, 1170,  610,  623,  623,  623,  657,  657,  657,

      659,  659,  659,  622, 1171,  660,  660,  660, 1141,  660,
      657,  660,  663,  659,  662,  662,  662,  663, 1141,  668,
      668,  668,  663,  663, 1141,  663, 1172,  662,  663,  664,
      664,  664,  668,  664, 1173,  664,  669,  669,  669, 1174,
      669, 1180,  669,  670,  670,  670, 1184, 1185,  671,  688,
      688,  688, 1186,  670, 1187,  670,  670,  670,  671, 1188,
      671, 1189,  671,  672,  672,  672, 1194, 1195,  673,  697,
      697,  697, 1198,  672, 1195,  672,  672,  672,  673, 1199,
      673, 1200,  673,  674,  674,  674,  710,  710,  710, 1201,
      671,  676, 1202,  674, 1203,  674,  674,  674, 1204,  673,

      675,  676, 1206,  676, 1207,  676,  677,  677,  677, 1208,
      675, 1209,  675, 1211,  675, 1213,  677,  675,  677,  677,
      677, 1217,  675,  679,  679,  679, 1219,  675,  675, 1220,
      675, 1222, 1223,  675,  683,  683,  683,  679,  689,  689,
      689,  690,  690,  690,  676,  703,  703,  703,  683,  706,
      706,  706,  689, 1226, 1221,  690,  709,  709,  709,  703,
      745,  745,  745,  706, 1227,  746,  746,  746, 1221,  746,
      709,  746, 1228,  745, 1249,  706,  748,  748,  748, 1250,
      748,  706,  748,  703,  752,  752,  752,  753,  753,  753,
     1251,  753, 1246,  753,  761,  761,  761,  752,  761, 1246,

      761,  764,  764,  764, 1252, 1253,  765,  766,  777,  777,
      777,  764, 1254,  764,  764,  764,  765,  766,  765,  766,
      765,  766,  767,  767,  767, 1255, 1268,  768,  769,  783,
      783,  783,  767,  770,  767,  767,  767,  768,  769,  768,
      769,  768,  769,  770, 1269,  770,  771,  770, 1270,  773,
     1271, 1273,  772, 1278,  765, 1279,  771,  774,  771,  773,
      771,  773,  772,  773,  772,  766,  772,  774,  770,  774,
     1280,  774,  792,  792,  792,  768,  769,  776,  776,  776,
      771, 1281, 1282,  773, 1283, 1284,  770, 1285,  774, 1286,
     1287,  776,  782,  782,  782, 1288, 1289,  771, 1290, 1291,

      772,  791,  791,  791, 1292, 1294,  782,  793,  793,  793,
      794,  794,  794, 1297, 1298,  791,  804,  804,  804, 1299,
     1300,  793,  805,  805,  805,  806,  806,  806, 1301, 1302,
      804,  807,  807,  807, 1306, 1307,  805, 1308, 1324,  806,
      811,  811,  811,  812,  812,  812,  817,  817,  817,  818,
      818,  818, 1325, 1330,  811,  851,  851,  851, 1331,  851,
     1332,  851,  868,  818,  856,  856,  856,  869,  856, 1333,
      856, 1334,  868,  870,  868, 1335,  868,  869,  871,  869,
     1336,  869, 1344,  870,  872,  870, 1345,  870,  871,  873,
      871, 1346,  871, 1347,  872, 1350,  872, 1355,  872,  873,

      874,  873, 1356,  873,  880,  880,  880,  875, 1357,  868,
      874, 1358,  874,  871,  874, 1359,  869,  875, 1360,  875,
      870,  875,  876,  877,  885,  885,  885,  872,  878, 1361,
      873, 1362,  876,  877,  876,  877,  876,  877,  878, 1363,
      878, 1364,  878,  894,  894,  894,  895,  895,  895,  905,
      905,  905, 1365,  874, 1367,  875,  906,  906,  906,  907,
      907,  907, 1368,  905,  908,  908,  908,  876,  909,  909,
      909, 1369, 1373,  907,  877,  914,  914,  914,  919,  919,
      919,  920,  920,  920, 1374, 1375,  878,  921,  921,  921,
     1376, 1377,  919,  952,  952,  952,  954,  954,  954, 1378,

     1379,  921,  956,  956,  956, 1380,  952, 1381, 1392,  954,
      961,  961,  961, 1393, 1396,  956,  963,  963,  963, 1397,
     1398,  964,  966,  961, 1399, 1400,  963, 1401,  963,  963,
      963,  964,  966,  964,  966,  964,  966,  965,  965,  965,
      956, 1402, 1404,  966,  967,  967,  967,  965,  954,  965,
      965,  965,  961,  968,  967, 1405,  967,  967,  967,  964,
      969,  970, 1407,  968, 1409,  968,  971,  968, 1413,  973,
      969,  970,  969,  970,  969,  970,  971, 1414,  971,  973,
      971,  973,  967,  973, 1415, 1416,  972,  972,  972,  965,
     1418,  968,  991,  991,  991, 1419,  972,  970,  972,  972,

      972,  969,  996,  996,  996, 1417,  991,  997,  997,  997,
     1003, 1003, 1003, 1006, 1006, 1006, 1422, 1423,  973, 1424,
     1425,  971, 1417, 1426, 1003, 1007, 1007, 1007,  972, 1008,
     1008, 1008, 1037, 1037, 1037, 1427, 1038, 1038, 1038, 1007,
     1038, 1428, 1038, 1429, 1430, 1037, 1039, 1039, 1039, 1040,
     1040, 1040, 1041, 1041, 1041, 1431, 1041, 1434, 1041, 1039,
     1446, 1447, 1040, 1044, 1044, 1044, 1045, 1045, 1045, 1448,
     1045, 1449, 1045, 1051, 1051, 1051, 1044, 1052, 1052, 1052,
     1451, 1052, 1452, 1052, 1455, 1456, 1051, 1055, 1055, 1055,
     1459, 1460, 1056, 1056, 1056, 1462, 1464, 1055, 1466, 1055,

     1055, 1055, 1056, 1467, 1056, 1056, 1056, 1057, 1057, 1057,
     1468, 1469, 1058, 1059, 1087, 1087, 1087, 1057, 1470, 1057,
     1057, 1057, 1058, 1059, 1058, 1059, 1058, 1059, 1060, 1060,
     1060, 1059, 1472, 1061, 1062, 1098, 1098, 1098, 1060, 1063,
     1060, 1060, 1060, 1061, 1062, 1061, 1062, 1061, 1062, 1063,
     1064, 1063, 1473, 1063, 1474, 1476, 1065, 1101, 1101, 1101,
     1064, 1068, 1064, 1477, 1064, 1058, 1065, 1063, 1065, 1061,
     1065, 1068, 1067, 1068, 1478, 1068, 1069, 1069, 1069, 1083,
     1083, 1083, 1067, 1479, 1067, 1062, 1067, 1450, 1064, 1484,
     1069, 1063, 1497, 1083, 1065, 1066, 1066, 1066, 1499, 1068,

     1086, 1086, 1086, 1501, 1450, 1066, 1067, 1066, 1066, 1066,
     1096, 1096, 1096, 1502, 1086, 1097, 1097, 1097, 1503, 1127,
     1127, 1127, 1504, 1127, 1096, 1127, 1130, 1130, 1130, 1097,
     1131, 1131, 1131, 1509, 1131, 1512, 1131, 1513, 1514, 1130,
     1132, 1132, 1132, 1515, 1132, 1516, 1132, 1137, 1137, 1137,
     1517, 1137, 1518, 1137, 1143, 1143, 1143, 1146, 1146, 1146,
     1519, 1146, 1152, 1146, 1150, 1150, 1150, 1143, 1151, 1151,
     1151, 1520, 1152, 1153, 1152, 1521, 1152, 1150, 1151, 1154,
     1151, 1151, 1151, 1153, 1156, 1153, 1526, 1153, 1527, 1154,
     1155, 1154, 1528, 1154, 1156, 1155, 1156, 1529, 1156, 1536,

     1155, 1155, 1158, 1155, 1547, 1550, 1155, 1157, 1157, 1157,
     1553, 1554, 1158, 1152, 1158, 1555, 1158, 1157, 1156, 1157,
     1157, 1157, 1556, 1159, 1160, 1153, 1162, 1162, 1162, 1161,
     1161, 1161, 1154, 1159, 1160, 1159, 1160, 1159, 1160, 1161,
     1162, 1161, 1161, 1161, 1163, 1163, 1163, 1164, 1164, 1164,
     1175, 1175, 1175, 1559, 1158, 1176, 1176, 1176, 1562, 1160,
     1565, 1164, 1566, 1567, 1175, 1177, 1177, 1177, 1568, 1176,
     1178, 1178, 1178, 1569, 1159, 1179, 1179, 1179, 1570, 1177,
     1181, 1181, 1181, 1182, 1182, 1182, 1183, 1183, 1183, 1179,
     1190, 1190, 1190, 1191, 1191, 1191, 1577, 1182, 1578, 1580,

     1183, 1192, 1192, 1192, 1190, 1193, 1193, 1193, 1214, 1214,
     1214, 1581, 1214, 1590, 1214, 1218, 1218, 1218, 1592, 1193,
     1224, 1224, 1224, 1225, 1225, 1225, 1593, 1225, 1218, 1225,
     1229, 1229, 1229, 1224, 1230, 1230, 1230, 1231, 1230, 1594,
     1230, 1595, 1596, 1229, 1601, 1602, 1233, 1231, 1603, 1231,
     1604, 1231, 1232, 1232, 1232, 1605, 1233, 1193, 1233, 1606,
     1233, 1610, 1232, 1234, 1232, 1232, 1232, 1611, 1235, 1614,
     1623, 1231, 1624, 1234, 1625, 1234, 1626, 1234, 1235, 1236,
     1235, 1627, 1235, 1628, 1237, 1239, 1632, 1633, 1233, 1236,
     1634, 1236, 1636, 1236, 1237, 1239, 1237, 1239, 1237, 1239,

     1240, 1637, 1638, 1235, 1639, 1643, 1238, 1238, 1238, 1651,
     1240, 1234, 1240, 1236, 1240, 1652, 1238, 1235, 1238, 1238,
     1238, 1241, 1243, 1243, 1243, 1653, 1237, 1240, 1242, 1242,
     1242, 1241, 1655, 1241, 1656, 1241, 1658, 1239, 1242, 1662,
     1242, 1242, 1242, 1244, 1244, 1244, 1245, 1245, 1245, 1247,
     1247, 1247, 1663, 1248, 1248, 1248, 1664, 1244, 1256, 1256,
     1256, 1665, 1672, 1247, 1678, 1681, 1241, 1248, 1257, 1257,
     1257, 1682, 1256, 1258, 1258, 1258, 1259, 1259, 1259, 1260,
     1260, 1260, 1261, 1261, 1261, 1683, 1696, 1258, 1262, 1262,
     1262, 1263, 1263, 1263, 1697, 1698, 1261, 1264, 1264, 1264,

     1265, 1265, 1265, 1709, 1710, 1263, 1266, 1266, 1266, 1711,
     1717, 1264, 1267, 1267, 1267, 1272, 1272, 1272, 1718, 1719,
     1266, 1274, 1274, 1274, 1275, 1275, 1275, 1723, 1724, 1272,
     1276, 1276, 1276, 1277, 1277, 1277, 1729,  845, 1275, 1295,
     1295, 1295, 1296, 1296, 1296,  844, 1296, 1277, 1296, 1303,
     1303, 1303, 1295, 1303, 1312, 1303, 1309, 1309, 1309,  843,
     1309,  842, 1309, 1314, 1312,  841, 1312,  840, 1312, 1313,
     1313, 1313,  839, 1314, 1315, 1314,  838, 1314,  837, 1313,
     1316, 1313, 1313, 1313, 1315, 1317, 1315,  836, 1315,  835,
     1316, 1318, 1316,  834, 1316, 1317, 1312, 1317, 1319, 1317,

      833, 1318,  832, 1318,  831, 1318,  830,  829, 1319,  828,
     1319,  827, 1319,  826, 1320, 1321,  825,  824, 1314,  823,
     1322, 1315,  822, 1316, 1320, 1321, 1320, 1321, 1320, 1321,
     1322,  821, 1322,  820, 1322, 1323, 1323, 1323, 1317, 1326,
     1326, 1326, 1318, 1327, 1327, 1327, 1328, 1328, 1328, 1319,
      819,  816, 1320, 1326, 1329, 1329, 1329,  815, 1322,  814,
     1328, 1337, 1337, 1337, 1321, 1338, 1338, 1338, 1339, 1339,
     1339, 1340, 1340, 1340, 1341, 1341, 1341, 1342, 1342, 1342,
     1343, 1343, 1343,  813,  810, 1340, 1348, 1348, 1348, 1349,
     1349, 1349, 1351, 1351, 1351, 1352, 1352, 1352,  808,  803,

     1348, 1353, 1353, 1353, 1354, 1354, 1354, 1382,  802, 1352,
     1370, 1370, 1370, 1383, 1370,  801, 1370, 1382, 1354, 1382,
     1384, 1382,  800, 1383,  799, 1383, 1385, 1383,  798, 1386,
     1384,  797, 1384,  796, 1384, 1387, 1385,  795, 1385, 1386,
     1385, 1386,  789, 1386,  788, 1387, 1388, 1387,  787, 1387,
      786, 1383,  785, 1389, 1382,  784, 1388,  781, 1388,  780,
     1388,  779,  778, 1389, 1385, 1389, 1390, 1389,  775, 1391,
      760, 1386, 1384, 1394, 1394, 1394, 1390, 1387, 1390, 1391,
     1390, 1391,  759, 1391, 1395, 1395, 1395, 1403, 1403, 1403,
     1406, 1406, 1406, 1408, 1408, 1408,  758,  755, 1388, 1410,

     1410, 1410,  754,  751, 1406, 1389, 1411, 1411, 1411, 1412,
     1412, 1412, 1432, 1432, 1432, 1433, 1433, 1433,  747, 1390,
     1411, 1391, 1435, 1435, 1435, 1432, 1436,  744, 1433, 1437,
      742,  741, 1438,  740,  739, 1435, 1436, 1439, 1436, 1437,
     1436, 1437, 1438, 1437, 1438, 1440, 1438, 1439, 1441, 1439,
      738, 1439, 1458, 1458, 1458, 1440,  736, 1440, 1441, 1440,
     1441,  733, 1441,  732, 1442, 1442, 1442,  731,  730, 1453,
     1453, 1453,  729, 1439, 1442,  728, 1442, 1442, 1442, 1436,
     1444, 1437, 1441, 1453,  727, 1438, 1443, 1443, 1443,  726,
     1444,  725, 1444, 1440, 1444,  723, 1443,  722, 1443, 1443,

     1443, 1445, 1445, 1445, 1454, 1454, 1454, 1457, 1457, 1457,
      721, 1445,  720, 1445, 1445, 1445,  719,  718, 1454,  717,
      716, 1457, 1444, 1461, 1461, 1461, 1475, 1475, 1475, 1480,
     1480, 1480, 1481, 1481, 1481,  715, 1481,  714, 1481, 1475,
      713,  712, 1480, 1482, 1482, 1482, 1483, 1483, 1483,  711,
     1483,  708, 1483, 1485, 1485, 1485, 1482, 1486, 1486, 1486,
     1487, 1486,  707, 1486,  705,  704, 1485, 1488, 1488, 1488,
     1487,  702, 1487, 1489, 1487,  701, 1490, 1488,  700, 1488,
     1488, 1488,  699, 1489, 1491, 1489, 1490, 1489, 1490,  698,
     1490, 1492,  696,  695, 1491,  694, 1491,  693, 1491, 1495,

      692, 1492,  691, 1492,  687, 1492, 1493, 1493, 1493, 1495,
      686, 1495, 1487, 1495,  685,  681, 1493,  680, 1493, 1493,
     1493, 1498, 1498, 1498, 1489,  678, 1492,  667,  661, 1490,
      658, 1491, 1494, 1494, 1494, 1498,  656,  655, 1496, 1496,
     1496,  654, 1494,  653, 1494, 1494, 1494, 1495, 1496,  651,
     1496, 1496, 1496, 1500, 1500, 1500, 1505, 1505, 1505, 1506,
     1506, 1506, 1507, 1507, 1507,  650,  649, 1500,  648,  647,
     1505, 1508, 1508, 1508,  646,  645, 1507, 1510, 1510, 1510,
     1511, 1511, 1511, 1523, 1523, 1523, 1524, 1524, 1524,  644,
      643, 1510, 1549, 1549, 1549,  642, 1523,  641,  640, 1524,

     1525, 1525, 1525,  639, 1525,  638, 1525, 1530, 1530, 1530,
      635, 1530,  634, 1530, 1533, 1533, 1533,  633, 1533,  629,
     1533, 1537, 1537, 1537,  628, 1537,  626, 1537, 1540, 1540,
     1540,  625,  624, 1541, 1541, 1541,  620,  619, 1540, 1542,
     1540, 1540, 1540, 1541, 1543, 1541, 1541, 1541,  618, 1542,
     1544, 1542,  617, 1542, 1543, 1545, 1543,  616, 1543,  614,
     1544,  612, 1544,  608, 1544, 1545, 1546, 1545,  607, 1545,
     1548, 1548, 1548, 1542,  606,  605, 1546,  603, 1546,  602,
     1546, 1551, 1551, 1551, 1548,  599, 1543, 1552, 1552, 1552,
     1557, 1557, 1557,  598,  597, 1551, 1558, 1558, 1558,  596,

     1545,  595, 1544, 1560, 1560, 1560, 1561, 1561, 1561, 1563,
     1563, 1563,  594, 1546, 1572, 1572, 1572, 1560, 1573, 1573,
     1573,  593, 1573, 1563, 1573,  592,  591, 1572, 1574, 1574,
     1574,  590, 1574, 1583, 1574, 1579, 1579, 1579,  576, 1582,
     1582, 1582,  573, 1583, 1584, 1583,  572, 1583, 1579, 1582,
      571, 1582, 1582, 1582, 1584,  569, 1584,  568, 1584, 1585,
     1585, 1585,  567,  566, 1586,  563,  562, 1587,  561, 1585,
      560, 1585, 1585, 1585, 1586, 1583, 1586, 1587, 1586, 1587,
      559, 1587, 1588, 1588, 1588, 1589, 1589, 1589, 1591, 1591,
     1591, 1597, 1597, 1597,  558,  556, 1588,  555,  554, 1584,

      553,  552, 1586, 1598, 1598, 1598, 1599, 1599, 1599, 1600,
     1600, 1600, 1607, 1607, 1607,  550, 1607, 1598, 1607, 1587,
     1599, 1612, 1612, 1612, 1613, 1613, 1613, 1616, 1613,  549,
     1613, 1615, 1615, 1615, 1612, 1617,  548, 1616,  547, 1616,
      546, 1616,  545, 1619, 1615, 1617,  544, 1617,  543, 1617,
     1618, 1618, 1618, 1619,  542, 1619,  541, 1619,  540,  539,
     1618,  538, 1618, 1618, 1618, 1620, 1620, 1620,  536,  533,
     1619,  532,  531, 1617, 1616, 1620,  530, 1620, 1620, 1620,
     1621, 1621, 1621, 1622, 1622, 1622, 1629, 1629, 1629, 1630,
     1630, 1630,  529,  528, 1621, 1631, 1631, 1631,  527,  524,

     1629, 1640, 1640, 1640, 1646, 1640,  523, 1640, 1644, 1644,
     1644, 1645, 1645, 1645, 1646, 1645, 1646, 1645, 1646, 1647,
     1648, 1644, 1650, 1650, 1650, 1649, 1649, 1649,  519, 1647,
     1648, 1647, 1648, 1647, 1648, 1649,  518, 1649, 1649, 1649,
     1654, 1654, 1654, 1657, 1657, 1657, 1647, 1666, 1666, 1666,
     1669, 1666,  516, 1666, 1654,  515, 1670, 1646,  514,  513,
     1669, 1671, 1669,  512, 1669,  509, 1670,  507, 1670, 1648,
     1670, 1671,  506, 1671,  505, 1671,  504, 1669, 1673, 1673,
     1673, 1674, 1674, 1674, 1675, 1675, 1675, 1676, 1676, 1676,
      503,  502, 1673,  501, 1684, 1674,  484, 1685, 1675, 1677,

     1677, 1677,  480,  478, 1684, 1670, 1684, 1685, 1684, 1685,
     1686, 1685,  474, 1677, 1671, 1687, 1687, 1687,  473,  472,
     1686,  468, 1686,  467, 1686, 1688, 1688, 1688,  466, 1687,
     1689, 1689, 1689, 1690, 1690, 1690, 1691, 1691, 1691, 1688,
     1692, 1692, 1692, 1684, 1693, 1693, 1693, 1690,  465,  464,
     1685,  463, 1686, 1694, 1694, 1694, 1699, 1700, 1693, 1695,
     1695, 1695, 1701, 1702, 1702, 1702, 1699, 1700, 1699, 1700,
     1699, 1700, 1701, 1695, 1701,  462, 1701, 1702, 1703, 1703,
     1703, 1704, 1704, 1704, 1705, 1705, 1705, 1706, 1706, 1706,
     1707, 1707, 1707, 1708, 1708, 1708, 1715, 1715, 1715, 1700,

      461, 1712, 1713,  460, 1707,  459,  458, 1714,  457, 1699,
     1701, 1712, 1713, 1712, 1713, 1712, 1713, 1714, 1720, 1714,
      456, 1714, 1716, 1716, 1716, 1721, 1722,  455, 1720,  453,
     1720,  452, 1720,  451,  450, 1721, 1722, 1721, 1722, 1721,
     1722, 1726,  449, 1712, 1725, 1725, 1725,  448, 1727,  447,
     1713, 1726,  445, 1726, 1714, 1726,  443, 1725, 1727,  442,
     1727,  441, 1727, 1728, 1728, 1728, 1720, 1730, 1730, 1730,
      440,  439, 1721, 1728,  438, 1728, 1728, 1728, 1722,  437,
     1730, 1731, 1731, 1731,  436, 1732, 1732, 1732, 1726, 1732,
      433, 1732, 1733,  431, 1731, 1734, 1734, 1734,  430,  429,

     1727,  428, 1733,  427, 1733, 1734, 1733, 1734, 1734, 1734,
     1735, 1735, 1735, 1736, 1736, 1736, 1737, 1737, 1737,  426,
     1735,  424, 1735, 1735, 1735,  423, 1736,  422,  420, 1737,
     1738, 1738, 1738,  419, 1738,  416, 1738, 1739, 1739, 1739,
      415, 1739,  414, 1739, 1733, 1742, 1742, 1742,  413,  412,
     1743, 1743, 1743,  411,  408, 1742,  407, 1742, 1742, 1742,
     1743,  406, 1743, 1743, 1743, 1744, 1744, 1744, 1745, 1745,
     1745,  405, 1745,  404, 1745, 1746, 1746, 1746, 1744, 1746,
      403, 1746, 1749, 1749, 1749, 1750, 1750, 1750,  402, 1750,
      401, 1750, 1749,  400, 1749, 1749, 1749, 1754, 1754, 1754,

     1754, 1754, 1755, 1755, 1755, 1755, 1755, 1756, 1756, 1756,
     1756, 1756, 1757, 1757, 1757, 1757, 1757, 1758, 1758, 1758,
     1758, 1758, 1759, 1759, 1759, 1759, 1759, 1760, 1760, 1760,
     1760, 1760, 1761,  380,  377, 1761, 1762, 1762, 1762, 1762,
     1763, 1763,  376, 1763, 1763, 1764, 1764, 1764,  375, 1764,
      372,  371,  370,  364,  363,  362,  361,  359,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  348,  347,  346,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  336,
      335,  334,  333,  332,  330,  329,  328,  327,  326,  325,
      324,  323,  322,  321,  320,  319,  318,  317,  314,  313,

      311,  310,  309,  308,  307,  306,  305,  288,  286,  284,
      280,  279,  277,  276,  275,  271,  270,  269,  268,  267,
      266,  265,  264,  263,  262,  261,  260,  259,  258,  257,
      256,  255,  254,  252,  251,  250,  249,  248,  247,  246,
      245,  244,  243,  241,  240,  239,  238,  237,  236,  235,
      234,  233,  231,  230,  229,  228,  227,  226,  225,  224,
      223,  221,  220,  219,  218,  217,  214,  197,  196,  195,
      194,  193,  190,  189,  188,  187,  186,  185,  183,  182,
      181,  178,  177,  176,  175,  174,  173,  172,  171,  170,
      168,  167,  166,  165,  164,  163,  162,  161,  160,  158,

      157,  156,  155,  154,  153,  152,  151,  149,  145,  144,
      143,  142,  141,  139,  138,  136,  135,  116,  115,  114,
      113,  112,  110,  109,  108,  107,  106,  105,  104,  103,
      102,  101,   99,   94,   93,   92,   90,   86,   85,   84,
       83,   82,   80,   77,   71,   55,   52,   50,   48,   47,
       46,   45,   42,   40,   37,   26,   17,    8,    7,    6,
        5,    4,    3, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,

     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[187] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 
    1, 0, 1, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "OSParseosol.l"
/** @file parseosol.l
 * 
 * @author  Robert Fourer, Gus Gassmann, Jun Ma, Kipp Martin, 
 * @version 1.1, 10/07/2008
 * @since   OS1.1
 *
 * \remarks
 * Copyright (C) 2005-2008, Robert Fourer, Gus Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "OSParseosol.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

 
#include <sstream>  
#include "OSoLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
    
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", osoltext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;








#line 79 "OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 2022 "OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 89 "OSParseosol.l"


 
#line 2268 "OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1754 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4064 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 92 "OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 97 "OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 98 "OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 101 "OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 115 "OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 118 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 119 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 120 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 121 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 122 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 123 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 124 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 125 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 126 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 127 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 128 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 129 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 130 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 131 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 132 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 133 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 134 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 135 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 136 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 137 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 138 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 139 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 140 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 141 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 142 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 143 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 144 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 145 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 146 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 147 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 148 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 149 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 150 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 151 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 152 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 153 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 154 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFVARATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 155 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFVARATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 156 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(IDXATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 157 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(IDXATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 158 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 159 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 160 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 161 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 162 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 163 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 164 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 165 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 166 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 167 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 168 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 169 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 170 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOBJATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 171 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOBJATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 172 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 173 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 174 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFCONATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 175 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFCONATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 176 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 177 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 180 "OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 181 "OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 182 "OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 183 "OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 184 "OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 185 "OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 186 "OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 187 "OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 188 "OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 189 "OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 190 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 191 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 193 "OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 194 "OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 195 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 196 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 197 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 198 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 199 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 200 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 201 "OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 202 "OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 203 "OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 204 "OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 205 "OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 206 "OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 207 "OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 208 "OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 209 "OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 210 "OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 211 "OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 212 "OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 213 "OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 214 "OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 215 "OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 216 "OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 218 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 219 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 220 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZESTART);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 221 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZEEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 222 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 223 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 224 "OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 225 "OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 227 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 228 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 230 "OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 231 "OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 232 "OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 233 "OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 234 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 235 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 236 "OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 237 "OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 238 "OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 239 "OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 240 "OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 241 "OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 242 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 243 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 244 "OSParseosol.l"
{YY_PRINT; return(FILESTOCREATESTART);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 245 "OSParseosol.l"
{YY_PRINT; return(FILESTOCREATEEND);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 246 "OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 247 "OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 248 "OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 249 "OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 250 "OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 251 "OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 252 "OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 253 "OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 254 "OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 255 "OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 256 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 257 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 258 "OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 259 "OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 260 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 261 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 262 "OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 263 "OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 266 "OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 267 "OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 268 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 269 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 270 "OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 271 "OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 272 "OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 273 "OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 274 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 275 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 276 "OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 277 "OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 278 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 279 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 280 "OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 281 "OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 282 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 283 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 284 "OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 285 "OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 286 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 287 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 288 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 289 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 290 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 291 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 294 "OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext);   yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 297 "OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 175:
#line 299 "OSParseosol.l"
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 299 "OSParseosol.l"
;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 300 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 302 "OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 179:
#line 304 "OSParseosol.l"
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 304 "OSParseosol.l"
;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 305 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 308 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 309 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 310 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSOLATTRIBUTETEXT);}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 312 "OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 324 "OSParseosol.l"
ECHO;
	YY_BREAK
#line 3489 "OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1754 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1754 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1753);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 324 "OSParseosol.l"





