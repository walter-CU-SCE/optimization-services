#line 2 "OSParseosol.cpp"

#line 4 "OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osollex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 186
#define YY_END_OF_BUFFER 187
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1750] =
    {   0,
        0,    0,  184,  184,  182,  182,  183,  183,    0,    0,
        0,    0,    0,    0,    0,    0,  187,  185,    1,    1,
        1,    2,  173,  173,    5,  173,    4,  185,    3,  173,
      184,  186,  182,  183,  175,  176,  175,  179,  180,  179,
        0,    0,    0,    3,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,    5,
        4,  173,    5,  173,    6,    0,    0,  178,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  173,  184,  182,  183,    0,  181,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,    0,  173,    5,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    5,  177,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
        5,  174,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  165,    0,    0,
        0,    0,    0,    0,    0,   75,    0,    0,    0,  157,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  151,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   29,   30,    0,
        0,    0,    0,    0,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  121,    0,
        0,    0,    0,    0,    0,  111,    0,    0,    0,    0,
        0,    0,    0,   45,   46,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,    0,  166,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   76,    0,    0,    0,    0,
        0,    0,    0,  158,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      152,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   87,    0,    0,    0,    0,    0,    0,    0,   67,
      101,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   27,   28,    0,    0,    0,
        0,   13,   14,    0,    0,    0,    0,   51,   52,    0,
        0,   19,   20,    0,    0,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  166,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   76,    0,    0,    0,    0,
        0,    0,  158,    0,    0,    0,   68,    0,    0,    0,
        0,  122,    0,    0,    0,    0,    0,    0,    0,    0,
      112,    0,  152,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       71,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   15,   16,  173,  173,  173,  173,
      173,  173,  173,  173,  173,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   88,    0,    0,    0,

        0,    0,    0,    0,   68,    0,  102,    0,    0,    0,
      122,    0,    0,    0,    0,    0,    0,    0,  112,    0,
        0,    0,   97,    0,    0,    0,   69,    0,    0,    0,
        0,   91,  113,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  145,    0,    0,   73,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       47,   48,    0,    0,    0,  173,  173,  173,  173,  173,
      173,  173,  173,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   88,    0,    0,    0,    0,    0,    0,
        0,    0,  102,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   72,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
      133,    0,    0,    0,    0,    0,    0,    0,   93,    0,
        0,    0,    0,    0,   53,   54,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   55,   56,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
        0,    0,   98,    0,    0,    0,    0,    0,   70,    0,
        0,    0,    0,    0,    0,    0,    0,   92,    0,  114,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  146,    0,    0,    0,    0,   74,    0,    0,
        0,    0,   72,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  147,    0,   49,   50,    0,
        0,    0,   31,   32,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,    0,   98,    0,    0,    0,    0,
       70,    0,    0,    0,    0,    0,    0,    0,    0,   92,
      114,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   96,    0,  134,  146,    0,    0,    0,    0,   74,
        0,    0,    0,    0,    0,   94,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  153,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   79,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   96,  134,    0,    0,    0,    0,    0,    0,    0,

        0,   94,    0,  148,  161,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  107,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   81,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  154,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   80,    0,    0,  148,  117,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   83,  109,
      103,    0,   77,   99,    0,    0,    0,    0,    0,    0,
      171,    0,    0,   17,   18,    0,    0,    0,   63,   64,
        0,    0,    0,   59,   60,    0,    0,    0,    0,    0,
        0,    0,   43,   44,    0,    0,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,    0,  162,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  108,    0,    0,  154,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   82,   80,    0,    0,
        0,  127,  141,    0,    0,    0,    0,    0,    0,    0,

      105,    0,    0,    0,    0,  123,    0,  169,    0,    0,
        7,    8,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  162,    0,
      118,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   84,    0,  110,  108,    0,  104,    0,    0,
       78,    0,  100,    0,    0,    0,    0,    0,    0,   82,
        0,  172,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   89,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   23,

       24,    0,    0,    0,    0,    9,   10,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  118,    0,
        0,    0,  128,    0,  142,    0,    0,    0,    0,    0,
        0,    0,   84,  110,  104,    0,  106,   78,  100,    0,
        0,    0,    0,    0,  124,    0,  172,    0,  170,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  143,    0,    0,    0,    0,   21,   22,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,    0,    0,  128,
      142,    0,    0,    0,    0,    0,    0,    0,  106,    0,

        0,    0,    0,  124,    0,  170,    0,   90,    0,    0,
        0,    0,    0,    0,    0,  131,   85,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  144,    0,    0,   90,    0,  125,    0,
      167,    0,    0,    0,    0,    0,  137,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  132,    0,   86,    0,    0,  144,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  115,    0,    0,
        0,    0,    0,    0,    0,    0,   25,   26,    0,   33,
       34,    0,    0,   35,   36,  173,  173,  173,  173,  173,
      173,  173,    0,    0,  126,    0,    0,  168,    0,    0,
        0,    0,  132,   86,    0,    0,  138,    0,    0,  139,
        0,    0,    0,    0,    0,    0,  119,    0,    0,    0,
       37,   38,    0,    0,    0,    0,    0,  173,  173,  173,
      173,  173,  173,    0,  126,    0,  168,    0,    0,    0,
        0,    0,  138,    0,    0,  116,    0,    0,    0,    0,

        0,    0,    0,   39,   40,    0,    0,    0,    0,    0,
        0,  173,  173,  173,  173,  173,    0,  140,    0,    0,
        0,    0,    0,    0,    0,  120,  116,    0,    0,    0,
      149,    0,    0,    0,    0,    0,   11,   12,    0,    0,
        0,  173,  173,  173,  173,  140,    0,    0,    0,    0,
        0,    0,  120,    0,  159,  155,  129,    0,    0,    0,
        0,    0,   65,   66,  173,  173,  173,    0,    0,    0,
        0,  150,    0,    0,  163,  135,    0,    0,    0,  173,
      173,  173,    0,    0,  160,    0,  156,  150,    0,  130,
        0,    0,    0,    0,  173,  173,  173,    0,  164,  160,

      156,  130,    0,  136,    0,    0,    0,  173,  173,  173,
      164,  136,    0,    0,    0,  173,  173,  173,    0,    0,
        0,  173,  173,  173,    0,    0,    0,    0,  173,  173,
      173,    0,    0,    0,    0,   41,   42,  173,  173,    0,
        0,    0,   57,   58,  173,    0,   61,   62,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    7,    1,    1,    8,    1,
        1,    7,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    7,    1,   14,
       15,   16,   17,    7,    7,   18,   19,   20,   21,   22,
        7,    7,   23,   24,   25,   26,   27,   28,   29,   30,
        7,   31,   32,   33,   34,   35,    7,    7,    7,    7,
        1,    7,    1,    1,    7,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,    1,   62,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    2,    2,    2,    1,    3,    2,    4,    1,    2,
        2,    2,    2,    2,    1,    5,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    1
    } ;

static yyconst flex_int16_t yy_base[1761] =
    {   0,
        0,   62, 3782, 3781, 3790, 3789, 3786, 3785,    0,    0,
        0,    0,   15,   16,    4,   17, 3792, 3799,  123,  179,
      235, 3799,   22,   26,   67,   27,   80,  288, 3799,   30,
        0, 3799,    0,    0, 3799, 3799, 3781, 3799, 3799, 3774,
        0, 3773,   28, 3799, 3752, 3747, 3733, 3746,   10, 3748,
       48, 3733,    1,   49, 3746,    0,   95,   98,  114,  101,
      120,  117,  138,  130,  149,  182,  190,  205,  195,  246,
      264,  141,  285,  255, 3799, 3771,  308, 3799, 3730,    8,
     3735, 3738, 3728, 3726, 3731,   51,  257,   53, 3734,  162,
     3713, 3718, 3735,  239,    0,    0,    0, 3754, 3799, 3714,

     3714, 3717, 3707, 3730, 3726, 3717, 3714, 3713, 3713,  145,
     3723, 3707, 3722, 3712, 3708,  242,  300,  301,  187,  293,
      355,  358,  364,  365,  368,  373,  381,  384,  389,  392,
      400, 3741,  308,  405, 3743, 3702,   13, 3707, 3710, 3700,
     3698, 3703,   66,  372,   85, 3706,  382, 3685, 3690, 3707,
     3693, 3690, 3687, 3692, 3689,  386, 3700, 3698, 3676, 3685,
     3688, 3677, 3681, 3687, 3674,    1, 3678, 3675, 3683, 3672,
     3677, 3669, 3671, 3681, 3667,  427, 3799, 3679, 3680, 3669,
      316, 3680, 3679, 3674, 3673, 3675, 3654,  442,  446, 3661,
     3669, 3672, 3652, 3650,  437,  453,  454,  457,  460,  464,

      473,  479,  483,  490,  507,  501,  512,  522,  516,  523,
     3692, 3799, 3655, 3652, 3649, 3654, 3651,  454, 3662, 3660,
     3638, 3647, 3650, 3639, 3643, 3649, 3636,  104, 3640, 3637,
     3645, 3634, 3639, 3631, 3633, 3643, 3629,  132, 3641, 3640,
     3639, 3638, 3622, 3620, 3620, 3651, 3633, 3639,  463, 3631,
     3626, 3622, 3628, 3616, 3612, 3622, 3626, 3607, 3622, 3604,
     3603, 3604, 3618, 3604, 3612, 3613, 3601,  531,  538,  553,
     3606, 3597, 3632,  560, 3610, 3609,  564, 3799, 3799, 3594,
      574, 3600,  578, 3606,  571,  572,  588,  592,  595,  529,
      596,  614,  617,  618,  621,  636,  639,  645,  652,  660,

     3605, 3604, 3603, 3602, 3586, 3584, 3584,  667, 3598, 3604,
      653,  685, 3592, 3588, 3594, 3582, 3578, 3588, 3592, 3573,
     3588, 3570, 3569, 3570, 3584, 3570,  675, 3567, 3585, 3571,
     3581, 3564, 3564, 3572, 3560, 3578, 3593, 3563, 3567, 3580,
     3565, 3568, 3569, 3558,  211, 3552, 3548, 3545, 3572, 3561,
     3556, 3560, 3554, 3557, 3556, 3799, 3567, 3558, 3543, 3548,
      641,  691,  700, 3799, 3799, 3535, 3546, 3539,  707,  724,
     3535, 3534, 3535,  714,  731, 3529,  738,  741,  748,  722,
      744,  752,  755,  759,  760,  775,  768,  778,  779,  783,
      798,  802,  820,  823,  461, 3529, 3547, 3533, 3543, 3526,

     3526, 3534, 3522, 3540,  839,  597, 3555, 3525, 3529, 3542,
     3527, 3530,  842,  805, 3531, 3520,  845, 3514, 3510, 3507,
      848, 3524, 3519, 3523, 3517, 3520, 3519,  863, 3530,  866,
      869, 3521, 3503, 3517, 3515, 3498, 3519, 3515, 3514,   70,
     3500, 3799, 3494, 3499, 3512, 3491, 3496, 3488, 3498,  872,
     3512, 3485, 3489, 3502, 3483, 3483, 3479, 3496, 3480, 3484,
     3495, 3493, 3476, 3477,  881, 3799, 3799, 3487, 3476, 3474,
      888, 3799, 3799, 3495,  895, 3473,  898, 3799, 3799, 3482,
      905, 3799, 3799,  912,  915,  879,  910,  920,  923,  926,
      799,  941,  933,  936,  964,  927, 3468, 3482, 3480, 3463,

     3484, 3480, 3479,  154, 3465,  960,  968, 3459, 3464, 3477,
     3456, 3461,  983, 3453, 3463,  986,  989,  992, 3451, 3455,
      995, 1001, 3468, 3449, 3449, 3445, 3462, 3446, 3450, 1010,
     1013, 3461, 1016, 3459, 3459, 3439, 3453, 3442, 3441, 3443,
     3442, 3444, 3443, 3448, 3445, 3444,    3, 3437, 3432, 3437,
     3419, 3428,  188, 3425, 3433, 3422, 3435, 3427, 3433,  161,
     3799, 3424, 3424, 3410, 3414, 1020, 3419, 3407, 3425, 1025,
     1028, 3412, 1035, 1039, 3799, 3799, 1042, 1046, 1049,  682,
     1052, 1053, 1068, 1071, 1074, 3428, 3408, 3422, 3411, 3410,
     3412, 3411, 3413, 3412, 3417, 1077, 1093, 3414, 3413,  197,

     3406, 3401, 3406, 3388, 1096, 1101, 1104, 3397,  250, 3394,
     1107, 3402, 3391, 3404, 3396, 3402,  363, 1111, 1116, 3393,
     3393, 3395, 3799, 3389, 3384,  391, 3799, 1102, 3383, 3388,
     3394, 3799, 3799, 3377, 3381, 3399, 3377, 3372, 3392, 3372,
     3382, 3381, 3385, 3370, 3382, 3382, 3380,   71, 3368, 3368,
     3377, 3376, 1126, 3371, 1130, 1136, 3381, 1144, 1131, 1150,
     3799, 3799, 3358, 1165, 1168, 1175, 1171, 1179, 1184, 1204,
     1197, 1208, 1231, 3368, 1234, 3362, 3357,  414, 1237, 1223,
     3356, 3361, 3367, 1199, 1252, 1257, 3350, 3354, 3372, 3350,
     3345, 3365, 1262, 3345, 3355, 3354, 3358, 3343, 1267, 3356,

     3354, 1272, 3342, 3342, 1275, 1278, 3351, 3350, 3340, 3350,
     3343, 3333, 3345, 3334, 3327, 3345, 3345, 3340, 3339,  373,
     3330, 3337, 3325, 3315, 3334, 3318, 3328, 3318, 3323, 3799,
     3799, 3315,  464, 3329, 3331, 3335, 3310, 3341, 3799, 3309,
     1282, 1290, 3312, 1306, 3799, 3799, 3301, 1300, 1314, 3310,
     3309,  208,  163, 3308, 3321, 3323, 1321, 3799, 3799, 1328,
     1285, 1324, 1343, 1335, 1339, 1346, 1350, 1354, 1359, 1363,
     3306, 1378, 1388, 3316, 3309, 3299, 3311, 1395, 1403, 3300,
     3293, 3311, 3311, 3306, 3304,  501, 1406, 1410, 1413, 1416,
     3290, 3290, 3278, 3229, 3248, 3231, 3240, 3223, 3227, 1421,

     1424, 1428, 1431, 3215,  529, 3228, 1439, 1443, 3226, 3224,
     3199, 3230, 1446, 1449, 3186, 3181, 3189, 3191, 3186, 3178,
     3169, 3181, 3165, 3152, 3165, 3143, 3145, 3158, 3156, 3151,
     3141, 3143, 3110, 3113, 3099, 3090, 3087, 3091, 3056, 3050,
     3060, 3043, 3063, 3025,    1, 3799, 1454, 3799, 3799,   10,
       57, 1464, 3799, 3799,   64,   81,   78,   86,   87,   95,
      106,  115,  164, 1457, 1461, 1462, 1467, 1472, 1477, 1478,
     1386, 1482, 1483, 1487,  175, 1505,  208,  241,  248,  249,
     1511,  274,  298,  292,  287,  310,  314,  323,  349, 1519,
     1522,  353,  385,  395,  406,  404,  435,  438,  454,  461,

     1528, 1535, 1538, 1546, 1549,  474,  468,  472,  512, 1553,
      500,  531,  516,  516, 1556, 1559, 1562,  515,  543,  551,
      578,  581,  568,  577,  586,  583,  581,  613,  627,  619,
      634,  642,  644,  641, 3799,  650,  656,  669,  658,  663,
      667,  674,  668,  708, 3799,  709,  707, 1565,  725, 1571,
      760, 1579,  756,  759,  781,  763, 1585,  778, 1588, 1582,
     1612, 1583, 1628, 1593, 1621, 1622, 1632, 1637, 1643,  778,
      793,  783,  802,  800,  799,  809,  817,  815,  805,  829,
      825,  829,  840,  847,  850,  859, 1659,  855,  871,  895,
      887, 1608, 1652,  896,  895,  904,  898,  914, 1667,  908,

      902, 1670, 1674, 1682, 3799,  911,  936,  919,  920,  926,
      947,  962,  965,  956,  957,  973,  970,  972, 3799,  993,
      985, 1000, 1003, 1004, 1028, 1049, 1035, 1046, 1055, 3799,
     1043, 1066, 1689, 1693, 1703, 1706, 1709, 1068, 1105, 1720,
     1723, 1088, 1082, 1121, 1096, 1103, 1730, 1734, 1113, 1117,
     1744, 1747, 1750, 1686, 1753, 1768, 1772, 1773, 1714, 1776,
     1777, 1792, 1783, 1798, 1799, 1108, 1131, 1110, 1129, 1133,
     1157, 1158, 1161, 1154, 1155, 1173, 1172, 1161, 1818, 1183,
     1164, 1821, 1825, 1179, 1176, 1176, 1211, 1223, 1209, 1211,
     1221, 1828, 1837, 1843, 1213, 1217, 1846, 3799, 1222, 1249,

     1250, 1242, 1269, 1256, 1276, 1266, 1294, 1273, 3799, 3799,
     3799, 1293, 3799, 3799, 1284, 1286, 1295, 1312, 1300, 1310,
     1313, 1323, 1852, 3799, 3799, 1859, 1862, 1869, 3799, 3799,
     1318, 1318, 1876, 3799, 3799, 1319, 1481, 1340, 1883, 1324,
     1334, 1886, 3799, 3799, 1356, 1893, 1897, 1867, 1889, 1900,
     1905, 1913, 1942, 1916, 1921, 1934, 1949, 1957, 1964, 1973,
     1371, 1398, 1399, 1401, 1425, 1427, 1450, 1437, 1468, 1447,
     1976, 1979, 1982, 1997, 2000, 1465, 2003, 2006, 2009, 1468,
     1469, 1483, 1490, 1480, 1482, 2015, 2024, 2030, 2033, 1497,
     1550, 3799, 3799, 1509, 1499, 1527, 1529, 1535, 1543, 1557,

     3799, 1552, 1581, 1566, 1562, 3799, 1563, 3799, 1580, 2036,
     3799, 3799, 1585, 2043, 1603, 1599, 1628, 1614, 1614, 2048,
     2051, 1613, 1651, 1635, 2058, 2062, 2065, 2074, 2027, 2070,
     2078, 2081, 2089, 2096, 2100, 2105, 2111, 2128, 2120, 2133,
     2136, 1778, 2143, 2148, 1651, 1651, 1659, 1667, 1675, 1670,
     1695, 2153, 2158, 2163, 2168, 2171, 2174, 2178, 2181, 2184,
     2189, 2192, 2199, 1690, 1729, 1710, 1721, 2202, 1722, 2207,
     2210, 2213, 2217, 1740, 1741, 1768, 1765, 1755, 1756, 1778,
     1793, 1778, 1786, 1798, 1793, 1804, 1802, 1824, 3799, 1815,
     2220, 2226, 1810, 1827, 1848, 1849, 1853, 1856, 2234, 3799,

     3799, 1870, 1866, 1882, 2241, 3799, 3799, 2225, 2248, 2244,
     2251, 2252, 2257, 2268, 2272, 2273, 2276, 2277, 2253, 1885,
     1890, 2292, 2300, 2303, 2307, 1884, 1875, 1876, 1898, 1899,
     1884, 1892, 2312, 2320, 2326, 2329, 2332, 2335, 2338, 1903,
     1904, 1915, 1919, 2344, 2347, 1939, 2350, 2353, 2359, 2362,
     1940, 1942, 1941, 1951, 1953, 1959, 1942, 1957, 1965, 1975,
     1963, 3799, 1968, 1979, 1975, 2368, 3799, 3799, 1990, 1994,
     2016, 2025, 2030, 2021, 2028, 2030, 2039, 2365, 2366, 2371,
     2375, 2382, 2386, 2381, 2391, 2397, 2402, 2049, 2058, 2406,
     2417, 2057, 2068, 2069, 2083, 2072, 2088, 2092, 2420, 2108,

     2096, 2425, 2110, 2429, 2124, 2434, 2444, 2440, 2149, 2158,
     2144, 2153, 2213, 2189, 2228, 3799, 3799, 2218, 2236, 2233,
     2232, 2226, 2229, 2230, 2260, 2249, 2282, 2447, 2451, 2276,
     2455, 2459, 2462, 2463, 2466, 2467, 2470, 2485, 2493, 2489,
     2508, 2286, 2303, 2289, 2304, 2357, 2323, 2353, 2523, 2526,
     2336, 2354, 2532, 2490, 2357, 2355, 2517, 2357, 3799, 2382,
     3799, 2384, 2403, 2393, 2413, 2434, 3799, 2431, 2434, 2431,
     2541, 2437, 2443, 2453, 2476, 2547, 2551, 2561, 2564, 2465,
     2571, 2575, 2544, 2585, 2578, 2588, 2589, 2593, 2608, 2611,
     2604, 2630, 2476, 2633, 2497, 2637, 2487, 2502, 2493, 2491,

     2648, 2653, 2656, 2659, 2514, 2663, 2666, 2512, 2521, 2529,
     2535, 2526, 2537, 2529, 2566, 2546, 2543, 3799, 2671, 2674,
     2679, 2572, 2572, 2563, 2572, 2688, 3799, 3799, 2695, 3799,
     3799, 2572, 2702, 3799, 3799, 2709, 2712, 2686, 2693, 2715,
     2716, 2719, 2588, 2736, 2739, 2593, 2742, 2745, 2586, 2600,
     2592, 2644, 2751, 2757, 2630, 2762, 2768, 2630, 2771, 3799,
     2646, 2670, 2664, 2694, 2686, 2723, 3799, 2777, 2780, 2787,
     3799, 3799, 2707, 2699, 2794, 2717, 2708, 2797, 2792, 2800,
     2815, 2808, 2818, 2823, 2801, 2720, 2838, 2727, 2721, 2745,
     2757, 2788, 2841, 2847, 2850, 2856, 2765, 2784, 2788, 2779,

     2778, 2787, 2865, 3799, 3799, 2789, 2806, 2872, 2875, 2818,
     2882, 2878, 2886, 2901, 2893, 2909, 2916, 2887, 2799, 2817,
     2821, 2808, 2807, 2815, 2926, 2931, 2934, 2830, 2828, 2839,
     3799, 2856, 2841, 2844, 2872, 2937, 3799, 3799, 2855, 2944,
     2947, 2942, 2950, 2955, 2958, 2973, 2868, 2856, 2860, 2978,
     2881, 2874, 2981, 2900, 3799, 3799, 3799, 2923, 2936, 2916,
     2913, 2984, 3799, 3799, 2987, 2991, 2994, 2916, 2996, 3011,
     3015, 3018, 3021, 2938, 3799, 3799, 2940, 2940, 2958, 3024,
     3027, 3030, 3031, 3048, 3051, 3054, 3057, 3063, 3069, 3074,
     3077, 2949, 2965, 2961, 3081, 3082, 3085, 3086, 3101, 3104,

     3107, 3110, 3113, 3116, 2984, 2980, 2987, 3123, 3126, 3129,
     3119, 3130, 2989, 2996, 2994, 3136, 3139, 3142, 3013, 3009,
     3144, 3149, 3152, 3158, 3014, 3167, 3177, 3181, 3188, 3197,
     3205, 3212, 3220, 3226, 3235, 3799, 3799, 3242, 3245, 3248,
     3262, 3269, 3799, 3799, 3276, 3279, 3799, 3799, 3799, 3292,
     3297, 3302, 3307, 3312, 3317, 3322, 3326, 3331, 3335, 3340
    } ;

static yyconst flex_int16_t yy_def[1761] =
    {   0,
     1750, 1750, 1751, 1751, 1752, 1752, 1753, 1753, 1754, 1754,
     1754, 1754, 1755, 1755, 1756, 1756, 1749, 1749, 1749, 1757,
     1757, 1749, 1757, 1757, 1757, 1757, 1757, 1749, 1749, 1757,
     1758, 1749, 1759, 1760, 1749, 1749, 1749, 1749, 1749, 1749,
       19, 1749,   28, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749,   21, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1757, 1758, 1759, 1760, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1749, 1757, 1757, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1757, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1757, 1757, 1757, 1757, 1757, 1757,

     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1749, 1749, 1749, 1749, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1749, 1749, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1757, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1757, 1757, 1757,
     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1757, 1757, 1757, 1757, 1757,
     1757, 1757, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1757, 1757, 1757,
     1757, 1757, 1757, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1757, 1757, 1757, 1757, 1757, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1757, 1757, 1757, 1757, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1757, 1757, 1757, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1757,
     1757, 1757, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1757, 1757, 1757, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1757, 1757, 1757,
     1749, 1749, 1749, 1749, 1749, 1757, 1757, 1757, 1749, 1749,
     1749, 1757, 1757, 1757, 1749, 1749, 1749, 1749, 1757, 1757,
     1757, 1749, 1749, 1749, 1749, 1749, 1749, 1757, 1757, 1749,
     1749, 1749, 1749, 1749, 1757, 1749, 1749, 1749,    0, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749
    } ;

static yyconst flex_int16_t yy_nxt[3862] =
    {   0,
       18,   19,   20,   21,   18,   22,   39,   22,   18,   24,
       25,   26,   27,   28,   18,   29,   18,   36,   36,   39,
       40, 1749,   30, 1749,   37,   37, 1749, 1749, 1749, 1749,
      634, 1749, 1749,   40,  635, 1749,   70, 1749,   71, 1749,
     1749, 1749,   75, 1749, 1749, 1749,  104,  152,   72,  947,
      110,  153,  214,  111,  255,  256,  215,   94,  948,  105,
      112,   22,   18,   19,   20,   21,   18,   22, 1749,   22,
       18,   24,   25,   26,   27,   28,   18,   29,   18,   73,
     1749, 1749, 1749,  107,   30,  113,  159,   74,  166,  542,
       70,  543,   71, 1749,  160, 1749, 1749,  114,  735, 1749,

       74,  221, 1749,  108,  736,  167,   74,  949, 1749,  222,
     1749, 1749,  950,   75, 1749, 1749, 1749,  951, 1749,   74,
      228, 1749,  952,   22,   41,   41,   41, 1749,  953, 1749,
     1749, 1749, 1749, 1749,   42, 1749,   43,  229,   44, 1749,
      117,  954, 1749, 1749,  955, 1749,  188,  188,  188,  116,
     1749, 1749,  956, 1749, 1749,  119, 1749,  317,  318,  189,
       45,   46, 1749,   47, 1749,  122,   48,  957,   94,   49,
       50,   51,  118,  593,  120,  594,   52,   53,   54,   55,
       41,   56,   56, 1749,  123,  328,  329,  121, 1749,  649,
       58, 1749,   43,  650,   44, 1749, 1749, 1749,  859,  169,

     1749,  170, 1749, 1749,  124, 1749, 1749,  641, 1749,  642,
     1749,  171,  450,  450,  450,  860,   59,   60, 1749,   61,
     1749,  172,   62,  958,  687,   63,   64,   65,  688,  970,
      131,  125,   66,   67,   68,   69,   41,   56,   56,  126,
     1749,  129,  127, 1749,  857,  198,   58, 1749,   43,  128,
       44,  971, 1749,  130, 1749, 1749, 1749, 1749,   73, 1749,
      176, 1749,  858,  132,  133, 1749,   74,  134, 1749,  695,
     1749,  696,   59,   60,   70,   61,   71, 1749,   62, 1749,
      972,   63,   64,   65,   74,   74, 1749,  973,   66,   67,
       68,   69,   76,  161, 1749,  974,  195,   73, 1749,   77,

     1749, 1749, 1749,   74,   78,   74, 1749,  162, 1749, 1749,
      163,  164,  165, 1749, 1749, 1749, 1749,  269,  269,  269,
      134, 1749,  975, 1749,   74,   79,   80,  199,   81,   82,
      270,   83,   84,  976,   85,   86,  977,   87,   88,  978,
       89,   90,   91,   92,   93,  136,  137,  979,  138,  139,
      197,  140,  141,  196,  142,  143, 1749,  144,  145, 1749,
      146,  147,  148,  149,  150, 1749, 1749,  980, 1749, 1749,
     1749, 1749,  981, 1749,  188,  205,  205, 1749, 1749, 1749,
     1749, 1749, 1749, 1749,  982, 1749, 1749,  189, 1749,  983,
     1749,  703,  200, 1749, 1749,  704, 1749, 1749,  827, 1749,

      828, 1749, 1749,  201, 1749, 1749, 1749, 1749,  223,  712,
      713,  202,  203, 1749,  204, 1749,  206,  134, 1749,  231,
     1749,  232,  224,  208,  984,  225,  226,  227, 1749,  243,
      985,  233,  776,  777,  207,  209,  244,  986, 1749,  245,
     1749,  234, 1749,  188,  188,  188,  210,  277,  277,  277,
     1749,  278, 1749,  279, 1749, 1749,  189,  987,  269,  288,
      288, 1749,  496,  496,  496, 1749, 1749, 1749, 1749, 1749,
     1749,  270, 1749, 1749, 1749, 1749,  285, 1749,  988, 1749,
     1749,  340,  341,  839, 1749,  840, 1749,  989, 1749,  342,
      286, 1749, 1749,  990, 1749,  289, 1749,  305, 1749,  290,

      991,  287, 1749, 1749,  306, 1749,  994,  307,  188,  205,
      205,  995,  291, 1749, 1749,  996, 1749, 1749,  292,  293,
     1749,  189, 1749, 1749, 1749, 1749,  888, 1749,  889, 1749,
     1749, 1749,  361,  361,  361, 1749, 1749, 1749, 1749,  269,
      269,  269, 1749,  997, 1749,  362,  294,  998,  907,  295,
      908,  296,  270,  999,  363,  363,  363,  297,  364, 1000,
      365,  369,  369,  369, 1001,  277,  277,  277, 1005,  278,
      298,  279, 1749, 1749,  370,  374,  374,  374,  299,  377,
      377,  377, 1006,  384, 1749, 1749, 1749, 1749,  375,  361,
      382,  382,  378,  269,  288,  288, 1749, 1749,  506,  506,

      506, 1749,  362, 1749, 1007, 1749,  270, 1749, 1749, 1749,
     1749, 1749,  380, 1008,  385,  369,  386,  386, 1749, 1749,
     1009, 1010, 1749, 1011,  381, 1012, 1013, 1749,  370, 1749,
     1749, 1749, 1749, 1749, 1749, 1014, 1749,  374,  390,  390,
     1749,  383,  361,  361,  361, 1015,  377,  392,  392, 1749,
      375, 1749, 1749, 1749, 1749,  362,  387,  388, 1749,  378,
     1749,  394,  394,  394, 1016, 1749, 1017, 1749,  405,  405,
      405,  410,  411, 1018,  389,  395,  430,  430,  430,  412,
     1019, 1020,  406, 1749, 1021,  391,  413,  413,  413,  407,
      431,  393,  465,  465,  465, 1749,  466, 1749,  467, 1022,

      414,  363,  363,  363, 1023,  364, 1024,  365,  369,  369,
      369, 1025, 1026,  396,  397,  374,  374,  374,  432, 1027,
     1028,  370, 1029, 1749,  415,  471,  471,  471,  375,  472,
      669,  473,  477,  477,  477, 1749,  478, 1749,  479,  377,
      377,  377,  481,  481,  481, 1749,  482, 1030,  483,  484,
      484,  484,  378,  361,  382,  382, 1749, 1749, 1031, 1749,
     1749, 1749,  485, 1032, 1035, 1749,  362, 1749, 1749, 1749,
     1749,  486, 1749, 1749, 1749, 1749,  369,  386,  386, 1749,
     1749, 1749, 1039, 1749,  374,  390,  390,  487, 1749,  370,
     1749, 1749, 1749, 1749, 1749, 1043, 1749,  375, 1749, 1749,

     1749, 1044,  489,  377,  392,  392,  513,  513,  513,  490,
      488, 1749, 1749, 1749, 1749, 1749,  378, 1749, 1045, 1046,
      491,  484,  495,  495,  394,  394,  394,  582, 1050,  493,
      492, 1065, 1066, 1749,  485, 1749, 1067, 1068,  395, 1069,
      405,  405,  405,  413,  413,  413,  516,  516,  516,  521,
      521,  521, 1070,  494,  406, 1071, 1072,  414, 1073, 1074,
      517, 1075, 1076,  522,  530,  530,  530,  430,  430,  430,
      533,  533,  533,  450,  450,  450, 1077,  523,  531, 1078,
     1749,  431,  465,  465,  465, 1079,  466, 1080,  467,  471,
      471,  471, 1749,  472, 1749,  473,  570,  570,  570,  477,

      477,  477, 1081,  478, 1084,  479,  481,  481,  481,  571,
      482, 1749,  483,  484,  484,  484,  574,  574,  574, 1085,
      575, 1749,  576, 1749, 1749, 1749,  485, 1749,  496,  496,
      496,  577, 1086, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1087, 1749,  570,  583,  583, 1088, 1749, 1089, 1749, 1749,
     1090, 1749, 1091, 1092, 1749,  571, 1749, 1095, 1096,  579,
      578,  506,  506,  506, 1098,  484,  495,  495, 1099,  596,
      596,  596,  580, 1100, 1101,  585,  581, 1749,  485, 1749,
     1102, 1103,  584,  597,  513,  513,  513,  516,  516,  516,
      605,  605,  605,  606,  606,  606,  521,  521,  521, 1104,

     1105,  517,  611,  611,  611, 1106, 1107,  607, 1108, 1109,
      522,  530,  530,  530,  619,  619,  619,  533,  533,  533,
      608,  655,  655,  655, 1110,  531,  570,  570,  570,  660,
      660,  660, 1111,  661,  656,  662,  664,  664,  664,  571,
      574,  574,  574, 1749,  575, 1112,  576, 1749, 1113,  665,
      655,  668,  668, 1749, 1749, 1749, 1114, 1749, 1115, 1749,
     1116, 1749, 1749,  656, 1749, 1749, 1749, 1749, 1749,  570,
      583,  583, 1749, 1117, 1118,  664,  673,  673,  596,  596,
      596, 1749,  571, 1749, 1749, 1119, 1749, 1749,  665, 1749,
     1120, 1121,  597,  671,  684,  684,  684,  605,  605,  605,

      667,  666,  606,  606,  606,  693,  693,  693,  611,  611,
      611,  670,  705,  705,  705, 1122,  607,  619,  619,  619,
      714,  715, 1131,  672, 1132, 1136,  706,  741,  741,  741,
      716,  655,  655,  655, 1137, 1140,  717,  744,  744,  744,
      742,  745, 1141,  746,  656,  748,  748,  748, 1145,  750,
     1138,  660,  660,  660,  751,  661, 1146,  662,  749,  752,
      753, 1160,  754, 1161, 1162,  755,  664,  664,  664,  757,
      757,  757, 1749,  758, 1139,  759,  741,  760,  760,  665,
      655,  668,  668, 1163, 1749, 1749, 1749, 1164, 1749,  742,
     1749, 1165, 1749,  656, 1749, 1166, 1167, 1749, 1749, 1749,

      684,  684,  684, 1168, 1169,  748,  763,  763, 1170, 1749,
     1749, 1171, 1749, 1172,  761,  764,  762, 1749,  749, 1749,
      765, 1749, 1175, 1749, 1176,  766,  767, 1178,  768, 1179,
     1180,  769,  664,  673,  673,  772,  772,  772,  778,  778,
      778,  780,  781, 1181, 1749,  665, 1749, 1182, 1183,  773,
     1184,  782,  779,  787,  787,  787, 1185,  783,  789,  789,
      789, 1189,  770,  693,  693,  693, 1190,  788,  802,  802,
      802, 1191,  790,  807,  807,  807,  705,  705,  705,  813,
      813,  813,  803,  741,  741,  741, 1749,  808, 1192, 1193,
      706,  847,  847,  847, 1194,  848,  742,  849, 1749,  809,

     1749,  748,  748,  748, 1195,  810,  804,  744,  744,  744,
     1196,  745, 1197,  746,  749,  852,  852,  852, 1198,  853,
     1199,  854,  757,  757,  757, 1749,  758, 1200,  759,  741,
      760,  760, 1201, 1202,  864, 1203, 1749, 1749, 1204, 1749,
     1749, 1749,  742, 1749,  748,  763,  763, 1749, 1749, 1205,
     1749, 1749, 1749, 1206, 1749, 1749, 1749,  749, 1749, 1749,
     1749, 1749, 1207, 1749, 1749, 1749, 1208, 1749, 1209, 1749,
     1213, 1214, 1749, 1215, 1749, 1219, 1749, 1222, 1749,  772,
      772,  772,  868,  865,  866,  870, 1223, 1749,  867,  876,
      876,  876, 1224,  773,  873,  874,  778,  778,  778, 1749,

      869, 1749,  871,  872,  881,  881,  881,  787,  787,  787,
      779,  890,  890,  890,  789,  789,  789,  891,  891,  891,
     1242,  788,  901,  901,  901,  903,  903,  903,  790,  802,
      802,  802,  905,  905,  905,  966,  902, 1243, 1244,  904,
      807,  807,  807,  803,  910,  910,  910,  813,  813,  813,
      915,  915,  915, 1245,  808,  847,  847,  847, 1749,  848,
     1246,  849, 1749, 1749,  916,  852,  852,  852, 1749,  853,
     1749,  854, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1247, 1749, 1749, 1749, 1749, 1248, 1749, 1749, 1249,
     1749, 1749, 1749, 1749, 1250, 1749, 1749, 1749, 1749, 1216,

     1749, 1251, 1749,  962, 1259,  959,  876,  876,  876, 1217,
      961,  960,  881,  881,  881, 1218,  963, 1264, 1265,  964,
      890,  890,  890,  891,  891,  891, 1266, 1267,  967,  901,
      901,  901,  965, 1268, 1269,  968,  992,  992,  992,  903,
      903,  903, 1274,  902, 1277, 1278,  969,  993,  993,  993,
      905,  905,  905,  904,  910,  910,  910,  915,  915,  915,
     1002, 1002, 1002, 1003, 1003, 1003, 1033, 1033, 1033, 1275,
     1279,  916, 1036, 1036, 1036, 1280, 1276, 1004, 1281, 1034,
     1040, 1040, 1040, 1749, 1749, 1037, 1047, 1047, 1047, 1033,
     1051, 1051, 1282, 1041, 1749, 1749, 1749, 1749, 1749, 1048,

     1283, 1749, 1034, 1749, 1284, 1055, 1749, 1285, 1749,  992,
      992,  992, 1286, 1036, 1053, 1053, 1287, 1288, 1042, 1289,
     1290, 1052, 1749, 1749, 1038, 1749, 1037, 1749, 1049, 1040,
     1056, 1056, 1058, 1749, 1749, 1749, 1749, 1749, 1047, 1062,
     1062, 1749, 1041, 1749, 1749, 1749, 1293, 1749, 1294, 1297,
     1749, 1048, 1749,  993,  993,  993, 1749, 1298, 1749, 1060,
     1082, 1082, 1082, 1059, 1295, 1054, 1302, 1057, 1093, 1093,
     1093, 1002, 1002, 1002, 1083, 1003, 1003, 1003, 1296, 1303,
     1063, 1304, 1094, 1097, 1097, 1097, 1326, 1749, 1061, 1004,
     1033, 1033, 1033, 1064, 1123, 1123, 1123, 1327, 1124, 1749,

     1125, 1749, 1328, 1034, 1126, 1126, 1126, 1036, 1036, 1036,
     1128, 1128, 1128, 1329, 1129, 1749, 1130, 1127, 1330, 1331,
     1037, 1040, 1040, 1040, 1133, 1133, 1133, 1749, 1134, 1749,
     1135, 1047, 1047, 1047, 1041, 1142, 1142, 1142, 1332, 1143,
     1148, 1144, 1340, 1152, 1048, 1033, 1051, 1051, 1126, 1147,
     1147, 1036, 1053, 1053, 1749, 1341, 1342, 1749, 1034, 1749,
     1749, 1127, 1749, 1749, 1037, 1749, 1749, 1153, 1749, 1040,
     1056, 1056, 1149, 1749, 1749, 1343, 1346, 1749, 1749, 1350,
     1351, 1749, 1041, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1047, 1062, 1062, 1749, 1320, 1749, 1749,

     1158, 1158, 1158, 1352, 1321, 1749, 1048, 1749, 1353, 1150,
     1354, 1749, 1355, 1749, 1159, 1154, 1155, 1356, 1156, 1173,
     1173, 1173, 1082, 1082, 1082, 1151, 1177, 1177, 1177, 1186,
     1186, 1186, 1357, 1174, 1358, 1359, 1083, 1157, 1093, 1093,
     1093, 1360, 1361, 1187, 1188, 1188, 1188, 1097, 1097, 1097,
     1362, 1363, 1094, 1123, 1123, 1123, 1364, 1124, 1365, 1125,
     1126, 1126, 1126, 1210, 1210, 1210, 1369, 1211, 1749, 1212,
     1128, 1128, 1128, 1127, 1129, 1370, 1130, 1133, 1133, 1133,
     1749, 1134, 1749, 1135, 1220, 1220, 1220, 1142, 1142, 1142,
     1749, 1143, 1371, 1144, 1225, 1225, 1225, 1221, 1126, 1147,

     1147, 1749, 1749, 1372, 1749, 1373, 1749, 1226, 1374, 1375,
     1749, 1127, 1749, 1749, 1749, 1749, 1376, 1749, 1749, 1227,
     1749, 1377, 1749, 1230, 1388, 1389, 1749, 1392, 1749, 1749,
     1393, 1749, 1394, 1231, 1749, 1749, 1749, 1395, 1396, 1232,
     1397, 1398, 1228, 1220, 1234, 1234, 1400, 1749, 1233, 1749,
     1225, 1238, 1238, 1401, 1229, 1749, 1221, 1749, 1158, 1158,
     1158, 1402, 1749, 1226, 1749, 1239, 1239, 1239, 1403, 1235,
     1237, 1405, 1159, 1236, 1240, 1240, 1240, 1252, 1252, 1252,
     1254, 1254, 1254, 1173, 1173, 1173, 1409, 1410, 1241, 1411,
     1412, 1253, 1413, 1414, 1255, 1415, 1416, 1174, 1256, 1256,

     1256, 1257, 1257, 1257, 1177, 1177, 1177, 1260, 1260, 1260,
     1262, 1262, 1262, 1417, 1418, 1258, 1186, 1186, 1186, 1419,
     1420, 1261, 1421, 1422, 1263, 1270, 1270, 1270, 1749, 1423,
     1187, 1188, 1188, 1188, 1271, 1271, 1271, 1210, 1210, 1210,
     1749, 1211, 1749, 1212, 1291, 1291, 1291, 1424, 1272, 1220,
     1220, 1220, 1299, 1299, 1299, 1425, 1300, 1292, 1301, 1225,
     1225, 1225, 1221, 1305, 1305, 1305, 1749, 1306, 1426, 1307,
     1310, 1749, 1226, 1427, 1428, 1291, 1309, 1309, 1749, 1749,
     1749, 1429, 1749, 1749, 1430, 1749, 1273, 1749, 1292, 1749,
     1749, 1749, 1431, 1749, 1749, 1442, 1749, 1220, 1234, 1234,

     1308, 1749, 1749, 1443, 1749, 1444, 1749, 1445, 1446, 1749,
     1221, 1749, 1749, 1749, 1312, 1749, 1314, 1447, 1749, 1311,
     1749, 1239, 1239, 1239, 1749, 1448, 1749, 1449, 1313, 1225,
     1238, 1238, 1315, 1317, 1240, 1240, 1240, 1319, 1319, 1319,
     1450, 1749, 1226, 1749, 1322, 1322, 1322, 1451, 1241, 1324,
     1324, 1324, 1452, 1316, 1252, 1252, 1252, 1318, 1323, 1333,
     1333, 1333, 1455, 1325, 1254, 1254, 1254, 1456, 1253, 1334,
     1334, 1334, 1256, 1256, 1256, 1257, 1257, 1257, 1255, 1335,
     1335, 1335, 1336, 1336, 1336, 1260, 1260, 1260, 1458, 1258,
     1338, 1338, 1338, 1262, 1262, 1262, 1337, 1459, 1460, 1261,

     1339, 1339, 1339, 1344, 1344, 1344, 1461, 1263, 1270, 1270,
     1270, 1271, 1271, 1271, 1347, 1347, 1347, 1345, 1348, 1348,
     1348, 1291, 1291, 1291, 1464, 1272, 1749, 1366, 1366, 1366,
     1462, 1367, 1349, 1368, 1292, 1299, 1299, 1299, 1749, 1300,
     1749, 1301, 1305, 1305, 1305, 1749, 1306, 1463, 1307, 1291,
     1309, 1309, 1749, 1749, 1319, 1319, 1319, 1749, 1749, 1749,
     1465, 1749, 1292, 1749, 1749, 1749, 1749, 1749, 1378, 1749,
     1749, 1466, 1749, 1749, 1749, 1467, 1468, 1749, 1749, 1469,
     1470, 1749, 1471, 1749, 1472, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1322, 1322, 1322, 1381, 1473, 1474, 1380,

     1379, 1390, 1390, 1390, 1324, 1324, 1324, 1323, 1391, 1391,
     1391, 1382, 1385, 1333, 1333, 1333, 1387, 1475, 1325, 1480,
     1383, 1334, 1334, 1334, 1384, 1493, 1386, 1335, 1335, 1335,
     1336, 1336, 1336, 1399, 1399, 1399, 1338, 1338, 1338, 1339,
     1339, 1339, 1494, 1495, 1337, 1344, 1344, 1344, 1404, 1404,
     1404, 1347, 1347, 1347, 1348, 1348, 1348, 1496, 1499, 1345,
     1406, 1406, 1406, 1407, 1407, 1407, 1749, 1749, 1349, 1366,
     1366, 1366, 1749, 1367, 1497, 1368, 1749, 1408, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1500, 1749, 1749, 1749, 1505,
     1749, 1498, 1749, 1506, 1749, 1749, 1749, 1749, 1749, 1749,

     1508, 1749, 1509, 1749, 1749, 1433, 1749, 1390, 1390, 1390,
     1749, 1510, 1749, 1432, 1435, 1749, 1511, 1749, 1391, 1391,
     1391, 1399, 1399, 1399, 1434, 1436, 1453, 1453, 1453, 1437,
     1404, 1404, 1404, 1512, 1438, 1406, 1406, 1406, 1513, 1514,
     1454, 1457, 1457, 1457, 1439, 1407, 1407, 1407, 1476, 1476,
     1476, 1440, 1478, 1478, 1478, 1441, 1481, 1481, 1481, 1408,
     1749, 1477, 1515, 1749, 1749, 1479, 1516, 1749, 1749, 1482,
     1517, 1749, 1749, 1518, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1519, 1749, 1476, 1489, 1489, 1522,
     1749, 1507, 1507, 1507, 1478, 1490, 1490, 1523, 1749, 1477,

     1749, 1524, 1749, 1486, 1749, 1488, 1749, 1479, 1749, 1481,
     1492, 1492, 1525, 1483, 1532, 1484, 1487, 1485, 1457, 1457,
     1457, 1749, 1482, 1749, 1501, 1501, 1501, 1503, 1503, 1503,
     1543, 1546, 1491, 1453, 1453, 1453, 1549, 1550, 1502, 1551,
     1552, 1504, 1520, 1520, 1520, 1749, 1555, 1454, 1476, 1476,
     1476, 1558, 1526, 1526, 1526, 1521, 1527, 1749, 1528, 1749,
     1559, 1477, 1478, 1478, 1478, 1529, 1529, 1529, 1560, 1530,
     1561, 1531, 1481, 1481, 1481, 1479, 1533, 1533, 1533, 1749,
     1534, 1562, 1535, 1563, 1564, 1482, 1520, 1537, 1537, 1749,
     1749, 1749, 1565, 1749, 1749, 1566, 1567, 1536, 1749, 1521,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1573, 1749, 1476,
     1489, 1489, 1478, 1490, 1490, 1574, 1575, 1749, 1576, 1749,
     1577, 1749, 1477, 1749, 1749, 1479, 1749, 1584, 1586, 1541,
     1538, 1481, 1492, 1492, 1544, 1544, 1544, 1540, 1547, 1547,
     1547, 1588, 1539, 1749, 1482, 1749, 1589, 1590, 1545, 1501,
     1501, 1501, 1548, 1542, 1553, 1553, 1553, 1503, 1503, 1503,
     1554, 1554, 1554, 1502, 1556, 1556, 1556, 1507, 1507, 1507,
     1591, 1504, 1568, 1568, 1568, 1520, 1520, 1520, 1557, 1592,
     1570, 1570, 1570, 1594, 1571, 1569, 1572, 1749, 1521, 1526,
     1526, 1526, 1597, 1527, 1749, 1528, 1529, 1529, 1529, 1749,

     1530, 1749, 1531, 1533, 1533, 1533, 1749, 1534, 1749, 1535,
     1568, 1578, 1578, 1520, 1537, 1537, 1749, 1749, 1598, 1599,
     1749, 1579, 1749, 1569, 1749, 1749, 1521, 1749, 1749, 1749,
     1749, 1749, 1749, 1600, 1749, 1601, 1580, 1544, 1544, 1544,
     1585, 1585, 1585, 1547, 1547, 1547, 1587, 1587, 1587, 1602,
     1606, 1545, 1553, 1553, 1553, 1607, 1610, 1548, 1554, 1554,
     1554, 1611, 1582, 1556, 1556, 1556, 1619, 1583, 1581, 1593,
     1593, 1593, 1595, 1595, 1595, 1620, 1621, 1557, 1568, 1568,
     1568, 1603, 1603, 1603, 1622, 1604, 1596, 1605, 1570, 1570,
     1570, 1569, 1571, 1749, 1572, 1608, 1608, 1608, 1568, 1578,

     1578, 1749, 1585, 1585, 1585, 1749, 1623, 1749, 1609, 1749,
     1749, 1569, 1749, 1749, 1624, 1749, 1608, 1614, 1614, 1749,
     1628, 1749, 1629, 1749, 1617, 1617, 1617, 1630, 1749, 1609,
     1749, 1749, 1631, 1749, 1632, 1612, 1633, 1634, 1618, 1587,
     1587, 1587, 1593, 1593, 1593, 1635, 1639, 1615, 1625, 1625,
     1625, 1595, 1595, 1595, 1647, 1648, 1613, 1627, 1627, 1627,
     1649, 1650, 1626, 1651, 1652, 1596, 1603, 1603, 1603, 1654,
     1604, 1616, 1605, 1608, 1608, 1608, 1636, 1636, 1636, 1749,
     1637, 1655, 1638, 1640, 1640, 1640, 1609, 1749, 1646, 1646,
     1646, 1749, 1656, 1749, 1749, 1657, 1641, 1658, 1659, 1749,

     1660, 1749, 1608, 1614, 1614, 1661, 1749, 1668, 1749, 1669,
     1640, 1645, 1645, 1670, 1749, 1609, 1749, 1617, 1617, 1617,
     1673, 1644, 1749, 1641, 1749, 1643, 1642, 1625, 1625, 1625,
     1674, 1618, 1653, 1653, 1653, 1627, 1627, 1627, 1636, 1636,
     1636, 1626, 1637, 1749, 1638, 1640, 1640, 1640, 1662, 1662,
     1662, 1749, 1663, 1675, 1664, 1749, 1749, 1749, 1641, 1640,
     1645, 1645, 1676, 1749, 1677, 1749, 1678, 1679, 1749, 1683,
     1749, 1749, 1641, 1749, 1646, 1646, 1646, 1691, 1666, 1671,
     1671, 1671, 1653, 1653, 1653, 1662, 1662, 1662, 1749, 1663,
     1692, 1664, 1749, 1672, 1693, 1749, 1665, 1684, 1684, 1684,

     1749, 1694, 1749, 1705, 1749, 1667, 1749, 1749, 1706, 1749,
     1707, 1685, 1686, 1686, 1686, 1680, 1671, 1671, 1671, 1688,
     1688, 1688, 1689, 1689, 1689, 1749, 1687, 1713, 1749, 1714,
     1672, 1749, 1698, 1698, 1698, 1715, 1690, 1749, 1719, 1749,
     1749, 1681, 1749, 1749, 1720, 1749, 1699, 1721, 1682, 1684,
     1684, 1684, 1700, 1700, 1700, 1686, 1686, 1686, 1701, 1701,
     1701, 1725, 1726, 1685, 1688, 1688, 1688, 1732,  946, 1687,
     1689, 1689, 1689, 1697, 1695, 1702, 1702, 1702, 1703, 1703,
     1703, 1696, 1749, 1749, 1690,  945, 1749, 1698, 1698, 1698,
      944,  943, 1704,  942, 1749, 1749, 1749, 1749, 1749,  941,

     1749, 1699, 1711, 1711, 1711, 1700, 1700, 1700, 1701, 1701,
     1701, 1702, 1702, 1702, 1703, 1703, 1703, 1712, 1712, 1712,
     1711, 1711, 1711,  940, 1749, 1709,  939, 1749, 1704,  938,
     1749, 1712, 1712, 1712, 1710, 1708, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1727, 1727, 1727,  937, 1749,
     1749, 1749, 1749, 1749, 1749, 1749,  936, 1749, 1728, 1727,
     1731, 1731, 1749,  935, 1749, 1749, 1716, 1749, 1733, 1733,
     1733, 1749, 1728, 1749,  934, 1717,  933, 1718, 1727, 1727,
     1727, 1734, 1735, 1735, 1735, 1722, 1736, 1723, 1737, 1749,
      932, 1728,  931,  930,  929, 1724,  928, 1729, 1733, 1739,

     1739, 1749,  927, 1749,  926, 1730, 1727, 1731, 1731,  925,
     1749, 1734, 1749, 1740, 1740, 1740,  924,  923, 1749, 1728,
     1749, 1733, 1733, 1733,  922,  921, 1741, 1742, 1742, 1742,
      920, 1743,  919, 1744, 1734,  918, 1735, 1735, 1735,  917,
     1736, 1738, 1737, 1740, 1745, 1745, 1733, 1739, 1739, 1740,
     1740, 1740,  914,  913,  912, 1749, 1741, 1749, 1749, 1734,
     1749,  911, 1741, 1746, 1746, 1746,  909, 1747,  906, 1748,
     1742, 1742, 1742,  900, 1743,  899, 1744, 1740, 1745, 1745,
     1746, 1746, 1746,  898, 1747,  897, 1748,  896,  895, 1749,
     1741, 1749,   23,   23,   23,   23,   23,   31,   31,   31,

       31,   31,   33,   33,   33,   33,   33,   34,   34,   34,
       34,   34,   32,   32,   32,   32,   32,   35,   35,   35,
       35,   35,   38,   38,   38,   38,   38,   57,  894,  893,
       57,   95,   95,   95,   95,   96,   96,  892,   96,   96,
       97,   97,   97,  887,   97,  886,  885,  884,  883,  882,
      880,  879,  878,  877,  875,  863,  862,  861,  856,  855,
      851,  850,  846,  845,  844,  843,  842,  841,  838,  837,
      836,  835,  834,  833,  832,  831,  830,  829,  826,  825,
      824,  823,  822,  821,  820,  819,  818,  817,  816,  815,
      814,  812,  811,  806,  805,  801,  800,  799,  798,  797,

      796,  795,  794,  793,  792,  791,  786,  785,  784,  775,
      774,  771,  756,  747,  743,  740,  739,  738,  737,  734,
      733,  732,  731,  730,  729,  728,  727,  726,  725,  724,
      723,  722,  721,  720,  719,  718,  711,  710,  709,  708,
      707,  702,  701,  700,  699,  698,  697,  694,  692,  691,
      690,  689,  686,  685,  683,  682,  681,  680,  679,  678,
      677,  676,  675,  674,  663,  659,  658,  657,  654,  653,
      652,  651,  648,  647,  646,  645,  644,  643,  640,  639,
      638,  637,  636,  633,  632,  631,  630,  629,  628,  627,
      626,  625,  624,  623,  622,  621,  620,  618,  617,  616,

      615,  614,  613,  612,  610,  609,  604,  603,  602,  601,
      600,  599,  598,  595,  592,  591,  590,  589,  588,  587,
      586,  573,  572,  569,  568,  567,  566,  565,  564,  563,
      562,  561,  560,  559,  558,  557,  556,  555,  554,  553,
      552,  551,  550,  549,  548,  547,  546,  545,  544,  541,
      540,  539,  538,  537,  536,  535,  534,  532,  529,  528,
      527,  526,  525,  524,  520,  519,  518,  515,  514,  512,
      511,  510,  509,  508,  507,  505,  504,  503,  502,  501,
      500,  499,  498,  497,  480,  476,  475,  474,  470,  469,
      468,  464,  463,  462,  461,  460,  459,  458,  457,  456,

      455,  454,  453,  452,  451,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  440,  439,  438,  437,  436,  435,
      434,  433,  429,  428,  427,  426,  425,  424,  423,  422,
      421,  420,  419,  418,  417,  416,  409,  408,  404,  403,
      402,  401,  400,  399,  398,  379,  376,  373,  372,  371,
      368,  367,  366,  360,  359,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,
      343,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      316,  315,  314,  313,  312,  311,  310,  309,  308,  304,

      303,  302,  301,  300,  211,  284,  283,  282,  281,  280,
      276,  275,  274,  273,  272,  271,  268,  267,  266,  265,
      264,  263,  262,  261,  260,  259,  258,  257,  254,  253,
      252,  251,  250,  249,  248,  247,  246,  242,  241,  240,
      239,  238,  237,  236,  235,  230,  220,  219,  218,  217,
      216,  213,  212,  211,  194,  193,  192,  191,  190,  187,
      186,  185,  184,  183,  182,  181,  180,  179,  178,  177,
      175,  174,  173,  168,  158,  157,  156,  155,  154,  151,
      135,  115,  109,  106,  103,  102,  101,  100,   75,   99,
       98, 1749,   32,   32,   32,   32,   32,   32,   17, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749
    } ;

static yyconst flex_int16_t yy_chk[3862] =
    {   0,
        1,    1,    1,    1,    1,    1,   15,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   13,   14,   16,
       15,    0,    1,   23,   13,   14,    0,   24,   26,    0,
      547,   30,   43,   16,  547,   23,   24,   23,   24,   24,
       26,   24,   26,   30,   43,   30,   49,   80,   24,  845,
       53,   80,  137,   53,  166,  166,  137,   30,  850,   49,
       53,    1,    2,    2,    2,    2,    2,    2,   25,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,   25,
       25,   27,   25,   51,    2,   54,   86,   25,   88,  440,
       27,  440,   27,   27,   86,   27,   57,   54,  648,   58,

       27,  143,   60,   51,  648,   88,   25,  851,   57,  143,
       57,   58,  855,   58,   60,   59,   60,  856,   62,   27,
      145,   61,  857,    2,   19,   19,   19,   59,  858,   59,
       62,   64,   62,   61,   19,   61,   19,  145,   19,   63,
       60,  859,   72,   64,  860,   64,  110,  110,  110,   59,
       65,   63,  861,   63,   72,   62,   72,  228,  228,  110,
       19,   19,   65,   19,   65,   64,   19,  862,   72,   19,
       19,   19,   61,  504,   63,  504,   19,   19,   19,   19,
       20,   20,   20,   66,   65,  238,  238,   63,  119,  560,
       20,   67,   20,  560,   20,   66,   69,   66,  753,   90,

      119,   90,  119,   67,   65,   67,   68,  553,   69,  553,
       69,   90,  345,  345,  345,  753,   20,   20,   68,   20,
       68,   90,   20,  863,  600,   20,   20,   20,  600,  875,
       69,   66,   20,   20,   20,   20,   21,   21,   21,   67,
       94,   68,   67,  116,  752,  119,   21,   70,   21,   67,
       21,  877,   94,   68,   94,  116,   74,  116,   70,   70,
       94,   70,  752,   74,   74,   71,   70,   74,   74,  609,
       74,  609,   21,   21,   71,   21,   71,   71,   21,   71,
      878,   21,   21,   21,   71,   70,   73,  879,   21,   21,
       21,   21,   28,   87,  120,  880,  116,   73,   73,   28,

       73,  117,  118,   71,   28,   73,  120,   87,  120,  133,
       87,   87,   87,  117,  118,  117,  118,  181,  181,  181,
      133,  133,  882,  133,   73,   28,   28,  120,   28,   28,
      181,   28,   28,  883,   28,   28,  884,   28,   28,  885,
       28,   28,   28,   28,   28,   77,   77,  886,   77,   77,
      118,   77,   77,  117,   77,   77,  121,   77,   77,  122,
       77,   77,   77,   77,   77,  123,  124,  887,  121,  125,
      121,  122,  888,  122,  126,  126,  126,  123,  124,  123,
      124,  125,  127,  125,  889,  128,  126,  126,  126,  892,
      129,  617,  121,  130,  127,  617,  127,  128,  720,  128,

      720,  131,  129,  122,  129,  130,  134,  130,  144,  626,
      626,  123,  124,  131,  125,  131,  127,  134,  134,  147,
      134,  147,  144,  129,  893,  144,  144,  144,  176,  156,
      894,  147,  678,  678,  128,  130,  156,  895,  195,  156,
      176,  147,  176,  188,  188,  188,  131,  189,  189,  189,
      195,  189,  195,  189,  196,  197,  188,  896,  198,  198,
      198,  199,  395,  395,  395,  200,  196,  197,  196,  197,
      198,  198,  198,  199,  201,  199,  195,  200,  897,  200,
      202,  249,  249,  733,  203,  733,  201,  898,  201,  249,
      196,  204,  202,  899,  202,  199,  203,  218,  203,  200,

      900,  197,  206,  204,  218,  204,  906,  218,  205,  205,
      205,  907,  201,  207,  206,  908,  206,  209,  202,  203,
      205,  205,  205,  208,  210,  207,  786,  207,  786,  209,
      290,  209,  268,  268,  268,  208,  210,  208,  210,  269,
      269,  269,  290,  909,  290,  268,  204,  911,  805,  206,
      805,  207,  269,  912,  270,  270,  270,  208,  270,  913,
      270,  274,  274,  274,  914,  277,  277,  277,  918,  277,
      209,  277,  285,  286,  274,  281,  281,  281,  210,  283,
      283,  283,  919,  290,  285,  286,  285,  286,  281,  287,
      287,  287,  283,  288,  288,  288,  289,  291,  406,  406,

      406,  287,  287,  287,  920,  288,  288,  288,  289,  291,
      289,  291,  285,  921,  291,  292,  292,  292,  293,  294,
      922,  923,  295,  924,  286,  925,  926,  292,  292,  292,
      293,  294,  293,  294,  295,  927,  295,  296,  296,  296,
      297,  289,  361,  361,  361,  928,  298,  298,  298,  296,
      296,  296,  297,  299,  297,  361,  293,  294,  298,  298,
      298,  300,  300,  300,  929,  299,  930,  299,  308,  308,
      308,  311,  311,  931,  295,  300,  327,  327,  327,  311,
      932,  933,  308,  580,  934,  297,  312,  312,  312,  308,
      327,  299,  362,  362,  362,  580,  362,  580,  362,  936,

      312,  363,  363,  363,  937,  363,  938,  363,  369,  369,
      369,  939,  940,  300,  300,  374,  374,  374,  327,  941,
      942,  369,  943,  380,  312,  370,  370,  370,  374,  370,
      580,  370,  375,  375,  375,  380,  375,  380,  375,  377,
      377,  377,  378,  378,  378,  381,  378,  944,  378,  379,
      379,  379,  377,  382,  382,  382,  383,  381,  946,  381,
      384,  385,  379,  947,  949,  382,  382,  382,  383,  387,
      383,  380,  384,  385,  384,  385,  386,  386,  386,  388,
      389,  387,  951,  387,  390,  390,  390,  381,  386,  386,
      386,  388,  389,  388,  389,  953,  390,  390,  390,  391,

      491,  954,  384,  392,  392,  392,  414,  414,  414,  385,
      383,  391,  491,  391,  491,  392,  392,  392,  955,  956,
      387,  393,  393,  393,  394,  394,  394,  491,  958,  389,
      388,  970,  971,  393,  393,  393,  972,  973,  394,  974,
      405,  405,  405,  413,  413,  413,  417,  417,  417,  421,
      421,  421,  975,  391,  405,  976,  977,  413,  978,  979,
      417,  980,  981,  421,  428,  428,  428,  430,  430,  430,
      431,  431,  431,  450,  450,  450,  982,  421,  428,  983,
      486,  430,  465,  465,  465,  984,  465,  985,  465,  471,
      471,  471,  486,  471,  486,  471,  475,  475,  475,  477,

      477,  477,  986,  477,  988,  477,  481,  481,  481,  475,
      481,  487,  481,  484,  484,  484,  485,  485,  485,  989,
      485,  488,  485,  487,  489,  487,  484,  490,  496,  496,
      496,  486,  990,  488,  493,  488,  489,  494,  489,  490,
      991,  490,  492,  492,  492,  994,  493,  995,  493,  494,
      996,  494,  997,  998,  492,  492,  492, 1000, 1001,  488,
      487,  506,  506,  506, 1006,  495,  495,  495, 1007,  507,
      507,  507,  489, 1008, 1009,  494,  490,  495,  495,  495,
     1010, 1011,  493,  507,  513,  513,  513,  516,  516,  516,
      517,  517,  517,  518,  518,  518,  521,  521,  521, 1012,

     1013,  516,  522,  522,  522, 1014, 1015,  518, 1016, 1017,
      521,  530,  530,  530,  531,  531,  531,  533,  533,  533,
      518,  566,  566,  566, 1018,  530,  570,  570,  570,  571,
      571,  571, 1020,  571,  566,  571,  573,  573,  573,  570,
      574,  574,  574,  577,  574, 1021,  574,  578, 1022,  573,
      579,  579,  579,  581,  582,  577, 1023,  577, 1024,  578,
     1025,  578,  579,  579,  579,  581,  582,  581,  582,  583,
      583,  583,  584, 1026, 1027,  585,  585,  585,  596,  596,
      596,  583,  583,  583,  584, 1028,  584,  585,  585,  585,
     1029, 1031,  596,  582,  597,  597,  597,  605,  605,  605,

      578,  577,  606,  606,  606,  607,  607,  607,  611,  611,
      611,  581,  618,  618,  618, 1032,  606,  619,  619,  619,
      628,  628, 1038,  584, 1039, 1042,  618,  653,  653,  653,
      628,  655,  655,  655, 1043, 1045,  628,  656,  656,  656,
      653,  656, 1046,  656,  655,  658,  658,  658, 1049,  659,
     1044,  660,  660,  660,  659,  660, 1050,  660,  658,  659,
      659, 1066,  659, 1067, 1068,  659,  664,  664,  664,  665,
      665,  665,  667,  665, 1044,  665,  666,  666,  666,  664,
      668,  668,  668, 1069,  667,  669,  667, 1070,  666,  666,
      666, 1071,  668,  668,  668, 1072, 1073,  669,  671,  669,

      684,  684,  684, 1074, 1075,  670,  670,  670, 1076,  672,
      671, 1077,  671, 1078,  667,  671,  669,  670,  670,  670,
      671,  672, 1080,  672, 1081,  671,  671, 1084,  671, 1085,
     1086,  671,  673,  673,  673,  675,  675,  675,  679,  679,
      679,  680,  680, 1087,  673,  673,  673, 1088, 1089,  675,
     1090,  680,  679,  685,  685,  685, 1091,  680,  686,  686,
      686, 1095,  672,  693,  693,  693, 1096,  685,  699,  699,
      699, 1099,  686,  702,  702,  702,  705,  705,  705,  706,
      706,  706,  699,  741,  741,  741,  761,  702, 1100, 1101,
      705,  742,  742,  742, 1102,  742,  741,  742,  761,  702,

      761,  748,  748,  748, 1103,  702,  699,  744,  744,  744,
     1104,  744, 1105,  744,  748,  749,  749,  749, 1106,  749,
     1107,  749,  757,  757,  757,  762,  757, 1108,  757,  760,
      760,  760, 1112, 1115,  761, 1116,  764,  762, 1117,  762,
      765,  760,  760,  760,  763,  763,  763,  766,  764, 1118,
      764,  767,  765, 1119,  765,  768,  763,  763,  763,  766,
      769,  766, 1120,  767,  770,  767, 1121,  768, 1122,  768,
     1131, 1132,  769, 1136,  769, 1138,  770, 1140,  770,  772,
      772,  772,  766,  762,  764,  767, 1141,  871,  765,  773,
      773,  773, 1145,  772,  769,  770,  778,  778,  778,  871,

      766,  871,  767,  768,  779,  779,  779,  787,  787,  787,
      778,  788,  788,  788,  789,  789,  789,  790,  790,  790,
     1161,  787,  800,  800,  800,  801,  801,  801,  789,  802,
      802,  802,  803,  803,  803,  871,  800, 1162, 1163,  801,
      807,  807,  807,  802,  808,  808,  808,  813,  813,  813,
      814,  814,  814, 1164,  807,  847,  847,  847,  864,  847,
     1165,  847,  865,  866,  814,  852,  852,  852,  867,  852,
      864,  852,  864,  868,  865,  866,  865,  866,  869,  870,
      867, 1166,  867,  872,  873,  868, 1167,  868,  874, 1168,
      869,  870,  869,  870, 1169,  872,  873,  872,  873, 1137,

      874, 1170,  874,  867, 1176,  864,  876,  876,  876, 1137,
      866,  865,  881,  881,  881, 1137,  868, 1180, 1181,  869,
      890,  890,  890,  891,  891,  891, 1182, 1183,  872,  901,
      901,  901,  870, 1184, 1185,  873,  902,  902,  902,  903,
      903,  903, 1190,  901, 1194, 1195,  874,  904,  904,  904,
      905,  905,  905,  903,  910,  910,  910,  915,  915,  915,
      916,  916,  916,  917,  917,  917,  948,  948,  948, 1191,
     1196,  915,  950,  950,  950, 1197, 1191,  917, 1198,  948,
      952,  952,  952,  960,  962,  950,  957,  957,  957,  959,
      959,  959, 1199,  952,  964,  960,  962,  960,  962,  957,

     1200,  959,  959,  959, 1202,  962,  964, 1203,  964,  992,
      992,  992, 1204,  961,  961,  961, 1205, 1207,  952, 1209,
     1213,  960,  965,  966,  950,  961,  961,  961,  957,  963,
      963,  963,  964,  967,  965,  966,  965,  966,  968,  968,
      968,  963,  963,  963,  969,  967, 1215,  967, 1216, 1218,
      968,  968,  968,  993,  993,  993,  969, 1219,  969,  966,
      987,  987,  987,  965, 1217,  961, 1222,  963,  999,  999,
      999, 1002, 1002, 1002,  987, 1003, 1003, 1003, 1217, 1223,
      968, 1224,  999, 1004, 1004, 1004, 1245, 1054,  967, 1003,
     1033, 1033, 1033,  969, 1034, 1034, 1034, 1246, 1034, 1054,

     1034, 1054, 1247, 1033, 1035, 1035, 1035, 1036, 1036, 1036,
     1037, 1037, 1037, 1248, 1037, 1059, 1037, 1035, 1249, 1250,
     1036, 1040, 1040, 1040, 1041, 1041, 1041, 1059, 1041, 1059,
     1041, 1047, 1047, 1047, 1040, 1048, 1048, 1048, 1251, 1048,
     1054, 1048, 1264, 1059, 1047, 1051, 1051, 1051, 1052, 1052,
     1052, 1053, 1053, 1053, 1055, 1265, 1266, 1051, 1051, 1051,
     1052, 1052, 1052, 1053, 1053, 1053, 1055, 1059, 1055, 1056,
     1056, 1056, 1055, 1057, 1058, 1267, 1269, 1060, 1061, 1274,
     1275, 1056, 1056, 1056, 1063, 1057, 1058, 1057, 1058, 1060,
     1061, 1060, 1061, 1062, 1062, 1062, 1063, 1242, 1063, 1064,

     1065, 1065, 1065, 1276, 1242, 1062, 1062, 1062, 1277, 1057,
     1278, 1064, 1279, 1064, 1065, 1060, 1061, 1280, 1063, 1079,
     1079, 1079, 1082, 1082, 1082, 1058, 1083, 1083, 1083, 1092,
     1092, 1092, 1281, 1079, 1282, 1283, 1082, 1064, 1093, 1093,
     1093, 1284, 1285, 1092, 1094, 1094, 1094, 1097, 1097, 1097,
     1286, 1287, 1093, 1123, 1123, 1123, 1288, 1123, 1290, 1123,
     1126, 1126, 1126, 1127, 1127, 1127, 1293, 1127, 1148, 1127,
     1128, 1128, 1128, 1126, 1128, 1294, 1128, 1133, 1133, 1133,
     1148, 1133, 1148, 1133, 1139, 1139, 1139, 1142, 1142, 1142,
     1149, 1142, 1295, 1142, 1146, 1146, 1146, 1139, 1147, 1147,

     1147, 1150, 1149, 1296, 1149, 1297, 1151, 1146, 1298, 1302,
     1147, 1147, 1147, 1150, 1152, 1150, 1303, 1154, 1151, 1148,
     1151, 1304, 1155, 1151, 1320, 1321, 1152, 1326, 1152, 1154,
     1327, 1154, 1328, 1151, 1155, 1156, 1155, 1329, 1330, 1151,
     1331, 1332, 1149, 1153, 1153, 1153, 1340, 1156, 1152, 1156,
     1157, 1157, 1157, 1341, 1150, 1153, 1153, 1153, 1158, 1158,
     1158, 1342, 1157, 1157, 1157, 1159, 1159, 1159, 1343, 1154,
     1156, 1346, 1158, 1155, 1160, 1160, 1160, 1171, 1171, 1171,
     1172, 1172, 1172, 1173, 1173, 1173, 1351, 1352, 1160, 1353,
     1354, 1171, 1355, 1356, 1172, 1357, 1358, 1173, 1174, 1174,

     1174, 1175, 1175, 1175, 1177, 1177, 1177, 1178, 1178, 1178,
     1179, 1179, 1179, 1359, 1360, 1175, 1186, 1186, 1186, 1361,
     1363, 1178, 1364, 1365, 1179, 1187, 1187, 1187, 1229, 1369,
     1186, 1188, 1188, 1188, 1189, 1189, 1189, 1210, 1210, 1210,
     1229, 1210, 1229, 1210, 1214, 1214, 1214, 1370, 1189, 1220,
     1220, 1220, 1221, 1221, 1221, 1371, 1221, 1214, 1221, 1225,
     1225, 1225, 1220, 1226, 1226, 1226, 1227, 1226, 1372, 1226,
     1229, 1230, 1225, 1373, 1374, 1228, 1228, 1228, 1227, 1231,
     1227, 1375, 1232, 1230, 1376, 1230, 1189, 1228, 1228, 1228,
     1233, 1231, 1377, 1231, 1232, 1388, 1232, 1234, 1234, 1234,

     1227, 1235, 1233, 1389, 1233, 1392, 1236, 1393, 1394, 1234,
     1234, 1234, 1237, 1235, 1231, 1235, 1232, 1395, 1236, 1230,
     1236, 1239, 1239, 1239, 1237, 1396, 1237, 1397, 1231, 1238,
     1238, 1238, 1233, 1236, 1240, 1240, 1240, 1241, 1241, 1241,
     1398, 1238, 1238, 1238, 1243, 1243, 1243, 1400, 1240, 1244,
     1244, 1244, 1401, 1235, 1252, 1252, 1252, 1237, 1243, 1253,
     1253, 1253, 1403, 1244, 1254, 1254, 1254, 1405, 1252, 1255,
     1255, 1255, 1256, 1256, 1256, 1257, 1257, 1257, 1254, 1258,
     1258, 1258, 1259, 1259, 1259, 1260, 1260, 1260, 1409, 1257,
     1261, 1261, 1261, 1262, 1262, 1262, 1259, 1410, 1411, 1260,

     1263, 1263, 1263, 1268, 1268, 1268, 1412, 1262, 1270, 1270,
     1270, 1271, 1271, 1271, 1272, 1272, 1272, 1268, 1273, 1273,
     1273, 1291, 1291, 1291, 1414, 1271, 1308, 1292, 1292, 1292,
     1413, 1292, 1273, 1292, 1291, 1299, 1299, 1299, 1308, 1299,
     1308, 1299, 1305, 1305, 1305, 1310, 1305, 1413, 1305, 1309,
     1309, 1309, 1311, 1312, 1319, 1319, 1319, 1310, 1313, 1310,
     1415, 1309, 1309, 1309, 1311, 1312, 1311, 1312, 1308, 1314,
     1313, 1418, 1313, 1315, 1316, 1419, 1420, 1317, 1318, 1421,
     1422, 1314, 1423, 1314, 1424, 1315, 1316, 1315, 1316, 1317,
     1318, 1317, 1318, 1322, 1322, 1322, 1312, 1425, 1426, 1311,

     1310, 1323, 1323, 1323, 1324, 1324, 1324, 1322, 1325, 1325,
     1325, 1313, 1316, 1333, 1333, 1333, 1318, 1427, 1324, 1430,
     1314, 1334, 1334, 1334, 1315, 1442, 1317, 1335, 1335, 1335,
     1336, 1336, 1336, 1337, 1337, 1337, 1338, 1338, 1338, 1339,
     1339, 1339, 1443, 1444, 1336, 1344, 1344, 1344, 1345, 1345,
     1345, 1347, 1347, 1347, 1348, 1348, 1348, 1445, 1447, 1344,
     1349, 1349, 1349, 1350, 1350, 1350, 1378, 1379, 1348, 1366,
     1366, 1366, 1380, 1366, 1446, 1366, 1381, 1350, 1378, 1379,
     1378, 1379, 1384, 1382, 1380, 1448, 1380, 1383, 1381, 1451,
     1381, 1446, 1385, 1452, 1384, 1382, 1384, 1382, 1386, 1383,

     1455, 1383, 1456, 1387, 1385, 1379, 1385, 1390, 1390, 1390,
     1386, 1458, 1386, 1378, 1381, 1387, 1460, 1387, 1391, 1391,
     1391, 1399, 1399, 1399, 1380, 1382, 1402, 1402, 1402, 1383,
     1404, 1404, 1404, 1462, 1384, 1406, 1406, 1406, 1463, 1464,
     1402, 1408, 1408, 1408, 1385, 1407, 1407, 1407, 1428, 1428,
     1428, 1386, 1429, 1429, 1429, 1387, 1431, 1431, 1431, 1407,
     1432, 1428, 1465, 1433, 1434, 1429, 1466, 1435, 1436, 1431,
     1468, 1437, 1432, 1469, 1432, 1433, 1434, 1433, 1434, 1435,
     1436, 1435, 1436, 1437, 1470, 1437, 1438, 1438, 1438, 1472,
     1440, 1454, 1454, 1454, 1439, 1439, 1439, 1473, 1438, 1438,

     1438, 1474, 1440, 1435, 1440, 1437, 1439, 1439, 1439, 1441,
     1441, 1441, 1475, 1432, 1480, 1433, 1436, 1434, 1457, 1457,
     1457, 1441, 1441, 1441, 1449, 1449, 1449, 1450, 1450, 1450,
     1493, 1495, 1440, 1453, 1453, 1453, 1497, 1498, 1449, 1499,
     1500, 1450, 1471, 1471, 1471, 1483, 1505, 1453, 1476, 1476,
     1476, 1508, 1477, 1477, 1477, 1471, 1477, 1483, 1477, 1483,
     1509, 1476, 1478, 1478, 1478, 1479, 1479, 1479, 1510, 1479,
     1511, 1479, 1481, 1481, 1481, 1478, 1482, 1482, 1482, 1485,
     1482, 1512, 1482, 1513, 1514, 1481, 1484, 1484, 1484, 1486,
     1487, 1485, 1515, 1485, 1488, 1516, 1517, 1483, 1484, 1484,

     1484, 1486, 1487, 1486, 1487, 1491, 1488, 1522, 1488, 1489,
     1489, 1489, 1490, 1490, 1490, 1523, 1524, 1491, 1525, 1491,
     1532, 1489, 1489, 1489, 1490, 1490, 1490, 1543, 1546, 1488,
     1485, 1492, 1492, 1492, 1494, 1494, 1494, 1487, 1496, 1496,
     1496, 1549, 1486, 1492, 1492, 1492, 1550, 1551, 1494, 1501,
     1501, 1501, 1496, 1491, 1502, 1502, 1502, 1503, 1503, 1503,
     1504, 1504, 1504, 1501, 1506, 1506, 1506, 1507, 1507, 1507,
     1552, 1503, 1519, 1519, 1519, 1520, 1520, 1520, 1506, 1555,
     1521, 1521, 1521, 1558, 1521, 1519, 1521, 1538, 1520, 1526,
     1526, 1526, 1561, 1526, 1539, 1526, 1529, 1529, 1529, 1538,

     1529, 1538, 1529, 1533, 1533, 1533, 1539, 1533, 1539, 1533,
     1536, 1536, 1536, 1537, 1537, 1537, 1540, 1541, 1562, 1563,
     1542, 1538, 1536, 1536, 1536, 1537, 1537, 1537, 1540, 1541,
     1540, 1541, 1542, 1564, 1542, 1565, 1539, 1544, 1544, 1544,
     1545, 1545, 1545, 1547, 1547, 1547, 1548, 1548, 1548, 1566,
     1573, 1544, 1553, 1553, 1553, 1574, 1576, 1547, 1554, 1554,
     1554, 1577, 1541, 1556, 1556, 1556, 1586, 1542, 1540, 1557,
     1557, 1557, 1559, 1559, 1559, 1588, 1589, 1556, 1568, 1568,
     1568, 1569, 1569, 1569, 1590, 1569, 1559, 1569, 1570, 1570,
     1570, 1568, 1570, 1579, 1570, 1575, 1575, 1575, 1578, 1578,

     1578, 1580, 1585, 1585, 1585, 1579, 1591, 1579, 1575, 1582,
     1578, 1578, 1578, 1580, 1592, 1580, 1581, 1581, 1581, 1583,
     1597, 1582, 1598, 1582, 1584, 1584, 1584, 1599, 1581, 1581,
     1581, 1583, 1600, 1583, 1601, 1579, 1602, 1606, 1584, 1587,
     1587, 1587, 1593, 1593, 1593, 1607, 1610, 1582, 1594, 1594,
     1594, 1595, 1595, 1595, 1619, 1620, 1580, 1596, 1596, 1596,
     1621, 1622, 1594, 1623, 1624, 1595, 1603, 1603, 1603, 1628,
     1603, 1583, 1603, 1608, 1608, 1608, 1609, 1609, 1609, 1612,
     1609, 1629, 1609, 1611, 1611, 1611, 1608, 1613, 1618, 1618,
     1618, 1612, 1630, 1612, 1615, 1632, 1611, 1633, 1634, 1613,

     1635, 1613, 1614, 1614, 1614, 1639, 1615, 1647, 1615, 1648,
     1616, 1616, 1616, 1649, 1614, 1614, 1614, 1617, 1617, 1617,
     1651, 1615, 1616, 1616, 1616, 1613, 1612, 1625, 1625, 1625,
     1652, 1617, 1626, 1626, 1626, 1627, 1627, 1627, 1636, 1636,
     1636, 1625, 1636, 1642, 1636, 1640, 1640, 1640, 1641, 1641,
     1641, 1643, 1641, 1654, 1641, 1642, 1644, 1642, 1640, 1645,
     1645, 1645, 1658, 1643, 1659, 1643, 1660, 1661, 1644, 1668,
     1644, 1645, 1645, 1645, 1646, 1646, 1646, 1674, 1643, 1650,
     1650, 1650, 1653, 1653, 1653, 1662, 1662, 1662, 1665, 1662,
     1677, 1662, 1666, 1650, 1678, 1667, 1642, 1669, 1669, 1669,

     1665, 1679, 1665, 1692, 1666, 1644, 1666, 1667, 1693, 1667,
     1694, 1669, 1670, 1670, 1670, 1665, 1671, 1671, 1671, 1672,
     1672, 1672, 1673, 1673, 1673, 1680, 1670, 1705, 1681, 1706,
     1671, 1682, 1683, 1683, 1683, 1707, 1673, 1680, 1713, 1680,
     1681, 1666, 1681, 1682, 1714, 1682, 1683, 1715, 1667, 1684,
     1684, 1684, 1685, 1685, 1685, 1686, 1686, 1686, 1687, 1687,
     1687, 1719, 1720, 1684, 1688, 1688, 1688, 1725,  844, 1686,
     1689, 1689, 1689, 1682, 1680, 1690, 1690, 1690, 1691, 1691,
     1691, 1681, 1695, 1696, 1689,  843, 1697, 1698, 1698, 1698,
      842,  841, 1691,  840, 1695, 1696, 1695, 1696, 1697,  839,

     1697, 1698, 1699, 1699, 1699, 1700, 1700, 1700, 1701, 1701,
     1701, 1702, 1702, 1702, 1703, 1703, 1703, 1704, 1704, 1704,
     1711, 1711, 1711,  838, 1708, 1696,  837, 1709, 1703,  836,
     1710, 1712, 1712, 1712, 1697, 1695, 1708, 1716, 1708, 1709,
     1717, 1709, 1710, 1718, 1710, 1721, 1721, 1721,  835, 1716,
     1722, 1716, 1717, 1723, 1717, 1718,  834, 1718, 1721, 1724,
     1724, 1724, 1722,  833, 1722, 1723, 1708, 1723, 1726, 1726,
     1726, 1724, 1724, 1724,  832, 1709,  831, 1710, 1727, 1727,
     1727, 1726, 1728, 1728, 1728, 1716, 1728, 1717, 1728, 1729,
      830, 1727,  829,  828,  827, 1718,  826, 1722, 1730, 1730,

     1730, 1729,  825, 1729,  824, 1723, 1731, 1731, 1731,  823,
     1730, 1730, 1730, 1732, 1732, 1732,  822,  821, 1731, 1731,
     1731, 1733, 1733, 1733,  820,  819, 1732, 1734, 1734, 1734,
      818, 1734,  817, 1734, 1733,  816, 1735, 1735, 1735,  815,
     1735, 1729, 1735, 1738, 1738, 1738, 1739, 1739, 1739, 1740,
     1740, 1740,  812,  811,  810, 1738, 1738, 1738, 1739, 1739,
     1739,  809, 1740, 1741, 1741, 1741,  806, 1741,  804, 1741,
     1742, 1742, 1742,  799, 1742,  798, 1742, 1745, 1745, 1745,
     1746, 1746, 1746,  797, 1746,  796, 1746,  795,  794, 1745,
     1745, 1745, 1750, 1750, 1750, 1750, 1750, 1751, 1751, 1751,

     1751, 1751, 1752, 1752, 1752, 1752, 1752, 1753, 1753, 1753,
     1753, 1753, 1754, 1754, 1754, 1754, 1754, 1755, 1755, 1755,
     1755, 1755, 1756, 1756, 1756, 1756, 1756, 1757,  793,  792,
     1757, 1758, 1758, 1758, 1758, 1759, 1759,  791, 1759, 1759,
     1760, 1760, 1760,  785, 1760,  784,  783,  782,  781,  780,
      777,  776,  775,  774,  771,  756,  755,  754,  751,  750,
      747,  743,  740,  738,  737,  736,  735,  734,  732,  729,
      728,  727,  726,  725,  724,  723,  722,  721,  719,  718,
      717,  716,  715,  714,  713,  712,  711,  710,  709,  708,
      707,  704,  703,  701,  700,  698,  697,  696,  695,  694,

      692,  691,  690,  689,  688,  687,  683,  682,  681,  677,
      676,  674,  663,  657,  654,  652,  651,  650,  649,  647,
      646,  645,  644,  643,  642,  641,  640,  639,  638,  637,
      636,  635,  634,  631,  630,  629,  625,  624,  622,  621,
      620,  616,  615,  614,  613,  612,  610,  608,  604,  603,
      602,  601,  599,  598,  595,  594,  593,  592,  591,  590,
      589,  588,  587,  586,  572,  569,  568,  567,  565,  564,
      563,  562,  559,  558,  557,  556,  555,  554,  552,  551,
      550,  549,  548,  546,  545,  544,  543,  542,  541,  540,
      539,  538,  537,  536,  535,  534,  532,  529,  528,  527,

      526,  525,  524,  523,  520,  519,  515,  514,  512,  511,
      510,  509,  508,  505,  503,  502,  501,  500,  499,  498,
      497,  480,  476,  474,  470,  469,  468,  464,  463,  462,
      461,  460,  459,  458,  457,  456,  455,  454,  453,  452,
      451,  449,  448,  447,  446,  445,  444,  443,  441,  439,
      438,  437,  436,  435,  434,  433,  432,  429,  427,  426,
      425,  424,  423,  422,  420,  419,  418,  416,  415,  412,
      411,  410,  409,  408,  407,  404,  403,  402,  401,  400,
      399,  398,  397,  396,  376,  373,  372,  371,  368,  367,
      366,  360,  359,  358,  357,  355,  354,  353,  352,  351,

      350,  349,  348,  347,  346,  344,  343,  342,  341,  340,
      339,  338,  337,  336,  335,  334,  333,  332,  331,  330,
      329,  328,  326,  325,  324,  323,  322,  321,  320,  319,
      318,  317,  316,  315,  314,  313,  310,  309,  307,  306,
      305,  304,  303,  302,  301,  284,  282,  280,  276,  275,
      273,  272,  271,  267,  266,  265,  264,  263,  262,  261,
      260,  259,  258,  257,  256,  255,  254,  253,  252,  251,
      250,  248,  247,  246,  245,  244,  243,  242,  241,  240,
      239,  237,  236,  235,  234,  233,  232,  231,  230,  229,
      227,  226,  225,  224,  223,  222,  221,  220,  219,  217,

      216,  215,  214,  213,  211,  194,  193,  192,  191,  190,
      187,  186,  185,  184,  183,  182,  180,  179,  178,  175,
      174,  173,  172,  171,  170,  169,  168,  167,  165,  164,
      163,  162,  161,  160,  159,  158,  157,  155,  154,  153,
      152,  151,  150,  149,  148,  146,  142,  141,  140,  139,
      138,  136,  135,  132,  115,  114,  113,  112,  111,  109,
      108,  107,  106,  105,  104,  103,  102,  101,  100,   98,
       93,   92,   91,   89,   85,   84,   83,   82,   81,   79,
       76,   55,   52,   50,   48,   47,   46,   45,   42,   40,
       37,   17,    8,    7,    6,    5,    4,    3, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[187] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 
    1, 0, 1, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "OSParseosol.l"
/** @file parseosol.l
 * 
 * @author  Robert Fourer, Gus Gassmann, Jun Ma, Kipp Martin, 
 * @version 1.1, 10/07/2008
 * @since   OS1.1
 *
 * \remarks
 * Copyright (C) 2005-2008, Robert Fourer, Gus Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "OSParseosol.l"

#define PARSERDEBUG

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif


#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSoLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"

#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;








#line 101 "OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 1983 "OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 111 "OSParseosol.l"


 
#line 2229 "OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1750 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3799 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 114 "OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 119 "OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 120 "OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 121 "OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 123 "OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 137 "OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 140 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 141 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 142 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 143 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 144 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 145 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 146 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 147 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 148 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 149 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 150 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 151 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 152 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 153 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 154 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 155 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 156 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 157 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 158 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 159 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 160 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 161 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 162 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 163 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 164 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 165 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 166 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 167 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 168 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 169 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 170 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 171 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 172 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 173 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 174 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 175 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 176 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFVARATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 177 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFVARATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 178 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(IDXATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 179 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(IDXATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 180 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 181 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 182 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 183 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 184 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 185 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 186 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 187 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 188 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 189 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 190 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 191 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 192 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOBJATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 193 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOBJATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 194 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 195 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 196 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFCONATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 197 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFCONATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 198 "OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 199 "OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 202 "OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 203 "OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 204 "OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 205 "OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 206 "OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 207 "OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 208 "OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 209 "OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 210 "OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 211 "OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 212 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 213 "OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 215 "OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 216 "OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 217 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 218 "OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 219 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 220 "OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 221 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 222 "OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 223 "OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 224 "OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 225 "OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 226 "OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 227 "OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 228 "OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 229 "OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 230 "OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 231 "OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 232 "OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 233 "OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 234 "OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 235 "OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 236 "OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 237 "OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 238 "OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 240 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 241 "OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 242 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZESTART);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 243 "OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZEEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 244 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 245 "OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 246 "OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 247 "OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 249 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 250 "OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 252 "OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 253 "OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 254 "OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 255 "OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 256 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 257 "OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 258 "OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 259 "OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 260 "OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 261 "OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 262 "OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 263 "OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 264 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 265 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 266 "OSParseosol.l"
{YY_PRINT; return(FILESTOCREATESTART);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 267 "OSParseosol.l"
{YY_PRINT; return(FILESTOCREATEEND);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 268 "OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 269 "OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 270 "OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 271 "OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 272 "OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 273 "OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 274 "OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 275 "OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 276 "OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 277 "OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 278 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 279 "OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 280 "OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 281 "OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 282 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 283 "OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 284 "OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 285 "OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 288 "OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 289 "OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 290 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 291 "OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 292 "OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 293 "OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 294 "OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 295 "OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 296 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 297 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 298 "OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 299 "OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 300 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 301 "OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 302 "OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 303 "OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 304 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 305 "OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 306 "OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 307 "OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 308 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 309 "OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 310 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 311 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 312 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 313 "OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 316 "OSParseosol.l"
{ YY_PRINT;  /*yylval->sval = strdup( yytext);*/ yylval->sval = yytext;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 319 "OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 175:
#line 321 "OSParseosol.l"
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 321 "OSParseosol.l"
;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 322 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 324 "OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 179:
#line 326 "OSParseosol.l"
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 326 "OSParseosol.l"
;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 327 "OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 330 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 331 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 332 "OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSOLATTRIBUTETEXT);}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 334 "OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 346 "OSParseosol.l"
ECHO;
	YY_BREAK
#line 3450 "OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1750 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1750 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1749);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 346 "OSParseosol.l"





