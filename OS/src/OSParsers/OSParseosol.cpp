#line 2 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

#line 4 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osollex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 185
#define YY_END_OF_BUFFER 186
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1490] =
    {   0,
        0,    0,  183,  183,  181,  181,  182,  182,    0,    0,
        0,    0,    0,    0,    0,    0,  186,  184,    1,    1,
        1,    2,  172,  172,    5,  172,    4,  184,    3,  172,
      183,  185,  181,  182,  174,  175,  174,  178,  179,  178,
      172,  172,  172,    0,    3,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,    5,    4,  172,    5,
      172,    6,    0,    0,  177,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      172,  183,  181,  182,    0,  180,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,

      172,  172,    0,  172,    5,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    5,  176,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,    0,
      172,  172,  172,  172,  172,    5,  173,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  164,    0,    0,    0,    0,    0,    0,    0,

       74,    0,    0,    0,  156,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  150,
      172,  172,  172,  172,    0,  172,  172,  172,  172,  172,
      172,    0,   28,   29,  172,  172,  172,  172,  172,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  120,    0,
        0,    0,    0,    0,    0,  110,    0,    0,  172,  172,

      172,    0,    0,   44,   45,  172,  172,  172,  172,    0,
      172,  172,  172,  172,    0,  172,  172,    0,  172,    0,
      165,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   75,    0,    0,    0,    0,    0,    0,    0,  157,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  151,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   86,    0,    0,
        0,    0,    0,    0,    0,   66,  100,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  172,  172,
        0,   26,   27,  172,  172,  172,    0,   12,   13,  172,

      172,  172,    0,   50,   51,  172,    0,   18,   19,  172,
        0,  165,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   75,    0,    0,    0,    0,    0,    0,  157,    0,
        0,    0,   67,    0,    0,    0,    0,  121,    0,    0,
        0,    0,    0,    0,    0,    0,  111,    0,  151,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   70,    0,    0,  172,
      172,  172,  172,  172,  172,  172,    0,  172,  172,    0,
       14,   15,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   87,    0,    0,    0,    0,    0,    0,
        0,   67,    0,  101,    0,    0,    0,  121,    0,    0,
        0,    0,    0,    0,    0,  111,    0,    0,    0,   96,
        0,    0,    0,   68,    0,    0,    0,    0,   90,  112,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  144,    0,    0,   72,    0,    0,    0,    0,  172,
      172,  172,    0,  172,  172,  172,    0,   46,   47,  172,
      172,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   87,    0,    0,    0,    0,    0,    0,    0,
        0,  101,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   71,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   94,  132,
        0,    0,    0,    0,    0,    0,    0,   92,    0,  172,
        0,  172,    0,   52,   53,  172,  172,    0,  172,  172,
      172,  172,  172,  172,  172,    0,   54,   55,    0,    0,
       97,    0,    0,    0,    0,    0,   69,    0,    0,    0,
        0,    0,    0,    0,    0,   91,    0,  113,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      145,    0,    0,    0,    0,   73,    0,    0,    0,    0,

       71,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  146,    0,   48,   49,  172,  172,    0,
       30,   31,  172,  172,  172,  172,  172,  172,  172,  172,
      172,    0,   97,    0,    0,    0,    0,   69,    0,    0,
        0,    0,    0,    0,    0,    0,   91,  113,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   95,    0,
      133,  145,    0,    0,    0,    0,   73,    0,    0,    0,
        0,    0,   93,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  152,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   78,    0,    0,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   95,  133,    0,
        0,    0,    0,    0,    0,    0,    0,   93,    0,  147,
      160,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  106,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   80,    0,    0,  172,    0,

      172,  172,    0,  172,  172,  172,    0,  172,  172,  172,
      172,  172,  172,    0,  172,  172,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  153,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   79,    0,    0,  147,  116,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       82,  108,  102,    0,   76,   98,    0,    0,    0,    0,
        0,    0,  170,    0,    0,   16,   17,  172,    0,    0,
       62,   63,  172,  172,    0,   58,   59,  172,  172,  172,
      172,  172,  172,    0,   42,   43,  172,  172,    0,  161,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  107,    0,    0,  153,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   81,   79,    0,
        0,    0,  126,  140,    0,    0,    0,    0,    0,    0,
        0,  104,    0,    0,    0,    0,  122,    0,  168,    0,
        0,    8,    9,  172,  172,  172,  172,  172,  172,  172,
      172,    0,  172,  172,  172,  172,    0,  161,    0,  117,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   83,    0,  109,  107,    0,  103,    0,    0,   77,
        0,   99,    0,    0,    0,    0,    0,    0,   81,    0,

      171,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   88,  172,  172,
        0,  172,  172,  172,  172,  172,  172,    0,   22,   23,
      172,  172,  172,    0,   10,   11,  117,    0,    0,    0,
      127,    0,  141,    0,    0,    0,    0,    0,    0,    0,
       83,  109,  103,    0,  105,   77,   99,    0,    0,    0,
        0,    0,  123,    0,  171,    0,  169,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  142,
        0,    0,  172,    0,   20,   21,  172,  172,  172,  172,
      172,  172,  172,  172,  172,    0,    0,  127,  141,    0,

        0,    0,    0,    0,    0,    0,  105,    0,    0,    0,
        0,  123,    0,  169,    0,   89,    0,    0,    0,    0,
        0,    0,    0,  130,   84,    0,    0,    0,    0,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  143,    0,    0,   89,    0,  124,    0,  166,    0,
        0,    0,    0,    0,  136,    0,    0,  172,  172,  172,
      172,  172,  172,  172,    0,  172,    0,  172,  172,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  131,
        0,   85,    0,    0,  143,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  114,  172,  172,    0,  172,
      172,  172,  172,    0,   24,   25,    0,   32,   33,  172,
        0,   34,   35,    0,    0,  125,    0,    0,  167,    0,
        0,    0,    0,  131,   85,    0,    0,  137,    0,    0,
      138,    0,    0,    0,    0,    0,    0,  118,  172,    0,
        0,   36,   37,  172,  172,  172,  172,  172,    0,  125,
        0,  167,    0,    0,    0,    0,    0,  137,    0,    0,
      115,    0,    0,    0,    0,    0,    0,    0,   38,   39,
      172,  172,  172,    7,  172,  172,    0,  139,    0,    0,
        0,    0,    0,    0,    0,  119,  115,    0,    0,    0,

      148,    0,    0,  172,  172,    7,  172,  172,    0,  139,
        0,    0,    0,    0,    0,    0,  119,    0,  158,  154,
      128,    0,  172,  172,  172,    0,   64,   65,    0,    0,
        0,    0,  149,    0,    0,  162,  134,  172,  172,  172,
        0,    0,  159,    0,  155,  149,    0,  129,    0,  172,
      172,  172,    0,  163,  159,  155,  129,    0,  135,  172,
      172,  172,  163,  135,  172,  172,  172,  172,  172,  172,
      172,  172,  172,    0,  172,  172,    0,    0,   40,   41,
      172,    0,    0,   56,   57,    0,   60,   61,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    7,    1,    1,    8,    1,
        1,    7,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    7,    1,   14,
       15,   16,   17,    7,    7,   18,   19,   20,   21,   22,
        7,    7,   23,   24,   25,   26,   27,   28,   29,   30,
        7,   31,   32,   33,   34,   35,    7,    7,    7,    7,
        1,    7,    1,    1,    7,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,    1,   62,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    2,    2,    2,    1,    3,    2,    4,    1,    2,
        2,    2,    2,    2,    1,    5,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    1
    } ;

static yyconst flex_int16_t yy_base[1501] =
    {   0,
        0,   62, 3089, 3088, 3097, 3096, 3093, 3092,    0,    0,
        0,    0,   15,   16,    4,   17, 3099, 3106,  123,  179,
        0, 3106,    8,   16,   29,   17,   40,  232, 3106,   21,
        0, 3106,    0,    0, 3106, 3106, 3088, 3106, 3106, 3081,
        0,   22,   30,   23, 3106,   67,   44,   41,   72,   73,
       76,   77,   81,   88,   85,   82,  129,  133,   91,  144,
      176, 3106, 3086,  252, 3106, 3045,    8, 3050, 3053, 3043,
     3041, 3046,   64,  150,   79, 3049,  159, 3028, 3033, 3050,
      114,    0,    0,    0, 3069, 3106,  100,  160,  152,  137,
      194,  184,  197,  216,  224,  231,  251,  225,  244,  234,

      296,  297, 3071,  243,  301, 3073, 3032,   77, 3037, 3040,
     3030, 3028, 3033,  171,  267,  189, 3036,  286, 3015, 3020,
     3037, 3023, 3020, 3017, 3022, 3019,  276, 3030, 3028, 3006,
     3015, 3018, 3007, 3011, 3017, 3004,  197, 3008, 3005, 3013,
     3002, 3007, 2999, 3001, 3011, 2997,  315, 3106,  318,  319,
      323,  339,  331,  334,  335,  345,  346,  349,  374,  378,
      350,  358,  377,  378,  381, 3036, 3106, 2999, 2996, 2993,
     2998, 2995,  356, 3006, 3004, 2982, 2991, 2994, 2983, 2987,
     2993, 2980,  208, 2984, 2981, 2989, 2978, 2983, 2975, 2977,
     2987, 2973,  314, 2985, 2984, 2983, 2982, 2966, 2964, 2964,

     2995, 2977, 2983,  382, 2975, 2970, 2966, 2972, 2960, 2956,
     2966, 2970, 2951, 2966, 2948, 2947, 2948, 2962, 2948, 2956,
      389,  398,  413,  420,  436,  405,  404,  427,  446,  416,
      431,  461, 3106, 3106,  439,  470,  452,  473,  464,  479,
     2959, 2958, 2957, 2956, 2940, 2938, 2938,  494, 2952, 2958,
      481,  503, 2946, 2942, 2948, 2936, 2932, 2942, 2946, 2927,
     2942, 2924, 2923, 2924, 2938, 2924,  509, 2921, 2939, 2925,
     2935, 2918, 2918, 2926, 2914, 2932, 2947, 2917, 2921, 2934,
     2919, 2922, 2923, 2912,  488, 2906, 2902, 2899, 2926, 2915,
     2910, 2914, 2908, 2911, 2910, 3106, 2921, 2912,  500,  504,

      524,  543,  552, 3106, 3106,  507,  508,  515,  564,  567,
      521,  528,  543,  581,  584,  516,  596,  599,  611,  614,
      617, 2892, 2910, 2896, 2906, 2889, 2889, 2897, 2885, 2903,
      620,  629, 2918, 2888, 2892, 2905, 2890, 2893,  635,  638,
     2894, 2883,  641, 2877, 2873, 2870,  644, 2887, 2882, 2886,
     2880, 2883, 2882,  650, 2893,  659,  665, 2884, 2866, 2880,
     2878, 2861, 2882, 2878, 2877,  542, 2863, 3106, 2857, 2862,
     2875, 2854, 2859, 2851, 2861,  668, 2875, 2848, 2852, 2865,
     2846, 2846, 2842, 2859, 2843, 2847, 2858, 2856,  575,  642,
      674, 3106, 3106,  665,  669,  670,  686, 3106, 3106,  681,

      697,  682,  700, 3106, 3106,  693,  712, 3106, 3106,  720,
      723,  735, 2839, 2853, 2851, 2834, 2855, 2851, 2850,  584,
     2836,  738,  741, 2830, 2835, 2848, 2827, 2832,  744, 2824,
     2834,  747,  750,  756, 2822, 2826,  762,  765, 2839, 2820,
     2820, 2816, 2833, 2817, 2821,  771,  777, 2832,  780, 2830,
     2830, 2810, 2824, 2813, 2812, 2814, 2813, 2815, 2814, 2819,
     2816, 2815,  124, 2808, 2803, 2808, 2790, 2799,  708, 2796,
     2804, 2793, 2806, 2798, 2804,  130, 3106, 2795, 2795,  772,
      775,  790,  782,  781,  785,  805,  808,  786,  820,  840,
     3106, 3106, 2805, 2785, 2799, 2788, 2787, 2789, 2788, 2790,

     2789, 2794,  847,  825, 2791, 2790,  184, 2783, 2778, 2783,
     2765,  850,  853,  856, 2774,  793, 2771,  862, 2779, 2768,
     2781, 2773, 2779,  323,  868,  871, 2770, 2770, 2772, 3106,
     2766, 2761,  406, 3106,  630, 2760, 2765, 2771, 3106, 3106,
     2754, 2758, 2776, 2754, 2749, 2769, 2749, 2759, 2758, 2762,
     2747, 2759, 2759, 2757,   13, 2745, 2745, 2754, 2753,  874,
      824,  877,  892,  869,  901,  894,  928, 3106, 3106,  831,
      935,  938, 2748,  917, 2742, 2737,  438,  950,  742, 2736,
     2741, 2747,  953,  956,  959, 2730, 2734, 2752, 2730, 2725,
     2745,  965, 2725, 2735, 2734, 2738, 2723,  974, 2736, 2734,

      977, 2722, 2722,  980,  983, 2731, 2730, 2720, 2730, 2723,
     2713, 2725, 2714, 2707, 2725, 2725, 2720, 2719,  871, 2710,
     2717, 2705, 2695, 2714, 2698, 2708, 2698, 2703, 3106, 3106,
     2695,  887, 2709, 2711, 2715, 2690, 2721, 3106, 2689, 1004,
      995,  898, 1019, 3106, 3106,  911, 1026, 1029,  986,  996,
     1001, 1029, 1010,  929, 1033, 1049, 3106, 3106, 2693, 1059,
     1065, 2703, 2696, 2686, 2698, 1068, 1074, 2687, 2680, 2698,
     2698, 2693, 2692,  963, 1077, 1083, 1086, 1092, 2683, 2690,
     2678, 2668, 2687, 2671, 2681, 2671, 2676, 1095, 1101, 1104,
     1110, 2668,  972, 2682, 1119, 1122, 2684, 2688, 2663, 2694,

     1125, 1128, 2662, 2660, 2670, 2673, 2672, 2664, 2661, 2673,
     2663, 2654, 2668, 2651, 2654, 2667, 2665, 2661, 2664, 2667,
     2644, 2653, 2646, 2655, 2654, 2660, 2648, 2647, 2658, 2641,
     2665, 2643, 2637, 3106, 1134, 3106, 3106, 1034, 1102, 1143,
     3106, 3106, 1125, 1134, 1138, 1141, 1142, 1145, 1146, 1149,
     1150, 2630, 1165, 2640, 2643, 2642, 2634, 1173, 2631, 2643,
     2633, 2624, 2638, 2621, 2624, 2637, 1176, 1183, 2635, 2631,
     2633, 2631, 2601, 2610, 2566, 2574, 2569, 1187, 1196, 1202,
     1205, 1209, 2574, 2556, 2555, 2565, 1212, 2547, 2564, 2541,
     2531, 1217, 1220, 1223, 2524, 2528, 2513, 2530, 2525, 2510,

     2516, 2515, 2509, 2491, 2512, 2506, 2495, 2502, 2501, 2501,
     2489, 3106, 2481, 2481, 2491, 2473, 2475, 2465, 2470, 2461,
     2474, 3106, 2455, 2447, 1226, 1156, 1232, 1178, 1241, 1235,
     1236, 1244, 1245, 1262, 1253, 2448, 2451, 2427, 2431, 2426,
     2403, 2409, 2408, 2403, 2387, 2391, 2376, 2361, 2368, 2361,
     2361, 2350, 1268, 2343, 2342, 2346, 2323, 1285, 1288,    9,
       29,   59,   54,   80, 1291,   79,   83, 1294, 1297, 1306,
     3106,  121,  155,  139,  148,  166,  189,  193,  210,  218,
      225,  245,  244,  239, 3106,  258,  240,  267,  265,  270,
      295,  313,  333,  339,  351, 3106,  347,  354, 1312, 1315,

     1327, 1330, 1345, 1269, 1336, 1355, 1358, 1349, 1321, 1324,
     1359, 1363, 1378, 1382, 1289, 1375, 1393,  354,  378,  399,
      415,  424,  459,  464,  467,  459,  465,  500,  501,  508,
     1398,  536,  516, 1402, 1408,  533,  539,  553,  576,  604,
      594,  595,  619, 1417, 1420, 1423,  615,  623, 1426, 3106,
      637,  651,  677,  702,  720,  715,  739,  737,  776,  762,
     3106, 3106, 3106,  778, 3106, 3106,  775,  783,  793,  823,
      808,  814,  828,  841, 1435, 3106, 3106, 1442, 1445, 1457,
     3106, 3106, 1418, 1426, 1464, 3106, 3106, 1436, 1459, 1448,
     1483, 1460, 1463, 1498, 3106, 3106, 1476, 1505, 1479, 1508,

     1520,  851,  866,  871,  869,  892,  880,  910,  911,  943,
      918, 1523, 1526, 1529, 1544, 1547,  934, 1550, 1553, 1556,
      938,  945,  960,  971,  959,  963, 1562, 1571, 1577, 1580,
      988, 1161, 3106, 3106, 1003,  997, 1010, 1011, 1015, 1014,
     1029, 3106, 1021, 1064, 1045, 1045, 3106, 1046, 3106, 1069,
     1583, 3106, 3106, 1501, 1590, 1524, 1527, 1574, 1581, 1584,
     1599, 1616, 1593, 1489, 1594, 1628, 1646, 1633, 1653, 1636,
     1211, 1656, 1659, 1074, 1068, 1075, 1086, 1090, 1093, 1129,
     1662, 1677, 1680, 1683, 1686, 1689, 1695, 1698, 1704, 1707,
     1713, 1719, 1129, 1190, 1185, 1182, 1722, 1198, 1728, 1731,

     1737, 1740, 1214, 1222, 1227, 1224, 1217, 1217, 1240, 1271,
     1255, 1270, 1278, 1286, 1292, 1305, 1334, 3106, 1607, 1746,
     1749, 1613, 1749, 1750, 1657, 1660, 1753, 1768, 3106, 3106,
     1759, 1763, 1764, 1779, 3106, 3106, 1786, 1328, 1336, 1789,
     1798, 1805, 1808, 1332, 1327, 1341, 1367, 1368, 1356, 1366,
     1813, 1816, 1820, 1823, 1826, 1829, 1832, 1373, 1381, 1388,
     1404, 1838, 1841, 1422, 1844, 1847, 1853, 1856, 1422, 1443,
     1444, 1456, 1494, 1500, 1490, 1521, 1513, 1527, 1513, 3106,
     1518, 1532, 1848, 1863, 3106, 3106, 1854, 1859, 1860, 1863,
     1864, 1867, 1868, 1871, 1874, 1552, 1566, 1889, 1899, 1567,

     1586, 1593, 1610, 1592, 1613, 1618, 1902, 1628, 1620, 1907,
     1641, 1912, 1651, 1915, 1927, 1930, 1663, 1664, 1663, 1665,
     1710, 1691, 1703, 3106, 3106, 1683, 1706, 1710, 1710, 1882,
     1911, 1922, 1925, 1926, 1930, 1945, 1953, 1936, 1968, 1719,
     1728, 1729, 1732, 1778, 1758, 1764, 1971, 1986, 1749, 1797,
     1989, 1992, 1794, 1804, 1995, 1798, 3106, 1826, 3106, 1836,
     1853, 1848, 1849, 1879, 3106, 1880, 1884, 1965, 2006, 1948,
     1990, 1937, 1997, 2012, 2027, 2034, 2038, 2009, 2049, 2052,
     1880, 2064, 1910, 2067, 1904, 1922, 1931, 1935, 2070, 2073,
     2085, 2088, 1967, 2091, 2094, 1963, 1967, 1972, 1981, 1962,

     1977, 1976, 2012, 1993, 1993, 3106, 2100, 2106, 2121, 2097,
     2068, 2065, 2112, 2128, 3106, 3106, 2135, 3106, 3106, 2126,
     2142, 3106, 3106, 2017, 2149, 2152, 2025, 2158, 2164, 2006,
     2031, 2029, 2072, 2167, 2174, 2050, 2177, 2180, 2051, 2183,
     3106, 2059, 2068, 2062, 2095, 2097, 2122, 3106, 2186, 2201,
     2208, 3106, 3106, 2178, 2181, 2215, 2192, 2182, 2221, 2224,
     2110, 2231, 2109, 2107, 2124, 2122, 2146, 2237, 2240, 2243,
     2246, 2135, 2174, 2175, 2166, 2164, 2201, 2258, 3106, 3106,
     2238, 2239, 2266, 2269, 2249, 2281, 2272, 2287, 2201, 2219,
     2227, 2223, 2229, 2242, 2296, 2299, 2302, 2253, 2240, 2253,

     3106, 2268, 2252, 2297, 2300, 2315, 2306, 2321, 2324, 2336,
     2270, 2261, 2267, 2339, 2291, 2276, 2342, 2280, 3106, 3106,
     3106, 2307, 2334, 2335, 2340, 2356, 3106, 3106, 2299, 2363,
     2366, 2369, 2372, 2385, 2321, 3106, 3106, 2364, 2367, 2376,
     2394, 2400, 2403, 2409, 2415, 2424, 2427, 2430, 2433, 2407,
     2424, 2425, 2442, 2448, 2451, 2457, 2461, 2467, 2470, 2462,
     2463, 2466, 2482, 2485, 2476, 2479, 2480, 2483, 2484, 2505,
     2487, 2508, 2533, 2548, 2555, 2558, 2573, 2580, 3106, 3106,
     2587, 2590, 2602, 3106, 3106, 2609, 3106, 3106, 3106, 2617,
     2622, 2627, 2632, 2637, 2642, 2647, 2651, 2656, 2660, 2665

    } ;

static yyconst flex_int16_t yy_def[1501] =
    {   0,
     1490, 1490, 1491, 1491, 1492, 1492, 1493, 1493, 1494, 1494,
     1494, 1494, 1495, 1495, 1496, 1496, 1489, 1489, 1497, 1497,
       20, 1489, 1497, 1497, 1497, 1497, 1497, 1489, 1489, 1497,
     1498, 1489, 1499, 1500, 1489, 1489, 1489, 1489, 1489, 1489,
       20, 1497, 1497,   28, 1489, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497,
     1497, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1497, 1498, 1499, 1500, 1489, 1489, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497,

     1497, 1497, 1489, 1497, 1497, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1497, 1489, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1489,
     1497, 1497, 1497, 1497, 1497, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,

     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1497, 1497, 1497, 1497, 1489, 1497, 1497, 1497, 1497, 1497,
     1497, 1489, 1489, 1489, 1497, 1497, 1497, 1497, 1497, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1497, 1497,

     1497, 1489, 1489, 1489, 1489, 1497, 1497, 1497, 1497, 1489,
     1497, 1497, 1497, 1497, 1489, 1497, 1497, 1489, 1497, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1497, 1497,
     1489, 1489, 1489, 1497, 1497, 1497, 1489, 1489, 1489, 1497,

     1497, 1497, 1489, 1489, 1489, 1497, 1489, 1489, 1489, 1497,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1489, 1497, 1497, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,

     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1497,
     1497, 1497, 1489, 1497, 1497, 1497, 1489, 1489, 1489, 1497,
     1497, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,

     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1497,
     1489, 1497, 1489, 1489, 1489, 1497, 1497, 1489, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,

     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1497, 1497, 1489,
     1489, 1489, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497,
     1497, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,

     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1497, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1497, 1489,

     1497, 1497, 1489, 1497, 1497, 1497, 1489, 1497, 1497, 1497,
     1497, 1497, 1497, 1489, 1497, 1497, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1497, 1489, 1489,
     1489, 1489, 1497, 1497, 1489, 1489, 1489, 1497, 1497, 1497,
     1497, 1497, 1497, 1489, 1489, 1489, 1497, 1497, 1489, 1489,

     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1497, 1497, 1497, 1497, 1497, 1497, 1497,
     1497, 1489, 1497, 1497, 1497, 1497, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,

     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1497, 1497,
     1489, 1497, 1497, 1497, 1497, 1497, 1497, 1489, 1489, 1489,
     1497, 1497, 1497, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1497, 1489, 1489, 1489, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1489, 1489, 1489, 1489, 1489,

     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1497,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1489, 1497, 1489, 1497, 1497, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,

     1489, 1489, 1489, 1489, 1489, 1489, 1497, 1497, 1489, 1497,
     1497, 1497, 1497, 1489, 1489, 1489, 1489, 1489, 1489, 1497,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1497, 1489,
     1489, 1489, 1489, 1497, 1497, 1497, 1497, 1497, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1497, 1497, 1497, 1489, 1497, 1497, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,

     1489, 1489, 1489, 1497, 1497, 1489, 1497, 1497, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1497, 1497, 1497, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1497, 1497, 1497,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1497,
     1497, 1497, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1497,
     1497, 1497, 1489, 1489, 1497, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1489, 1497, 1497, 1489, 1489, 1489, 1489,
     1497, 1489, 1489, 1489, 1489, 1489, 1489, 1489,    0, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489

    } ;

static yyconst flex_int16_t yy_nxt[3169] =
    {   0,
       18,   19,   20,   21,   18,   22,   39,   22,   18,   24,
       25,   26,   27,   28,   18,   29,   18,   36,   36,   39,
       40, 1489,   30, 1489,   37,   37,   57, 1489,   58, 1489,
     1489, 1489,   62,   40, 1489, 1489, 1489, 1489,   59, 1489,
      634,   60, 1489, 1489, 1489,   62,  635,  123,   81,   61,
       57,  124,   58, 1489, 1489, 1489, 1489, 1489,  940, 1489,
       61,   22,   18,   19,   20,   21,   18,   22,   61,   22,
       18,   24,   25,   26,   27,   28,   18,   29,   18,   61,
     1489,  941, 1489,   88,   30, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489,   89, 1489, 1489, 1489, 1489, 1489,  130,

     1489, 1489,   87, 1489, 1489,  942, 1489,  131,  943,   91,
       90,   93,   94, 1489,  137, 1489,  169,  102,   81,  944,
      170,  100,   92,   22,   41,   41,   41, 1489,  947, 1489,
       96,  138,   95,  101,   43,  147,   44,   97,   45,  948,
       98,   60, 1489,   57, 1489,   58, 1489,   99, 1489,   61,
     1489,  541, 1489,   61,  149,  542,   60, 1489,  556, 1489,
       46,   47,  557,   48,   61, 1489,   49, 1489,   61,   50,
       51,   52,   61, 1489,  950, 1489,   53,   54,   55,   56,
       41,   41,   41,   61,  103,  104,  132,  951,  105, 1489,
       43, 1489,   44,  952,   45,  152,  140, 1489,  141, 1489,

      133,  151,  953,  134,  135,  136,  176, 1489,  142, 1489,
     1489,  586, 1489,  150,  177,  587,   46,   47,  143,   48,
      954,  154,   49,  955,  183,   50,   51,   52,  153, 1489,
      956, 1489,   53,   54,   55,   56,   63, 1489, 1489, 1489,
     1489,  184,  155,   64, 1489,  957, 1489, 1489,   65, 1489,
      210,  211,  159,  159,  159,  105, 1489, 1489, 1489, 1489,
      161,  257,  258,  156, 1489,  160, 1489,  958,  163,   66,
       67,  157,   68,   69,  959,   70,   71,  158,   72,   73,
      960,   74,   75,  961,   76,   77,   78,   79,   80,  107,
      108,  962,  109,  110,  162,  111,  112,  963,  113,  114,

      964,  115,  116,  178,  117,  118,  119,  120,  121, 1489,
     1489, 1489, 1489,  105, 1489,  965, 1489,  179,  966,  198,
      180,  181,  182,  186,  967,  187,  199,  968, 1489,  200,
     1489, 1489, 1489, 1489, 1489,  188, 1489,  969, 1489,  164,
      224,  224,  224,  165, 1489,  189, 1489, 1489, 1489, 1489,
     1489,  602, 1489,  225, 1489,  603,  222,  221, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489,  226,  268,  269,  227,
      223, 1489,  970, 1489,  228,  159,  159,  159,  971,  232,
      232,  232,  230,  233,  229,  234,  972, 1489,  160, 1489,
     1489, 1489, 1489, 1489, 1489,  973, 1489,  236,  235,  245,

      280,  281, 1489,  974, 1489,  231,  246, 1001,  282,  247,
     1002, 1489,  237, 1489,  301,  301,  301, 1489, 1489, 1489,
     1489,  224,  224,  224,  611,  612, 1489,  302, 1489, 1489,
      299, 1489,  238, 1489,  225, 1489,  239,  303,  303,  303,
     1489,  304, 1489,  305, 1489,  308, 1489,  309,  309,  309,
      300,  306, 1489, 1003, 1489,  311,  664,  665,  307, 1489,
      310, 1489,  232,  232,  232, 1489,  233, 1489,  234, 1004,
      312,  314,  314,  314,  317,  317,  317, 1489, 1005, 1489,
      320,  320,  320, 1489,  315, 1489, 1489,  318, 1489,  376,
      376,  376,  313, 1006,  321,  331,  331,  331,  316,  336,

      337, 1007, 1008,  319,  339,  339,  339,  338, 1009,  332,
      356,  356,  356, 1489, 1010, 1489,  333, 1489,  340, 1489,
     1489, 1489, 1489, 1489,  357,  301,  301,  301, 1489, 1489,
     1489, 1489,  322,  323, 1489, 1011, 1489, 1489,  302, 1489,
     1012, 1489,  341, 1489,  391,  391,  391,  390,  392,  389,
      393,  395,  358,  303,  303,  303, 1489,  304, 1489,  305,
     1013,  458,  394,  459,  396,  309,  309,  309,  397,  397,
      397,  406,  398,  400,  399, 1016, 1017, 1489,  310, 1489,
      401, 1019,  314,  314,  314,  403,  403,  403, 1489,  404,
     1489,  405, 1020,  402, 1489,  315, 1489,  317,  317,  317,

      407,  407,  407,  500,  408,  501,  409, 1021, 1022, 1489,
      318, 1489,  410,  410,  410,  320,  320,  320,  412,  412,
      412,  331,  331,  331, 1489,  411, 1489,  480, 1023,  321,
      422,  422,  422, 1024, 1025,  332,  339,  339,  339,  429,
      429,  429,  432,  432,  432,  437,  437,  437,  613,  614,
      340,  446,  446,  446, 1026, 1489,  433, 1489,  615,  438,
      356,  356,  356, 1030,  616,  447,  449,  449,  449,  376,
      376,  376, 1031,  439,  357,  391,  391,  391, 1489,  392,
     1489,  393, 1489, 1489, 1489, 1489, 1032,  397,  397,  397,
     1033,  398,  481,  399, 1489, 1489, 1489, 1489,  486,  486,

      486,  403,  403,  403,  482,  404, 1489,  405, 1489,  485,
     1489,  487, 1489,  407,  407,  407, 1034,  408,  483,  409,
      484,  410,  410,  410,  490,  490,  490,  548,  491,  549,
      492,  488,  489, 1489,  411, 1489,  412,  412,  412,  422,
      422,  422,  503,  503,  503,  429,  429,  429,  432,  432,
      432,  512,  512,  512, 1035, 1036,  504,  513,  513,  513,
      668,  669,  433,  437,  437,  437,  518,  518,  518, 1037,
      670,  514,  446,  446,  446, 1038,  671,  438,  526,  526,
      526,  449,  449,  449,  515, 1489,  447, 1489, 1489, 1039,
     1489,  562,  562,  562, 1489, 1489, 1489, 1489, 1489, 1489,

     1489, 1489, 1040, 1489,  563, 1489,  486,  486,  486,  567,
      567,  567,  594,  568,  595,  569, 1041, 1042, 1489,  487,
     1489,  571,  571,  571, 1043,  566,  583,  583,  583,  561,
      564,  560, 1044, 1489,  572, 1489, 1045, 1489,  570, 1489,
      565,  490,  490,  490, 1489,  491, 1489,  492,  503,  503,
      503,  512,  512,  512,  513,  513,  513,  592,  592,  592,
     1046, 1047,  504,  518,  518,  518, 1048,  642,  514,  604,
      604,  604,  526,  526,  526,  640,  640,  640,  562,  562,
      562, 1049, 1489,  605, 1489,  655, 1050, 1489,  641, 1489,
     1489,  563, 1489,  643,  643,  643,  715,  644,  716,  645,

     1071,  646,  647,  647,  647, 1072,  727, 1489,  728, 1489,
     1073, 1489,  649, 1489, 1489,  648, 1489,  650,  660,  660,
      660, 1074,  651,  652, 1489,  653, 1489, 1075,  654,  567,
      567,  567,  661,  568, 1076,  569,  571,  571,  571,  656,
      656,  656, 1489,  657, 1489,  658, 1077,  738, 1489,  572,
     1489,  666,  666,  666,  583,  583,  583,  675,  675,  675,
      677,  677,  677, 1078,  750,  667,  592,  592,  592, 1079,
      739,  676, 1080, 1088,  678,  690,  690,  690,  695,  695,
      695,  604,  604,  604,  701,  701,  701, 1093,  765,  691,
      766,  784,  696,  785, 1094,  605,  735,  735,  735, 1489,

      736, 1489,  737, 1095,  697,  640,  640,  640, 1096, 1489,
      698, 1489, 1097,  692, 1489, 1098, 1489, 1489,  641, 1489,
      643,  643,  643, 1489,  644, 1489,  645,  647,  647,  647,
      740,  740,  740, 1103,  741,  743,  742,  745, 1106, 1489,
      648, 1489, 1489, 1107, 1489,  744, 1489, 1489, 1489, 1489,
      656,  656,  656, 1108,  657,  746,  658, 1109, 1110,  749,
      660,  660,  660, 1111,  747,  751,  753,  753,  753,  666,
      666,  666, 1112, 1113,  661,  758,  758,  758,  675,  675,
      675,  748,  825,  667,  767,  767,  767,  677,  677,  677,
     1114, 1115,  676,  768,  768,  768,  778,  778,  778, 1116,

     1117,  678,  780,  780,  780,  690,  690,  690, 1118, 1144,
      779,  782,  782,  782, 1145, 1489,  781, 1489, 1146,  691,
      695,  695,  695,  787,  787,  787,  701,  701,  701,  792,
      792,  792, 1147, 1148,  696,  735,  735,  735, 1489,  736,
     1489,  737, 1149,  793,  740,  740,  740, 1489,  741, 1489,
      742, 1489,  826, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489,  753,  753,  753, 1489,
      828, 1489, 1150,  827,  758,  758,  758,  767,  767,  767,
     1104, 1158,  829,  830,  768,  768,  768, 1105,  778,  778,
      778, 1489,  833, 1489,  832,  901,  831,  858,  858,  858,

      905,  834,  779,  780,  780,  780,  859,  859,  859,  835,
      782,  782,  782,  787,  787,  787, 1159,  781,  792,  792,
      792,  868,  868,  868,  869,  869,  869,  899,  899,  899,
     1138, 1160,  793,  902,  902,  902, 1161, 1139,  870, 1489,
      900, 1489,  906,  906,  906, 1489,  903, 1489, 1489, 1489,
     1489, 1489, 1164, 1168, 1489,  907, 1489, 1489, 1489, 1489,
     1489, 1169, 1170,  913,  913,  913, 1489, 1171, 1489,  934,
      934,  934, 1172, 1173,  909, 1489,  914, 1489,  910, 1174,
      908,  911, 1489,  935, 1489,  904,  858,  858,  858,  859,
      859,  859,  945,  945,  945,  868,  868,  868,  869,  869,

      869,  912, 1489,  916, 1489,  915,  946,  949,  949,  949,
     1175, 1176,  870,  899,  899,  899,  975,  975,  975, 1177,
      976, 1178,  977,  983,  997, 1489,  900, 1489,  978,  978,
      978,  902,  902,  902, 1489, 1179, 1489, 1489, 1180, 1489,
     1489,  979, 1489, 1489,  903, 1489,  980,  980,  980, 1489,
      981, 1489,  982,  990, 1181,  984,  906,  906,  906,  985,
      985,  985, 1489,  986, 1489,  987, 1182, 1196, 1489,  907,
     1489, 1197, 1489,  989, 1489, 1200, 1489,  991, 1489,  913,
      913,  913, 1201,  994,  994,  994,  988,  995, 1489,  996,
     1489, 1489,  914, 1489,  999,  999,  999, 1202,  992, 1014,

     1014, 1014,  993,  934,  934,  934, 1203, 1204, 1000, 1018,
     1018, 1018, 1205, 1015,  998, 1206, 1208,  935, 1027, 1027,
     1027,  945,  945,  945, 1029, 1029, 1029,  949,  949,  949,
     1209, 1489, 1028, 1489, 1210,  946,  975,  975,  975, 1489,
      976, 1489,  977,  978,  978,  978, 1051, 1051, 1051, 1489,
     1052, 1489, 1053, 1211, 1213, 1489,  979, 1489,  980,  980,
      980, 1489,  981, 1489,  982,  985,  985,  985, 1217,  986,
     1054,  987, 1489, 1489, 1489, 1489, 1489, 1057, 1489, 1055,
      999,  999,  999, 1060, 1061, 1061, 1061, 1058, 1218, 1489,
     1056, 1489, 1219, 1059, 1000, 1220, 1489, 1062, 1489,  994,

      994,  994, 1489,  995, 1489,  996, 1066, 1066, 1066, 1068,
     1068, 1068, 1065, 1063, 1489, 1064, 1489, 1132, 1489, 1067,
     1489, 1069, 1069, 1069, 1081, 1081, 1081, 1083, 1083, 1083,
     1014, 1014, 1014, 1221, 1222, 1070, 1119, 1489, 1082, 1489,
     1489, 1084, 1489, 1223, 1015, 1085, 1085, 1085, 1086, 1086,
     1086, 1018, 1018, 1018, 1089, 1089, 1089, 1091, 1091, 1091,
     1224, 1225, 1087, 1027, 1027, 1027, 1226, 1122, 1090, 1227,
     1228, 1092, 1099, 1099, 1099, 1229, 1123, 1028, 1029, 1029,
     1029, 1100, 1100, 1100, 1051, 1051, 1051, 1489, 1052, 1489,
     1053, 1120, 1120, 1120, 1489, 1101, 1489, 1489, 1240, 1489,

     1061, 1061, 1061, 1489, 1121, 1489, 1489, 1489, 1489, 1489,
     1124, 1241, 1489, 1062, 1489, 1242, 1126, 1128, 1128, 1128,
     1489, 1129, 1489, 1130, 1125, 1243, 1489, 1127, 1489, 1066,
     1066, 1066, 1244, 1102, 1068, 1068, 1068, 1137, 1137, 1137,
     1133, 1489, 1067, 1489, 1245, 1246, 1131, 1134, 1134, 1134,
     1183, 1135, 1247, 1136, 1069, 1069, 1069, 1140, 1140, 1140,
     1142, 1142, 1142, 1081, 1081, 1081, 1248, 1249, 1070, 1187,
     1489, 1141, 1489, 1489, 1143, 1489, 1250, 1082, 1151, 1151,
     1151, 1083, 1083, 1083, 1152, 1152, 1152, 1085, 1085, 1085,
     1086, 1086, 1086, 1253, 1254, 1084, 1153, 1153, 1153, 1154,

     1154, 1154, 1256, 1257, 1087, 1089, 1089, 1089, 1156, 1156,
     1156, 1190, 1191, 1155, 1091, 1091, 1091, 1258, 1259, 1090,
     1157, 1157, 1157, 1162, 1162, 1162, 1262, 1260, 1092, 1099,
     1099, 1099, 1100, 1100, 1100, 1263, 1264, 1163, 1165, 1165,
     1165, 1166, 1166, 1166, 1261, 1265, 1101, 1120, 1120, 1120,
     1184, 1184, 1184, 1266, 1185, 1167, 1186, 1267, 1281, 1489,
     1121, 1489, 1489, 1489, 1489, 1489, 1489, 1282, 1489, 1128,
     1128, 1128, 1489, 1129, 1489, 1130, 1489, 1489, 1489, 1489,
     1134, 1134, 1134, 1283, 1135, 1284, 1136, 1137, 1137, 1137,
     1140, 1140, 1140, 1287, 1189, 1285, 1288, 1188, 1193, 1198,

     1198, 1198, 1293, 1195, 1141, 1192, 1142, 1142, 1142, 1199,
     1199, 1199, 1286, 1194, 1151, 1151, 1151, 1152, 1152, 1152,
     1143, 1153, 1153, 1153, 1154, 1154, 1154, 1207, 1207, 1207,
     1156, 1156, 1156, 1157, 1157, 1157, 1294, 1296, 1155, 1162,
     1162, 1162, 1212, 1212, 1212, 1165, 1165, 1165, 1166, 1166,
     1166, 1297, 1298, 1163, 1214, 1214, 1214, 1215, 1215, 1215,
     1299, 1489, 1167, 1489, 1184, 1184, 1184, 1489, 1185, 1489,
     1186, 1216, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1300, 1489, 1489, 1301, 1489,
     1198, 1198, 1198, 1231, 1302, 1489, 1230, 1489, 1303, 1233,

     1199, 1199, 1199, 1207, 1207, 1207, 1234, 1235, 1251, 1251,
     1251, 1304, 1232, 1212, 1212, 1212, 1214, 1214, 1214, 1305,
     1236, 1237, 1252, 1306, 1489, 1238, 1489, 1239, 1215, 1215,
     1215, 1255, 1255, 1255, 1324, 1489, 1268, 1489, 1489, 1489,
     1489, 1489, 1216, 1489, 1327, 1489, 1274, 1274, 1274, 1489,
     1489, 1489, 1489, 1330, 1276, 1276, 1276, 1331, 1489, 1275,
     1489, 1489, 1271, 1489, 1269, 1273, 1489, 1277, 1489, 1279,
     1279, 1279, 1289, 1289, 1289, 1272, 1270, 1332, 1489, 1278,
     1489, 1489, 1280, 1489, 1333, 1312, 1290, 1291, 1291, 1291,
     1251, 1251, 1251, 1295, 1295, 1295, 1255, 1255, 1255, 1336,

     1310, 1292, 1339, 1489, 1252, 1489, 1340, 1308, 1308, 1308,
     1489, 1341, 1489, 1274, 1274, 1274, 1342, 1343, 1307, 1489,
     1309, 1489, 1489, 1344, 1489, 1489, 1275, 1489, 1314, 1314,
     1314, 1345, 1315, 1313, 1316, 1276, 1276, 1276, 1346, 1317,
     1317, 1317, 1347, 1318, 1311, 1319, 1348, 1489, 1277, 1489,
     1279, 1279, 1279, 1321, 1321, 1321, 1359, 1322, 1320, 1323,
     1361, 1363, 1489, 1280, 1489, 1325, 1325, 1325, 1328, 1328,
     1328, 1289, 1289, 1289, 1334, 1334, 1334, 1364, 1489, 1326,
     1489, 1489, 1329, 1489, 1365, 1290, 1291, 1291, 1291, 1335,
     1335, 1335, 1337, 1337, 1337, 1295, 1295, 1295, 1366, 1367,

     1292, 1349, 1349, 1349, 1369, 1372, 1338, 1308, 1308, 1308,
     1489, 1355, 1489, 1489, 1350, 1489, 1373, 1374, 1356, 1489,
     1309, 1489, 1351, 1351, 1351, 1489, 1352, 1489, 1353, 1314,
     1314, 1314, 1354, 1315, 1375, 1316, 1317, 1317, 1317, 1489,
     1318, 1489, 1319, 1321, 1321, 1321, 1376, 1322, 1377, 1323,
     1325, 1325, 1325, 1360, 1360, 1360, 1389, 1390, 1357, 1328,
     1328, 1328, 1391, 1392, 1326, 1362, 1362, 1362, 1334, 1334,
     1334, 1393, 1394, 1329, 1358, 1335, 1335, 1335, 1337, 1337,
     1337, 1368, 1368, 1368, 1370, 1370, 1370, 1349, 1349, 1349,
     1398, 1489, 1338, 1489, 1489, 1489, 1489, 1489, 1371, 1489,

     1350, 1489, 1378, 1378, 1378, 1489, 1379, 1489, 1380, 1351,
     1351, 1351, 1399, 1352, 1400, 1353, 1383, 1383, 1383, 1401,
     1402, 1381, 1387, 1387, 1387, 1360, 1360, 1360, 1489, 1384,
     1489, 1385, 1362, 1362, 1362, 1386, 1388, 1382, 1368, 1368,
     1368, 1395, 1395, 1395, 1370, 1370, 1370, 1397, 1397, 1397,
     1403, 1489, 1489, 1489, 1489, 1396, 1411, 1412, 1371, 1378,
     1378, 1378, 1489, 1379, 1489, 1380, 1413, 1383, 1383, 1383,
     1406, 1406, 1406, 1387, 1387, 1387, 1414, 1407, 1405, 1489,
     1384, 1489, 1408, 1408, 1408, 1415, 1404, 1388, 1410, 1410,
     1410, 1416, 1418, 1419, 1489, 1409, 1489, 1395, 1395, 1395,

     1417, 1417, 1417, 1397, 1397, 1397, 1420, 1421, 1422, 1429,
     1489, 1396, 1489, 1489, 1430, 1489, 1406, 1406, 1406, 1489,
     1431, 1489, 1408, 1408, 1408, 1426, 1426, 1426, 1424, 1427,
     1434, 1428, 1435, 1436, 1489, 1409, 1489, 1410, 1410, 1410,
     1432, 1432, 1432, 1417, 1417, 1417, 1437, 1489, 1489, 1489,
     1489, 1423, 1441, 1489, 1433, 1489, 1425, 1426, 1426, 1426,
     1449, 1427, 1438, 1428, 1442, 1442, 1442, 1444, 1444, 1444,
     1432, 1432, 1432, 1446, 1446, 1446,  939, 1489, 1443, 1489,
     1489, 1445, 1489,  938, 1433, 1439, 1447, 1447, 1447, 1489,
      937, 1489,  936,  933, 1440, 1453, 1453, 1453,  932,  931,

     1448, 1442, 1442, 1442, 1455, 1455, 1455,  930,  929, 1454,
     1444, 1444, 1444,  928, 1450, 1443, 1456, 1456, 1456, 1452,
     1489, 1451, 1489,  927, 1445, 1446, 1446, 1446, 1447, 1447,
     1447, 1457, 1457, 1457, 1458, 1458, 1458, 1489, 1489, 1489,
     1489,  926, 1448, 1453, 1453, 1453,  925,  924, 1459, 1463,
     1463, 1463, 1455, 1455, 1455,  923,  922, 1454, 1456, 1456,
     1456, 1460, 1457, 1457, 1457,  921,  920, 1461, 1458, 1458,
     1458, 1464, 1464, 1464, 1462, 1489, 1489, 1489, 1489, 1489,
      919, 1489, 1459, 1463, 1463, 1463, 1464, 1464, 1464, 1489,
      918, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,

     1489,  917, 1489,  898,  897, 1465, 1473, 1473, 1473, 1476,
     1476, 1476, 1466,  896, 1467,  895,  894,  893, 1489, 1474,
     1489, 1489, 1477, 1489,  892, 1468,  891, 1469,  890,  889,
      888, 1471,  887, 1470, 1473, 1473, 1473, 1472,  886,  885,
     1475,  884,  883,  882,  881,  880, 1489, 1474, 1489, 1478,
     1478, 1478,  879, 1479,  878, 1480, 1481, 1481, 1481, 1476,
     1476, 1476,  877,  876,  875,  874,  873,  872, 1489, 1482,
     1489, 1489, 1477, 1489, 1483, 1483, 1483,  871, 1484,  867,
     1485, 1478, 1478, 1478,  866, 1479,  865, 1480, 1481, 1481,
     1481, 1486, 1486, 1486,  864, 1487,  863, 1488,  862,  861,

     1489, 1482, 1489, 1483, 1483, 1483,  860, 1484,  857, 1485,
     1486, 1486, 1486,  856, 1487,  855, 1488,   23,   23,   23,
       23,   23,   31,   31,   31,   31,   31,   33,   33,   33,
       33,   33,   34,   34,   34,   34,   34,   32,   32,   32,
       32,   32,   35,   35,   35,   35,   35,   38,   38,   38,
       38,   38,   42,  854,  853,   42,   82,   82,   82,   82,
       83,   83,  852,   83,   83,   84,   84,   84,  851,   84,
      850,  849,  848,  847,  846,  845,  844,  843,  842,  841,
      840,  839,  838,  837,  836,  824,  823,  822,  821,  820,
      819,  818,  817,  816,  815,  814,  813,  812,  811,  810,

      809,  808,  807,  806,  805,  804,  803,  802,  801,  800,
      799,  798,  797,  796,  795,  794,  791,  790,  789,  788,
      786,  783,  777,  776,  775,  774,  773,  772,  771,  770,
      769,  764,  763,  762,  761,  760,  759,  757,  756,  755,
      754,  752,  734,  733,  732,  731,  730,  729,  726,  725,
      724,  723,  722,  721,  720,  719,  718,  717,  714,  713,
      712,  711,  710,  709,  708,  707,  706,  705,  704,  703,
      702,  700,  699,  694,  693,  689,  688,  687,  686,  685,
      684,  683,  682,  681,  680,  679,  674,  673,  672,  663,
      662,  659,  639,  638,  637,  636,  633,  632,  631,  630,

      629,  628,  627,  626,  625,  624,  623,  622,  621,  620,
      619,  618,  617,  610,  609,  608,  607,  606,  601,  600,
      599,  598,  597,  596,  593,  591,  590,  589,  588,  585,
      584,  582,  581,  580,  579,  578,  577,  576,  575,  574,
      573,  559,  558,  555,  554,  553,  552,  551,  550,  547,
      546,  545,  544,  543,  540,  539,  538,  537,  536,  535,
      534,  533,  532,  531,  530,  529,  528,  527,  525,  524,
      523,  522,  521,  520,  519,  517,  516,  511,  510,  509,
      508,  507,  506,  505,  502,  499,  498,  497,  496,  495,
      494,  493,  479,  478,  477,  476,  475,  474,  473,  472,

      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,
      461,  460,  457,  456,  455,  454,  453,  452,  451,  450,
      448,  445,  444,  443,  442,  441,  440,  436,  435,  434,
      431,  430,  428,  427,  426,  425,  424,  423,  421,  420,
      419,  418,  417,  416,  415,  414,  413,  388,  387,  386,
      385,  384,  383,  382,  381,  380,  379,  378,  377,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  360,  359,  355,  354,  353,  352,
      351,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      335,  334,  330,  329,  328,  327,  326,  325,  324,  298,

      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  279,  278,  277,  276,  275,
      274,  273,  272,  271,  270,  267,  266,  265,  264,  263,
      262,  261,  260,  259,  256,  255,  254,  253,  252,  251,
      250,  249,  248,  244,  243,  242,  241,  240,  166,  220,
      219,  218,  217,  216,  215,  214,  213,  212,  209,  208,
      207,  206,  205,  204,  203,  202,  201,  197,  196,  195,
      194,  193,  192,  191,  190,  185,  175,  174,  173,  172,
      171,  168,  167,  166,  148,  146,  145,  144,  139,  129,
      128,  127,  126,  125,  122,  106,   86,   85, 1489,   32,

       32,   32,   32,   32,   32,   17, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489
    } ;

static yyconst flex_int16_t yy_chk[3169] =
    {   0,
        1,    1,    1,    1,    1,    1,   15,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   13,   14,   16,
       15,   23,    1,   23,   13,   14,   24,   44,   24,   24,
       26,   24,   26,   16,   30,   42,   30,   42,   24,   44,
      555,   25,   25,   43,   25,   43,  555,   67,   30,   25,
       27,   67,   27,   27,   48,   27,   48,   47,  860,   47,
       27,    1,    2,    2,    2,    2,    2,    2,   25,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,   27,
       46,  861,   46,   47,    2,   49,   50,   49,   50,   51,
       52,   51,   52,   48,   53,   56,   53,   56,   55,   73,

       55,   54,   46,   54,   59,  862,   59,   73,  863,   50,
       49,   51,   52,   87,   75,   87,  108,   56,   59,  864,
      108,   55,   50,    2,   19,   19,   19,   81,  866,   81,
       53,   75,   52,   55,   19,   81,   19,   54,   19,  867,
       54,   57,   57,   58,   57,   58,   58,   54,   58,   57,
       90,  463,   90,   58,   87,  463,   60,   60,  476,   60,
       19,   19,  476,   19,   60,   89,   19,   89,   57,   19,
       19,   19,   58,   88,  872,   88,   19,   19,   19,   19,
       20,   20,   20,   60,   61,   61,   74,  873,   61,   61,
       20,   61,   20,  874,   20,   90,   77,   92,   77,   92,

       74,   89,  875,   74,   74,   74,  114,   91,   77,   91,
       93,  507,   93,   88,  114,  507,   20,   20,   77,   20,
      876,   92,   20,  877,  116,   20,   20,   20,   91,   94,
      878,   94,   20,   20,   20,   20,   28,   95,   98,   95,
       98,  116,   93,   28,   96,  879,   96,  100,   28,  100,
      137,  137,   97,   97,   97,  104,  104,   99,  104,   99,
       98,  183,  183,   94,   97,   97,   97,  880,  100,   28,
       28,   95,   28,   28,  881,   28,   28,   96,   28,   28,
      882,   28,   28,  883,   28,   28,   28,   28,   28,   64,
       64,  884,   64,   64,   99,   64,   64,  886,   64,   64,

      887,   64,   64,  115,   64,   64,   64,   64,   64,  101,
      102,  101,  102,  105,  105,  888,  105,  115,  889,  127,
      115,  115,  115,  118,  890,  118,  127,  891,  147,  127,
      147,  149,  150,  149,  150,  118,  151,  892,  151,  101,
      152,  152,  152,  102,  153,  118,  153,  154,  155,  154,
      155,  524,  152,  152,  152,  524,  150,  149,  156,  157,
      156,  157,  158,  161,  158,  161,  153,  193,  193,  154,
      151,  162,  893,  162,  155,  159,  159,  159,  894,  160,
      160,  160,  157,  160,  156,  160,  895,  159,  159,  159,
      163,  164,  163,  164,  165,  897,  165,  162,  161,  173,

      204,  204,  221,  898,  221,  158,  173,  918,  204,  173,
      919,  222,  163,  222,  223,  223,  223,  227,  226,  227,
      226,  224,  224,  224,  533,  533,  223,  223,  223,  230,
      221,  230,  164,  224,  224,  224,  165,  225,  225,  225,
      228,  225,  228,  225,  231,  228,  231,  229,  229,  229,
      222,  226,  235,  920,  235,  230,  577,  577,  227,  229,
      229,  229,  232,  232,  232,  237,  232,  237,  232,  921,
      231,  236,  236,  236,  238,  238,  238,  239,  922,  239,
      240,  240,  240,  236,  236,  236,  238,  238,  238,  285,
      285,  285,  235,  923,  240,  248,  248,  248,  237,  251,

      251,  924,  925,  239,  252,  252,  252,  251,  926,  248,
      267,  267,  267,  299,  927,  299,  248,  300,  252,  300,
      306,  307,  306,  307,  267,  301,  301,  301,  308,  316,
      308,  316,  240,  240,  311,  928,  311,  301,  301,  301,
      929,  312,  252,  312,  302,  302,  302,  300,  302,  299,
      302,  307,  267,  303,  303,  303,  313,  303,  313,  303,
      930,  366,  306,  366,  308,  309,  309,  309,  310,  310,
      310,  316,  310,  311,  310,  932,  933,  309,  309,  309,
      312,  936,  314,  314,  314,  315,  315,  315,  389,  315,
      389,  315,  937,  313,  314,  314,  314,  317,  317,  317,

      318,  318,  318,  420,  318,  420,  318,  938,  939,  317,
      317,  317,  319,  319,  319,  320,  320,  320,  321,  321,
      321,  331,  331,  331,  319,  319,  319,  389,  940,  320,
      332,  332,  332,  941,  942,  331,  339,  339,  339,  340,
      340,  340,  343,  343,  343,  347,  347,  347,  535,  535,
      339,  354,  354,  354,  943,  390,  343,  390,  535,  347,
      356,  356,  356,  947,  535,  354,  357,  357,  357,  376,
      376,  376,  948,  347,  356,  391,  391,  391,  394,  391,
      394,  391,  395,  396,  395,  396,  951,  397,  397,  397,
      952,  397,  390,  397,  400,  402,  400,  402,  401,  401,

      401,  403,  403,  403,  394,  403,  406,  403,  406,  400,
      401,  401,  401,  407,  407,  407,  953,  407,  395,  407,
      396,  410,  410,  410,  411,  411,  411,  469,  411,  469,
      411,  402,  406,  410,  410,  410,  412,  412,  412,  422,
      422,  422,  423,  423,  423,  429,  429,  429,  432,  432,
      432,  433,  433,  433,  954,  955,  423,  434,  434,  434,
      579,  579,  432,  437,  437,  437,  438,  438,  438,  956,
      579,  434,  446,  446,  446,  957,  579,  437,  447,  447,
      447,  449,  449,  449,  434,  480,  446,  480,  481,  958,
      481,  482,  482,  482,  484,  483,  484,  483,  485,  488,

      485,  488,  959,  482,  482,  482,  486,  486,  486,  487,
      487,  487,  516,  487,  516,  487,  960,  964,  486,  486,
      486,  489,  489,  489,  967,  485,  504,  504,  504,  481,
      483,  480,  968,  489,  489,  489,  969,  561,  488,  561,
      484,  490,  490,  490,  570,  490,  570,  490,  503,  503,
      503,  512,  512,  512,  513,  513,  513,  514,  514,  514,
      970,  971,  503,  518,  518,  518,  972,  561,  513,  525,
      525,  525,  526,  526,  526,  560,  560,  560,  562,  562,
      562,  973,  564,  525,  564,  570,  974,  560,  560,  560,
      562,  562,  562,  563,  563,  563,  619,  563,  619,  563,

     1002,  564,  565,  565,  565, 1003,  632,  566,  632,  566,
     1004,  642,  566,  642,  565,  565,  565,  566,  574,  574,
      574, 1005,  566,  566,  646,  566,  646, 1006,  566,  567,
      567,  567,  574,  567, 1007,  567,  571,  571,  571,  572,
      572,  572,  654,  572,  654,  572, 1008,  642,  571,  571,
      571,  578,  578,  578,  583,  583,  583,  584,  584,  584,
      585,  585,  585, 1009,  654,  578,  592,  592,  592, 1010,
      646,  584, 1011, 1017,  585,  598,  598,  598,  601,  601,
      601,  604,  604,  604,  605,  605,  605, 1021,  674,  598,
      674,  693,  601,  693, 1022,  604,  641,  641,  641,  649,

      641,  649,  641, 1023,  601,  640,  640,  640, 1024,  650,
      601,  650, 1025,  598,  651, 1026,  651,  640,  640,  640,
      643,  643,  643,  653,  643,  653,  643,  647,  647,  647,
      648,  648,  648, 1031,  648,  649,  648,  651, 1035,  647,
      647,  647,  652, 1036,  652,  650,  655,  738,  655,  738,
      656,  656,  656, 1037,  656,  651,  656, 1038, 1039,  653,
      660,  660,  660, 1040,  652,  655,  661,  661,  661,  666,
      666,  666, 1041, 1043,  660,  667,  667,  667,  675,  675,
      675,  652,  738,  666,  676,  676,  676,  677,  677,  677,
     1044, 1045,  675,  678,  678,  678,  688,  688,  688, 1046,

     1048,  677,  689,  689,  689,  690,  690,  690, 1050, 1074,
      688,  691,  691,  691, 1075,  739,  689,  739, 1076,  690,
      695,  695,  695,  696,  696,  696,  701,  701,  701,  702,
      702,  702, 1077, 1078,  695,  735,  735,  735,  743,  735,
      743,  735, 1079,  702,  740,  740,  740,  744,  740,  744,
      740,  745,  739,  745,  746,  747,  746,  747,  748,  749,
      748,  749,  750,  751,  750,  751,  753,  753,  753,  826,
      744,  826, 1080,  743,  758,  758,  758,  767,  767,  767,
     1032, 1093,  745,  746,  768,  768,  768, 1032,  778,  778,
      778,  828,  749,  828,  748,  826,  747,  779,  779,  779,

      828,  750,  778,  780,  780,  780,  781,  781,  781,  751,
      782,  782,  782,  787,  787,  787, 1094,  780,  792,  792,
      792,  793,  793,  793,  794,  794,  794,  825,  825,  825,
     1071, 1095,  792,  827,  827,  827, 1096, 1071,  794,  825,
      825,  825,  829,  829,  829,  827,  827,  827,  830,  831,
      830,  831, 1098, 1103,  829,  829,  829,  832,  833,  832,
      833, 1104, 1105,  834,  834,  834,  835, 1106,  835,  853,
      853,  853, 1107, 1108,  830,  834,  834,  834,  831, 1109,
      829,  832,  904,  853,  904,  827,  858,  858,  858,  859,
      859,  859,  865,  865,  865,  868,  868,  868,  869,  869,

      869,  833,  915,  835,  915,  834,  865,  870,  870,  870,
     1110, 1111,  869,  899,  899,  899,  900,  900,  900, 1112,
      900, 1113,  900,  904,  915,  899,  899,  899,  901,  901,
      901,  902,  902,  902,  909, 1114,  909,  910, 1115,  910,
      901,  901,  901,  902,  902,  902,  903,  903,  903,  905,
      903,  905,  903,  910, 1116,  905,  906,  906,  906,  907,
      907,  907,  908,  907,  908,  907, 1117, 1138,  906,  906,
      906, 1139,  911,  909,  911, 1144,  912,  910,  912,  913,
      913,  913, 1145,  914,  914,  914,  908,  914,  916,  914,
      916,  913,  913,  913,  917,  917,  917, 1146,  911,  931,

      931,  931,  912,  934,  934,  934, 1147, 1148,  917,  935,
      935,  935, 1149,  931,  916, 1150, 1158,  934,  944,  944,
      944,  945,  945,  945,  946,  946,  946,  949,  949,  949,
     1159,  983,  944,  983, 1160,  945,  975,  975,  975,  984,
      975,  984,  975,  978,  978,  978,  979,  979,  979,  988,
      979,  988,  979, 1161, 1164,  978,  978,  978,  980,  980,
      980,  990,  980,  990,  980,  985,  985,  985, 1169,  985,
      983,  985,  989,  992,  989,  992,  993,  989,  993,  984,
      999,  999,  999,  990,  991,  991,  991,  989, 1170,  997,
      988,  997, 1171,  989,  999, 1172,  991,  991,  991,  994,

      994,  994, 1064,  994, 1064,  994,  998,  998,  998, 1000,
     1000, 1000,  997,  992, 1054,  993, 1054, 1064,  998,  998,
      998, 1001, 1001, 1001, 1012, 1012, 1012, 1013, 1013, 1013,
     1014, 1014, 1014, 1173, 1174, 1001, 1054, 1056, 1012, 1056,
     1057, 1013, 1057, 1175, 1014, 1015, 1015, 1015, 1016, 1016,
     1016, 1018, 1018, 1018, 1019, 1019, 1019, 1020, 1020, 1020,
     1176, 1177, 1016, 1027, 1027, 1027, 1178, 1056, 1019, 1179,
     1181, 1020, 1028, 1028, 1028, 1182, 1057, 1027, 1029, 1029,
     1029, 1030, 1030, 1030, 1051, 1051, 1051, 1058, 1051, 1058,
     1051, 1055, 1055, 1055, 1059, 1030, 1059, 1060, 1196, 1060,

     1061, 1061, 1061, 1055, 1055, 1055, 1063, 1065, 1063, 1065,
     1058, 1197, 1061, 1061, 1061, 1200, 1059, 1062, 1062, 1062,
     1119, 1062, 1119, 1062, 1058, 1201, 1122, 1060, 1122, 1066,
     1066, 1066, 1202, 1030, 1068, 1068, 1068, 1070, 1070, 1070,
     1065, 1066, 1066, 1066, 1203, 1204, 1063, 1067, 1067, 1067,
     1119, 1067, 1205, 1067, 1069, 1069, 1069, 1072, 1072, 1072,
     1073, 1073, 1073, 1081, 1081, 1081, 1206, 1208, 1069, 1122,
     1125, 1072, 1125, 1126, 1073, 1126, 1209, 1081, 1082, 1082,
     1082, 1083, 1083, 1083, 1084, 1084, 1084, 1085, 1085, 1085,
     1086, 1086, 1086, 1211, 1213, 1083, 1087, 1087, 1087, 1088,

     1088, 1088, 1217, 1218, 1086, 1089, 1089, 1089, 1090, 1090,
     1090, 1125, 1126, 1088, 1091, 1091, 1091, 1219, 1220, 1089,
     1092, 1092, 1092, 1097, 1097, 1097, 1222, 1221, 1091, 1099,
     1099, 1099, 1100, 1100, 1100, 1223, 1226, 1097, 1101, 1101,
     1101, 1102, 1102, 1102, 1221, 1227, 1100, 1120, 1120, 1120,
     1121, 1121, 1121, 1228, 1121, 1102, 1121, 1229, 1240, 1120,
     1120, 1120, 1123, 1124, 1123, 1124, 1127, 1241, 1127, 1128,
     1128, 1128, 1131, 1128, 1131, 1128, 1132, 1133, 1132, 1133,
     1134, 1134, 1134, 1242, 1134, 1243, 1134, 1137, 1137, 1137,
     1140, 1140, 1140, 1245, 1124, 1244, 1246, 1123, 1131, 1141,

     1141, 1141, 1249, 1133, 1140, 1127, 1142, 1142, 1142, 1143,
     1143, 1143, 1244, 1132, 1151, 1151, 1151, 1152, 1152, 1152,
     1142, 1153, 1153, 1153, 1154, 1154, 1154, 1155, 1155, 1155,
     1156, 1156, 1156, 1157, 1157, 1157, 1250, 1253, 1154, 1162,
     1162, 1162, 1163, 1163, 1163, 1165, 1165, 1165, 1166, 1166,
     1166, 1254, 1256, 1162, 1167, 1167, 1167, 1168, 1168, 1168,
     1258, 1183, 1166, 1183, 1184, 1184, 1184, 1187, 1184, 1187,
     1184, 1168, 1188, 1189, 1188, 1189, 1190, 1191, 1190, 1191,
     1192, 1193, 1192, 1193, 1194, 1260, 1194, 1195, 1261, 1195,
     1198, 1198, 1198, 1187, 1262, 1230, 1183, 1230, 1263, 1189,

     1199, 1199, 1199, 1207, 1207, 1207, 1190, 1191, 1210, 1210,
     1210, 1264, 1188, 1212, 1212, 1212, 1214, 1214, 1214, 1266,
     1192, 1193, 1210, 1267, 1231, 1194, 1231, 1195, 1215, 1215,
     1215, 1216, 1216, 1216, 1281, 1232, 1230, 1232, 1233, 1234,
     1233, 1234, 1215, 1235, 1283, 1235, 1236, 1236, 1236, 1238,
     1272, 1238, 1272, 1285, 1237, 1237, 1237, 1286, 1236, 1236,
     1236, 1270, 1233, 1270, 1231, 1235, 1237, 1237, 1237, 1239,
     1239, 1239, 1247, 1247, 1247, 1234, 1232, 1287, 1268, 1238,
     1268, 1239, 1239, 1239, 1288, 1272, 1247, 1248, 1248, 1248,
     1251, 1251, 1251, 1252, 1252, 1252, 1255, 1255, 1255, 1293,

     1270, 1248, 1296, 1271, 1251, 1271, 1297, 1269, 1269, 1269,
     1273, 1298, 1273, 1274, 1274, 1274, 1299, 1300, 1268, 1269,
     1269, 1269, 1278, 1301, 1278, 1274, 1274, 1274, 1275, 1275,
     1275, 1302, 1275, 1273, 1275, 1276, 1276, 1276, 1303, 1277,
     1277, 1277, 1304, 1277, 1271, 1277, 1305, 1276, 1276, 1276,
     1279, 1279, 1279, 1280, 1280, 1280, 1324, 1280, 1278, 1280,
     1327, 1330, 1279, 1279, 1279, 1282, 1282, 1282, 1284, 1284,
     1284, 1289, 1289, 1289, 1290, 1290, 1290, 1331, 1312, 1282,
     1312, 1311, 1284, 1311, 1332, 1289, 1291, 1291, 1291, 1292,
     1292, 1292, 1294, 1294, 1294, 1295, 1295, 1295, 1333, 1336,

     1291, 1307, 1307, 1307, 1339, 1342, 1294, 1308, 1308, 1308,
     1310, 1311, 1310, 1307, 1307, 1307, 1343, 1344, 1312, 1308,
     1308, 1308, 1309, 1309, 1309, 1313, 1309, 1313, 1309, 1314,
     1314, 1314, 1310, 1314, 1345, 1314, 1317, 1317, 1317, 1320,
     1317, 1320, 1317, 1321, 1321, 1321, 1346, 1321, 1347, 1321,
     1325, 1325, 1325, 1326, 1326, 1326, 1361, 1363, 1313, 1328,
     1328, 1328, 1364, 1365, 1325, 1329, 1329, 1329, 1334, 1334,
     1334, 1366, 1367, 1328, 1320, 1335, 1335, 1335, 1337, 1337,
     1337, 1338, 1338, 1338, 1340, 1340, 1340, 1349, 1349, 1349,
     1372, 1354, 1337, 1354, 1355, 1358, 1355, 1358, 1340, 1349,

     1349, 1349, 1350, 1350, 1350, 1357, 1350, 1357, 1350, 1351,
     1351, 1351, 1373, 1351, 1374, 1351, 1356, 1356, 1356, 1375,
     1376, 1354, 1359, 1359, 1359, 1360, 1360, 1360, 1356, 1356,
     1356, 1357, 1362, 1362, 1362, 1358, 1359, 1355, 1368, 1368,
     1368, 1369, 1369, 1369, 1370, 1370, 1370, 1371, 1371, 1371,
     1377, 1381, 1382, 1381, 1382, 1369, 1389, 1390, 1370, 1378,
     1378, 1378, 1385, 1378, 1385, 1378, 1391, 1383, 1383, 1383,
     1384, 1384, 1384, 1387, 1387, 1387, 1392, 1385, 1382, 1383,
     1383, 1383, 1386, 1386, 1386, 1393, 1381, 1387, 1388, 1388,
     1388, 1394, 1398, 1399, 1386, 1386, 1386, 1395, 1395, 1395,

     1396, 1396, 1396, 1397, 1397, 1397, 1400, 1402, 1403, 1411,
     1404, 1395, 1404, 1405, 1412, 1405, 1406, 1406, 1406, 1407,
     1413, 1407, 1408, 1408, 1408, 1409, 1409, 1409, 1405, 1409,
     1415, 1409, 1416, 1418, 1408, 1408, 1408, 1410, 1410, 1410,
     1414, 1414, 1414, 1417, 1417, 1417, 1422, 1423, 1424, 1423,
     1424, 1404, 1429, 1425, 1414, 1425, 1407, 1426, 1426, 1426,
     1435, 1426, 1423, 1426, 1430, 1430, 1430, 1431, 1431, 1431,
     1432, 1432, 1432, 1433, 1433, 1433,  857, 1438, 1430, 1438,
     1439, 1431, 1439,  856, 1432, 1424, 1434, 1434, 1434, 1440,
      855, 1440,  854,  852, 1425, 1441, 1441, 1441,  851,  850,

     1434, 1442, 1442, 1442, 1443, 1443, 1443,  849,  848, 1441,
     1444, 1444, 1444,  847, 1438, 1442, 1445, 1445, 1445, 1440,
     1450, 1439, 1450,  846, 1444, 1446, 1446, 1446, 1447, 1447,
     1447, 1448, 1448, 1448, 1449, 1449, 1449, 1451, 1452, 1451,
     1452,  845, 1447, 1453, 1453, 1453,  844,  843, 1449, 1454,
     1454, 1454, 1455, 1455, 1455,  842,  841, 1453, 1456, 1456,
     1456, 1450, 1457, 1457, 1457,  840,  839, 1451, 1458, 1458,
     1458, 1459, 1459, 1459, 1452, 1460, 1461, 1460, 1461, 1462,
      838, 1462, 1458, 1463, 1463, 1463, 1464, 1464, 1464, 1465,
      837, 1465, 1466, 1467, 1466, 1467, 1468, 1469, 1468, 1469,

     1471,  836, 1471,  824,  823, 1460, 1470, 1470, 1470, 1472,
     1472, 1472, 1461,  821, 1462,  820,  819,  818, 1470, 1470,
     1470, 1472, 1472, 1472,  817, 1465,  816, 1466,  815,  814,
      813, 1468,  811, 1467, 1473, 1473, 1473, 1469,  810,  809,
     1471,  808,  807,  806,  805,  804, 1473, 1473, 1473, 1474,
     1474, 1474,  803, 1474,  802, 1474, 1475, 1475, 1475, 1476,
     1476, 1476,  801,  800,  799,  798,  797,  796, 1475, 1475,
     1475, 1476, 1476, 1476, 1477, 1477, 1477,  795, 1477,  791,
     1477, 1478, 1478, 1478,  790, 1478,  789, 1478, 1481, 1481,
     1481, 1482, 1482, 1482,  788, 1482,  786, 1482,  785,  784,

     1481, 1481, 1481, 1483, 1483, 1483,  783, 1483,  777, 1483,
     1486, 1486, 1486,  776, 1486,  775, 1486, 1490, 1490, 1490,
     1490, 1490, 1491, 1491, 1491, 1491, 1491, 1492, 1492, 1492,
     1492, 1492, 1493, 1493, 1493, 1493, 1493, 1494, 1494, 1494,
     1494, 1494, 1495, 1495, 1495, 1495, 1495, 1496, 1496, 1496,
     1496, 1496, 1497,  774,  773, 1497, 1498, 1498, 1498, 1498,
     1499, 1499,  772, 1499, 1499, 1500, 1500, 1500,  771, 1500,
      770,  769,  766,  765,  764,  763,  762,  761,  760,  759,
      757,  756,  755,  754,  752,  733,  732,  731,  730,  729,
      728,  727,  726,  725,  724,  723,  722,  721,  720,  719,

      718,  717,  716,  715,  714,  713,  712,  711,  710,  709,
      708,  707,  706,  705,  704,  703,  700,  699,  698,  697,
      694,  692,  687,  686,  685,  684,  683,  682,  681,  680,
      679,  673,  672,  671,  670,  669,  668,  665,  664,  663,
      662,  659,  639,  637,  636,  635,  634,  633,  631,  628,
      627,  626,  625,  624,  623,  622,  621,  620,  618,  617,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  607,
      606,  603,  602,  600,  599,  597,  596,  595,  594,  593,
      591,  590,  589,  588,  587,  586,  582,  581,  580,  576,
      575,  573,  559,  558,  557,  556,  554,  553,  552,  551,

      550,  549,  548,  547,  546,  545,  544,  543,  542,  541,
      538,  537,  536,  532,  531,  529,  528,  527,  523,  522,
      521,  520,  519,  517,  515,  511,  510,  509,  508,  506,
      505,  502,  501,  500,  499,  498,  497,  496,  495,  494,
      493,  479,  478,  475,  474,  473,  472,  471,  470,  468,
      467,  466,  465,  464,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  453,  452,  451,  450,  448,  445,  444,
      443,  442,  441,  440,  439,  436,  435,  431,  430,  428,
      427,  426,  425,  424,  421,  419,  418,  417,  416,  415,
      414,  413,  388,  387,  386,  385,  384,  383,  382,  381,

      380,  379,  378,  377,  375,  374,  373,  372,  371,  370,
      369,  367,  365,  364,  363,  362,  361,  360,  359,  358,
      355,  353,  352,  351,  350,  349,  348,  346,  345,  344,
      342,  341,  338,  337,  336,  335,  334,  333,  330,  329,
      328,  327,  326,  325,  324,  323,  322,  298,  297,  295,
      294,  293,  292,  291,  290,  289,  288,  287,  286,  284,
      283,  282,  281,  280,  279,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  269,  268,  266,  265,  264,  263,
      262,  261,  260,  259,  258,  257,  256,  255,  254,  253,
      250,  249,  247,  246,  245,  244,  243,  242,  241,  220,

      219,  218,  217,  216,  215,  214,  213,  212,  211,  210,
      209,  208,  207,  206,  205,  203,  202,  201,  200,  199,
      198,  197,  196,  195,  194,  192,  191,  190,  189,  188,
      187,  186,  185,  184,  182,  181,  180,  179,  178,  177,
      176,  175,  174,  172,  171,  170,  169,  168,  166,  146,
      145,  144,  143,  142,  141,  140,  139,  138,  136,  135,
      134,  133,  132,  131,  130,  129,  128,  126,  125,  124,
      123,  122,  121,  120,  119,  117,  113,  112,  111,  110,
      109,  107,  106,  103,   85,   80,   79,   78,   76,   72,
       71,   70,   69,   68,   66,   63,   40,   37,   17,    8,

        7,    6,    5,    4,    3, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[186] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 
    0, 1, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
/** @file parseosol.l
 * 
 * @author  Gus Gassmann, Jun Ma, Kipp Martin, 
 * @version 1.1, 10/07/2008
 * @since   OS1.1
 *
 * \remarks
 * Copyright (C) 2005-2008, Robert Fourer, Gus Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif


#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSoLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"

#define PARSERDEBUG

#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;








#line 101 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 1744 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 111 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"


 
#line 1990 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1490 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3106 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 114 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 119 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 120 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 121 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 123 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 137 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 139 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 141 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 142 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 143 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 144 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 145 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 146 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 147 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 148 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 149 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 150 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 151 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 152 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 153 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 154 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 155 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 156 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 157 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 158 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 159 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 160 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 161 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 162 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 163 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 164 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 165 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 166 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 167 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 168 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 169 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 170 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 171 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 172 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 173 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 174 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 175 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFVARATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 176 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFVARATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 177 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(IDXATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 178 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(IDXATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 179 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 180 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 181 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 182 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 183 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 184 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 185 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 186 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 187 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 188 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 189 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 190 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 191 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOBJATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 192 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOBJATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 193 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 194 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 195 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFCONATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 196 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFCONATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 197 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 198 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 201 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 202 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 203 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 204 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 205 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 206 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 207 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 208 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 209 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 210 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 211 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 212 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 214 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 215 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 216 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 217 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 218 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 219 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 220 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 221 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 222 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 223 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 224 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 225 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 226 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 227 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 228 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 229 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 230 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 231 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 232 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 233 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 234 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 235 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 236 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 237 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 239 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 240 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 241 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZESTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 242 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZEEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 243 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 244 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 245 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 246 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 248 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 249 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 251 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 252 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 253 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 254 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 255 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 256 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 257 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 258 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 259 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 260 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 261 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 262 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 263 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 264 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 265 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOCREATESTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 266 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOCREATEEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 267 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 268 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 269 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 270 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 271 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 272 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 273 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 274 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 275 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 276 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 277 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 278 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 279 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 280 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 281 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 282 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 283 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 284 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 287 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 288 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 289 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 290 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 291 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 292 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 293 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 294 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 295 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 296 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 297 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 298 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 299 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 300 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 301 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 302 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 303 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 304 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 305 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 306 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 307 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 308 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 309 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 310 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 311 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 312 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 315 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; /*yylval->sval = strdup( yytext);*/   yylval->sval = yytext; yyextra->errorText = yylval->sval;  return (ELEMENTTEXT); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 318 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 174:
#line 320 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 320 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 321 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 323 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 178:
#line 325 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 325 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 326 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 329 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 330 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;  return(ATTRIBUTETEXT);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 331 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 333 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 345 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 3205 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1490 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1490 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1489);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 345 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosol.l"





