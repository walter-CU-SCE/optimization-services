#define yy_create_buffer osrl_create_buffer
#define yy_delete_buffer osrl_delete_buffer
#define yy_scan_buffer osrl_scan_buffer
#define yy_scan_string osrl_scan_string
#define yy_scan_bytes osrl_scan_bytes
#define yy_flex_debug osrl_flex_debug
#define yy_init_buffer osrl_init_buffer
#define yy_flush_buffer osrl_flush_buffer
#define yy_load_buffer_state osrl_load_buffer_state
#define yy_switch_to_buffer osrl_switch_to_buffer
#define yyin osrlin
#define yyleng osrlleng
#define yylex osrllex
#define yyout osrlout
#define yyrestart osrlrestart
#define yytext osrltext
#define yylineno osrllineno

#line 20 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/root/flex/flex/skel.c,v 1.2 2004/05/07 00:28:17 jkh Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 84
#define YY_END_OF_BUFFER 85
static yyconst short int yy_acclist[165] =
    {   0,
       82,   82,   85,   83,   84,    1,   83,   84,    2,   83,
       84,   83,   84,   83,   84,   83,   84,    4,    5,   83,
       84,   83,   84,    3,   83,   84,   83,   84,   81,   84,
       84,   80,   84,   82,   84,   73,   84,   74,   84,   73,
       84,   77,   84,   78,   84,   77,   84,    3,    4,    5,
        5,    6,   76,   81,   80,   82,   79,    5,    5,   75,
       72,   48,   44,   40,   62,   50,   46,   42,    7,   55,
       62,   65,   63,   50,   46,    8,   42,   20,   34,   36,
       65,   63,   22,    8,   56,   69,   20,   21,   22,   56,
       35,   37,   23,   52,   32,   25,   54,   35,   37,   70,

       23,   24,   53,   41,   25,   25,   33,   38,   45,   33,
       43,   49,   28,   11,   39,   47,   29,   13,   43,   30,
       71,   28,   14,   66,   11,   12,   64,   51,   39,   47,
       29,   16,   13,   26,   17,    9,   67,   14,   15,   64,
       61,   51,   19,   31,   10,   16,   68,   17,   18,    9,
       61,   27,   19,   31,   10,   27,   57,   58,   60,   57,
       58,   59,   60,   59
    } ;

static yyconst short int yy_accept[634] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    4,    6,    9,   12,   14,   16,   18,
       22,   24,   27,   29,   31,   32,   34,   36,   38,   40,
       42,   44,   46,   48,   48,   48,   48,   49,   49,   49,
       49,   49,   49,   49,   51,   51,   52,   53,   53,   53,
       53,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   56,   57,   57,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   60,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   63,   63,
       63,   63,   63,   63,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   66,   66,   66,
       66,   66,   66,   66,   66,   67,   67,   67,   67,   67,
       67,   67,   67,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   70,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   72,
       72,   73,   73,   73,   73,   74,   75,   75,   75,   75,
       75,   75,   75,   76,   76,   76,   76,   77,   77,   77,
       77,   77,   77,   77,   78,   78,   78,   78,   78,   78,
       78,   78,   79,   79,   79,   79,   79,   79,   79,   80,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   82,
       82,   82,   83,   83,   83,   83,   83,   83,   84,   84,
       84,   84,   85,   85,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   87,   88,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   90,   90,
       90,   90,   91,   91,   91,   91,   91,   91,   92,   92,
       93,   93,   93,   93,   93,   93,   93,   93,   95,   95,
       95,   95,   95,   95,   95,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,

       96,   96,   96,   96,   98,   98,   98,   98,   98,   98,
       98,   98,   99,  100,  100,  100,  100,  100,  100,  101,
      102,  104,  104,  104,  104,  104,  104,  104,  105,  105,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  107,  107,  107,  107,  107,
      107,  107,  107,  108,  108,  108,  109,  109,  109,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  111,  111,  112,  113,  113,
      113,  113,  113,  113,  114,  114,  114,  114,  114,  115,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  116,  116,  116,  116,  117,  117,  117,
      118,  118,  118,  118,  119,  120,  120,  120,  121,  122,
      123,  123,  123,  123,  124,  125,  126,  127,  127,  127,
      127,  128,  128,  128,  128,  128,  128,  128,  128,  129,
      130,  130,  130,  131,  131,  132,  132,  132,  133,  134,
      135,  135,  135,  136,  136,  137,  138,  139,  140,  140,
      141,  141,  141,  141,  141,  141,  142,  143,  143,  143,
      144,  144,  145,  145,  146,  147,  148,  149,  150,  151,
      151,  151,  151,  151,  152,  152,  153,  154,  155,  156,

      156,  156,  156,  156,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  158,
      158,  159,  159,  159,  159,  160,  161,  162,  162,  163,
      164,  165,  165
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    1,    6,    1,
        1,    1,    7,    1,    8,    9,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    1,    1,   12,
       13,   14,   15,    1,    1,    1,   16,   17,   18,   19,
        1,   20,   21,    1,    1,    1,    1,   22,   23,    1,
        1,   24,   25,    1,   26,   27,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   37,    1,   38,   39,   40,
       41,   42,    1,   43,   44,   45,   46,   47,    1,   48,
       49,   50,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[51] =
    {   0,
        1,    1,    1,    1,    2,    2,    1,    1,    1,    1,
        1,    3,    1,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[642] =
    {   0,
        0,   20,   10,   12, 1045, 1044, 1041, 1040,   16,   30,
       24,   32, 1053, 1058,   46, 1058,   31, 1041, 1037,   35,
       88, 1058, 1028,    0, 1058,    0,    0, 1058, 1058, 1041,
     1058, 1058, 1034,    0, 1033,  126, 1058, 1014, 1014,    8,
     1015,  994, 1031,   46, 1019,   48, 1058,   54, 1032,  144,
     1058,  998,  992, 1005,  996,  994, 1002,   39, 1001,   31,
     1004, 1012,    0,    0,    0, 1016, 1058,  990,  988,  986,
      994,  993,   56,  980,  975,  983,  982,  983,  977, 1007,
     1006, 1008,  974,  968,  981,  972,  970,  978,   60,  977,
       67,  980,  967,  978,  965,  960,  974,  958,  964,  955,

      956,  963,  953,  953,  957,  966,    7, 1058, 1058,  961,
      948,  962,  946,  945,  945,  957,   72,  954,  956,  952,
      951, 1058,  942,  953,  940,  935,  949,  933,  939,  930,
      931,  938,  928,  928,  932,  941,   52,  924,  929,  934,
      920,  943,  919,  930,  925,  922,  927,  912,  910,  910,
      910,  908,  917,  908,  906,  929,  905,  902,  900,  903,
      104,  108,  113,  913,  914,  131,  135,  905,  910,  896,
      919,  895,  139,  902,  899,  904,  889,  887,  887,  887,
      885,  187,  885,  902,  885,  899,  909,  897,  894,  884,
       67,  879,  883,  884,  874,  872,  885,  888,  871,  886,

      896,  884,  873,  874,  873,  145,   91,  190,  192,  865,
      862,  197,  202,  152,  118,  861,  878,  861,  875,  885,
      873,  210,  137,  870,  860,  212,  855,  859,  860,  850,
      848,  861,  214,  143,  864,  848,  862,  861,  848,  217,
      853,  841,  849,  156, 1058,  839,  853,  846,  837,  836,
      850,  850,  837,  219,  842,  830,  844,  831,  174,  232,
      227,  849,  835,  237,  242,  244,  827,  841,  840,  827,
      246,  832,  248,  820,  828,  250,  252,  254,  818,  832,
      825,  816,  815,  256,  829,  829,  818,  817,  824,  259,
      839,  263,  820,  815,  800,  144,  817,  807, 1058, 1058,

      809,  812,  815,  268,  812,  189,  811,  797,  274,  808,
      793,  276,  811,  800,  799,  806,  278,  281,  803,  798,
      783,  283,  285,  287,  274,  800,  790,  293,  295,  792,
      793,  782,  802,  794, 1058,  298, 1058,  300,  778,  796,
      795,  790,   74,  781,  788,  787,  786,  302,  789,  146,
      780,  290,  783,  778,  767,  787,  779,  309,  316,  763,
      781,  318,  780,  775,  160,  766,  320,  322,  324,  326,
      773,  764,  771,  757,  779,  329,  786,  333,  767,  753,
      752,  768,  767,  770, 1058,  749,  338,  770,  344,  746,
      762,  765,  747,  746,  757,  744,  756,  762,  742,  749,

      735,  757,  346,  348,  746,  732,  731,  747,  746,  749,
      351,  353,  359,  728,  726,  726,  741,  740, 1058,  361,
     1058,  723,  730,  737,  729,  716,  700, 1058,  364,  366,
      677,  668,  652,  666,  641,  632,  626,  623,  616,  624,
      581,  578,  590,  573,  368,  552,  552,  556,  551,  534,
      548,  370,  372,  374,  516, 1058,  498,  499, 1058,  486,
      377,  488,  479,  379,  469,  383,  474,  392,  396,  455,
      465,  436,  442,  425,  416,  398,  411,  406,  400,  402,
      402,  406,  399,  405,  408,  415,  418, 1058,  380,  383,
      373,  420,  382,  422,  349,  425,  430,  376,  434,  351,

      439,  445,  447,  449,  452,  314,  327,  299,  314,  461,
      463,  465,  467,  291,  301,  469,  473,  268,  478,  482,
      250,  484,  486,  488,  491,  230,  493, 1058, 1058,  499,
      502,  507,  258,  510, 1058,  512, 1058,  516,  521,  523,
      529,  224,  218,  205,  207,  531,  534,  539,  543,  545,
      188,  547,  549,  552,  554,  556,  560,  562,  565, 1058,
      569,  211,  573,  575,  578, 1058,  584, 1058,  588,  590,
      190,  175,  161,  158,  592,  597,  601,  603,  605,  607,
      609,  611,  613,  618,  622, 1058,  626, 1058,  628,  148,
      105,  103,   98,  630,  632,  634,  636,  638,  640,   88,

       91,   65,   35,  642,   28,   27,  645,  647,    7,  649,
      651,  663,  654,  668,  673,  675,  677,  687,  682,  692,
      697,  699,  701,  708,  706,  713,  715,  717,  722,  724,
      726, 1058,  729,  733,  737,  741,  745,  749,  753,  757,
      761
    } ;

static yyconst short int yy_def[642] =
    {   0,
      633,  633,  634,  634,  635,  635,  636,  636,  637,  637,
      638,  638,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  639,  632,  640,  641,  632,  632,  632,
      632,  632,  632,   15,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  639,  640,  641,  632,  632,   50,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,    0,  632,  632,  632,  632,  632,  632,  632,  632,
      632
    } ;

static yyconst short int yy_nxt[1109] =
    {   0,
      632,   15,   15,  632,   16,   16,  632,   17,   18,   19,
       20,   21,  632,   22,   25,   25,   25,   25,   29,  632,
       23,   15,   15,   30,   16,   16,   32,   17,   18,   19,
       20,   21,   29,   22,   32,   76,  632,   30,   33,   43,
       23,   44,  632,   43,  152,   44,   33,   34,   34,  153,
      615,   45,   48,   77,   43,   35,   44,   36,   46,   37,
       80,   80,  104,   48,   81,   48,   48,   99,  244,  244,
      610,  105,  609,  161,  161,  106,   38,   48,  608,   48,
      100,   39,  101,  102,  162,   40,   41,  115,  129,  181,
       42,   49,  259,  259,  182,  383,  105,   50,  134,  384,

      106,  130,   51,  131,  132,  161,  161,  135,  607,  206,
      206,  136,  207,  207,  208,  208,  162,   52,   53,  266,
      266,   54,  606,   55,   56,  209,   57,  605,   58,  603,
       59,   60,  212,  212,   61,   68,  214,  214,  273,  273,
      222,  222,  602,  213,  284,  284,  206,  206,  215,  207,
      207,  601,  223,  214,  214,   52,   53,  244,  244,   54,
      341,   69,   70,  342,   71,  215,   58,  391,   72,   73,
      224,  392,   61,   83,   84,  259,  259,   85,  216,   86,
       87,  409,   88,  600,   89,  410,   90,   91,  233,  233,
       92,  208,  208,  260,  260,  593,  261,  261,  212,  212,

      234,  592,  209,  264,  264,  349,  265,  265,  342,  213,
      591,  222,  222,  276,  276,  233,  233,  590,  290,  290,
      304,  304,  235,  223,  586,  277,  291,  234,  309,  309,
      292,  578,  292,  260,  260,  574,  261,  261,  264,  264,
      573,  265,  265,  312,  312,  266,  266,  317,  317,  273,
      273,  276,  276,  322,  322,  323,  323,  284,  284,  318,
      290,  290,  572,  277,  336,  336,  571,  324,  291,  304,
      304,  566,  292,  560,  337,  309,  309,  312,  312,  317,
      317,  292,  358,  358,  322,  322,  323,  323,  362,  362,
      363,  318,  556,  364,  367,  367,  369,  369,  324,  336,

      336,  376,  376,  389,  389,  394,  368,  554,  370,  377,
      358,  358,  395,  378,  396,  378,  397,  403,  403,  362,
      362,  367,  367,  412,  412,  369,  369,  413,  413,  404,
      376,  376,  552,  368,  420,  420,  551,  370,  377,  429,
      429,  545,  378,  544,  421,  389,  389,  403,  403,  445,
      445,  430,  452,  452,  412,  412,  543,  378,  542,  404,
      413,  413,  420,  420,  453,  429,  429,  445,  445,  445,
      445,  452,  452,  485,  485,  486,  486,  430,  492,  492,
      497,  497,  538,  453,  501,  501,  493,  487,  498,  535,
      494,  531,  499,  503,  503,  529,  494,  504,  504,  512,

      512,  516,  516,  519,  519,  499,  523,  523,  505,  485,
      485,  513,  528,  517,  527,  520,  486,  486,  524,  525,
      525,  492,  492,  530,  530,  526,  532,  532,  487,  493,
      522,  497,  497,  494,  533,  536,  536,  521,  534,  498,
      501,  501,  518,  499,  515,  537,  539,  539,  503,  503,
      504,  504,  494,  540,  540,  514,  541,  541,  534,  511,
      499,  505,  546,  546,  548,  548,  512,  512,  550,  550,
      516,  516,  510,  547,  553,  553,  549,  509,  513,  519,
      519,  508,  517,  555,  555,  557,  557,  523,  523,  559,
      559,  520,  525,  525,  561,  561,  507,  558,  506,  524,

      530,  530,  562,  564,  564,  502,  563,  500,  532,  532,
      496,  567,  567,  536,  536,  565,  533,  569,  569,  495,
      534,  568,  539,  539,  540,  540,  491,  541,  541,  563,
      570,  570,  546,  546,  534,  575,  575,  490,  576,  576,
      548,  548,  489,  547,  577,  577,  550,  550,  579,  579,
      553,  553,  549,  581,  581,  555,  555,  583,  583,  488,
      580,  557,  557,  585,  585,  582,  559,  559,  484,  584,
      561,  561,  483,  558,  587,  587,  564,  564,  562,  589,
      589,  482,  563,  481,  588,  567,  567,  480,  565,  569,
      569,  570,  570,  575,  575,  479,  576,  576,  594,  594,

      478,  563,  577,  577,  595,  595,  579,  579,  597,  597,
      581,  581,  598,  598,  583,  583,  596,  477,  580,  599,
      599,  476,  582,  585,  585,  475,  584,  587,  587,  589,
      589,  594,  594,  595,  595,  604,  604,  597,  597,  598,
      598,  599,  599,  604,  604,  596,  611,  611,  613,  613,
      616,  616,  611,  611,  474,  613,  613,  612,  473,  614,
      472,  617,  471,  612,  618,  618,  614,  619,  619,  620,
      620,  470,  621,  621,  622,  622,  616,  616,  624,  624,
      469,  625,  625,  626,  626,  623,  468,  617,  618,  618,
      467,  619,  619,  620,  620,  466,  621,  621,  627,  627,

      622,  622,  628,  628,  465,  629,  629,  630,  630,  624,
      624,  623,  625,  625,  626,  626,  627,  627,  628,  628,
      464,  629,  629,  631,  631,  630,  630,  631,  631,   14,
       14,   14,   14,   24,   24,   24,   24,   26,   26,   26,
       26,   27,   27,   27,   27,   28,   28,   28,   28,   31,
       31,   31,   31,   63,  463,   63,   63,   64,   64,  462,
       64,   65,   65,   65,  461,  460,  459,  458,  457,  456,
      455,  454,  451,  450,  449,  448,  447,  446,  444,  443,
      442,  441,  440,  439,  438,  437,  436,  435,  434,  433,
      432,  431,  428,  427,  426,  425,  424,  423,  422,  419,

      418,  417,  416,  415,  414,  411,  408,  407,  406,  405,
      402,  401,  400,  399,  398,  393,  390,  388,  387,  386,
      385,  382,  381,  380,  379,  375,  374,  373,  372,  371,
      366,  365,  361,  360,  359,  357,  356,  355,  354,  353,
      352,  351,  350,  348,  347,  346,  345,  344,  343,  340,
      339,  338,  335,  334,  333,  332,  331,  330,  329,  328,
      327,  326,  325,  321,  320,  319,  316,  315,  314,  313,
      311,  310,  308,  307,  306,  305,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  289,  288,  287,
      286,  285,  283,  282,  281,  280,  279,  278,  275,  274,

      272,  271,  270,  269,  268,  267,  263,  262,  258,  257,
      256,  255,  254,  253,  252,  251,  250,  249,  248,  247,
      246,  245,  243,  242,  241,  240,  239,  238,  237,  236,
      232,  231,  230,  229,  228,  227,  226,  225,  221,  220,
      219,  218,  217,  211,  210,  205,  204,  203,  202,  201,
      200,  199,  198,  197,  196,  195,  194,  193,  192,  191,
      190,  189,  188,  187,  186,  185,  184,  183,  180,  179,
      178,  177,  176,  175,  174,  173,  172,  171,  170,  169,
      168,  167,  166,  165,  164,  163,  160,  159,  158,  157,
      156,  155,  154,  151,  150,  149,  148,  147,  146,  145,

      144,  143,  142,  141,  140,  139,  138,  137,  133,  128,
      127,  126,  125,  124,  123,  122,   81,   81,  121,  120,
      119,  118,  117,  116,  114,  113,  112,  111,  110,  109,
      108,  107,  103,   98,   97,   96,   95,   94,   93,   82,
       62,   46,   79,   78,   75,   74,   47,   67,   66,   62,
       47,   46,  632,   25,   25,   25,   25,   13,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632
    } ;

static yyconst short int yy_chk[1109] =
    {   0,
        0,    1,    1,    0,    1,    1,    0,    1,    1,    1,
        1,    1,    0,    1,    3,    3,    4,    4,    9,    0,
        1,    2,    2,    9,    2,    2,   11,    2,    2,    2,
        2,    2,   10,    2,   12,   40,    0,   10,   11,   17,
        2,   17,    0,   20,  107,   20,   12,   15,   15,  107,
      609,   17,   20,   40,   44,   15,   44,   15,   46,   15,
       48,   48,   60,   44,   48,   46,   20,   58,  191,  191,
      606,   60,  605,  117,  117,   60,   15,   44,  603,   46,
       58,   15,   58,   58,  117,   15,   15,   73,   89,  137,
       15,   21,  207,  207,  137,  343,   73,   21,   91,  343,

       73,   89,   21,   89,   89,  161,  161,   91,  602,  162,
      162,   91,  162,  162,  163,  163,  161,   21,   21,  215,
      215,   21,  601,   21,   21,  163,   21,  600,   21,  593,
       21,   21,  166,  166,   21,   36,  167,  167,  223,  223,
      173,  173,  592,  166,  234,  234,  206,  206,  167,  206,
      206,  591,  173,  214,  214,   36,   36,  244,  244,   36,
      296,   36,   36,  296,   36,  214,   36,  350,   36,   36,
      173,  350,   36,   50,   50,  259,  259,   50,  167,   50,
       50,  365,   50,  590,   50,  365,   50,   50,  182,  182,
       50,  208,  208,  209,  209,  574,  209,  209,  212,  212,

      182,  573,  208,  213,  213,  306,  213,  213,  306,  212,
      572,  222,  222,  226,  226,  233,  233,  571,  240,  240,
      254,  254,  182,  222,  562,  226,  240,  233,  261,  261,
      240,  551,  254,  260,  260,  545,  260,  260,  264,  264,
      544,  264,  264,  265,  265,  266,  266,  271,  271,  273,
      273,  276,  276,  277,  277,  278,  278,  284,  284,  271,
      290,  290,  543,  276,  292,  292,  542,  278,  290,  304,
      304,  533,  290,  526,  292,  309,  309,  312,  312,  317,
      317,  304,  318,  318,  322,  322,  323,  323,  324,  324,
      325,  317,  521,  325,  328,  328,  329,  329,  323,  336,

      336,  338,  338,  348,  348,  352,  328,  518,  329,  338,
      358,  358,  352,  338,  352,  348,  352,  359,  359,  362,
      362,  367,  367,  368,  368,  369,  369,  370,  370,  359,
      376,  376,  515,  367,  378,  378,  514,  369,  376,  387,
      387,  509,  376,  508,  378,  389,  389,  403,  403,  404,
      404,  387,  411,  411,  412,  412,  507,  389,  506,  403,
      413,  413,  420,  420,  411,  429,  429,  430,  430,  445,
      445,  452,  452,  453,  453,  454,  454,  429,  461,  461,
      464,  464,  500,  452,  466,  466,  461,  454,  464,  498,
      461,  495,  464,  468,  468,  493,  466,  469,  469,  476,

      476,  479,  479,  481,  481,  468,  484,  484,  469,  485,
      485,  476,  491,  479,  490,  481,  486,  486,  484,  487,
      487,  492,  492,  494,  494,  489,  496,  496,  486,  492,
      483,  497,  497,  492,  496,  499,  499,  482,  496,  497,
      501,  501,  480,  497,  478,  499,  502,  502,  503,  503,
      504,  504,  501,  505,  505,  477,  505,  505,  502,  475,
      503,  504,  510,  510,  511,  511,  512,  512,  513,  513,
      516,  516,  474,  510,  517,  517,  511,  473,  512,  519,
      519,  472,  516,  520,  520,  522,  522,  523,  523,  524,
      524,  519,  525,  525,  527,  527,  471,  522,  470,  523,

      530,  530,  527,  531,  531,  467,  527,  465,  532,  532,
      463,  534,  534,  536,  536,  531,  532,  538,  538,  462,
      532,  534,  539,  539,  540,  540,  460,  540,  540,  538,
      541,  541,  546,  546,  539,  547,  547,  458,  547,  547,
      548,  548,  457,  546,  549,  549,  550,  550,  552,  552,
      553,  553,  548,  554,  554,  555,  555,  556,  556,  455,
      552,  557,  557,  558,  558,  554,  559,  559,  451,  556,
      561,  561,  450,  557,  563,  563,  564,  564,  561,  565,
      565,  449,  561,  448,  563,  567,  567,  447,  564,  569,
      569,  570,  570,  575,  575,  446,  575,  575,  576,  576,

      444,  569,  577,  577,  578,  578,  579,  579,  580,  580,
      581,  581,  582,  582,  583,  583,  578,  443,  579,  584,
      584,  442,  581,  585,  585,  441,  583,  587,  587,  589,
      589,  594,  594,  595,  595,  596,  596,  597,  597,  598,
      598,  599,  599,  604,  604,  595,  607,  607,  608,  608,
      610,  610,  611,  611,  440,  613,  613,  607,  439,  608,
      438,  610,  437,  611,  612,  612,  613,  612,  612,  614,
      614,  436,  614,  614,  615,  615,  616,  616,  617,  617,
      435,  617,  617,  619,  619,  615,  434,  616,  618,  618,
      433,  618,  618,  620,  620,  432,  620,  620,  621,  621,

      622,  622,  623,  623,  431,  623,  623,  625,  625,  624,
      624,  622,  624,  624,  626,  626,  627,  627,  628,  628,
      427,  628,  628,  629,  629,  630,  630,  631,  631,  633,
      633,  633,  633,  634,  634,  634,  634,  635,  635,  635,
      635,  636,  636,  636,  636,  637,  637,  637,  637,  638,
      638,  638,  638,  639,  426,  639,  639,  640,  640,  425,
      640,  641,  641,  641,  424,  423,  422,  418,  417,  416,
      415,  414,  410,  409,  408,  407,  406,  405,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  388,  386,  384,  383,  382,  381,  380,  379,  377,

      375,  374,  373,  372,  371,  366,  364,  363,  361,  360,
      357,  356,  355,  354,  353,  351,  349,  347,  346,  345,
      344,  342,  341,  340,  339,  334,  333,  332,  331,  330,
      327,  326,  321,  320,  319,  316,  315,  314,  313,  311,
      310,  308,  307,  305,  303,  302,  301,  298,  297,  295,
      294,  293,  291,  289,  288,  287,  286,  285,  283,  282,
      281,  280,  279,  275,  274,  272,  270,  269,  268,  267,
      263,  262,  258,  257,  256,  255,  253,  252,  251,  250,
      249,  248,  247,  246,  243,  242,  241,  239,  238,  237,
      236,  235,  232,  231,  230,  229,  228,  227,  225,  224,

      221,  220,  219,  218,  217,  216,  211,  210,  205,  204,
      203,  202,  201,  200,  199,  198,  197,  196,  195,  194,
      193,  192,  190,  189,  188,  187,  186,  185,  184,  183,
      181,  180,  179,  178,  177,  176,  175,  174,  172,  171,
      170,  169,  168,  165,  164,  160,  159,  158,  157,  156,
      155,  154,  153,  152,  151,  150,  149,  148,  147,  146,
      145,  144,  143,  142,  141,  140,  139,  138,  136,  135,
      134,  133,  132,  131,  130,  129,  128,  127,  126,  125,
      124,  123,  121,  120,  119,  118,  116,  115,  114,  113,
      112,  111,  110,  106,  105,  104,  103,  102,  101,  100,

       99,   98,   97,   96,   95,   94,   93,   92,   90,   88,
       87,   86,   85,   84,   83,   82,   81,   80,   79,   78,
       77,   76,   75,   74,   72,   71,   70,   69,   68,   66,
       62,   61,   59,   57,   56,   55,   54,   53,   52,   49,
       45,   43,   42,   41,   39,   38,   35,   33,   30,   23,
       19,   18,   13,    8,    7,    6,    5,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
#define INITIAL 0
/** @file parseosrl.l
 * 
 * @author  Robert Fourer,  Jun Ma, Kipp Martin, 
 * @version 1.0, 10/05/2005
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005, Robert Fourer, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"

#include <stdio.h>
#include <string.h>
#include "lexyaccparser.h"
#include "externalvars.h"


#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", osrltext);
#else     
	#define YY_PRINT ;
#endif

#include "parseosrl.tab.hpp"

     
#define attributetext 1

#define elementtext 2
 
#define osrlattributetext 3

#define comment 4

#define xmldeclaration 5

#line 910 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 51 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"



#line 1065 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 633 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1058 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 54 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 57 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 58 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; if(beginElementText == true){BEGIN elementtext; } return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 59 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; osrllval.ival = atoi(osrltext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 60 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; osrllval.dval = atof(osrltext); return(DOUBLE);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 61 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(RESULTHEADERSTART);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 67 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(RESULTHEADEREND);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 68 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN elementtext; return(SERVICEURISTART);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 69 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(SERVICEURISTART);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 70 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 71 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN elementtext; return(SERVICENAMESTART);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 72 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(SERVICENAMESTART);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN elementtext; return(INSTANCENAMESTART);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(INSTANCENAMESTART);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN elementtext; return(JOBIDSTART);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(JOBIDSTART);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN elementtext; return(HEADERMESSAGESTART);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(HEADERMESSAGESTART);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(HEADERMESSAGEEND);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 84 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 85 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 87 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(RESULTDATASTART);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 88 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(RESULTDATAEND);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 93 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 94 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 96 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 97 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 99 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 100 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 102 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 103 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 105 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 106 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 107 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 108 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 110 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 111 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 112 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 113 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 115 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 116 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 117 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 118 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 120 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  BEGIN elementtext; return(MESSAGESTART);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 121 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(MESSAGESTART);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 122 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 124 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 125 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 127 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 128 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 129 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 130 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 131 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJECTIVEIDXATT);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 132 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 133 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN attributetext; return(TYPEATT);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 134 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN attributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 135 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN attributetext; return(NAMEATT);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 137 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICEURISTARTANDEND);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 138 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICENAMESTARTANDEND);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 139 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTARTANDEND);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 140 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(JOBIDSTARTANDEND);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 141 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(HEADERMESSAGESTARTANDEND);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 142 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(RESULTDATASTARTANDEND);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 149 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
BEGIN comment;
	YY_BREAK
case 73:
#line 151 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
case 74:
YY_RULE_SETUP
#line 151 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 152 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
BEGIN 0;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 154 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 77:
#line 156 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
case 78:
YY_RULE_SETUP
#line 156 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 158 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
BEGIN 0;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 163 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{ YY_PRINT;  osrllval.charval = strdup(osrltext); BEGIN 0;  return(ELEMENTTEXT); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 164 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;    osrllval.charval = strdup(osrltext);
							BEGIN 0;  return(ATTRIBUTETEXT);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 167 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  BEGIN 0; osrllval.charval = strdup(osrltext); return(OSRLATTRIBUTETEXT);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 170 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
{ osrlerror( "ecountered a spurious character in the lexer");}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 175 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"
ECHO;
	YY_BREAK
#line 1571 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(attributetext):
			case YY_STATE_EOF(elementtext):
			case YY_STATE_EOF(osrlattributetext):
			case YY_STATE_EOF(comment):
			case YY_STATE_EOF(xmldeclaration):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 633 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 633 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 632);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 175 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosrl.l"



