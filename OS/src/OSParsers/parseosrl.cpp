#line 2 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.cpp"

#line 4 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osrllex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 85
#define YY_END_OF_BUFFER 86
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[733] =
    {   0,
        1,    1,    0,    0,    0,    0,   83,   83,    0,    0,
        0,    0,   86,   84,    1,    1,    2,   84,   72,   84,
        4,   72,   84,    3,   72,   82,   85,   81,   83,   74,
       75,   74,   78,   79,   78,    1,    0,    0,    3,    0,
        0,    0,    0,    0,    1,   72,   72,   72,   72,   72,
       72,    0,    4,    0,    5,    6,   72,    4,   72,    0,
        0,   77,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   72,   82,   81,   83,    0,   80,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       72,   72,   72,   72,   72,   72,    5,    0,    0,    0,

        5,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    5,   76,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   72,   72,   72,   72,   72,   72,    5,    5,   73,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   48,    0,    0,    0,    0,
        0,   44,    0,    0,    0,    0,    0,    0,    0,    0,
       40,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   72,   72,   72,   72,   72,   72,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       62,    0,    0,    0,    0,    0,    0,   72,   72,   72,
       72,   72,    0,   50,    0,    0,    0,    0,    0,    0,
        0,   46,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   42,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    7,   55,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   62,    0,   65,

        0,    0,    0,   63,   72,   72,   72,   50,    0,    0,
        0,    0,    0,    0,   46,    0,    0,    0,    8,    0,
        0,    0,    0,    0,    0,   42,    0,    0,    0,    0,
        0,    0,    0,   20,    0,    0,    0,    0,    0,    0,
       34,   36,    0,    0,    0,    0,    0,    0,    0,    0,
       65,    0,    0,   63,   72,   72,   72,    0,    0,    0,
        0,    0,   22,    0,    0,    0,    8,    0,   56,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   69,
       20,   21,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   72,   72,

       72,    0,    0,    0,    0,   22,    0,    0,    0,   56,
        0,    0,    0,    0,    0,   35,    0,   37,    0,    0,
        0,    0,    0,    0,    0,   23,    0,    0,    0,    0,
        0,    0,   32,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   72,   72,   72,   72,
       72,   72,    0,    0,    0,    0,    0,   25,    0,    0,
        0,    0,    0,    0,    0,   35,   37,    0,    0,    0,
        0,    0,   70,   23,   24,    0,    0,    0,    0,    0,
        0,   41,    0,   25,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   72,   72,   72,   72,   72,   72,

        0,    0,    0,    0,   25,    0,    0,    0,    0,    0,
        0,    0,   33,    0,    0,   38,    0,    0,   45,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   72,   72,   72,   72,   72,   72,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       33,    0,   43,   49,    0,    0,    0,    0,    0,   28,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   72,   72,   72,   72,
       72,   72,    0,    0,   39,    0,    0,    0,   47,    0,
        0,   29,    0,    0,    0,   13,   43,    0,    0,   30,

       71,   28,    0,    0,    0,   14,   66,   11,   12,    0,
        0,    0,   64,    0,    0,    0,    0,    0,    0,   72,
       72,   72,   72,   72,    0,   51,   39,    0,    0,   47,
        0,   29,    0,    0,   16,   13,   26,    0,    0,   17,
        0,    9,   67,   14,   15,    0,   64,    0,    0,    0,
        0,    0,   61,   72,   72,   72,   72,   51,    0,    0,
       19,    0,   31,    0,   10,   16,   68,   17,   18,    9,
        0,    0,    0,    0,   61,   72,   72,   72,   72,    0,
       27,   19,   31,   10,    0,    0,    0,    0,   72,   72,
       72,   72,   27,    0,    0,    0,    0,   72,   72,   72,

       72,    0,    0,    0,    0,    0,    0,   72,   72,   72,
       72,    0,    0,    0,    0,   57,    0,   58,   72,   72,
        0,    0,    0,   60,   57,   58,   72,    0,   59,   60,
       59,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    1,    1,    1,    7,    1,
        1,    1,    8,    1,    9,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    1,   14,
       15,   16,   17,    1,   13,   13,   18,   19,   20,   21,
       13,   22,   23,   13,   13,   13,   13,   24,   25,   13,
       13,   26,   27,   13,   28,   29,   13,   13,    1,    1,
        1,    1,    1,    1,   13,    1,   30,   31,   32,   33,

       34,   35,   36,   37,   38,   39,   13,   40,   41,   42,
       43,   44,   13,   45,   46,   47,   48,   49,   13,   50,
       51,   52,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    2,    2,    2,    1,    3,    3,    1,    1,    2,
        2,    2,    2,    4,    1,    5,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2
    } ;

static yyconst flex_int16_t yy_base[743] =
    {   0,
        0,   23,   12,   14, 1790, 1789, 1786, 1785,   33,   38,
       40,   41, 1800, 1805,   57,  103, 1805,   39,   53, 1783,
      149,   61,  179, 1805,   68,    0, 1805,    0,    0, 1805,
     1805, 1789, 1805, 1805, 1781,    0, 1780,  218, 1805, 1761,
     1761,   18, 1762, 1741,  266,   72,   77,   98,  110,   81,
      113, 1779,  114, 1766,   40, 1805,  142,    0,  158, 1780,
      282, 1805, 1745, 1739, 1752, 1743, 1741, 1749,  141, 1748,
       51, 1751,  161,    0,    0,    0, 1764, 1805, 1738, 1736,
     1734, 1742, 1741,   95, 1728, 1723, 1731, 1730, 1731, 1725,
      187,  193,  196,  224,  261,  228,  101,  192, 1747, 1755,

      264, 1757, 1722, 1716, 1729, 1720, 1718, 1726,  195, 1725,
      146, 1728, 1715, 1726, 1713, 1708, 1722, 1706, 1707, 1693,
     1690, 1654, 1644, 1641, 1628, 1632,   36,  273, 1805, 1621,
     1603, 1617, 1586, 1577, 1572, 1580,  286, 1574, 1576, 1570,
     1569,  312,  334,  282,  323,  341,  346, 1581, 1805, 1805,
     1545, 1556, 1532, 1526, 1538, 1520, 1516, 1500, 1500, 1507,
     1494, 1494, 1493, 1502,  134, 1479, 1484, 1488, 1474, 1495,
     1463, 1473, 1466, 1463, 1459, 1441, 1425, 1423, 1422, 1394,
     1401, 1391, 1386, 1397, 1373, 1366, 1364, 1352,  337,  361,
      367, 1362, 1362,  370,  366,  387,  393,  400,  403,  414,

      390, 1353, 1354, 1337, 1353, 1329,  429, 1332, 1326, 1330,
     1304, 1289, 1284, 1270, 1268,  436, 1264, 1281, 1257, 1271,
     1277, 1265, 1246, 1236,  153, 1224, 1228, 1223, 1210, 1208,
     1220, 1223, 1202, 1212, 1219, 1207, 1193, 1194, 1192,  440,
      243,  446,  451, 1171, 1168,  462,  465,  468,  483,  479,
      489,  505,  509,  308, 1166, 1183, 1164, 1168, 1178, 1160,
      524,  527, 1153, 1129,  530, 1124, 1124, 1125, 1108, 1106,
     1115,  535,  539, 1118, 1088, 1102, 1100, 1087,  545, 1077,
     1065, 1070,  550, 1805, 1060, 1073, 1065, 1055, 1054, 1067,
     1066, 1053,  555, 1048, 1036, 1040, 1012,  560,  563,  570,

     1023, 1008,  573,  579,  576,  582,  583,  598,  995, 1002,
     1000,  983,  601,  988,  606,  951,  956,  609,  612,  620,
      946,  958,  948,  930,  929,  624,  935,  931,  917,  914,
      921,  627,  923,  630,  904,  898,  882,   34,  899,  887,
     1805, 1805,  889,  885,  888,  637,  878,  172,  877,  858,
      643,  862,  843,  646,  640,  650,  656,  860,  842,  835,
      839,  672,  675,  834,  828,  802,  678,  687,  690,  213,
      802,  792,  693,  696,  787,  786,  774,  788,  779, 1805,
      704, 1805,  711,  759,  775,  771,  764,  115,  747,  740,
      738,  736,  714,  739,  125,  725,  644,  727,  709,  746,

      468,  721,  710,  729,  720,  729,  733,  701,  704,  736,
      699,  694,  174,  684,  739,  742,  749,  764,  690,  679,
      685,  663,  680,  774,  686,  777,  667,  639,  637,  653,
      638,  639, 1805,  617,  780,  636,  784,  612,  627,  629,
      594,  592,  588,  575,  576,  572,  782,  783,  787,  794,
      799,  800,  549,  555,  541,  562,  828,  836,  534,  513,
      508,  520,  515,  518,  839,  843,  846,  489,  476,  476,
      488,  487, 1805,  849, 1805,  469,  476,  480,  471,  460,
      473, 1805,  854,  857,  462,  459,  442,  453,  433,  431,
      423,  420,  414,  423,  852,  853,  857,  864,  868,  873,

      404,  395,  397,  396,  897,  378,  384,  391,  386,  373,
      382,  906,  912,  915,  353, 1805,  341,  346, 1805,  341,
      921,  349,  347,  924,  338,  939,  343,  942,  945,  316,
      326,  311,  317,  297,  948,  954,  869,  957,  961,  962,
      296,  976,  287,  289,  981,  286,  985,  292,  285, 1000,
     1004, 1007, 1011, 1805,  269,  272,  263, 1015,  287, 1018,
      252, 1025, 1031,  280, 1035,  257, 1041, 1048, 1051, 1056,
     1059,  240,  254,  232,  248, 1066, 1071, 1077, 1078, 1088,
     1095, 1112, 1115, 1118, 1074,  227,  232, 1134, 1137,  218,
     1140, 1143,  210, 1149, 1155, 1158, 1164,  207, 1170, 1805,

     1805, 1173, 1176, 1180,  236, 1185, 1805, 1191, 1805, 1198,
     1201, 1204, 1216,  204,  184,  185,  188, 1219, 1222, 1225,
     1229, 1233, 1244, 1248, 1263, 1270, 1278,  168, 1281, 1284,
     1287, 1290, 1296, 1302, 1305, 1311, 1805, 1317,  194, 1320,
     1323, 1327, 1805, 1333, 1805, 1338, 1341,  179,  148,  134,
      135, 1344, 1353, 1347, 1351, 1357, 1358, 1376, 1379, 1383,
     1388, 1399, 1402, 1405, 1408, 1414, 1805, 1420, 1805, 1423,
       99,   79,   85,   82, 1426, 1429, 1430, 1436, 1439, 1432,
     1451, 1454, 1458, 1461,   67,   69,   56,   50, 1456, 1460,
     1465, 1471, 1484,   33,   32, 1493, 1498, 1472, 1500, 1512,

     1527,    8, 1533, 1547, 1550, 1556, 1561, 1559, 1574, 1580,
     1595, 1577, 1598, 1612, 1618, 1624, 1627, 1633, 1636, 1642,
     1639, 1657, 1663, 1669, 1672, 1675, 1678, 1681, 1693, 1696,
     1699, 1805, 1703, 1708, 1713, 1718, 1723, 1728, 1732, 1737,
     1742, 1747
    } ;

static yyconst flex_int16_t yy_def[743] =
    {   0,
      733,  733,  734,  734,  735,  735,  736,  736,  737,  737,
      738,  738,  732,  732,  732,  739,  732,  732,  739,  732,
      739,  739,  732,  732,  739,  740,  732,  741,  742,  732,
      732,  732,  732,  732,  732,   15,  732,  732,  732,  732,
      732,  732,  732,  732,  739,  739,   21,   21,   21,   21,
       21,  732,  732,  732,   21,  732,   21,   21,   21,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,   21,  740,  741,  742,  732,  732,   61,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
       21,   21,   21,   21,   21,   21,  732,  732,  732,  732,

       21,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,   21,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,   21,  739,   21,   21,   21,   21,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,   21,  739,  739,   21,   21,  739,

      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  739,  739,  739,
      739,  739,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,

      732,  732,  732,  732,  739,  739,  739,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  739,  739,  739,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  739,  739,

       21,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,   21,   21,   21,   21,
       21,   21,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,   21,   21,   21,   21,   21,   21,

      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  739,  739,   21,   21,   21,   21,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  739,  739,  739,  739,
      739,  739,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,

      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  739,
      739,  739,  739,  739,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  739,  739,  739,  739,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  739,  739,  739,   21,  732,
      732,  732,  732,  732,  732,  732,  732,  732,   21,   21,
       21,   21,  732,  732,  732,  732,  732,   21,   21,  739,

      739,  732,  732,  732,  732,  732,  732,  739,  739,  739,
      739,  732,  732,  732,  732,  732,  732,  732,  739,  739,
      732,  732,  732,  732,  732,  732,  739,  732,  732,  732,
      732,    0,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732
    } ;

static yyconst flex_int16_t yy_nxt[1858] =
    {   0,
       14,   15,   16,   16,   14,   17,   17,   14,   18,   19,
       20,   21,  732,   23,   14,   24,   14,   27,   27,   27,
       27,  732,   25,   14,   15,   16,   16,   14,   17,   17,
       14,   18,   19,   20,   21,   31,   23,   14,   24,   14,
       31,   32,   34,   34,  732,   25,   32,   87,   52,   46,
       53,   55,  386,  712,  732,  387,   35,   35,   36,   36,
       36,   54,  732,  732,   55,   88,  732,   37,  732,  732,
       38,  732,   39,  732,  732,  180,  732,  703,  732,  702,
      181,  732,  732,  732,  124,  732,   46,  732,   46,   40,
       46,   73,   46,  125,   41,  697,   46,  126,   42,   43,

       46,  696,  695,   44,   36,   45,   45,   46,  694,   46,
       91,   95,   97,   37,   46,  688,   38,   46,   39,   46,
       98,   46,   46,   52,   46,   53,  687,  686,  135,   46,
       92,   46,   46,   98,   98,   47,  685,  125,  431,   93,
       48,  126,  432,   46,   49,   50,   46,   98,  439,   51,
      732,   46,  440,   55,  283,  283,  283,   94,   57,  732,
       58,   46,  732,   96,  732,  100,  100,   46,   59,  101,
       46,  119,   46,  215,  674,   46,  673,   46,  216,  162,
       46,  128,   59,   60,  120,  672,  121,  122,  163,   61,
      394,   46,  164,  387,   46,   62,   46,  463,   46,  100,

      100,  464,   46,  148,   46,   46,   46,   46,  671,  667,
       63,   64,   46,  659,   65,   46,   66,   67,  651,   68,
       46,   69,  650,   70,   71,  157,   46,   72,   79,   46,
      649,  411,  142,   46,  412,   46,  144,   46,  158,   46,
      159,  160,  143,   46,  298,  298,  298,   46,  648,   63,
       64,  643,  637,   65,  633,   80,   81,   46,   82,  631,
       69,   46,   83,   84,  145,  629,   72,   36,   45,   45,
       46,  147,   46,   46,  628,  101,   37,  617,  616,   38,
       46,   39,   46,   46,   46,  615,  614,  189,  189,  189,
      610,   46,   46,   46,   46,  607,  603,   46,   47,  146,

      190,   46,  601,   48,  600,  599,   46,   49,   50,  308,
      308,  308,   51,  103,  104,  197,  598,  105,  594,  106,
      107,   46,  108,   46,  109,  593,  110,  111,  590,  587,
      112,   46,   46,  586,   46,  189,  196,  196,  189,  189,
      189,  583,   46,  195,  732,   46,  576,  732,  190,  732,
       46,  190,   46,  198,  575,   46,   46,   46,  574,  573,
       46,  572,  240,  240,  240,   46,  241,  241,  242,  242,
      242,  246,  246,  246,  199,   46,  568,   46,  566,  200,
      562,  243,  561,  557,  247,   46,  556,  555,  189,  196,
      196,  253,  253,  253,  242,  249,  249,  732,  554,   46,

      732,  190,  732,  732,  550,  254,  732,  243,  732,   46,
      248,   46,   46,  549,   46,  246,  252,  252,  548,   46,
      547,  546,   46,  545,  732,  544,  543,  732,  247,  732,
      261,  261,  261,  250,  251,  255,   46,  272,  272,  272,
      542,  240,  240,  240,  262,  241,  241,  242,  242,  242,
      541,  273,  299,  299,  299,  534,  300,  300,  533,  532,
      243,  531,  263,  246,  246,  246,  303,  303,  303,  732,
      304,  304,  530,  274,  529,  528,  247,   46,  732,   46,
      732,  732,  527,  732,  242,  249,  249,   46,  526,  732,
      732,  525,  732,  732,  732,  524,  732,  243,  732,  732,

      523,  452,  732,  522,  732,  305,  246,  252,  252,  521,
      253,  253,  253,  520,  519,  732,  518,  517,  732,  247,
      732,  516,  515,  306,  254,  261,  261,  261,  315,  315,
      315,  318,  318,  318,  514,  307,  272,  272,  272,  262,
      326,  326,  326,  511,  510,  319,  332,  332,  332,  509,
      273,  283,  283,  283,  508,  333,  346,  346,  346,  507,
      334,  298,  298,  298,  299,  299,  299,  506,  300,  300,
      334,  351,  351,  351,  303,  303,  303,  732,  304,  304,
      354,  354,  354,  732,  732,  504,  732,  503,  502,  732,
      501,  732,  732,  732,  494,  732,  732,  732,  732,  308,

      308,  308,  362,  362,  362,  493,  356,  315,  315,  315,
      318,  318,  318,  367,  367,  367,  363,  492,  491,  355,
      357,  368,  368,  368,  319,  326,  326,  326,  332,  332,
      332,  381,  381,  381,  490,  369,  489,  333,  346,  346,
      346,  732,  334,  382,  351,  351,  351,  354,  354,  354,
      732,  732,  334,  732,  488,  732,  487,  732,  486,  485,
      732,  442,  482,  732,  481,  732,  732,  480,  443,  732,
      444,  732,  445,  362,  362,  362,  406,  406,  406,  367,
      367,  367,  479,  478,  400,  477,  399,  363,  368,  368,
      368,  410,  410,  410,  415,  415,  415,  417,  417,  417,

      476,  473,  369,  472,  401,  381,  381,  381,  416,  471,
      732,  418,  424,  424,  424,  437,  437,  437,  470,  732,
      469,  425,  732,  468,  732,  465,  426,  462,  461,  426,
      406,  406,  406,  460,  457,  457,  457,  410,  410,  410,
      415,  415,  415,  466,  466,  466,  447,  732,  458,  459,
      417,  417,  417,  456,  416,  455,  732,  454,  453,  732,
      446,  732,  441,  448,  418,  467,  467,  467,  438,  436,
      449,  435,  450,  434,  451,  424,  424,  424,  474,  474,
      474,  483,  483,  483,  425,  437,  437,  437,  433,  426,
      475,   46,   46,   46,   46,  484,   46,  430,   46,  426,

      429,   46,   46,   46,  428,   46,   46,  427,   46,   46,
       46,   46,  423,   46,  422,   46,   46,  497,   46,   46,
       46,  421,  500,  420,  495,  496,  419,   46,  499,  457,
      457,  457,   46,   46,  414,  413,  498,  505,  505,  505,
      512,  512,  512,  458,  466,  466,  466,  467,  467,  467,
      474,  474,  474,  409,  513,  483,  483,  483,  505,  505,
      505,   46,   46,   46,   46,  408,   46,  407,   46,  484,
      405,   46,   46,   46,  404,   46,   46,   46,   46,   46,
       46,  403,   46,   46,   46,   46,   46,   46,   46,  402,
       46,  398,   46,  535,  536,  537,  397,   46,  505,  505,

      505,   46,  579,  538,  396,  540,   46,  512,  512,  512,
      395,  393,  539,  551,  551,  551,  552,  552,  552,  392,
      391,  513,  558,  558,  558,  563,  563,  563,  390,  389,
      553,  559,  388,  385,  564,  384,  560,  383,  380,  565,
      567,  567,  567,  569,  569,  569,  570,  570,  570,  570,
      577,  577,  379,  378,  560,  732,  377,  565,  732,  571,
      376,  732,  571,  732,  732,  375,   46,  732,   46,  732,
       46,   46,   46,   46,  374,  373,   46,  584,  584,  584,
       46,   46,  588,  588,  588,  372,  591,  591,  591,  371,
       46,  585,  370,  366,   46,   46,  589,  365,  581,  578,

      592,  595,  595,  595,  580,  551,  551,  551,  552,  552,
      552,  582,  597,  597,  597,  596,  558,  558,  558,  602,
      602,  602,  553,  364,  361,  559,  604,  604,  604,  360,
      560,  359,  563,  563,  563,  605,  608,  608,  608,  358,
      606,  564,  567,  567,  567,  353,  565,  352,  609,  611,
      611,  611,  569,  569,  569,  350,  560,  570,  570,  570,
      612,  612,  612,  606,  613,  613,  565,  618,  618,  618,
      571,  349,  570,  577,  577,  627,  627,  627,  732,  732,
      619,  732,  348,  347,  732,  571,  732,  732,  732,  732,
      732,  732,  732,  732,  345,  344,  732,  343,  732,  342,

      341,  732,  340,  732,  339,  732,  338,  337,  732,  621,
      732,  336,  335,  618,  624,  624,  625,  625,  625,  584,
      584,  584,  732,  620,  623,  732,  619,  732,  331,  330,
      626,  329,  328,  585,  622,  588,  588,  588,  630,  630,
      630,  591,  591,  591,  632,  632,  632,  327,  325,  589,
      634,  634,  634,  324,  323,  592,  595,  595,  595,  636,
      636,  636,  322,  321,  635,  597,  597,  597,  320,  317,
      596,  638,  638,  638,  602,  602,  602,  641,  641,  641,
      639,  604,  604,  604,  316,  640,  644,  644,  644,  314,
      605,  642,  608,  608,  608,  606,  313,  312,  645,  646,

      646,  646,  611,  611,  611,  612,  612,  612,  311,  613,
      613,  310,  309,  640,  302,  301,  606,  647,  647,  647,
      618,  618,  618,  652,  652,  652,  732,  653,  653,  297,
      732,  296,  295,  619,  732,  732,  294,  293,  732,  732,
      732,  292,  732,  732,  732,  732,  732,  291,  732,  618,
      624,  624,  290,  289,  732,  288,  287,  732,  732,  732,
      286,  732,  619,  732,  625,  625,  625,  285,  284,  654,
      656,  658,  658,  658,  657,  655,  282,  281,  626,  627,
      627,  627,  660,  660,  660,  630,  630,  630,  662,  662,
      662,  632,  632,  632,  280,  279,  661,  664,  664,  664,

      278,  277,  663,  634,  634,  634,  666,  666,  666,  276,
      275,  665,  636,  636,  636,  271,  270,  635,  638,  638,
      638,  668,  668,  668,  641,  641,  641,  639,  670,  670,
      670,  269,  640,  669,  644,  644,  644,  268,  642,  646,
      646,  646,  647,  647,  647,  652,  652,  652,  732,  653,
      653,  267,  732,  640,  675,  675,  675,  732,  732,  732,
      732,  732,  732,  266,  732,  265,  732,  732,  732,  264,
      732,  732,  732,  732,  260,  259,  676,  658,  658,  658,
      680,  680,  680,  258,  660,  660,  660,  257,  677,  682,
      682,  682,  256,  245,  681,  244,  239,  679,  661,  678,

      662,  662,  662,  683,  683,  683,  664,  664,  664,  684,
      684,  684,  238,  237,  663,  666,  666,  666,  236,  235,
      665,  668,  668,  668,  670,  670,  670,  675,  675,  675,
      732,  732,  234,  680,  680,  680,  233,  732,  232,  732,
      732,  231,  732,  732,  732,  732,  732,  681,   46,  732,
       46,  732,  693,  693,  693,  682,  682,  682,   46,  683,
      683,  683,  684,  684,  684,   46,  689,   46,  230,   46,
      229,   46,  692,  228,   46,   46,   46,  691,  690,   46,
       46,   46,   46,   46,   46,  693,  693,  693,  227,   46,
       46,   46,  226,  699,  704,  704,  704,  698,   46,  706,

      706,  706,  225,  224,   46,   46,  223,  705,  222,   46,
      700,   46,  707,  704,  710,  710,  701,  221,  708,   46,
      220,  219,  732,  218,  217,  732,  705,  732,  706,  711,
      711,  214,  213,   46,  713,  713,  713,  732,  212,  211,
      732,  707,  732,  210,  209,  709,  208,  714,  704,  704,
      704,  715,  715,  715,  207,  716,  716,  706,  706,  706,
      732,  705,  717,  717,  717,  206,  718,  718,  205,  732,
      707,  204,  732,  203,  732,  713,  720,  720,  721,  721,
      721,  704,  710,  710,  732,  202,  201,  732,  714,  732,
      732,  722,  148,  732,  705,  732,  706,  711,  711,  713,

      713,  713,  194,  193,  719,  732,  192,  191,  732,  707,
      732,  188,  714,  723,  723,  723,  187,  724,  724,  715,
      715,  715,  186,  716,  716,  725,  725,  725,  717,  717,
      717,  185,  718,  718,  726,  726,  726,  721,  727,  727,
      721,  721,  721,  713,  720,  720,  732,  184,  183,  732,
      722,  732,  732,  722,  182,  732,  714,  732,  728,  728,
      728,  179,  729,  729,  723,  723,  723,  178,  724,  724,
      730,  730,  730,  725,  725,  725,  726,  726,  726,  721,
      727,  727,  728,  728,  728,  177,  729,  729,  732,  176,
      175,  732,  722,  732,  731,  731,  731,  730,  730,  730,

      731,  731,  731,   22,   22,   22,   22,   22,   26,   26,
       26,   26,   26,   28,   28,   28,   28,   28,   29,   29,
       29,   29,   29,   30,   30,   30,   30,   30,   33,   33,
       33,   33,   33,   46,  174,   46,   46,   74,   74,  173,
       74,   74,   75,   75,   75,  172,   75,   76,   76,   76,
       76,  171,  170,  169,  168,  167,  166,  165,  161,  156,
      155,  154,  153,  152,  151,  150,  148,  149,  141,  140,
      139,  138,  137,  136,  134,  133,  132,  131,  130,  129,
      127,  123,  118,  117,  116,  115,  114,  113,  102,   99,
       97,   90,   89,   86,   85,   56,   78,   77,   56,  732,

       27,   27,   27,   27,   13,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732
    } ;

static yyconst flex_int16_t yy_chk[1858] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    0,    1,    1,    1,    1,    3,    3,    4,
        4,    0,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    9,    2,    2,    2,    2,
       10,    9,   11,   12,    0,    2,   10,   42,   18,   55,
       18,   55,  338,  702,   19,  338,   11,   12,   15,   15,
       15,   18,   22,   19,   19,   42,   19,   15,   19,   25,
       15,   22,   15,   46,   22,  127,   22,  695,   25,  694,
      127,   25,   46,   25,   71,   46,   47,   46,   47,   15,
       50,   25,   50,   71,   15,  688,   47,   71,   15,   15,

       50,  687,  686,   15,   16,   16,   16,   48,  685,   48,
       47,   50,   97,   16,   50,  674,   16,   48,   16,   49,
       97,   49,   51,   53,   51,   53,  673,  672,   84,   49,
       48,   48,   51,   53,   97,   16,  671,   84,  388,   49,
       16,   84,  388,   49,   16,   16,   51,   53,  395,   16,
       21,   57,  395,   57,  225,  225,  225,   49,   21,   21,
       21,   57,   21,   51,   21,   59,   59,   59,   21,   59,
       73,   69,   73,  165,  651,   57,  650,   59,  165,  111,
       73,   73,   21,   23,   69,  649,   69,   69,  111,   23,
      348,   59,  111,  348,   73,   23,   91,  413,   91,   98,

       98,  413,   92,   98,   92,   93,   91,   93,  648,  639,
       23,   23,   92,  628,   23,   93,   23,   23,  617,   23,
       91,   23,  616,   23,   23,  109,   92,   23,   38,   93,
      615,  370,   91,   94,  370,   94,   93,   96,  109,   96,
      109,  109,   92,   94,  241,  241,  241,   96,  614,   38,
       38,  605,  598,   38,  593,   38,   38,   94,   38,  590,
       38,   96,   38,   38,   94,  587,   38,   45,   45,   45,
       95,   96,   95,  101,  586,  101,   45,  575,  574,   45,
       95,   45,  128,  101,  128,  573,  572,  137,  137,  137,
      566,  144,  128,  144,   95,  564,  561,  101,   45,   95,

      137,  144,  559,   45,  557,  556,  128,   45,   45,  254,
      254,  254,   45,   61,   61,  144,  555,   61,  549,   61,
       61,  142,   61,  142,   61,  548,   61,   61,  546,  544,
       61,  142,  145,  543,  145,  143,  143,  143,  189,  189,
      189,  541,  145,  142,  143,  142,  534,  143,  143,  143,
      146,  189,  146,  145,  533,  147,  145,  147,  532,  531,
      146,  530,  190,  190,  190,  147,  190,  190,  191,  191,
      191,  194,  194,  194,  146,  195,  527,  195,  525,  147,
      523,  191,  522,  520,  194,  195,  518,  517,  196,  196,
      196,  201,  201,  201,  197,  197,  197,  196,  515,  195,

      196,  196,  196,  197,  511,  201,  197,  197,  197,  198,
      195,  198,  199,  510,  199,  200,  200,  200,  509,  198,
      508,  507,  199,  506,  200,  504,  503,  200,  200,  200,
      207,  207,  207,  198,  199,  201,  199,  216,  216,  216,
      502,  240,  240,  240,  207,  240,  240,  242,  242,  242,
      501,  216,  243,  243,  243,  494,  243,  243,  493,  492,
      242,  491,  207,  246,  246,  246,  247,  247,  247,  248,
      247,  247,  490,  216,  489,  488,  246,  401,  248,  401,
      250,  248,  487,  248,  249,  249,  249,  401,  486,  250,
      251,  485,  250,  249,  250,  481,  249,  249,  249,  251,

      480,  401,  251,  479,  251,  248,  252,  252,  252,  478,
      253,  253,  253,  477,  476,  252,  472,  471,  252,  252,
      252,  470,  469,  250,  253,  261,  261,  261,  262,  262,
      262,  265,  265,  265,  468,  251,  272,  272,  272,  261,
      273,  273,  273,  464,  463,  265,  279,  279,  279,  462,
      272,  283,  283,  283,  461,  279,  293,  293,  293,  460,
      279,  298,  298,  298,  299,  299,  299,  459,  299,  299,
      293,  300,  300,  300,  303,  303,  303,  305,  303,  303,
      304,  304,  304,  306,  307,  456,  305,  455,  454,  305,
      453,  305,  306,  307,  446,  306,  307,  306,  307,  308,

      308,  308,  313,  313,  313,  445,  306,  315,  315,  315,
      318,  318,  318,  319,  319,  319,  313,  444,  443,  305,
      307,  320,  320,  320,  318,  326,  326,  326,  332,  332,
      332,  334,  334,  334,  442,  320,  441,  332,  346,  346,
      346,  355,  332,  334,  351,  351,  351,  354,  354,  354,
      355,  356,  346,  355,  440,  355,  439,  357,  438,  436,
      356,  397,  434,  356,  432,  356,  357,  431,  397,  357,
      397,  357,  397,  362,  362,  362,  363,  363,  363,  367,
      367,  367,  430,  429,  356,  428,  355,  362,  368,  368,
      368,  369,  369,  369,  373,  373,  373,  374,  374,  374,

      427,  425,  368,  423,  357,  381,  381,  381,  373,  422,
      399,  374,  383,  383,  383,  393,  393,  393,  421,  399,
      420,  383,  399,  419,  399,  414,  383,  412,  411,  393,
      406,  406,  406,  409,  407,  407,  407,  410,  410,  410,
      415,  415,  415,  416,  416,  416,  399,  400,  407,  408,
      417,  417,  417,  405,  415,  404,  400,  403,  402,  400,
      398,  400,  396,  400,  417,  418,  418,  418,  394,  392,
      400,  391,  400,  390,  400,  424,  424,  424,  426,  426,
      426,  435,  435,  435,  424,  437,  437,  437,  389,  424,
      426,  447,  448,  447,  448,  435,  449,  387,  449,  437,

      386,  447,  448,  450,  385,  450,  449,  384,  451,  452,
      451,  452,  379,  450,  378,  447,  448,  449,  451,  452,
      449,  377,  452,  376,  447,  448,  375,  450,  451,  457,
      457,  457,  451,  452,  372,  371,  450,  458,  458,  458,
      465,  465,  465,  457,  466,  466,  466,  467,  467,  467,
      474,  474,  474,  366,  465,  483,  483,  483,  484,  484,
      484,  495,  496,  495,  496,  365,  497,  364,  497,  483,
      361,  495,  496,  498,  360,  498,  497,  499,  537,  499,
      537,  359,  500,  498,  500,  495,  496,  499,  537,  358,
      497,  353,  500,  495,  496,  497,  352,  498,  505,  505,

      505,  499,  537,  498,  350,  500,  500,  512,  512,  512,
      349,  347,  499,  513,  513,  513,  514,  514,  514,  345,
      344,  512,  521,  521,  521,  524,  524,  524,  343,  340,
      514,  521,  339,  337,  524,  336,  521,  335,  333,  524,
      526,  526,  526,  528,  528,  528,  529,  529,  529,  535,
      535,  535,  331,  330,  526,  536,  329,  528,  535,  529,
      328,  535,  535,  535,  536,  327,  538,  536,  538,  536,
      539,  540,  539,  540,  325,  324,  538,  542,  542,  542,
      539,  540,  545,  545,  545,  323,  547,  547,  547,  322,
      538,  542,  321,  317,  539,  540,  545,  316,  539,  536,

      547,  550,  550,  550,  538,  551,  551,  551,  552,  552,
      552,  540,  553,  553,  553,  550,  558,  558,  558,  560,
      560,  560,  552,  314,  312,  558,  562,  562,  562,  311,
      558,  310,  563,  563,  563,  562,  565,  565,  565,  309,
      562,  563,  567,  567,  567,  302,  563,  301,  565,  568,
      568,  568,  569,  569,  569,  297,  567,  570,  570,  570,
      571,  571,  571,  568,  571,  571,  569,  576,  576,  576,
      570,  296,  577,  577,  577,  585,  585,  585,  578,  579,
      576,  577,  295,  294,  577,  577,  577,  578,  579,  580,
      578,  579,  578,  579,  292,  291,  581,  290,  580,  289,

      288,  580,  287,  580,  286,  581,  285,  282,  581,  579,
      581,  281,  280,  582,  582,  582,  583,  583,  583,  584,
      584,  584,  582,  578,  581,  582,  582,  582,  278,  277,
      583,  276,  275,  584,  580,  588,  588,  588,  589,  589,
      589,  591,  591,  591,  592,  592,  592,  274,  271,  588,
      594,  594,  594,  270,  269,  591,  595,  595,  595,  596,
      596,  596,  268,  267,  594,  597,  597,  597,  266,  264,
      595,  599,  599,  599,  602,  602,  602,  603,  603,  603,
      599,  604,  604,  604,  263,  599,  606,  606,  606,  260,
      604,  603,  608,  608,  608,  604,  259,  258,  606,  610,

      610,  610,  611,  611,  611,  612,  612,  612,  257,  612,
      612,  256,  255,  610,  245,  244,  611,  613,  613,  613,
      618,  618,  618,  619,  619,  619,  620,  619,  619,  239,
      621,  238,  237,  618,  622,  620,  236,  235,  620,  621,
      620,  234,  621,  622,  621,  623,  622,  233,  622,  624,
      624,  624,  232,  231,  623,  230,  229,  623,  624,  623,
      228,  624,  624,  624,  625,  625,  625,  227,  226,  620,
      622,  626,  626,  626,  623,  621,  224,  223,  625,  627,
      627,  627,  629,  629,  629,  630,  630,  630,  631,  631,
      631,  632,  632,  632,  222,  221,  629,  633,  633,  633,

      220,  219,  631,  634,  634,  634,  635,  635,  635,  218,
      217,  633,  636,  636,  636,  215,  214,  634,  638,  638,
      638,  640,  640,  640,  641,  641,  641,  638,  642,  642,
      642,  213,  638,  640,  644,  644,  644,  212,  641,  646,
      646,  646,  647,  647,  647,  652,  652,  652,  654,  652,
      652,  211,  655,  646,  653,  653,  653,  654,  656,  657,
      654,  655,  654,  210,  655,  209,  655,  656,  657,  208,
      656,  657,  656,  657,  206,  205,  654,  658,  658,  658,
      659,  659,  659,  204,  660,  660,  660,  203,  655,  661,
      661,  661,  202,  193,  659,  192,  188,  657,  660,  656,

      662,  662,  662,  663,  663,  663,  664,  664,  664,  665,
      665,  665,  187,  186,  662,  666,  666,  666,  185,  184,
      664,  668,  668,  668,  670,  670,  670,  675,  675,  675,
      676,  677,  183,  680,  680,  680,  182,  678,  181,  676,
      677,  180,  676,  677,  676,  677,  678,  680,  679,  678,
      679,  678,  681,  681,  681,  682,  682,  682,  679,  683,
      683,  683,  684,  684,  684,  689,  676,  689,  179,  690,
      178,  690,  679,  177,  691,  689,  691,  678,  677,  690,
      692,  698,  692,  698,  691,  693,  693,  693,  176,  689,
      692,  698,  175,  690,  696,  696,  696,  689,  691,  697,

      697,  697,  174,  173,  692,  698,  172,  696,  171,  699,
      691,  699,  697,  700,  700,  700,  692,  170,  698,  699,
      169,  168,  700,  167,  166,  700,  700,  700,  701,  701,
      701,  164,  163,  699,  703,  703,  703,  701,  162,  161,
      701,  701,  701,  160,  159,  699,  158,  703,  704,  704,
      704,  705,  705,  705,  157,  705,  705,  706,  706,  706,
      708,  704,  707,  707,  707,  156,  707,  707,  155,  708,
      706,  154,  708,  153,  708,  709,  709,  709,  712,  712,
      712,  710,  710,  710,  709,  152,  151,  709,  709,  709,
      710,  712,  148,  710,  710,  710,  711,  711,  711,  713,

      713,  713,  141,  140,  708,  711,  139,  138,  711,  711,
      711,  136,  713,  714,  714,  714,  135,  714,  714,  715,
      715,  715,  134,  715,  715,  716,  716,  716,  717,  717,
      717,  133,  717,  717,  718,  718,  718,  719,  719,  719,
      721,  721,  721,  720,  720,  720,  719,  132,  131,  719,
      719,  719,  720,  721,  130,  720,  720,  720,  722,  722,
      722,  126,  722,  722,  723,  723,  723,  125,  723,  723,
      724,  724,  724,  725,  725,  725,  726,  726,  726,  727,
      727,  727,  728,  728,  728,  124,  728,  728,  727,  123,
      122,  727,  727,  727,  729,  729,  729,  730,  730,  730,

      731,  731,  731,  733,  733,  733,  733,  733,  734,  734,
      734,  734,  734,  735,  735,  735,  735,  735,  736,  736,
      736,  736,  736,  737,  737,  737,  737,  737,  738,  738,
      738,  738,  738,  739,  121,  739,  739,  740,  740,  120,
      740,  740,  741,  741,  741,  119,  741,  742,  742,  742,
      742,  118,  117,  116,  115,  114,  113,  112,  110,  108,
      107,  106,  105,  104,  103,  102,  100,   99,   90,   89,
       88,   87,   86,   85,   83,   82,   81,   80,   79,   77,
       72,   70,   68,   67,   66,   65,   64,   63,   60,   54,
       52,   44,   43,   41,   40,   37,   35,   32,   20,   13,

        8,    7,    6,    5,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[86] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 
    0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
/** @file parseosrl.l
 * 
 * @author  Robert Fourer,  Jun Ma, Kipp Martin, 
 * @version 1.0, 10/05/2005
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005, Robert Fourer, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"

#include <stdio.h>
#include <string.h>
#include "OSConfig.h"
//#include "lexyaccparser.h"
//#include "externalvars.h"
#include "OSrLParserData.h"
#define PARSERDEBUG
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif

#ifdef WIN_
#define YY_NO_UNISTD_H
#include <io.h>
#include <process.h>
#endif

#include "parseosrl.tab.hpp"


     

 



#line 57 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 1159 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.cpp"

#define INITIAL 0
#define attributetext 1
#define elementtext 2
#define osrlattributetext 3
#define comment 4
#define xmldeclaration 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 67 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"



#line 1403 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 733 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1805 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 70 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{printf("HERE IS WHITESPACE\n");}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 73 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 74 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; printf("HELLO GAIL 1 \n");    return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; yylval->ival = atoi( yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; yylval->dval = atof( yytext); return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 77 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 80 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 81 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 82 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(RESULTHEADERSTART);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 83 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(RESULTHEADEREND);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 84 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN elementtext; return(SERVICEURISTART);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 85 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(SERVICEURISTART);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 86 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 87 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN elementtext; return(SERVICENAMESTART);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 88 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(SERVICENAMESTART);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 89 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 90 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN elementtext; return(INSTANCENAMESTART);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 91 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(INSTANCENAMESTART);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 92 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 93 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN elementtext; return(JOBIDSTART);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 94 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(JOBIDSTART);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 95 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 96 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN elementtext; return(HEADERMESSAGESTART);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 97 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(HEADERMESSAGESTART);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 98 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(HEADERMESSAGEEND);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 100 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 101 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 103 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(RESULTDATASTART);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 104 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(RESULTDATAEND);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 106 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 107 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 109 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 110 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 112 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 113 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 115 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 116 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 118 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 119 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 121 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 122 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 123 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 124 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 126 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 127 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 128 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 129 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 131 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 132 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 133 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 134 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 136 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  BEGIN elementtext; return(MESSAGESTART);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 137 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(MESSAGESTART);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 138 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 140 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 141 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 143 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 144 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 145 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 146 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 147 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJECTIVEIDXATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 148 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 149 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN attributetext; return(TYPEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 150 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN attributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 151 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN attributetext; return(NAMEATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 153 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICEURISTARTANDEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 154 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICENAMESTARTANDEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 155 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTARTANDEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 156 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(JOBIDSTARTANDEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 157 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(HEADERMESSAGESTARTANDEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 158 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(RESULTDATASTARTANDEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 163 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{ YY_PRINT;  printf("Here I am\n"); yylval->charval = strdup(yytext);   return(ELEMENTTEXT); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 165 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
BEGIN comment;
	YY_BREAK
case 74:
#line 167 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 167 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 168 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
BEGIN 0;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 170 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 78:
#line 172 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 172 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 174 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
BEGIN 0;
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 179 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{ YY_PRINT;  yylval->charval = strdup(yytext); BEGIN 0;  return(ELEMENTTEXT); }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 180 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;    yylval->charval = strdup(yytext);
							BEGIN 0;  return(ATTRIBUTETEXT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 183 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->charval = strdup(yytext); return(OSRLATTRIBUTETEXT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 186 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{ /*osrlerror(NULL, NULL, NULL,  "ecountered a spurious character in the lexer");*/}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 191 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
ECHO;
	YY_BREAK
#line 1997 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(attributetext):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 733 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 733 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 732);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 191 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"





