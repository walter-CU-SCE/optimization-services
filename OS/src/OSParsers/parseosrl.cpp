#line 2 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.cpp"

#line 4 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osrllex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 84
#define YY_END_OF_BUFFER 85
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[729] =
    {   0,
        1,    1,    0,    0,   82,   82,    0,    0,    0,    0,
       85,   83,    1,    1,    2,   72,   83,   72,   83,    4,
       83,    3,   72,   81,   84,   82,   74,   75,   74,   78,
       79,   78,    1,    0,    0,    3,    0,    0,    0,    0,
        0,    1,   72,   72,   72,   72,   72,   72,    0,    4,
        0,    5,    6,   72,    4,   72,    0,    0,   77,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
       81,   82,    0,   80,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   72,   72,   72,   72,
       72,   72,    5,    0,    0,    0,    5,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    5,   76,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   72,   72,   72,
       72,   72,   72,    5,    5,   73,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   48,    0,    0,    0,    0,    0,   44,    0,    0,
        0,    0,    0,    0,    0,    0,   40,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       72,   72,   72,   72,   72,   72,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   62,    0,    0,    0,
        0,    0,    0,   72,   72,   72,   72,   72,    0,   50,
        0,    0,    0,    0,    0,    0,    0,   46,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   42,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    7,   55,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   62,    0,   65,    0,    0,    0,   63,

       72,   72,   72,   50,    0,    0,    0,    0,    0,    0,
       46,    0,    0,    0,    8,    0,    0,    0,    0,    0,
        0,   42,    0,    0,    0,    0,    0,    0,    0,   20,
        0,    0,    0,    0,    0,    0,   34,   36,    0,    0,
        0,    0,    0,    0,    0,    0,   65,    0,    0,   63,
       72,   72,   72,    0,    0,    0,    0,    0,   22,    0,
        0,    0,    8,    0,   56,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   69,   20,   21,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   72,   72,   72,    0,    0,    0,

        0,   22,    0,    0,    0,   56,    0,    0,    0,    0,
        0,   35,    0,   37,    0,    0,    0,    0,    0,    0,
        0,   23,    0,    0,    0,    0,    0,    0,   32,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   72,   72,   72,   72,   72,   72,    0,    0,
        0,    0,    0,   25,    0,    0,    0,    0,    0,    0,
        0,   35,   37,    0,    0,    0,    0,    0,   70,   23,
       24,    0,    0,    0,    0,    0,    0,   41,    0,   25,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       72,   72,   72,   72,   72,   72,    0,    0,    0,    0,

       25,    0,    0,    0,    0,    0,    0,    0,   33,    0,
        0,   38,    0,    0,   45,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       72,   72,   72,   72,   72,   72,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   33,    0,   43,   49,
        0,    0,    0,    0,    0,   28,    0,    0,    0,    0,
       11,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   72,   72,   72,   72,   72,   72,    0,    0,
       39,    0,    0,    0,   47,    0,    0,   29,    0,    0,
        0,   13,   43,    0,    0,   30,   71,   28,    0,    0,

        0,   14,   66,   11,   12,    0,    0,    0,   64,    0,
        0,    0,    0,    0,    0,   72,   72,   72,   72,   72,
        0,   51,   39,    0,    0,   47,    0,   29,    0,    0,
       16,   13,   26,    0,    0,   17,    0,    9,   67,   14,
       15,    0,   64,    0,    0,    0,    0,    0,   61,   72,
       72,   72,   72,   51,    0,    0,   19,    0,   31,    0,
       10,   16,   68,   17,   18,    9,    0,    0,    0,    0,
       61,   72,   72,   72,   72,    0,   27,   19,   31,   10,
        0,    0,    0,    0,   72,   72,   72,   72,   27,    0,
        0,    0,    0,   72,   72,   72,   72,    0,    0,    0,

        0,    0,    0,   72,   72,   72,   72,    0,    0,    0,
        0,   57,    0,   58,   72,   72,    0,    0,    0,   60,
       57,   58,   72,    0,   59,   60,   59,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    7,    1,    1,    8,    1,
        1,    7,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    7,    1,   14,
       15,   16,   17,    7,    7,    7,   18,   19,   20,   21,
        7,   22,   23,    7,    7,    7,    7,   24,   25,    7,
        7,   26,   27,    7,   28,   29,    7,    7,    1,    1,
        1,    1,    1,    1,    7,    1,   30,   31,   32,   33,

       34,   35,   36,   37,   38,   39,    7,   40,   41,   42,
       43,   44,    7,   45,   46,   47,   48,   49,    7,   50,
       51,   52,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    2,    2,    2,    1,    3,    2,    3,    1,    1,
        2,    2,    2,    2,    1,    4,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2
    } ;

static yyconst flex_int16_t yy_base[737] =
    {   0,
        0,   23,   12,   13, 1768, 1767,   38,   39,   27,   40,
     1782, 1785,   56,  102, 1785,   49,   39,   62, 1765,  148,
      178, 1785,   67,    0, 1785,    0, 1785, 1785, 1770, 1785,
     1785, 1763,    0, 1762,  216, 1785, 1743, 1743,   23, 1744,
     1723,  264,   95,   97,  108,  109,  135,  143, 1760,  113,
     1748,   34, 1785,  154,    0,  188, 1761,  280, 1785, 1727,
     1721, 1734, 1725, 1723, 1731,   46, 1730,   39, 1733,  159,
        0,    0, 1746, 1785, 1720, 1718, 1716, 1724, 1723,   53,
     1710, 1705, 1713, 1712, 1713, 1707,  192,  219,  222,  230,
      259,  270,  117,   75, 1729, 1736,  262, 1738, 1704, 1698,

     1711, 1702, 1700, 1708,  140, 1707,   89, 1710, 1697, 1708,
     1695, 1690, 1704, 1688, 1694, 1685, 1686, 1693, 1683, 1683,
     1687, 1696,  113,  274, 1785, 1691, 1678, 1692, 1676, 1675,
     1675, 1687,   52, 1684, 1686, 1682, 1681,  290,  328,  275,
      325,  326,  337, 1701, 1785, 1785, 1671, 1682, 1669, 1660,
     1671, 1622, 1626, 1616, 1601, 1602, 1591, 1582, 1582, 1590,
      133, 1573, 1575, 1580, 1562, 1584, 1556, 1566, 1557, 1553,
     1554, 1539, 1536, 1533, 1532, 1518, 1523, 1513, 1511, 1531,
     1502, 1498, 1489, 1492,  243,  359,  349, 1500, 1500,  366,
      362,  374,  389,  374,  386,  407,  410, 1477, 1481, 1467,

     1489, 1465,  413, 1464, 1461, 1465, 1444, 1442, 1440, 1433,
     1426,  428, 1426, 1434, 1417, 1429, 1429, 1412, 1404, 1390,
      331, 1385, 1378, 1378, 1335, 1332, 1340, 1343, 1321, 1326,
     1335, 1319, 1307, 1307, 1298,  431,  438,  446,  449, 1289,
     1280,  456,  461,  460,  475,  468,  190,  490,  493,  497,
     1278, 1283, 1257, 1261, 1271, 1255,  508,  512, 1252, 1235,
      515, 1230, 1230, 1231, 1208, 1203, 1205,  518,  523, 1202,
     1185, 1198, 1189, 1173,  526, 1178, 1163, 1170,  533, 1785,
     1148, 1162, 1154, 1144, 1142, 1146, 1140, 1127,  537, 1124,
     1102, 1116, 1099,  541,  544,  552, 1117, 1096,  555,  562,

      558,  565,  566,  581, 1088, 1098, 1097, 1071,  584, 1069,
      589, 1045, 1047,  592,  595,  603, 1035, 1044, 1027, 1015,
     1011,  607, 1018,  992,  981,  977,  979,  610,  994,  613,
      974,  952,  936,   93,  953,  939, 1785, 1785,  941,  936,
      939,  621,  927,  196,  926,  911,  626,  922,  905,  629,
      632,  633,  638,  923,  897,  894,  900,  639,  654,  895,
      887,  862,  657,  660,  663,  212,  879,  867,  667,  670,
      869,  869,  857,  877,  853, 1785,  678, 1785,  686,  837,
      846,  844,  834,  110,  825,  831,  830,  826,  689,  829,
      157,  819,  544,  821,  683,  720,  683,  815,  802,  817,

      808,  704,  707,  778,  792,  710,  791,  782,  172,  773,
      723,  716,  726,  748,  762,  746,  752,  734,  747,  751,
      753,  754,  728,  701,  699,  714,  713,  715, 1785,  694,
      757,  713,  762,  688,  703,  705,  681,  673,  684,  661,
      671,  677,  759,  763,  764,  769,  774,  794,  642,  644,
      630,  651,  797,  788,  619,  604,  592,  608,  606,  595,
      807,  816,  822,  574,  571,  557,  571,  559, 1785,  827,
     1785,  530,  537,  521,  516,  492,  509, 1785,  830,  833,
      493,  478,  466,  480,  446,  444,  446,  443,  436,  442,
      827,  828,  832,  838,  843,  862,  426,  422,  424,  416,

      877,  399,  405,  408,  403,  387,  404,  881,  887,  890,
      379, 1785,  377,  361, 1785,  357,  896,  364,  361,  899,
      343,  914,  349,  917,  920,  334,  345,  326,  334,  316,
      924,  929,  931,  935,  936,  939,  312,  960,  308,  313,
      964,  306,  975,  313,  307,  982,  990,  993,  997, 1785,
      280,  293,  278, 1000,  301, 1003,  270, 1011, 1016,  289,
     1022,  266, 1027, 1031, 1035, 1038, 1042,  252,  260,  244,
      259, 1052, 1056, 1050, 1061, 1067, 1072, 1092, 1087, 1096,
     1107,  236,  243, 1113, 1116,  232, 1119, 1122,  215, 1128,
     1134, 1137, 1143,  205, 1149, 1785, 1785, 1152, 1155, 1160,

      228, 1164, 1785, 1171, 1785, 1177, 1180, 1183, 1195,  195,
      189,  191,  194, 1198, 1201, 1204, 1209, 1210, 1215, 1238,
     1231, 1234, 1241,  174, 1255, 1258, 1261, 1264, 1270, 1276,
     1279, 1285, 1785, 1291,  197, 1294, 1297, 1302, 1785, 1307,
     1785, 1312, 1315,  179,  169,  148,  149, 1318, 1327, 1321,
     1330, 1336, 1341, 1337, 1356, 1359, 1362, 1367, 1374, 1382,
     1385, 1388, 1785, 1391, 1785, 1397,  138,  126,  110,   93,
     1400, 1394, 1395, 1403, 1067, 1410, 1418, 1421, 1425, 1431,
       83,   79,   56,   55, 1426, 1427, 1430, 1438, 1450,   48,
       34, 1463, 1467, 1466, 1470, 1491, 1506,   20, 1521, 1524,

     1527, 1538, 1541, 1473, 1548, 1553, 1568, 1571, 1574, 1588,
     1595, 1453, 1602, 1494, 1609, 1614, 1629, 1632, 1639, 1646,
     1649, 1652, 1655, 1658, 1670, 1673, 1676, 1785, 1680, 1684,
     1688, 1692, 1696, 1699, 1703, 1707
    } ;

static yyconst flex_int16_t yy_def[737] =
    {   0,
      729,  729,  730,  730,  731,  731,  732,  732,  733,  733,
      728,  728,  728,  734,  728,  734,  728,  734,  728,  734,
      728,  728,  734,  735,  728,  736,  728,  728,  728,  728,
      728,  728,   13,  728,  728,  728,  728,  728,  728,  728,
      728,  734,  734,   20,   20,   20,   20,   20,  728,  728,
      728,   20,  728,   20,   20,   20,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,   20,
      735,  736,  728,  728,   58,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,   20,   20,   20,   20,
       20,   20,  728,  728,  728,  728,   20,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,   20,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,   20,  734,   20,
       20,   20,   20,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
       20,  734,  734,   20,   20,  734,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  734,  734,  734,  734,  734,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      734,  734,  734,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      734,  734,  734,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  734,  734,   20,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,   20,   20,   20,   20,   20,   20,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
       20,   20,   20,   20,   20,   20,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      734,  734,   20,   20,   20,   20,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  734,  734,  734,  734,  734,  734,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  734,  734,  734,  734,  734,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  734,
      734,  734,  734,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  734,  734,  734,   20,  728,  728,  728,  728,  728,
      728,  728,  728,  728,   20,   20,   20,   20,  728,  728,
      728,  728,  728,   20,   20,  734,  734,  728,  728,  728,

      728,  728,  728,  734,  734,  734,  734,  728,  728,  728,
      728,  728,  728,  728,  734,  734,  728,  728,  728,  728,
      728,  728,  734,  728,  728,  728,  728,    0,  728,  728,
      728,  728,  728,  728,  728,  728
    } ;

static yyconst flex_int16_t yy_nxt[1838] =
    {   0,
       12,   13,   14,   14,   12,   15,  728,   15,   12,   17,
       18,   19,   20,   21,   12,   22,   12,   25,   25,   25,
       25,  728,   23,   12,   13,   14,   14,   12,   15,   31,
       15,   12,   17,   18,   19,   20,   21,   12,   22,   12,
       28,   28,   31,   32,   43,   23,   52,   29,   29,   49,
      728,   50,   83,  185,  185,  185,   32,   33,   33,   33,
      728,   51,  728,  728,  728,  708,  186,   34,  728,   35,
       84,   36,  120,  728,   52,  728,  115,  728,  728,  699,
      728,  121,  728,   96,   96,  122,  131,  144,   37,  116,
       70,  117,  118,   38,  698,  121,  728,   39,   40,  122,

      693,  692,   41,   33,   42,   42,  728,   43,  728,   43,
      728,  382,  691,   34,  383,   35,   43,   36,   43,   43,
       43,   43,  158,   49,  690,   50,  684,   43,   43,   93,
       87,  159,   94,  427,   44,  160,   94,  428,   89,   45,
       88,   43,   43,   46,   47,   43,   94,   43,   48,  728,
       94,  683,  176,   43,   43,   43,   90,  177,   54,  728,
       55,  728,   43,  728,   43,   91,   52,   56,   43,   43,
      153,   43,  211,   43,  682,  681,   43,  212,   43,  124,
      435,   56,   57,  154,  436,  155,  156,   43,  670,   58,
      669,  728,   43,   92,   59,  459,   96,   96,   43,  460,

       97,  728,   43,  728,   43,  728,  668,   43,  667,   60,
       61,   43,  663,   62,  390,   63,   64,  383,   65,  655,
       66,   43,   67,   68,  647,   43,   69,   75,  646,   43,
      407,   43,   43,  408,   43,  645,  303,  138,   43,  644,
       43,   43,   43,  639,  185,  185,  185,   60,   61,   43,
      633,   62,   43,   76,   77,   43,   78,  186,   66,  629,
       79,   80,  140,   43,   69,   33,   42,   42,  139,   43,
      141,   43,   43,  627,   97,   34,  625,   35,   43,   36,
       43,   43,   43,  624,   43,   43,   43,   43,  613,   43,
      612,  611,   43,   43,   43,   43,   44,  142,  610,  606,

       43,   45,   43,   43,  603,   46,   47,   43,  193,   43,
       48,   99,  100,  143,  599,  101,  597,  102,  103,  596,
      104,  191,  105,   43,  106,  107,  595,  594,  108,  185,
      192,  192,  279,  279,  279,   43,   43,   43,   43,  728,
      590,  728,  186,  728,   43,   43,  589,   43,  586,   43,
      238,  238,  238,  583,  582,  194,   43,  579,   43,  195,
      236,  236,  236,  239,  237,  572,  237,  242,  242,  242,
      196,  571,   43,  570,   43,  185,  192,  192,  569,  568,
      243,   43,  564,  562,   43,  728,   43,  728,  186,  728,
      238,  245,  245,   43,  558,   43,   43,  557,   43,  553,

      728,  552,  728,  239,  728,   43,  244,  246,  242,  248,
      248,  249,  249,  249,  257,  257,  257,  247,  728,   43,
      728,  243,  728,  551,  550,  250,  546,  545,  258,  268,
      268,  268,  236,  236,  236,  544,  237,  543,  237,  294,
      294,  294,  542,  269,  541,  540,  259,  238,  238,  238,
      295,  295,  295,  539,  296,  251,  296,  242,  242,  242,
      239,  728,  299,  299,  299,  270,  300,  538,  300,  728,
      243,  728,  537,  728,  530,  728,  238,  245,  245,  728,
      529,  728,  528,  728,  527,  526,  728,  525,  728,  239,
      728,  242,  248,  248,  249,  249,  249,  301,  304,  304,

      304,  728,  524,  728,  243,  728,  523,  522,  250,  257,
      257,  257,  302,  311,  311,  311,  314,  314,  314,  268,
      268,  268,  521,  258,  322,  322,  322,  328,  328,  328,
      315,  520,  519,  269,  279,  279,  279,  329,  342,  342,
      342,  330,  294,  294,  294,  295,  295,  295,  518,  296,
      517,  296,  330,  347,  347,  347,  299,  299,  299,  728,
      300,  438,  300,  350,  350,  350,  728,  728,  439,  728,
      440,  728,  441,  728,  516,  515,  728,  728,  728,  728,
      728,  728,  304,  304,  304,  358,  358,  358,  514,  352,
      311,  311,  311,  314,  314,  314,  363,  363,  363,  359,

      513,  351,  512,  353,  364,  364,  364,  315,  322,  322,
      322,  328,  328,  328,  377,  377,  377,  511,  365,  510,
      507,  329,  342,  342,  342,  330,  378,  347,  347,  347,
      350,  350,  350,  728,  728,  506,  330,  505,  504,  728,
      358,  358,  358,  728,  728,  728,  728,  728,  728,  728,
      503,  728,  502,  728,  359,  402,  402,  402,  363,  363,
      363,  364,  364,  364,  406,  406,  406,  396,  411,  411,
      411,  413,  413,  413,  500,  365,  499,  498,  395,  377,
      377,  377,  412,  497,  728,  414,  397,  420,  420,  420,
      433,  433,  433,   43,  728,   43,  728,  421,  728,  490,

      489,  422,   43,  488,  422,  402,  402,  402,  453,  453,
      453,  406,  406,  406,  487,  486,  448,  462,  462,  462,
      443,  728,  454,  485,  411,  411,  411,  413,  413,  413,
      484,  728,  483,  728,  482,  728,  481,  444,  412,  478,
      477,  414,  476,  475,  445,  474,  446,  473,  447,  463,
      463,  463,  420,  420,  420,  470,  470,  470,  479,  479,
      479,  472,  421,  433,  433,  433,  422,  471,  469,   43,
      468,   43,  480,   43,   43,   43,   43,  422,   43,   43,
      467,   43,   43,   43,   43,  466,   43,  465,   43,  501,
      501,  501,   43,   43,  493,  464,   43,   43,  453,  453,

      453,  491,   43,  495,   43,  492,   43,   43,  508,  508,
      508,  494,  454,   43,  461,  458,  496,  462,  462,  462,
      457,  456,  509,  463,  463,  463,  455,   43,  470,  470,
      470,  479,  479,  479,  501,  501,  501,   43,   43,   43,
       43,  452,   43,  451,   43,  480,   43,   43,   43,  450,
       43,   43,  449,   43,  442,   43,  437,   43,  434,  432,
       43,   43,   43,  431,  430,   43,  429,  426,  531,  532,
      533,   43,   43,  425,   43,  424,   43,  534,  501,  501,
      501,   43,  508,  508,  508,  423,  419,  535,  547,  547,
      547,  548,  548,  548,  536,   43,  509,  554,  554,  554,

      559,  559,  559,  418,  417,  549,  416,  555,  415,  410,
      560,  556,  409,  405,  561,  563,  563,  563,  565,  565,
      565,  566,  566,  566,  404,  566,  573,  573,  403,  556,
      728,  401,  561,  400,  567,  728,  399,  728,  567,  728,
      728,   43,  728,   43,  728,   43,   43,   43,   43,   43,
       43,   43,  398,  394,   43,   43,  393,  392,   43,  391,
      389,  580,  580,  580,  575,  584,  584,  584,   43,   43,
      388,  387,   43,  577,  574,  581,  587,  587,  587,  585,
      386,  385,  576,  591,  591,  591,  384,  381,  578,  380,
      588,  547,  547,  547,  548,  548,  548,  592,  593,  593,

      593,  554,  554,  554,  598,  598,  598,  379,  549,  376,
      375,  555,  600,  600,  600,  556,  374,  559,  559,  559,
      373,  372,  601,  604,  604,  604,  602,  560,  563,  563,
      563,  561,  607,  607,  607,  605,  565,  565,  565,  566,
      566,  566,  556,  608,  608,  608,  602,  609,  371,  609,
      561,  728,  567,  614,  614,  614,  370,  566,  573,  573,
      369,  728,  728,  728,  368,  728,  615,  728,  728,  728,
      567,  728,  728,  728,  728,  367,  728,   43,  728,   43,
      728,  366,  728,  728,  362,  728,   43,  728,  621,  621,
      621,  361,  617,  614,  620,  620,  616,  580,  580,  580,

      688,  619,  622,  728,  360,  728,  615,  728,  623,  623,
      623,  581,  357,  618,  584,  584,  584,  626,  626,  626,
      587,  587,  587,  628,  628,  628,  356,  355,  585,  630,
      630,  630,  354,  349,  588,  591,  591,  591,  632,  632,
      632,  348,  346,  631,  593,  593,  593,  345,  344,  592,
      634,  634,  634,  598,  598,  598,  637,  637,  637,  343,
      635,  600,  600,  600,  636,  640,  640,  640,  341,  340,
      638,  601,  604,  604,  604,  602,  339,  641,  642,  642,
      642,  607,  607,  607,  608,  608,  608,  338,  609,  337,
      609,  336,  636,  335,  334,  602,  643,  643,  643,  614,

      614,  614,  648,  648,  648,  728,  649,  333,  649,  332,
      728,  728,  615,  331,  327,  728,  728,  728,  326,  728,
      728,  728,  728,  728,  728,  728,  728,  325,  728,  324,
      728,  323,  621,  621,  621,  654,  654,  654,  321,  614,
      620,  620,  623,  623,  623,  653,  622,  652,  650,  728,
      320,  728,  615,  728,  319,  651,  656,  656,  656,  626,
      626,  626,  658,  658,  658,  628,  628,  628,  318,  317,
      657,  660,  660,  660,  316,  313,  659,  630,  630,  630,
      662,  662,  662,  312,  310,  661,  632,  632,  632,  309,
      308,  631,  634,  634,  634,  664,  664,  664,  637,  637,

      637,  307,  635,  666,  666,  666,  636,  665,  640,  640,
      640,  306,  638,  642,  642,  642,  643,  643,  643,  648,
      648,  648,  728,  649,  305,  649,  298,  636,  671,  671,
      671,  728,  728,  297,  728,  293,  728,  728,  654,  654,
      654,  728,  728,  728,  292,  728,  291,  728,  290,  728,
      672,  728,  728,  289,  728,  288,  728,  676,  676,  676,
      656,  656,  656,  678,  678,  678,  287,  673,  658,  658,
      658,  677,  286,  285,  657,  679,  679,  679,  674,  284,
      675,  283,  659,  660,  660,  660,  680,  680,  680,  662,
      662,  662,  664,  664,  664,  728,  728,  661,  666,  666,

      666,  671,  671,  671,  728,  728,  728,  728,  728,  728,
      728,  676,  676,  676,  728,  282,  728,  281,  728,  689,
      689,  689,  678,  678,  678,  677,  679,  679,  679,  280,
      278,  685,  680,  680,  680,  277,   43,   43,   43,   43,
       43,  276,   43,  686,  687,   43,   43,  275,   43,   43,
       43,  689,  689,  689,  721,  721,  721,   43,  274,   43,
      695,  273,  272,   43,  700,  700,  700,  694,  702,  702,
      702,   43,  271,  267,  728,  696,   43,  701,   43,  266,
       43,  703,   43,  697,  728,   43,  728,  265,  728,   43,
      264,  263,  700,  706,  706,  722,  722,  722,  262,   43,

      261,  260,  728,   43,  728,  701,  728,  702,  707,  707,
      256,  255,  704,  254,  253,  705,  252,  728,  715,  728,
      703,  728,  709,  709,  709,  700,  700,  700,  711,  711,
      711,  241,  712,  240,  712,  710,  235,  234,  701,  702,
      702,  702,  713,  713,  713,  233,  714,  232,  714,  709,
      716,  716,  703,  231,  700,  706,  706,  230,  229,  728,
      228,  728,  710,  728,  728,  227,  728,  701,  728,  702,
      707,  707,  717,  717,  717,  709,  709,  709,  226,  728,
      225,  728,  703,  728,  224,  718,  223,  222,  710,  719,
      719,  719,  221,  720,  220,  720,  711,  711,  711,  219,

      712,  218,  712,  713,  713,  713,  217,  714,  216,  714,
      717,  723,  723,  215,  214,  709,  716,  716,  213,  210,
      728,  209,  728,  718,  728,  728,  208,  728,  710,  728,
      717,  717,  717,  724,  724,  724,  207,  725,  206,  725,
      719,  719,  719,  718,  720,  205,  720,  726,  726,  726,
      721,  721,  721,  722,  722,  722,  717,  723,  723,  724,
      724,  724,  204,  725,  203,  725,  728,  202,  728,  718,
      728,  727,  727,  727,  726,  726,  726,  727,  727,  727,
       16,   16,   16,   16,   24,   24,   24,   24,   26,   26,
       26,   26,   27,   27,   27,   27,   30,   30,   30,   30,

       43,  201,   43,   71,   71,  200,   71,   72,   72,   72,
      199,  198,  197,  144,  190,  189,  188,  187,  184,  183,
      182,  181,  180,  179,  178,  175,  174,  173,  172,  171,
      170,  169,  168,  167,  166,  165,  164,  163,  162,  161,
      157,  152,  151,  150,  149,  148,  147,  146,  144,  145,
      137,  136,  135,  134,  133,  132,  130,  129,  128,  127,
      126,  125,  123,  119,  114,  113,  112,  111,  110,  109,
       98,   95,   93,   86,   85,   82,   81,   53,   74,   73,
       53,  728,   25,   25,   11,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728
    } ;

static yyconst flex_int16_t yy_chk[1838] =
    {   0,
        1,    1,    1,    1,    1,    1,    0,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    3,
        4,    0,    1,    2,    2,    2,    2,    2,    2,    9,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        7,    8,   10,    9,   52,    2,   52,    7,    8,   17,
       16,   17,   39,  133,  133,  133,   10,   13,   13,   13,
       16,   17,   16,   18,   16,  698,  133,   13,   23,   13,
       39,   13,   68,   18,   18,   18,   66,   18,   23,  691,
       23,   68,   23,   94,   94,   68,   80,   94,   13,   66,
       23,   66,   66,   13,  690,   80,   43,   13,   13,   80,

      684,  683,   13,   14,   14,   14,   43,   44,   43,   44,
       43,  334,  682,   14,  334,   14,   44,   14,   45,   46,
       45,   46,  107,   50,  681,   50,  670,   45,   46,   93,
       44,  107,   50,  384,   14,  107,   93,  384,   46,   14,
       45,   45,   46,   14,   14,   47,   50,   47,   14,   20,
       93,  669,  123,   48,   47,   48,   46,  123,   20,   20,
       20,   20,   48,   20,   54,   47,   54,   20,   47,   70,
      105,   70,  161,   54,  668,  667,   48,  161,   70,   70,
      391,   20,   21,  105,  391,  105,  105,   54,  647,   21,
      646,  247,   70,   48,   21,  409,   56,   56,   56,  409,

       56,  247,   87,  247,   87,  247,  645,   56,  644,   21,
       21,   87,  635,   21,  344,   21,   21,  344,   21,  624,
       21,   56,   21,   21,  613,   87,   21,   35,  612,   88,
      366,   88,   89,  366,   89,  611,  247,   87,   88,  610,
       90,   89,   90,  601,  185,  185,  185,   35,   35,   90,
      594,   35,   88,   35,   35,   89,   35,  185,   35,  589,
       35,   35,   89,   90,   35,   42,   42,   42,   88,   91,
       90,   91,   97,  586,   97,   42,  583,   42,   91,   42,
       92,   97,   92,  582,  124,  140,  124,  140,  571,   92,
      570,  569,   91,  124,  140,   97,   42,   91,  568,  562,

      138,   42,  138,   92,  560,   42,   42,  124,  140,  138,
       42,   58,   58,   92,  557,   58,  555,   58,   58,  553,
       58,  138,   58,  138,   58,   58,  552,  551,   58,  139,
      139,  139,  221,  221,  221,  141,  142,  141,  142,  139,
      545,  139,  139,  139,  141,  142,  544,  143,  542,  143,
      187,  187,  187,  540,  539,  141,  143,  537,  141,  142,
      186,  186,  186,  187,  186,  530,  186,  190,  190,  190,
      143,  529,  191,  528,  191,  192,  192,  192,  527,  526,
      190,  191,  523,  521,  194,  192,  194,  192,  192,  192,
      193,  193,  193,  194,  519,  191,  195,  518,  195,  516,

      193,  514,  193,  193,  193,  195,  191,  194,  196,  196,
      196,  197,  197,  197,  203,  203,  203,  195,  196,  195,
      196,  196,  196,  513,  511,  197,  507,  506,  203,  212,
      212,  212,  236,  236,  236,  505,  236,  504,  236,  237,
      237,  237,  503,  212,  502,  500,  203,  238,  238,  238,
      239,  239,  239,  499,  239,  197,  239,  242,  242,  242,
      238,  244,  243,  243,  243,  212,  243,  498,  243,  246,
      242,  244,  497,  244,  490,  244,  245,  245,  245,  246,
      489,  246,  488,  246,  487,  486,  245,  485,  245,  245,
      245,  248,  248,  248,  249,  249,  249,  244,  250,  250,

      250,  248,  484,  248,  248,  248,  483,  482,  249,  257,
      257,  257,  246,  258,  258,  258,  261,  261,  261,  268,
      268,  268,  481,  257,  269,  269,  269,  275,  275,  275,
      261,  477,  476,  268,  279,  279,  279,  275,  289,  289,
      289,  275,  294,  294,  294,  295,  295,  295,  475,  295,
      474,  295,  289,  296,  296,  296,  299,  299,  299,  301,
      299,  393,  299,  300,  300,  300,  302,  303,  393,  301,
      393,  301,  393,  301,  473,  472,  302,  303,  302,  303,
      302,  303,  304,  304,  304,  309,  309,  309,  468,  302,
      311,  311,  311,  314,  314,  314,  315,  315,  315,  309,

      467,  301,  466,  303,  316,  316,  316,  314,  322,  322,
      322,  328,  328,  328,  330,  330,  330,  465,  316,  464,
      460,  328,  342,  342,  342,  328,  330,  347,  347,  347,
      350,  350,  350,  351,  352,  459,  342,  458,  457,  353,
      358,  358,  358,  351,  352,  351,  352,  351,  352,  353,
      456,  353,  455,  353,  358,  359,  359,  359,  363,  363,
      363,  364,  364,  364,  365,  365,  365,  352,  369,  369,
      369,  370,  370,  370,  452,  364,  451,  450,  351,  377,
      377,  377,  369,  449,  395,  370,  353,  379,  379,  379,
      389,  389,  389,  397,  395,  397,  395,  379,  395,  442,

      441,  379,  397,  440,  389,  402,  402,  402,  403,  403,
      403,  406,  406,  406,  439,  438,  397,  412,  412,  412,
      395,  396,  403,  437,  411,  411,  411,  413,  413,  413,
      436,  396,  435,  396,  434,  396,  432,  396,  411,  430,
      428,  413,  427,  426,  396,  425,  396,  424,  396,  414,
      414,  414,  420,  420,  420,  422,  422,  422,  431,  431,
      431,  423,  420,  433,  433,  433,  420,  422,  421,  443,
      419,  443,  431,  444,  445,  444,  445,  433,  443,  446,
      418,  446,  444,  445,  447,  417,  447,  416,  446,  454,
      454,  454,  443,  447,  445,  415,  444,  445,  453,  453,

      453,  443,  446,  447,  448,  444,  448,  447,  461,  461,
      461,  446,  453,  448,  410,  408,  448,  462,  462,  462,
      407,  405,  461,  463,  463,  463,  404,  448,  470,  470,
      470,  479,  479,  479,  480,  480,  480,  491,  492,  491,
      492,  401,  493,  400,  493,  479,  491,  492,  494,  399,
      494,  493,  398,  495,  394,  495,  392,  494,  390,  388,
      491,  492,  495,  387,  386,  493,  385,  383,  491,  492,
      493,  494,  496,  382,  496,  381,  495,  494,  501,  501,
      501,  496,  508,  508,  508,  380,  375,  495,  509,  509,
      509,  510,  510,  510,  496,  496,  508,  517,  517,  517,

      520,  520,  520,  374,  373,  510,  372,  517,  371,  368,
      520,  517,  367,  362,  520,  522,  522,  522,  524,  524,
      524,  525,  525,  525,  361,  531,  531,  531,  360,  522,
      532,  357,  524,  356,  525,  531,  355,  531,  531,  531,
      532,  533,  532,  533,  532,  534,  535,  534,  535,  536,
      533,  536,  354,  349,  534,  535,  348,  346,  536,  345,
      343,  538,  538,  538,  533,  541,  541,  541,  534,  535,
      341,  340,  536,  535,  532,  538,  543,  543,  543,  541,
      339,  336,  534,  546,  546,  546,  335,  333,  536,  332,
      543,  547,  547,  547,  548,  548,  548,  546,  549,  549,

      549,  554,  554,  554,  556,  556,  556,  331,  548,  329,
      327,  554,  558,  558,  558,  554,  326,  559,  559,  559,
      325,  324,  558,  561,  561,  561,  558,  559,  563,  563,
      563,  559,  564,  564,  564,  561,  565,  565,  565,  566,
      566,  566,  563,  567,  567,  567,  564,  567,  323,  567,
      565,  574,  566,  572,  572,  572,  321,  573,  573,  573,
      320,  574,  575,  574,  319,  574,  572,  573,  576,  573,
      573,  573,  575,  577,  575,  318,  575,  675,  576,  675,
      576,  317,  576,  577,  313,  577,  675,  577,  579,  579,
      579,  312,  575,  578,  578,  578,  574,  580,  580,  580,

      675,  577,  579,  578,  310,  578,  578,  578,  581,  581,
      581,  580,  308,  576,  584,  584,  584,  585,  585,  585,
      587,  587,  587,  588,  588,  588,  307,  306,  584,  590,
      590,  590,  305,  298,  587,  591,  591,  591,  592,  592,
      592,  297,  293,  590,  593,  593,  593,  292,  291,  591,
      595,  595,  595,  598,  598,  598,  599,  599,  599,  290,
      595,  600,  600,  600,  595,  602,  602,  602,  288,  287,
      599,  600,  604,  604,  604,  600,  286,  602,  606,  606,
      606,  607,  607,  607,  608,  608,  608,  285,  608,  284,
      608,  283,  606,  282,  281,  607,  609,  609,  609,  614,

      614,  614,  615,  615,  615,  616,  615,  278,  615,  277,
      617,  618,  614,  276,  274,  616,  619,  616,  273,  616,
      617,  618,  617,  618,  617,  618,  619,  272,  619,  271,
      619,  270,  621,  621,  621,  622,  622,  622,  267,  620,
      620,  620,  623,  623,  623,  619,  621,  618,  616,  620,
      266,  620,  620,  620,  265,  617,  625,  625,  625,  626,
      626,  626,  627,  627,  627,  628,  628,  628,  264,  263,
      625,  629,  629,  629,  262,  260,  627,  630,  630,  630,
      631,  631,  631,  259,  256,  629,  632,  632,  632,  255,
      254,  630,  634,  634,  634,  636,  636,  636,  637,  637,

      637,  253,  634,  638,  638,  638,  634,  636,  640,  640,
      640,  252,  637,  642,  642,  642,  643,  643,  643,  648,
      648,  648,  650,  648,  251,  648,  241,  642,  649,  649,
      649,  651,  650,  240,  650,  235,  650,  652,  654,  654,
      654,  651,  653,  651,  234,  651,  233,  652,  232,  652,
      650,  652,  653,  231,  653,  230,  653,  655,  655,  655,
      656,  656,  656,  657,  657,  657,  229,  651,  658,  658,
      658,  655,  228,  227,  656,  659,  659,  659,  652,  226,
      653,  225,  658,  660,  660,  660,  661,  661,  661,  662,
      662,  662,  664,  664,  664,  672,  673,  660,  666,  666,

      666,  671,  671,  671,  674,  672,  673,  672,  673,  672,
      673,  676,  676,  676,  674,  224,  674,  223,  674,  677,
      677,  677,  678,  678,  678,  676,  679,  679,  679,  222,
      220,  672,  680,  680,  680,  219,  685,  686,  685,  686,
      687,  218,  687,  673,  674,  685,  686,  217,  688,  687,
      688,  689,  689,  689,  712,  712,  712,  688,  216,  685,
      686,  215,  214,  687,  692,  692,  692,  685,  693,  693,
      693,  688,  213,  211,  704,  687,  694,  692,  694,  210,
      695,  693,  695,  688,  704,  694,  704,  209,  704,  695,
      208,  207,  696,  696,  696,  714,  714,  714,  206,  694,

      205,  204,  696,  695,  696,  696,  696,  697,  697,  697,
      202,  201,  694,  200,  199,  695,  198,  697,  704,  697,
      697,  697,  699,  699,  699,  700,  700,  700,  701,  701,
      701,  189,  701,  188,  701,  699,  184,  183,  700,  702,
      702,  702,  703,  703,  703,  182,  703,  181,  703,  705,
      705,  705,  702,  180,  706,  706,  706,  179,  178,  705,
      177,  705,  705,  705,  706,  176,  706,  706,  706,  707,
      707,  707,  708,  708,  708,  709,  709,  709,  175,  707,
      174,  707,  707,  707,  173,  708,  172,  171,  709,  710,
      710,  710,  170,  710,  169,  710,  711,  711,  711,  168,

      711,  167,  711,  713,  713,  713,  166,  713,  165,  713,
      715,  715,  715,  164,  163,  716,  716,  716,  162,  160,
      715,  159,  715,  715,  715,  716,  158,  716,  716,  716,
      717,  717,  717,  718,  718,  718,  157,  718,  156,  718,
      719,  719,  719,  717,  719,  155,  719,  720,  720,  720,
      721,  721,  721,  722,  722,  722,  723,  723,  723,  724,
      724,  724,  154,  724,  153,  724,  723,  152,  723,  723,
      723,  725,  725,  725,  726,  726,  726,  727,  727,  727,
      729,  729,  729,  729,  730,  730,  730,  730,  731,  731,
      731,  731,  732,  732,  732,  732,  733,  733,  733,  733,

      734,  151,  734,  735,  735,  150,  735,  736,  736,  736,
      149,  148,  147,  144,  137,  136,  135,  134,  132,  131,
      130,  129,  128,  127,  126,  122,  121,  120,  119,  118,
      117,  116,  115,  114,  113,  112,  111,  110,  109,  108,
      106,  104,  103,  102,  101,  100,   99,   98,   96,   95,
       86,   85,   84,   83,   82,   81,   79,   78,   77,   76,
       75,   73,   69,   67,   65,   64,   63,   62,   61,   60,
       57,   51,   49,   41,   40,   38,   37,   34,   32,   29,
       19,   11,    6,    5,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[85] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 
    0, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
/** @file parseosrl.l
 * 
 * @author  Robert Fourer,  Jun Ma, Kipp Martin, 
 * @version 1.0, 10/05/2005
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005, Robert Fourer, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"

#include <stdio.h>
#include <string.h>
#include "OSrLParserData.h"
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif

#ifdef WIN_
#define YY_NO_UNISTD_H
#include <io.h>
#include <process.h>
#endif

#include "parseosrl.tab.hpp"


     




#line 52 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 1147 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.cpp"

#define INITIAL 0
#define attributetext 1
#define osrlattributetext 2
#define comment 3
#define xmldeclaration 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 62 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"



#line 1390 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 729 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1785 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 65 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{printf("HERE IS WHITESPACE\n");}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 68 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 69 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 70 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; yylval->ival = atoi( yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 71 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; yylval->dval = atof( yytext); return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 72 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 75 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 76 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 77 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(RESULTHEADERSTART);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 78 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(RESULTHEADEREND);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 79 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 80 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(SERVICEURISTART);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 81 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 82 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 83 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(SERVICENAMESTART);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 84 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 85 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 86 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(INSTANCENAMESTART);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 87 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 88 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 89 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(JOBIDSTART);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 90 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 91 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(HEADERMESSAGESTART);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 92 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(HEADERMESSAGESTART);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 93 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(HEADERMESSAGEEND);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 95 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 96 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 98 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(RESULTDATASTART);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 99 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(RESULTDATAEND);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 101 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 102 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 104 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 105 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 107 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 108 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 110 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 111 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 113 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 114 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 116 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 117 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 118 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 119 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 121 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 122 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 123 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 124 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 126 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 127 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 128 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 129 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 131 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;   return(MESSAGESTART);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 132 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(MESSAGESTART);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 133 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 135 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 136 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 138 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 139 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 140 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 141 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 142 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJECTIVEIDXATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 143 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 144 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN attributetext; return(TYPEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 145 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN attributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 146 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN attributetext; return(NAMEATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 148 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICEURISTARTANDEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 149 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICENAMESTARTANDEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 150 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTARTANDEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 151 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(JOBIDSTARTANDEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 152 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(HEADERMESSAGESTARTANDEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 153 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(RESULTDATASTARTANDEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 158 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{ YY_PRINT;  yylval->charval = strdup(yytext);   return(ELEMENTTEXT); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 160 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
BEGIN comment;
	YY_BREAK
case 74:
#line 162 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 162 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 163 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
BEGIN 0;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 165 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 78:
#line 167 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 167 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 169 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
BEGIN 0;
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 175 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;    yylval->charval = strdup(yytext);
							BEGIN 0;  return(ATTRIBUTETEXT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 178 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->charval = strdup(yytext); return(OSRLATTRIBUTETEXT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 181 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
{ /*osrlerror(NULL, NULL, NULL,  "ecountered a spurious character in the lexer");*/}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 186 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"
ECHO;
	YY_BREAK
#line 1978 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(attributetext):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 729 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 729 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 728);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 186 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN/OS/src/OSParsers/parseosrl.l"





