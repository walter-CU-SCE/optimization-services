#line 2 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

#line 4 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 183
#define YY_END_OF_BUFFER 184
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1455] =
    {   0,
        1,    1,  181,  181,  179,  179,  180,  180,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  184,  182,
        1,    2,  169,    2,  169,    6,  169,    5,  182,    4,
      169,  181,  183,  179,  180,  170,  172,  173,  172,  176,
      177,  176,    1,  169,  169,    6,  169,    5,    0,    4,
      169,  169,  169,  169,  169,  169,  169,  169,  169,    3,
        6,    6,  169,    7,    5,    0,    0,  175,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    4,  169,  181,  179,  180,  170,    0,  178,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

        0,  169,    6,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    6,  174,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,    6,  171,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   85,    0,    0,
        0,    0,    0,    0,   63,    0,  105,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      165,  169,  169,  169,   24,  169,  169,  169,  169,  169,
      169,  169,    6,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   63,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  143,    0,    0,    0,
        0,    0,  169,  169,   24,  169,    0,  169,  169,  169,
        0,  169,    0,  169,  169,    0,    0,    0,    0,    0,

       86,    0,    0,    0,    0,    0,    0,    0,    0,   64,
        0,    0,    0,  106,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  166,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   68,  101,    0,    0,
        0,   55,   54,  111,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      169,  169,    0,   36,   37,  169,  169,    0,   40,   41,
        0,   44,   45,  169,    0,  169,    0,    0,    0,    0,
       86,    0,    0,    0,    0,    0,    0,    0,   69,   64,

        0,    0,  106,    0,    0,    0,   56,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  144,    0,    0,
        0,    0,    0,    0,    0,  166,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   70,   68,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  135,
        0,    0,   59,    0,    0,    0,    0,    0,    0,    0,
      161,    0,  169,  169,   34,   35,  169,  169,   38,   39,
       42,   43,    0,   48,   49,  169,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   69,    0,  102,    0,
        0,    0,   56,    0,  112,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  144,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   95,   57,    0,   70,    0,  103,    0,    0,
        0,    0,    0,   61,    0,    0,    0,    0,    0,   59,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      169,  169,  169,  169,   46,   47,  169,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  102,    0,    0,
        0,  112,    0,    0,    0,    0,    0,    0,    0,    0,
      136,    0,    0,    0,   60,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  162,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   57,    0,    0,    0,    0,
        0,    0,    0,    0,   61,    0,    0,  129,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  169,    0,  169,  169,  169,  169,  169,
      169,  169,  169,  169,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   96,    0,   58,    0,    0,    0,  104,
        0,    0,    0,    0,    0,    0,   62,    0,    0,    0,
        0,    0,  136,    0,    0,   60,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  162,    0,    0,    0,    0,
       83,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  139,    0,    0,  147,    0,    0,    0,    0,    0,
        0,    0,  167,    0,   28,   29,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,    0,    0,    0,
        0,    0,    0,    0,    0,   96,   58,    0,    0,  104,
        0,    0,    0,    0,    0,    0,   62,    0,    0,    0,
        0,  130,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   93,    0,    0,    0,  107,
        0,    0,    0,    0,    0,    0,  125,    0,    0,    0,

      137,    0,    0,    0,    0,    0,    0,    0,  159,    0,
       26,   27,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,    0,    0,    0,    0,    0,   84,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  130,    0,    0,    0,    0,
      140,    0,    0,    0,  148,    0,    0,    0,    0,    0,
        0,    0,    0,  168,    0,    0,    0,    0,   81,   87,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      123,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  169,    0,  169,    8,  169,  169,  169,   11,

      169,  169,  169,  169,  169,  169,  169,   22,  169,  169,
      169,    0,    0,    0,    0,   84,    0,    0,    0,    0,
        0,   94,    0,    0,    0,  108,    0,    0,    0,    0,
        0,    0,    0,  126,    0,    0,    0,    0,  138,  140,
        0,    0,  148,    0,    0,    0,    0,    0,    0,  160,
        0,  168,    0,    0,    0,    0,    0,   91,    0,   99,
        0,   67,   65,  113,    0,    0,    0,    0,    0,  133,
        0,    0,    0,    0,    0,  155,    0,  163,    0,   32,
       33,    8,  169,  169,   11,  169,  169,  169,  169,  169,
      169,   22,  169,  169,  169,    0,    0,    0,    0,    0,

       82,    0,   88,    0,    0,   94,    0,    0,  108,    0,
        0,    0,    0,    0,    0,  124,  126,    0,    0,    0,
      138,    0,    0,    0,    0,    0,    0,    0,  160,    0,
        0,    0,    0,    0,    0,    0,   97,   67,    0,    0,
        0,    0,    0,  131,    0,    0,    0,    0,  153,  157,
       30,   31,  169,  169,   10,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,   21,  169,  169,  169,    0,
        0,    0,    0,    0,   82,   88,    0,    0,   92,    0,
        0,  100,    0,   66,    0,    0,  114,    0,    0,    0,
      124,    0,    0,    0,  134,    0,    0,    0,    0,    0,

        0,  156,    0,    0,  164,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  151,
      169,   10,  169,  169,  169,  169,  169,  169,  169,  169,
      169,   21,  169,  169,  169,    0,    0,    0,    0,    0,
        0,   92,    0,   98,  100,   66,    0,  114,    0,    0,
        0,    0,    0,  132,  134,    0,    0,    0,    0,    0,
      154,  156,    0,  158,  164,   71,    0,    0,    0,   79,
       89,    0,    0,    0,    0,    0,    0,    0,    0,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,    0,    0,    0,    0,    0,    0,   98,    0,

        0,    0,    0,    0,  132,    0,    0,    0,    0,  152,
      154,  158,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,    0,   72,    0,    0,
        0,    0,   80,    0,   90,    0,    0,    0,    0,    0,
        0,    0,    0,  152,    0,   75,    0,    0,    0,  119,
        0,    0,  141,    0,  149,  169,  169,  169,  169,  169,
      169,  169,  169,   18,  169,  169,  169,   23,  169,  169,
       72,    0,    0,    0,   80,   90,    0,    0,    0,    0,
        0,    0,    0,    0,   73,   77,    0,    0,  121,  127,

      145,  169,  169,   12,  169,  169,  169,  169,  169,   18,
      169,  169,   23,  169,   25,  169,    0,    0,    0,   76,
        0,    0,    0,    0,  120,    0,    0,    0,  142,    0,
        0,  150,    0,  115,  169,    9,   12,  169,  169,  169,
      169,  169,  169,  169,   20,   25,    0,   52,   53,    0,
       74,   76,    0,   78,    0,    0,  120,    0,  122,    0,
      128,  142,    0,  146,  150,    0,  117,    9,  169,  169,
      169,   15,  169,  169,  169,   20,   50,   51,   74,   78,
        0,    0,  116,    0,  122,  128,  146,    0,  169,  169,
       15,  169,  169,  169,   19,    0,  116,    0,  118,    0,

      169,  169,  169,  169,   19,    0,  118,    0,  169,  169,
      169,  169,    0,    0,  169,  169,  169,  169,    0,    0,
      169,  169,  169,  169,    0,  109,  169,  169,  169,  169,
        0,  169,  169,  169,  169,    0,  110,  169,  169,  169,
       16,  169,   17,  110,  169,  169,   14,   16,   17,  169,
       13,   14,   13,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    1,    1,    7,    1,
        1,    6,    8,    1,    9,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    6,    1,   13,
       14,   15,   16,    6,    6,    6,   17,   18,   19,   20,
        6,    6,   21,   22,    6,    6,   23,   24,   25,   26,
        6,   27,   28,   29,   30,   31,    6,    6,    6,    6,
        1,    1,    1,    1,    6,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,    6,   48,   49,   50,   51,   52,   53,   54,
       55,   56,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    2,    2,    1,    3,    2,    4,    1,    2,    2,
        2,    2,    5,    1,    6,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[1468] =
    {   0,
        0,   21, 2735, 2734, 2743, 2742, 2739, 2738,    0,    0,
        0,    0, 2731, 2730,   35,   36,    3,   24, 2742, 2751,
       44, 2736,    5, 2733,   48,   68,   28,   88,  121,   46,
       49,    0, 2751,    0,    0,    0, 2751, 2751, 2730, 2751,
     2751, 2723,  172,   37,   96,  116,   53,  201,   70,   73,
       97,  101,  100,  107,  126,  131,  134,  163,  130, 2751,
      186,  216,  230, 2751,  195, 2728,  221, 2751,   33, 2704,
       26, 2684, 2689, 2697,   43, 2686, 2695,  101,  230,   59,
     2681, 2697,  124,  221,    0,    0,    0,    0, 2713, 2751,
      177,  181,  233,  125,  234,  245,  262,  271,  275,  276,

     2715,  282,  300, 2717,  157, 2693,  154, 2673, 2678, 2686,
      176, 2675, 2684,  249,  271,  204, 2670, 2686, 2667, 2684,
     2666, 2669, 2665, 2680, 2676, 2665, 2660, 2672, 2674, 2657,
     2664, 2654, 2655, 2663, 2662, 2652, 2656, 2666, 2664, 2647,
     2651, 2644, 2657,  220,  317, 2751,  291,  295,  321,  318,
      324,  325,  328,  329,  332,  333,  347, 2751, 2642, 2659,
     2641, 2644, 2640, 2655, 2651, 2640, 2635, 2647, 2649, 2632,
     2639, 2629, 2630, 2638, 2637, 2627, 2631, 2641, 2639, 2622,
     2626, 2619, 2632,  226, 2616, 2626,  140, 2616, 2616, 2620,
     2633, 2625, 2610, 2615,  230, 2609, 2621, 2616, 2612, 2618,

     2617, 2600,  249, 2601,  307, 2600,  124, 2617, 2613, 2596,
     2606,  340,  345,  359,  363,  367,  362,  371,  386,  389,
      372,  381,  365, 2594, 2604,  369,  403, 2595, 2599, 2612,
     2604, 2589, 2594,  408, 2588,  410, 2596, 2592, 2598, 2597,
     2580,  363, 2581,  346, 2580,  243, 2597, 2593, 2576,  419,
     2594, 2582, 2574, 2574, 2572, 2585, 2589, 2579, 2570, 2585,
      424,  414, 2598, 2583, 2580, 2569,  428, 2564, 2576, 2570,
     2559, 2572, 2556, 2566, 2555, 2568, 2575, 2557, 2558,  415,
     2564, 2567,  427,  432,  434,  447,  451,  442,  450,  464,
      478,  473,  489,  495,  455, 2566, 2554, 2546, 2546,  499,

      501, 2544, 2557, 2561, 2551, 2542, 2557,  504,  509,  513,
     2570, 2555,  515,  518, 2552, 2541,  520, 2536, 2548, 2542,
     2531, 2544, 2528, 2538, 2527, 2540,  523, 2530, 2531,  510,
     2537,  529,  534, 2540, 2528, 2538, 2537, 2540, 2519, 2521,
     2533, 2520, 2531, 2517,  537, 2546,  540, 2751, 2522, 2509,
     2518,  543, 2751,  522, 2506, 2522, 2515, 2506, 2504, 2502,
     2519, 2506,  278, 2511, 2526, 2521, 2506, 2509, 2495, 2510,
      541,  544,  558, 2537, 2534,  549,  553,  568, 2535, 2532,
      574, 2533, 2530,  580,  583,  583, 2493, 2503, 2502, 2505,
      597, 2484, 2486, 2498, 2485, 2496, 2482,  599,  601,  603,

      605, 2488,  607, 2475, 2484,  609,  613,  615, 2472, 2488,
     2481, 2472, 2470, 2468, 2485, 2472,  619,  623,  463, 2477,
     2492, 2487, 2472, 2475, 2461,  625, 2476, 2480, 2474, 2456,
     2455, 2472, 2453, 2459, 2465, 2457, 2465,  629,  633, 2487,
     2461, 2456, 2439, 2458, 2447, 2449, 2455, 2444,  403, 2751,
     2460, 2438,  635, 2439, 2454, 2464, 2438, 2453, 2433, 2437,
     2452, 2436,  626,  632, 2751, 2751,  456,  554, 2751, 2751,
     2751, 2751,  646, 2473, 2470,  637, 2448, 2442, 2424, 2423,
     2440, 2421, 2427, 2433, 2425, 2433,  652,  655,  657, 2430,
     2425, 2408,  659,  661,  663, 2427, 2416, 2418, 2424, 2413,

      423,  665, 2429, 2407,  671,  675, 2408, 2423, 2433, 2407,
     2422, 2402, 2406,  681, 2406, 2398, 2404, 2395, 2413, 2404,
      467, 2392, 2751,  685, 2406,  687, 2401, 2751, 2388, 2407,
     2389, 2394, 2400,  691, 2390, 2389, 2382, 2392, 2380,  695,
     2385, 2377, 2384, 2382, 2393,  556, 2383, 2378, 2373, 2386,
      697,  688,  701,  692, 2751, 2751,  710, 2371, 2377, 2368,
     2386, 2377,  519, 2365,  734,  736, 2379,  717,  738, 2362,
     2381,  740, 2363, 2368, 2374,  742, 2364, 2363, 2356,  744,
      752, 2366, 2354,  758,  760, 2359, 2351, 2358, 2356, 2367,
      605, 2357, 2352,  765,  767, 2347, 2360, 2363, 2358, 2344,

     2342, 2346, 2344, 2339, 2352,  772, 2337, 2362, 2335, 2348,
     2333, 2331,  725, 2346,  776, 2348,  414, 2751, 2327, 2328,
     2333, 2327, 2338, 2334, 2326, 2335, 2322, 2319, 2322, 2340,
     2319, 2318, 2316,  779,  781,  656,  743,  735,  782,  783,
      691,  786,  787,  791, 2332, 2327, 2313, 2311, 2315, 2313,
     2308, 2321,  788,  805,  807,  809, 2306, 2331,  811,  814,
     2318, 2303, 2301,  768, 2316,  825,  828, 2318,  424,  833,
     2297, 2298,  835, 2303, 2297,  839, 2308, 2304, 2296, 2305,
     2292, 2289, 2292, 2310, 2289,  841, 2288, 2286, 2286,  828,
     2751, 2282, 2282, 2298, 2298, 2280, 2296, 2295, 2290, 2276,

     2284, 2280, 2272, 2285, 2292, 2275, 2297, 2277, 2270, 2268,
     2278, 2751, 2267, 2278, 2751, 2265, 2282, 2265, 2272, 2260,
     2251, 2265, 2751,  847, 2299, 2296,  840,  843,  844,  848,
      847,  851,  854,  855,  858,  859,  862, 2254,  861,  880,
     2250, 2250, 2266, 2266, 2248,  888,  894, 2264, 2263,  898,
     2245, 2253, 2249, 2241, 2254, 2261,  902, 2244, 2266, 2246,
      905,  907, 2239, 2237, 2247,  909, 2236, 2247,  911, 2234,
     2250, 2227, 2228, 2207, 2198, 2160,  913, 2149, 2172, 2135,
     2126, 2110, 2096, 2114, 2067, 2751, 2065, 2062, 2058, 2751,
     2050, 2037, 2043, 2022, 2006, 2008, 2751, 1994, 1989, 1962,

     2751, 1959, 1967,    3,   36,   59,   66,   91, 2751,   85,
     2751, 2751,  916,  919,  910,  933,  924,  925,  929,  928,
      948,  940,  943,  152,  189,  200,  256,  968,  963,  276,
      303,  359,  369,  970,  432,  440,  972,  483,  484,  515,
      524,  542,  561,  978,  570,  989,  581,  589,  992,  994,
      996,  596,  639,  998, 1000,  631,  639,  658,  659,  676,
     1002,  672, 1008, 1012,  695,  697,  685,  708, 2751, 2751,
      719,  735,  736,  769, 1016,  776,  776,  787,  814,  815,
     2751,  825,  840,  831,  848,  870,  858,  897,  891,  910,
      915,  914, 1019, 1022, 1033, 1035,  993,  971, 1037, 1039,

     1015, 1040, 1041, 1044, 1045, 1048, 1062, 1042, 1053, 1054,
     1058,  928,  929,  918,  938, 1076, 1081, 1084,  943,  976,
     1087, 1079,  965,  990, 1098, 1101, 1017, 1021, 1026, 1049,
     1061, 1103, 1105, 1107, 1058, 1075, 1062, 1112, 1114, 1119,
     1075, 1095, 1122, 1082, 1108, 1093, 1095, 1097, 1130, 1132,
     1098, 1135, 1099, 1116, 1099, 1096, 1092, 2751, 1097, 2751,
     1145, 1147, 1123, 2751, 1107, 1102, 1106, 1099, 1121, 2751,
     1125, 1108, 1127, 1129, 1114, 2751, 1127, 2751, 1162, 1161,
     1161, 1168, 1159, 1173, 1175, 1166, 1167, 1170, 1176, 1186,
     1200, 1194, 1193, 1196, 1204, 1133, 1176, 1148, 1147, 1218,

     1220, 1225, 1227, 1154, 1229, 1232, 1163, 1234, 1236, 1240,
     1243, 1180, 1190, 1199, 1248, 1250, 1254, 1203, 1225, 1259,
     1262, 1234, 1217, 1237, 1238, 1223, 1270, 1239, 1274, 1276,
     1236, 1230, 1235, 1255, 1236, 1241, 2751, 1285, 1243, 1263,
     1242, 1243, 1262, 2751, 1245, 1264, 1247, 1250, 2751, 2751,
     2751, 2751, 1286, 1300, 1302, 1293, 1294, 1297, 1306, 1307,
     1311, 1310, 1314, 1319, 1333, 1314, 1336, 1337, 1342, 1256,
     1260, 1281, 1303, 1289, 1342, 1356, 1293, 1359, 1361, 1363,
     1365, 1368, 1373, 1381, 1295, 1383, 1387, 1327, 1310, 1322,
     1389, 1345, 1391, 1393, 1397, 1331, 1355, 1347, 1353, 1400,

     1402, 1407, 1409, 1411, 1416, 1371, 1372, 1384, 1374, 1367,
     1373, 1382, 1391, 1381, 1400, 1380, 1391, 1384, 1393, 2751,
     1421, 1435, 1426, 1427, 1430, 1431, 1434, 1435, 1439, 1438,
     1442, 1456, 1449, 1452, 1453, 1399, 1412, 1424, 1416, 1414,
     1420, 1472, 1479, 1484, 1488, 1493, 1433, 1495, 1443, 1441,
     1463, 1449, 1498, 1500, 1504, 1464, 1460, 1469, 1508, 1512,
     1514, 1516, 1518, 1522, 1526, 2751, 1479, 1486, 1494, 2751,
     2751, 1479, 1482, 1481, 1494, 1495, 1490, 1487, 1492, 1526,
     1527, 1530, 1531, 1534, 1535, 1538, 1539, 1542, 1545, 1546,
     1549, 1553, 1567, 1523, 1529, 1540, 1572, 1578, 1574, 1522,

     1534, 1539, 1551, 1556, 1595, 1553, 1550, 1555, 1600, 1602,
     1604, 1606, 1574, 1576, 1578, 1563, 1563, 1566, 1573, 1572,
     1574, 1584, 1576, 1609, 1612, 1613, 1616, 1617, 1620, 1621,
     1641, 1624, 1632, 1662, 1625, 1633, 1670, 1639, 1587, 1614,
     1617, 1678, 1655, 1681, 1664, 1602, 1611, 1619, 1630, 1632,
     1641, 1651, 1643, 1687, 1643, 2751, 1656, 1654, 1652, 2751,
     1661, 1653, 2751, 1664, 2751, 1687, 1701, 1692, 1693, 1696,
     1697, 1705, 1719, 1721, 1704, 1712, 1739, 1726, 1745, 1754,
     1728, 1653, 1747, 1677, 1742, 1761, 1686, 1692, 1763, 1703,
     1706, 1768, 1737, 1771, 2751, 2751, 1729, 1726, 2751, 2751,

     2751, 1777, 1782, 1779, 1774, 1785, 1786, 1790, 1789, 1791,
     1794, 1808, 1810, 1813, 1815, 1827, 1843, 1836, 1850, 1817,
     1852, 1731, 1738, 1854, 1831, 1856, 1858, 1860, 1874, 1876,
     1878, 1880, 1763, 1765, 1882, 1884, 1886, 1834, 1851, 1896,
     1855, 1877, 1889, 1903, 1905, 1912, 1917, 1819, 1824, 1924,
     1926, 1928, 1930, 1932, 1792, 1934, 1938, 1940, 1944, 1948,
     1950, 1954, 1956, 1958, 1962, 1815, 2751, 1964, 1955, 1908,
     1971, 1973, 1964, 1965, 1991, 1979, 2751, 2751, 1985, 1987,
     1844, 1993, 1995, 1999, 2007, 2009, 2013, 1844, 2004, 2005,
     2019, 2010, 2011, 2025, 2027, 1851, 2031, 2033, 2039, 1880,

     2030, 2036, 2037, 2040, 2056, 1893, 2058, 1898, 2049, 2050,
     2053, 2054, 1904, 1911, 2058, 2061, 2065, 2066, 1918, 1923,
     2062, 2075, 2069, 2078, 1950, 2751, 2079, 2082, 2085, 2088,
     2108, 2101, 2111, 2127, 2133, 2118, 2136, 2112, 2141, 2150,
     2147, 2155, 2164, 2169, 2171, 2174, 2176, 2178, 2180, 2188,
     2190, 2192, 2194, 2751, 2203, 2209, 2215, 2221, 2227, 2233,
     2239, 2245, 2250, 2256, 2261, 2267, 2273
    } ;

static yyconst flex_int16_t yy_def[1468] =
    {   0,
     1455, 1455, 1456, 1456, 1457, 1457, 1458, 1458, 1459, 1459,
     1459, 1459, 1460, 1460, 1461, 1461, 1462, 1462, 1454, 1454,
     1463, 1454, 1463, 1454, 1463, 1463, 1463, 1463, 1454, 1454,
     1463, 1464, 1454, 1465, 1466, 1467, 1454, 1454, 1454, 1454,
     1454, 1454, 1463, 1463, 1463, 1463, 1463, 1463,   29, 1454,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1454,
     1463, 1463, 1463, 1454, 1463, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1463, 1464, 1465, 1466, 1467, 1454, 1454,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,

     1454, 1463, 1463, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1463, 1454, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1463, 1463, 1463, 1454, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1463, 1463, 1454, 1463, 1454, 1463, 1463, 1463,
     1454, 1463, 1454, 1463, 1463, 1454, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1463, 1463, 1454, 1454, 1454, 1463, 1463, 1454, 1454, 1454,
     1454, 1454, 1454, 1463, 1454, 1463, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1463, 1463, 1454, 1454, 1463, 1463, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1463, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1463, 1463, 1463, 1463, 1454, 1454, 1463, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1463, 1454, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1463, 1454, 1463, 1454, 1463, 1463, 1463, 1454,

     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1454, 1463, 1463,
     1463, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1463, 1463, 1454, 1463, 1463, 1463, 1463, 1463,
     1463, 1454, 1463, 1463, 1463, 1454, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1463, 1463, 1454, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1454, 1463, 1463, 1463, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1463, 1454, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1454, 1463, 1463, 1463, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1454, 1463, 1463, 1463, 1454, 1463, 1463,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1463, 1463, 1454, 1463, 1463, 1463, 1463, 1463, 1454,
     1463, 1463, 1454, 1463, 1454, 1463, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1463, 1454, 1454, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1463, 1463,
     1463, 1454, 1463, 1463, 1463, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1463, 1463,
     1454, 1463, 1463, 1463, 1454, 1454, 1454, 1454, 1454, 1454,

     1463, 1463, 1463, 1463, 1454, 1454, 1454, 1454, 1463, 1463,
     1463, 1463, 1454, 1454, 1463, 1463, 1463, 1463, 1454, 1454,
     1463, 1463, 1463, 1463, 1454, 1454, 1463, 1463, 1463, 1463,
     1454, 1463, 1463, 1463, 1463, 1454, 1454, 1463, 1463, 1463,
     1454, 1463, 1454, 1454, 1463, 1463, 1454, 1454, 1454, 1463,
     1454, 1454, 1454,    0, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454
    } ;

static yyconst flex_int16_t yy_nxt[2808] =
    {   0,
       20,   21,   21,   20,   22,   41,   24,   20,   25,   26,
       27,   28,   29,   20,   30,   20, 1454, 1454,   42, 1454,
       31,   20,   21,   21,   20,   22,   41,   24,   20,   25,
       26,   27,   28,   29,   20,   30,   20,   38,   38,   42,
     1454,   31,   64,   39,   39,   43,   43,   83,   83, 1454,
      887, 1454,   45,   46,   47,   48,   49,   46,   50,   48,
     1454, 1454, 1454, 1454,   51, 1454,  119,   64,   51,   61,
       61,  122,   84, 1454,   83,   83,  123,   52,   53,   62,
     1454,  888, 1454,   54,  120, 1454,   63,  127,   55,   65,
       65,  889,  128,   56,   57,   58,   59,   46,  141,   48,

     1454,  890, 1454,   63,  142,   46,   63,   48, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454,   51,   61,   61, 1454,
       84, 1454,  891,   63,   66,   83,   83,   62, 1454,  892,
     1454,   67,   91,  131,   63,   92,   68, 1454, 1454, 1454,
     1454,   93, 1454, 1454, 1454, 1454, 1454,  132, 1454,  133,
      134,   63,   69,   70,   71,   72,   73,   94,   74,  277,
       75,   76,   96,  278,   77,  100,   78,  253,  150,   79,
       80,   81,   82,   43,   43, 1454,   95, 1454,   98,  254,
       45,   46,   47,   48,   49,   97,   50,   61,   61, 1454,
      159, 1454,   51, 1454,   99, 1454,   65,   65, 1454,  162,

     1454,  912,   65,   65,  163,   52,   53, 1454,  160, 1454,
       46,   54,   48, 1454,  913, 1454,   55,   61,   61,   63,
      167,   56,   57,   58,   59,  168,  147,   62, 1454,  148,
     1454,  262,  262, 1454,   63, 1454,   63,  101,  102,  914,
      145,  103, 1454,  181, 1454, 1454, 1454, 1454, 1454,  182,
      263,   63,  105,  106,  107,  108,  109, 1454,  110, 1454,
      111,  112,  210,  135,  113,  136,  114,  211,  249,  115,
      116,  117,  118,  250, 1454,  137, 1454,  151,  327,  138,
      139,  171,  328, 1454,  140, 1454,  149, 1454, 1454, 1454,
     1454,  915,  152,  103, 1454,  172, 1454,  173,  174,  271,

      272,   61,   61, 1454,  175, 1454,  176, 1454,  153, 1454,
      154,  103, 1454,  454, 1454,  156,  177,  155,   61,   61,
      178,  179,  214,  214,  917,  180,  212,  455,  213, 1454,
     1454, 1454, 1454, 1454,  215, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,  223,  223,
      274,  918, 1454,  216, 1454,  275,  217, 1454,  157, 1454,
      214,  214,  218,  219,  285,  285,  223,  223,  286,  286,
      222, 1454,  215, 1454, 1454,  919, 1454,  283,  220, 1454,
      287, 1454,  221, 1454, 1454, 1454, 1454,  290,  290,  324,
      292,  292,  284, 1454,  325, 1454,  298,  288, 1454,  291,

     1454, 1454,  293, 1454,  300,  300,  289,  294,  299,  309,
      309,  313,  313,  321,  322,  262,  262,  301,  920,  295,
      332,  332,  310,  536,  314,  345,  345,  537,  311,  352,
      352,  366,  367,  333,  346,  285,  285,  368,  347, 1454,
      707, 1454,  353,  578, 1454,  315, 1454,  579,  286,  286,
      759,  302,  373,  373, 1454,  374, 1454,  375,  334, 1454,
      287, 1454, 1454,  708, 1454,  290,  290, 1454, 1454, 1454,
     1454,  372,  371,  760,  292,  292, 1454,  291, 1454,  378,
      378,  923,  379,  924,  380, 1454,  293, 1454,  603,  376,
      381,  381,  553,  382,  604,  383,  384,  384,  507,  377,

      300,  300,  391,  391,  386,  398,  398, 1454,  385, 1454,
      309,  309,  508,  301,  400,  400,  313,  313,  399,  403,
      403,  406,  406,  310,  417,  417,  422,  423,  927,  314,
      332,  332,  424,  928,  407,  426,  426,  418,  345,  345,
      650,  439,  439,  333,  352,  352,  651,  346,  444,  445,
      419,  347,  440, 1454,  929, 1454, 1454,  353, 1454,  373,
      373, 1454,  374, 1454,  375, 1454, 1454, 1454, 1454,  378,
      378,  930,  379,  467,  380,  381,  381,  468,  382,  628,
      383,  384,  384,  629,  473,  473,  554,  474,  463,  475,
      464,  931, 1454,  385, 1454, 1454,  932, 1454,  391,  391,

      398,  398,  487,  487,  400,  400,  488,  488,  403,  403,
      406,  406,  935,  399,  493,  493,  494,  494,  476,  489,
      417,  417,  936,  407,  506,  506,  426,  426,  682,  495,
      526,  526,  683,  418,  439,  439,  540,  540, 1454,  937,
     1454,  496,  497,  941, 1454,  440, 1454,  473,  473, 1454,
      474, 1454,  475,  487,  487,  541,  488,  488,  568,  568,
      493,  493,  494,  494,  572,  572,  580,  580, 1454,  489,
     1454,  557,  584,  584,  942,  495,  506,  506,  944,  581,
      551,  552,  594,  594,  945,  585,  606,  606,  526,  526,
      946,  586,  615,  615,  947,  595,  540,  540,  634,  634,

     1454,  727, 1454, 1454, 1454, 1454, 1454,  948,  596, 1454,
      635, 1454,  607, 1454,  616, 1454,  951,  637,  568,  568,
      617,  638, 1454,  953, 1454,  639,  954,  636,  640,  641,
      734,  642,  643,  955,  644,  653,  653,  655,  655,  659,
      659,  572,  572,  666,  666,  580,  580, 1454,  654, 1454,
      656,  956,  660,  673,  673, 1454,  667, 1454,  581,  584,
      584,  676,  676,  657,  957,  668,  594,  594,  686,  686,
      958,  669,  585,  606,  606,  703,  704,  615,  615,  595,
      634,  634,  724,  724,  729,  725,  959,  726,  728,  653,
      653, 1454,  635, 1454, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1454,  654, 1454,  960, 1454,  746,  746,  655,  655,
      747,  747,  659,  659,  730,  750,  750,  735,  754,  755,
      963,  656,  736,  737,  964,  660,  666,  666,  732,  757,
      757,  731,  965,  733,  761,  761,  673,  673,  966,  667,
      676,  676,  686,  686,  779,  780,  967,  762,  724,  724,
      781,  725, 1454,  726, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454,  968, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454,  969, 1454,  825,  826,  815,
      970,  828,  828,  827,  813,  817,  819,  814,  816,  746,
      746,  971,  822,  818,  829,  747,  747,  972,  820,  750,

      750,  973,  823,  757,  757,  821,  761,  761,  846,  846,
      850,  850,  854,  854,  863,  863,  974,  893,  893,  762,
      895,  895, 1454,  851, 1454,  855,  975,  864, 1454,  894,
     1454, 1454,  896, 1454,  899,  899, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454,  976, 1454,  900, 1454,  977,  907,
      907,  978, 1454,  898, 1454, 1454,  996, 1454,  997,  902,
     1454,  908, 1454,  906,  916,  916,  998,  897,  901,  828,
      828,  921,  921,  925,  925,  903,  904,  905,  911,  933,
      933,  999,  829, 1454,  922, 1454,  926,  909, 1004,  910,
      846,  846,  934,  938,  938,  850,  850,  940,  940,  854,

      854,  943,  943,  949,  949, 1454,  939, 1454,  851,  863,
      863, 1005,  855,  952,  952, 1007,  950,  961,  961,  984,
      893,  893,  864,  979,  979, 1008,  980, 1454,  981, 1454,
      962, 1454,  894, 1454,  895,  895,  982,  982,  899,  899,
      985,  985,  983,  992,  992, 1454,  896, 1454,  986, 1454,
      900, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1010, 1454,  907,  907, 1454, 1454, 1454, 1454, 1011,
     1454, 1012, 1454, 1013, 1454,  908, 1454,  916,  916,  989,
     1006, 1006, 1000, 1000,  993, 1002, 1002,  987,  921,  921,
      988,  995, 1014,  994,  990, 1001,  991, 1018, 1003,  925,

      925,  922, 1009, 1009, 1015, 1015,  933,  933, 1017, 1017,
     1019, 1020,  926,  938,  938, 1021, 1021, 1016, 1022,  934,
      940,  940, 1023,  943,  943, 1024,  939, 1025, 1026, 1027,
     1028,  949,  949, 1029, 1029, 1030,  952,  952, 1031, 1032,
     1034, 1035, 1036, 1033,  950, 1037,  961,  961, 1038, 1038,
     1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,  962,
     1048, 1049, 1050,  979,  979, 1051,  980, 1052,  981,  982,
      982, 1454, 1070, 1454, 1054, 1054,  985,  985, 1454, 1454,
     1454, 1454, 1454, 1057, 1454, 1454, 1055, 1454, 1454, 1073,
     1454, 1058, 1074, 1059, 1060,  992,  992, 1061, 1454, 1071,

     1454, 1065, 1065, 1072, 1077, 1454, 1053, 1454, 1454, 1062,
     1454, 1080, 1454, 1066, 1454, 1056, 1454, 1064, 1454, 1000,
     1000, 1075, 1075, 1063, 1088, 1067, 1002, 1002, 1076, 1076,
     1078, 1078, 1001, 1006, 1006, 1081, 1081, 1009, 1009, 1003,
     1089, 1083, 1083, 1079, 1086, 1086, 1090, 1068, 1082, 1015,
     1015, 1091, 1091, 1069, 1084, 1017, 1017, 1087, 1092, 1093,
     1094, 1094, 1016, 1021, 1021, 1096, 1097, 1085, 1098, 1099,
     1100, 1101, 1101, 1095, 1103, 1029, 1029, 1104, 1104, 1106,
     1107, 1108, 1109, 1110, 1102, 1111, 1038, 1038, 1112, 1113,
     1105, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1454, 1136,

     1454, 1054, 1054, 1122, 1122, 1454, 1454, 1454, 1454, 1454,
     1137, 1454, 1454, 1055, 1454, 1132, 1132, 1121, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1138, 1454, 1125,
     1139, 1454, 1123, 1454, 1065, 1065, 1140, 1141, 1130, 1124,
     1147, 1126, 1128, 1075, 1075, 1454, 1066, 1454, 1454, 1454,
     1454, 1454, 1127, 1149, 1454, 1129, 1454, 1076, 1076, 1150,
     1078, 1078, 1142, 1142, 1143, 1143, 1081, 1081, 1131, 1145,
     1145, 1151, 1134, 1079, 1083, 1083, 1152, 1144, 1133, 1082,
     1156, 1135, 1146, 1146, 1086, 1086, 1157, 1084, 1148, 1148,
     1091, 1091, 1153, 1153, 1094, 1094, 1158, 1087, 1155, 1155,

     1159, 1160, 1160, 1101, 1101, 1154, 1166, 1095, 1162, 1162,
     1163, 1163, 1104, 1104, 1161, 1167, 1102, 1165, 1165, 1168,
     1169, 1170, 1171, 1164, 1172, 1105, 1173, 1174, 1175, 1176,
     1177, 1178, 1179, 1454, 1193, 1454, 1122, 1122, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1194, 1454, 1132, 1132, 1195,
     1180, 1454, 1196, 1454, 1454, 1454, 1454, 1454, 1197, 1198,
     1183, 1182, 1191, 1142, 1142, 1200, 1185, 1181, 1201, 1184,
     1143, 1143, 1186, 1187, 1190, 1199, 1199, 1202, 1188, 1145,
     1145, 1203, 1189, 1144, 1146, 1146, 1148, 1148, 1204, 1153,

     1153, 1205, 1205, 1206, 1192, 1155, 1155, 1207, 1208, 1209,
     1209, 1213, 1154, 1160, 1160, 1211, 1211, 1162, 1162, 1163,
     1163, 1214, 1210, 1212, 1212, 1215, 1161, 1165, 1165, 1216,
     1217, 1218, 1164, 1219, 1220, 1221, 1222, 1223, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1239, 1454, 1454, 1454, 1454,
     1454, 1454, 1225, 1454, 1240, 1454, 1227, 1454, 1237, 1237,
     1224, 1241, 1246, 1242, 1242, 1199, 1199, 1230, 1226, 1244,
     1244, 1238, 1247, 1235, 1228, 1229, 1243, 1231, 1236, 1248,
     1249, 1232, 1245, 1233, 1234, 1250, 1205, 1205, 1251, 1252,

     1253, 1209, 1209, 1254, 1254, 1211, 1211, 1212, 1212, 1255,
     1256, 1257, 1258, 1259, 1210, 1260, 1261, 1262, 1263, 1264,
     1265, 1454, 1282, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1281, 1281, 1273, 1273, 1454, 1454, 1454, 1454, 1283, 1269,
     1284, 1287, 1272, 1454, 1274, 1454, 1285, 1285, 1266, 1270,
     1267, 1288, 1268, 1277, 1277, 1286, 1286, 1276, 1289, 1271,
     1275, 1237, 1237, 1290, 1454, 1278, 1454, 1291, 1279, 1242,
     1242, 1280, 1244, 1244, 1238, 1292, 1293, 1294, 1254, 1254,
     1295, 1296, 1243, 1297, 1298, 1245, 1299, 1300, 1301, 1454,

     1318, 1454, 1303, 1303, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1321, 1454, 1304, 1454, 1454, 1454, 1454, 1454,
     1273, 1273, 1310, 1310, 1454, 1322, 1454, 1313, 1313, 1281,
     1281, 1454, 1274, 1454, 1323, 1302, 1308, 1309, 1326, 1305,
     1277, 1277, 1306, 1285, 1285, 1307, 1314, 1314, 1319, 1319,
     1327, 1454, 1278, 1454, 1311, 1316, 1316, 1454, 1315, 1454,
     1312, 1320, 1286, 1286, 1324, 1324, 1454, 1317, 1454, 1328,
     1328, 1330, 1331, 1331, 1333, 1334, 1355, 1325, 1335, 1335,
     1337, 1337, 1329, 1303, 1303, 1332, 1454, 1356, 1454, 1454,
     1336, 1454, 1310, 1310, 1454, 1304, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1338, 1454, 1366, 1454, 1344,
     1344, 1313, 1313, 1367, 1314, 1314, 1346, 1346, 1352, 1352,
     1454, 1345, 1454, 1377, 1339, 1454, 1315, 1454, 1316, 1316,
     1378, 1342, 1357, 1357, 1340, 1341, 1381, 1350, 1350, 1454,
     1317, 1454, 1388, 1343, 1347, 1347, 1454, 1348, 1454, 1349,
     1351, 1319, 1319, 1353, 1353, 1324, 1324, 1358, 1358, 1360,
     1360, 1328, 1328, 1454, 1320, 1454, 1354, 1454, 1325, 1454,
     1359, 1396, 1361, 1369, 1329, 1362, 1362, 1363, 1363, 1331,
     1331, 1365, 1365, 1335, 1335, 1368, 1368, 1337, 1337, 1454,
     1364, 1454, 1332, 1400, 1454, 1336, 1454, 1371, 1371, 1373,

     1406, 1454, 1370, 1454, 1344, 1344, 1376, 1376, 1454, 1372,
     1454, 1408, 1374, 1346, 1346, 1454, 1345, 1454, 1347, 1347,
     1454, 1348, 1454, 1349, 1413, 1350, 1350, 1379, 1379, 1352,
     1352, 1353, 1353, 1380, 1380, 1382, 1382, 1375, 1351, 1357,
     1357, 1358, 1358, 1390, 1354, 1385, 1385, 1414, 1383, 1360,
     1360, 1386, 1386, 1419, 1359, 1362, 1362, 1363, 1363, 1387,
     1387, 1420, 1361, 1365, 1365, 1368, 1368, 1454, 1425, 1454,
     1364, 1426, 1371, 1371, 1391, 1391, 1454, 1454, 1454, 1454,
     1376, 1376, 1384, 1454, 1372, 1454, 1379, 1379, 1380, 1380,
     1392, 1393, 1394, 1394, 1382, 1382, 1397, 1397, 1431, 1389,

     1398, 1398,  886, 1454, 1395, 1454,  885, 1383, 1385, 1385,
     1386, 1386,  884, 1399, 1387, 1387, 1454, 1454, 1454, 1454,
     1391, 1391, 1454, 1454, 1454, 1454, 1394, 1394, 1405, 1405,
      883, 1402, 1397, 1397, 1398, 1398,  882, 1454, 1395, 1454,
     1407, 1407, 1454,  881, 1454, 1403, 1404, 1399, 1454, 1454,
     1454, 1454, 1454, 1401, 1454,  880, 1409, 1405, 1405, 1407,
     1407, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,  879,
     1454, 1410, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454,  878, 1454, 1415, 1411,  877, 1454, 1412, 1454,
     1454, 1454, 1454, 1454, 1454,  876, 1454, 1454, 1416, 1454,

     1454,  875, 1454, 1417, 1418,  874, 1421, 1423, 1424, 1436,
     1436, 1422, 1427, 1454,  873, 1454,  872, 1428, 1429, 1436,
     1436, 1432, 1437, 1454, 1454, 1454, 1454, 1430, 1440, 1440,
      871, 1433, 1437, 1434, 1442, 1442, 1435, 1444, 1444, 1454,
     1441, 1454, 1446, 1446,  870, 1454, 1443, 1454, 1448, 1448,
     1438, 1440, 1440, 1454, 1447, 1454, 1442, 1442,  869, 1439,
     1445,  868, 1454, 1441, 1454, 1449, 1449, 1454, 1443, 1454,
     1444, 1444, 1450, 1450,  867, 1446, 1446, 1452, 1452, 1448,
     1448, 1449, 1449, 1454, 1451, 1454, 1454, 1447, 1454, 1450,
     1450, 1453, 1453, 1452, 1452, 1453, 1453,  866,  865,  862,

     1454, 1451, 1454,   23,   23,   23,   23,   23,   23,   32,
       32,   32,   32,   32,   32,   34,   34,   34,   34,   34,
       34,   35,   35,   35,   35,   35,   35,   33,   33,   33,
       33,   33,   33,   36,   36,   36,   36,   36,   36,   37,
       37,   37,   37,   37,   37,   40,   40,   40,   40,   40,
       40,   44,  861,  860,   44,   44,   85,   85,   85,   85,
       85,   86,   86,  859,   86,   86,   86,   87,   87,   87,
      858,   87,   87,   88,   88,   88,   88,  857,   88,  856,
      853,  852,  849,  848,  847,  845,  844,  843,  842,  841,
      840,  839,  838,  837,  836,  835,  834,  833,  832,  831,

      830,  824,  812,  811,  810,  809,  808,  807,  806,  805,
      804,  803,  802,  801,  800,  799,  798,  797,  796,  795,
      794,  793,  792,  791,  790,  789,  788,  787,  786,  785,
      784,  783,  782,  778,  777,  776,  775,  774,  773,  772,
      771,  770,  769,  768,  767,  766,  765,  764,  763,  758,
      756,  753,  752,  751,  749,  748,  745,  744,  743,  742,
      741,  740,  739,  738,  723,  722,  721,  720,  719,  718,
      717,  716,  715,  714,  713,  712,  711,  710,  709,  706,
      705,  702,  701,  700,  699,  698,  697,  696,  695,  694,
      693,  692,  691,  690,  689,  688,  687,  685,  684,  681,

      680,  679,  678,  677,  675,  674,  672,  671,  670,  665,
      664,  663,  662,  661,  658,  652,  649,  648,  647,  646,
      645,  633,  632,  631,  630,  627,  626,  625,  624,  623,
      622,  621,  620,  619,  618,  614,  613,  612,  611,  610,
      609,  608,  605,  602,  601,  600,  599,  598,  597,  593,
      592,  591,  590,  589,  588,  587,  583,  582,  577,  576,
      575,  574,  573,  571,  570,  569,  567,  566,  565,  564,
      563,  562,  561,  560,  559,  558,  556,  555,  550,  549,
      548,  547,  546,  545,  544,  543,  542,  539,  538,  535,
      534,  533,  532,  531,  530,  529,  528,  527,  525,  524,

      523,  522,  521,  520,  519,  518,  517,  516,  515,  514,
      513,  512,  511,  510,  509,  505,  504,  503,  502,  501,
      500,  499,  498,  492,  491,  490,  486,  485,  484,  483,
      482,  481,  480,  479,  478,  477,  472,  471,  470,  469,
      466,  465,  462,  461,  460,  459,  458,  457,  456,  453,
      452,  451,  450,  449,  448,  447,  446,  443,  442,  441,
      438,  437,  436,  435,  434,  433,  432,  431,  430,  429,
      428,  427,  425,  421,  420,  416,  415,  414,  413,  412,
      411,  410,  409,  408,  405,  404,  402,  401,  397,  396,
      395,  394,  393,  392,  390,  389,  388,  387,  370,  369,

      365,  364,  363,  362,  361,  360,  359,  358,  357,  356,
      355,  354,  351,  350,  349,  348,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  331,  330,  329,  326,
      323,  320,  319,  318,  317,  316,  312,  308,  307,  306,
      305,  304,  303,  297,  296,  282,  281,  280,  279,  276,
      273,  270,  269,  268,  267,  266,  265,  264,  261,  260,
      259,  258,  257,  256,  255,  252,  251,  248,  247,  246,
      245,  244,  243,  242,  241,  240,  239,  238,  237,  236,
      235,  234,  233,  232,  231,  230,  229,  228,  227,  226,
      225,  224,  209,  208,  207,  206,  205,  204,  203,  202,

      201,  200,  199,  198,  197,  196,  195,  194,  193,  192,
      191,  190,  189,  188,  187,  186,  185,  184,  183,  170,
      169,  166,  165,  164,  161,  158,  157,  146,  144,  143,
      130,  129,  126,  125,  124,  121,  104,   90,   89,   60,
       60, 1454,   33,   33,   33,   33,   33,   33,   33,   33,
       19, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454
    } ;

static yyconst flex_int16_t yy_chk[2808] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    0,   23,   17,   23,
        1,    2,    2,    2,    2,    2,   18,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,   15,   16,   18,
       27,    2,   27,   15,   16,   21,   21,   30,   30,   44,
      804,   44,   21,   21,   21,   21,   21,   25,   21,   25,
       25,   31,   25,   31,   21,   47,   69,   47,   25,   26,
       26,   71,   31,   49,   50,   50,   71,   21,   21,   26,
       26,  805,   26,   21,   69,   49,   26,   75,   21,   28,
       28,  806,   75,   21,   21,   21,   21,   28,   80,   28,

       28,  807,   28,   26,   80,   45,   28,   45,   45,   51,
       45,   51,   53,   52,   53,   52,   45,   46,   46,   54,
       51,   54,  808,   28,   29,   83,   83,   46,   46,  810,
       46,   29,   52,   78,   46,   53,   29,   94,   55,   94,
       55,   54,   59,   56,   59,   56,   57,   78,   57,   78,
       78,   46,   29,   29,   29,   29,   29,   55,   29,  207,
       29,   29,   56,  207,   29,   59,   29,  187,   94,   29,
       29,   29,   29,   43,   43,   58,   55,   58,   57,  187,
       43,   43,   43,   43,   43,   56,   43,   61,   61,   91,
      105,   91,   43,   92,   58,   92,   65,   65,   61,  107,

       61,  824,   48,   48,  107,   43,   43,   65,  105,   65,
       48,   43,   48,   48,  825,   48,   43,   62,   62,   48,
      111,   43,   43,   43,   43,  111,   91,   62,   62,   92,
       62,  195,  195,   84,   62,   84,   48,   63,   63,  826,
       84,   63,   63,  116,   63,   93,   95,   93,   95,  116,
      195,   62,   67,   67,   67,   67,   67,   96,   67,   96,
       67,   67,  144,   79,   67,   79,   67,  144,  184,   67,
       67,   67,   67,  184,   97,   79,   97,   95,  246,   79,
       79,  114,  246,   98,   79,   98,   93,   99,  100,   99,
      100,  827,   96,  102,  102,  114,  102,  114,  114,  203,

      203,  103,  103,  147,  115,  147,  115,  148,   97,  148,
       98,  103,  103,  363,  103,  100,  115,   99,  145,  145,
      115,  115,  149,  149,  830,  115,  147,  363,  148,  145,
      150,  145,  150,  149,  149,  149,  151,  152,  151,  152,
      153,  154,  153,  154,  155,  156,  155,  156,  157,  157,
      205,  831,  212,  150,  212,  205,  151,  213,  157,  213,
      214,  214,  152,  153,  215,  215,  223,  223,  216,  216,
      156,  214,  214,  214,  217,  832,  217,  212,  154,  216,
      216,  216,  155,  218,  221,  218,  221,  219,  219,  244,
      220,  220,  213,  222,  244,  222,  226,  217,  219,  219,

      219,  220,  220,  220,  227,  227,  218,  221,  226,  234,
      234,  236,  236,  242,  242,  262,  262,  227,  833,  222,
      250,  250,  234,  449,  236,  261,  261,  449,  234,  267,
      267,  280,  280,  250,  261,  285,  285,  280,  261,  283,
      617,  283,  267,  501,  284,  236,  284,  501,  286,  286,
      669,  227,  287,  287,  288,  287,  288,  287,  250,  286,
      286,  286,  289,  617,  289,  290,  290,  295,  467,  295,
      467,  284,  283,  669,  292,  292,  290,  290,  290,  291,
      291,  835,  291,  836,  291,  292,  292,  292,  521,  288,
      293,  293,  467,  293,  521,  293,  294,  294,  419,  289,

      300,  300,  301,  301,  295,  308,  308,  294,  294,  294,
      309,  309,  419,  300,  310,  310,  313,  313,  308,  314,
      314,  317,  317,  309,  327,  327,  330,  330,  838,  313,
      332,  332,  330,  839,  317,  333,  333,  327,  345,  345,
      563,  347,  347,  332,  352,  352,  563,  345,  354,  354,
      327,  345,  347,  371,  840,  371,  372,  352,  372,  373,
      373,  376,  373,  376,  373,  377,  468,  377,  468,  378,
      378,  841,  378,  376,  378,  381,  381,  377,  381,  546,
      381,  384,  384,  546,  385,  385,  468,  385,  371,  385,
      372,  842,  384,  384,  384,  386,  843,  386,  391,  391,

      398,  398,  399,  399,  400,  400,  401,  401,  403,  403,
      406,  406,  845,  398,  407,  407,  408,  408,  386,  401,
      417,  417,  847,  406,  418,  418,  426,  426,  591,  408,
      438,  438,  591,  417,  439,  439,  453,  453,  463,  848,
      463,  408,  408,  852,  464,  439,  464,  473,  473,  476,
      473,  476,  473,  487,  487,  453,  488,  488,  489,  489,
      493,  493,  494,  494,  495,  495,  502,  502,  636,  488,
      636,  476,  505,  505,  853,  494,  506,  506,  856,  502,
      463,  464,  514,  514,  857,  505,  524,  524,  526,  526,
      858,  505,  534,  534,  859,  514,  540,  540,  551,  551,

      552,  636,  552,  641,  554,  641,  554,  860,  514,  551,
      551,  551,  524,  553,  534,  553,  862,  553,  568,  568,
      534,  553,  557,  865,  557,  553,  866,  552,  553,  553,
      641,  553,  554,  867,  557,  565,  565,  566,  566,  569,
      569,  572,  572,  576,  576,  580,  580,  638,  565,  638,
      566,  868,  569,  581,  581,  637,  576,  637,  580,  584,
      584,  585,  585,  566,  871,  576,  594,  594,  595,  595,
      872,  576,  584,  606,  606,  613,  613,  615,  615,  594,
      634,  634,  635,  635,  638,  635,  873,  635,  637,  653,
      653,  634,  634,  634,  639,  640,  639,  640,  642,  643,

      642,  643,  653,  644,  874,  644,  654,  654,  655,  655,
      656,  656,  659,  659,  639,  660,  660,  642,  664,  664,
      876,  655,  643,  644,  877,  659,  666,  666,  640,  667,
      667,  639,  878,  640,  670,  670,  673,  673,  879,  666,
      676,  676,  686,  686,  690,  690,  880,  670,  724,  724,
      690,  724,  727,  724,  727,  728,  729,  728,  729,  731,
      730,  731,  730,  732,  882,  732,  733,  734,  733,  734,
      735,  736,  735,  736,  737,  883,  737,  739,  739,  729,
      884,  740,  740,  739,  727,  731,  733,  728,  730,  746,
      746,  885,  736,  732,  740,  747,  747,  886,  734,  750,

      750,  887,  737,  757,  757,  735,  761,  761,  762,  762,
      766,  766,  769,  769,  777,  777,  888,  813,  813,  761,
      814,  814,  815,  766,  815,  769,  889,  777,  813,  813,
      813,  814,  814,  814,  816,  816,  817,  818,  817,  818,
      820,  819,  820,  819,  890,  816,  816,  816,  891,  821,
      821,  892,  822,  815,  822,  823,  912,  823,  913,  817,
      821,  821,  821,  820,  829,  829,  914,  814,  816,  828,
      828,  834,  834,  837,  837,  818,  818,  819,  823,  844,
      844,  915,  828,  898,  834,  898,  837,  821,  919,  822,
      846,  846,  844,  849,  849,  850,  850,  851,  851,  854,

      854,  855,  855,  861,  861,  897,  849,  897,  850,  863,
      863,  920,  854,  864,  864,  923,  861,  875,  875,  898,
      893,  893,  863,  894,  894,  924,  894,  901,  894,  901,
      875,  893,  893,  893,  895,  895,  896,  896,  899,  899,
      900,  900,  897,  908,  908,  895,  895,  895,  901,  899,
      899,  899,  902,  903,  902,  903,  904,  905,  904,  905,
      906,  927,  906,  907,  907,  909,  910,  909,  910,  928,
      911,  929,  911,  930,  907,  907,  907,  916,  916,  904,
      922,  922,  917,  917,  909,  918,  918,  902,  921,  921,
      903,  911,  931,  910,  905,  917,  906,  935,  918,  925,

      925,  921,  926,  926,  932,  932,  933,  933,  934,  934,
      936,  937,  925,  938,  938,  939,  939,  932,  941,  933,
      940,  940,  942,  943,  943,  944,  938,  945,  946,  947,
      948,  949,  949,  950,  950,  951,  952,  952,  953,  954,
      955,  956,  957,  954,  949,  959,  961,  961,  962,  962,
      963,  965,  966,  967,  968,  969,  971,  972,  973,  961,
      974,  975,  977,  979,  979,  980,  979,  981,  979,  982,
      982,  983,  996,  983,  984,  984,  985,  985,  986,  987,
      986,  987,  988,  987,  988,  984,  984,  984,  989,  998,
      989,  987,  999,  987,  987,  992,  992,  987,  990,  997,

      990,  991,  991,  997, 1004,  993,  983,  993,  994,  988,
      994, 1007,  991,  991,  991,  986,  995,  990,  995, 1000,
     1000, 1001, 1001,  989, 1012,  993, 1002, 1002, 1003, 1003,
     1005, 1005, 1000, 1006, 1006, 1008, 1008, 1009, 1009, 1002,
     1013, 1010, 1010, 1005, 1011, 1011, 1014,  994, 1008, 1015,
     1015, 1016, 1016,  995, 1010, 1017, 1017, 1011, 1018, 1019,
     1020, 1020, 1015, 1021, 1021, 1022, 1023, 1010, 1024, 1025,
     1026, 1027, 1027, 1020, 1028, 1029, 1029, 1030, 1030, 1031,
     1032, 1033, 1034, 1035, 1027, 1036, 1038, 1038, 1039, 1040,
     1030, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1053, 1070,

     1053, 1054, 1054, 1055, 1055, 1056, 1057, 1056, 1057, 1058,
     1071, 1058, 1054, 1054, 1054, 1066, 1066, 1053, 1059, 1060,
     1059, 1060, 1062, 1061, 1062, 1061, 1063, 1072, 1063, 1058,
     1073, 1064, 1056, 1064, 1065, 1065, 1074, 1077, 1063, 1057,
     1085, 1059, 1061, 1075, 1075, 1065, 1065, 1065, 1067, 1068,
     1067, 1068, 1060, 1088, 1069, 1062, 1069, 1076, 1076, 1089,
     1078, 1078, 1079, 1079, 1080, 1080, 1081, 1081, 1064, 1082,
     1082, 1090, 1068, 1078, 1083, 1083, 1092, 1080, 1067, 1081,
     1096, 1069, 1084, 1084, 1086, 1086, 1097, 1083, 1087, 1087,
     1091, 1091, 1093, 1093, 1094, 1094, 1098, 1086, 1095, 1095,

     1099, 1100, 1100, 1101, 1101, 1093, 1106, 1094, 1102, 1102,
     1103, 1103, 1104, 1104, 1100, 1107, 1101, 1105, 1105, 1108,
     1109, 1110, 1111, 1103, 1112, 1104, 1113, 1114, 1115, 1116,
     1117, 1118, 1119, 1121, 1136, 1121, 1122, 1122, 1123, 1124,
     1123, 1124, 1125, 1126, 1125, 1126, 1127, 1128, 1127, 1128,
     1130, 1129, 1130, 1129, 1131, 1137, 1131, 1132, 1132, 1138,
     1121, 1133, 1139, 1133, 1134, 1135, 1134, 1135, 1140, 1141,
     1125, 1124, 1134, 1142, 1142, 1147, 1127, 1123, 1149, 1126,
     1143, 1143, 1128, 1129, 1133, 1144, 1144, 1150, 1130, 1145,
     1145, 1151, 1131, 1143, 1146, 1146, 1148, 1148, 1152, 1153,

     1153, 1154, 1154, 1156, 1135, 1155, 1155, 1157, 1158, 1159,
     1159, 1167, 1153, 1160, 1160, 1161, 1161, 1162, 1162, 1163,
     1163, 1168, 1159, 1164, 1164, 1169, 1160, 1165, 1165, 1172,
     1173, 1174, 1163, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
     1180, 1181, 1182, 1183, 1182, 1183, 1184, 1185, 1184, 1185,
     1186, 1187, 1186, 1187, 1188, 1194, 1188, 1189, 1190, 1189,
     1190, 1191, 1181, 1191, 1195, 1192, 1183, 1192, 1193, 1193,
     1180, 1196, 1200, 1197, 1197, 1199, 1199, 1186, 1182, 1198,
     1198, 1193, 1201, 1191, 1184, 1185, 1197, 1187, 1192, 1202,
     1203, 1188, 1198, 1189, 1190, 1204, 1205, 1205, 1206, 1207,

     1208, 1209, 1209, 1210, 1210, 1211, 1211, 1212, 1212, 1213,
     1214, 1215, 1216, 1217, 1209, 1218, 1219, 1220, 1221, 1222,
     1223, 1224, 1239, 1224, 1225, 1226, 1225, 1226, 1227, 1228,
     1227, 1228, 1229, 1230, 1229, 1230, 1232, 1235, 1232, 1235,
     1238, 1238, 1231, 1231, 1233, 1236, 1233, 1236, 1240, 1227,
     1241, 1246, 1230, 1231, 1231, 1231, 1243, 1243, 1224, 1228,
     1225, 1247, 1226, 1234, 1234, 1245, 1245, 1233, 1248, 1229,
     1232, 1237, 1237, 1249, 1234, 1234, 1234, 1250, 1235, 1242,
     1242, 1236, 1244, 1244, 1237, 1251, 1252, 1253, 1254, 1254,
     1255, 1257, 1242, 1258, 1259, 1244, 1261, 1262, 1264, 1266,

     1282, 1266, 1267, 1267, 1268, 1269, 1268, 1269, 1270, 1271,
     1270, 1271, 1284, 1267, 1267, 1267, 1275, 1272, 1275, 1272,
     1273, 1273, 1274, 1274, 1276, 1287, 1276, 1278, 1278, 1281,
     1281, 1273, 1273, 1273, 1288, 1266, 1271, 1272, 1290, 1268,
     1277, 1277, 1269, 1285, 1285, 1270, 1279, 1279, 1283, 1283,
     1291, 1277, 1277, 1277, 1275, 1280, 1280, 1279, 1279, 1279,
     1276, 1283, 1286, 1286, 1289, 1289, 1280, 1280, 1280, 1292,
     1292, 1293, 1294, 1294, 1297, 1298, 1322, 1289, 1302, 1302,
     1304, 1304, 1292, 1303, 1303, 1294, 1305, 1323, 1305, 1302,
     1302, 1302, 1310, 1310, 1303, 1303, 1303, 1306, 1307, 1306,

     1307, 1309, 1308, 1309, 1308, 1305, 1311, 1333, 1311, 1312,
     1312, 1313, 1313, 1334, 1314, 1314, 1315, 1315, 1320, 1320,
     1312, 1312, 1312, 1348, 1306, 1314, 1314, 1314, 1316, 1316,
     1349, 1309, 1325, 1325, 1307, 1308, 1355, 1318, 1318, 1316,
     1316, 1316, 1366, 1311, 1317, 1317, 1338, 1317, 1338, 1317,
     1318, 1319, 1319, 1321, 1321, 1324, 1324, 1326, 1326, 1327,
     1327, 1328, 1328, 1339, 1319, 1339, 1321, 1341, 1324, 1341,
     1326, 1381, 1327, 1338, 1328, 1329, 1329, 1330, 1330, 1331,
     1331, 1332, 1332, 1335, 1335, 1336, 1336, 1337, 1337, 1342,
     1330, 1342, 1331, 1388, 1335, 1335, 1335, 1340, 1340, 1341,

     1396, 1343, 1339, 1343, 1344, 1344, 1345, 1345, 1340, 1340,
     1340, 1400, 1342, 1346, 1346, 1344, 1344, 1344, 1347, 1347,
     1370, 1347, 1370, 1347, 1406, 1350, 1350, 1351, 1351, 1352,
     1352, 1353, 1353, 1354, 1354, 1356, 1356, 1343, 1350, 1357,
     1357, 1358, 1358, 1370, 1353, 1359, 1359, 1408, 1356, 1360,
     1360, 1361, 1361, 1413, 1358, 1362, 1362, 1363, 1363, 1364,
     1364, 1414, 1360, 1365, 1365, 1368, 1368, 1369, 1419, 1369,
     1363, 1420, 1371, 1371, 1372, 1372, 1373, 1374, 1373, 1374,
     1376, 1376, 1356, 1371, 1371, 1371, 1379, 1379, 1380, 1380,
     1373, 1374, 1375, 1375, 1382, 1382, 1383, 1383, 1425, 1369,

     1384, 1384,  803, 1375, 1375, 1375,  802, 1382, 1385, 1385,
     1386, 1386,  800, 1384, 1387, 1387, 1389, 1390, 1389, 1390,
     1391, 1391, 1392, 1393, 1392, 1393, 1394, 1394, 1395, 1395,
      799, 1390, 1397, 1397, 1398, 1398,  798, 1394, 1394, 1394,
     1399, 1399, 1401,  796, 1401, 1392, 1393, 1398, 1402, 1403,
     1402, 1403, 1404, 1389, 1404,  795, 1401, 1405, 1405, 1407,
     1407, 1409, 1410, 1409, 1410, 1411, 1412, 1411, 1412,  794,
     1415, 1402, 1415, 1416, 1421, 1416, 1421, 1417, 1418, 1417,
     1418, 1423,  793, 1423, 1409, 1403,  792, 1422, 1404, 1422,
     1424, 1427, 1424, 1427, 1428,  791, 1428, 1429, 1410, 1429,

     1430,  789, 1430, 1411, 1412,  788, 1415, 1417, 1418, 1431,
     1431, 1416, 1421, 1432,  787, 1432,  785, 1422, 1423, 1436,
     1436, 1427, 1431, 1433, 1438, 1433, 1438, 1424, 1434, 1434,
      784, 1428, 1436, 1429, 1435, 1435, 1430, 1437, 1437, 1434,
     1434, 1434, 1439, 1439,  783, 1435, 1435, 1435, 1441, 1441,
     1432, 1440, 1440, 1439, 1439, 1439, 1442, 1442,  782, 1433,
     1438,  781, 1440, 1440, 1440, 1443, 1443, 1442, 1442, 1442,
     1444, 1444, 1445, 1445,  780, 1446, 1446, 1447, 1447, 1448,
     1448, 1449, 1449, 1445, 1445, 1445, 1446, 1446, 1446, 1450,
     1450, 1451, 1451, 1452, 1452, 1453, 1453,  779,  778,  776,

     1450, 1450, 1450, 1455, 1455, 1455, 1455, 1455, 1455, 1456,
     1456, 1456, 1456, 1456, 1456, 1457, 1457, 1457, 1457, 1457,
     1457, 1458, 1458, 1458, 1458, 1458, 1458, 1459, 1459, 1459,
     1459, 1459, 1459, 1460, 1460, 1460, 1460, 1460, 1460, 1461,
     1461, 1461, 1461, 1461, 1461, 1462, 1462, 1462, 1462, 1462,
     1462, 1463,  775,  774, 1463, 1463, 1464, 1464, 1464, 1464,
     1464, 1465, 1465,  773, 1465, 1465, 1465, 1466, 1466, 1466,
      772, 1466, 1466, 1467, 1467, 1467, 1467,  771, 1467,  770,
      768,  767,  765,  764,  763,  760,  759,  758,  756,  755,
      754,  753,  752,  751,  749,  748,  745,  744,  743,  742,

      741,  738,  726,  725,  722,  721,  720,  719,  718,  717,
      716,  714,  713,  711,  710,  709,  708,  707,  706,  705,
      704,  703,  702,  701,  700,  699,  698,  697,  696,  695,
      694,  693,  692,  689,  688,  687,  685,  684,  683,  682,
      681,  680,  679,  678,  677,  675,  674,  672,  671,  668,
      665,  663,  662,  661,  658,  657,  652,  651,  650,  649,
      648,  647,  646,  645,  633,  632,  631,  630,  629,  628,
      627,  626,  625,  624,  623,  622,  621,  620,  619,  616,
      614,  612,  611,  610,  609,  608,  607,  605,  604,  603,
      602,  601,  600,  599,  598,  597,  596,  593,  592,  590,

      589,  588,  587,  586,  583,  582,  579,  578,  577,  575,
      574,  573,  571,  570,  567,  564,  562,  561,  560,  559,
      558,  550,  549,  548,  547,  545,  544,  543,  542,  541,
      539,  538,  537,  536,  535,  533,  532,  531,  530,  529,
      527,  525,  522,  520,  519,  518,  517,  516,  515,  513,
      512,  511,  510,  509,  508,  507,  504,  503,  500,  499,
      498,  497,  496,  492,  491,  490,  486,  485,  484,  483,
      482,  481,  480,  479,  478,  477,  475,  474,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  452,  451,  448,
      447,  446,  445,  444,  443,  442,  441,  440,  437,  436,

      435,  434,  433,  432,  431,  430,  429,  428,  427,  425,
      424,  423,  422,  421,  420,  416,  415,  414,  413,  412,
      411,  410,  409,  405,  404,  402,  397,  396,  395,  394,
      393,  392,  390,  389,  388,  387,  383,  382,  380,  379,
      375,  374,  370,  369,  368,  367,  366,  365,  364,  362,
      361,  360,  359,  358,  357,  356,  355,  351,  350,  349,
      346,  344,  343,  342,  341,  340,  339,  338,  337,  336,
      335,  334,  331,  329,  328,  326,  325,  324,  323,  322,
      321,  320,  319,  318,  316,  315,  312,  311,  307,  306,
      305,  304,  303,  302,  299,  298,  297,  296,  282,  281,

      279,  278,  277,  276,  275,  274,  273,  272,  271,  270,
      269,  268,  266,  265,  264,  263,  260,  259,  258,  257,
      256,  255,  254,  253,  252,  251,  249,  248,  247,  245,
      243,  241,  240,  239,  238,  237,  235,  233,  232,  231,
      230,  229,  228,  225,  224,  211,  210,  209,  208,  206,
      204,  202,  201,  200,  199,  198,  197,  196,  194,  193,
      192,  191,  190,  189,  188,  186,  185,  183,  182,  181,
      180,  179,  178,  177,  176,  175,  174,  173,  172,  171,
      170,  169,  168,  167,  166,  165,  164,  163,  162,  161,
      160,  159,  143,  142,  141,  140,  139,  138,  137,  136,

      135,  134,  133,  132,  131,  130,  129,  128,  127,  126,
      125,  124,  123,  122,  121,  120,  119,  118,  117,  113,
      112,  110,  109,  108,  106,  104,  101,   89,   82,   81,
       77,   76,   74,   73,   72,   70,   66,   42,   39,   24,
       22,   19,   14,   13,    8,    7,    6,    5,    4,    3,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[184] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 
    1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
/* $Id$ */
/** @file parseosrl.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin, 
 * @version 2.0, 19/07/2009
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005-2009, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 17 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSrLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"


//#define PARSERDEBUG

#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;
     








#line 103 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 1659 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osrllex_init (yyscan_t* scanner);

int osrllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 113 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"



#line 1915 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1455 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2751 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 120 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 122 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 123 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 125 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 141 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* numerical attributes */
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 145 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 146 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 147 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFITEMSATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 148 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 149 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 150 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 151 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 152 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERRESULTSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 153 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERSOLUTIONRESULTSATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 154 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 155 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 156 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLVEROUTPUTSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 157 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSUBSTATUSESATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 158 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 159 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 160 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 162 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 163 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 167 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 168 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 169 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 170 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 171 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 172 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 173 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 174 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 175 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 176 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 177 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 178 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 179 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 180 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 181 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 182 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 183 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 184 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 185 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 186 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 187 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 188 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 189 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 190 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 191 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 192 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 193 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 194 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
/* top level elements */
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 198 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 199 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 200 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 202 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 203 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 205 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 206 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 208 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 209 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 211 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 212 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 214 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 215 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
/* The <item> element is treated specially because it may legitimately contain special characters */
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 220 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 221 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 222 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 223 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
/* Remaining elements, sorted alpabetically. */
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 227 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMESTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 228 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMEEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 229 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUNUMBERSTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 230 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUNUMBEREND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 231 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUSPEEDSTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 232 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUSPEEDEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 233 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEDISKSPACESTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 234 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLEDISKSPACEEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 235 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEMEMORYSTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 236 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLEMEMORYEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 237 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASISSTATUSSTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 238 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASISSTATUSEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 239 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASSTATUSSTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 240 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASSTATUSEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 241 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 242 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 243 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 244 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 245 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTSTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 246 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 247 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATESTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 248 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATEEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 249 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 250 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 251 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDTIMESTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 252 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDTIMEEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 253 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 254 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 255 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 256 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 257 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 258 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 259 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 260 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 261 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 262 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 263 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 264 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 265 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OPTIMIZATIONSOLUTIONSTATUSSTART);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 266 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSOLUTIONSTATUSEND);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 267 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 268 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 269 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSSTART);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 270 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSEND);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 271 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSTART);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 272 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLUTIONRESULTEND);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 273 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSSTART);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 274 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSEND);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 275 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTSTART);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 276 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTEND);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 277 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 278 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 279 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 280 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 281 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 282 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 283 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONSTART);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 284 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONEND);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 285 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 286 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 287 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDSTART);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 288 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDEND);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 289 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTSTART);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 290 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTEND);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 291 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 292 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 293 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMESTART);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 294 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMEEND);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 295 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSSTART);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 296 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSEND);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 297 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONSTART);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 298 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONEND);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 299 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 300 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 301 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDSTART);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 302 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDEND);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 303 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPSTART);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 304 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPEND);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 305 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 306 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 307 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFARSTART);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 308 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFAREND);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 309 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBERSTART);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 310 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBEREND);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 311 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDSTART);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 312 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDEND);} 
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 313 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACESTART);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 314 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACEEND);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 315 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYSTART);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 316 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYEND);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 317 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 318 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 319 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGSTART);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 320 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGEND);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 321 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 322 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 323 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 324 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
/* environments and comments */
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 329 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext);   yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 330 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 332 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 172:
#line 334 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 334 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 335 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 337 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 176:
#line 339 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 339 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 340 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 343 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 344 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 345 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 349 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 361 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
ECHO;
	YY_BREAK
#line 3129 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osrlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1455 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1455 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1454);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osrllex_init_extra has the same functionality as osrllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osrlalloc in
 * the yyextra field.
 */

int osrllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osrlset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osrlset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 361 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"





