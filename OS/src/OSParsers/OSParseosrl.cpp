#line 2 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

#line 4 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 129
#define YY_END_OF_BUFFER 130
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1099] =
    {   0,
        1,    1,  127,  127,  125,  125,  126,  126,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  130,  128,
        1,    1,    2,  115,    2,  128,    6,  128,    5,  128,
        4,  115,  127,  129,  125,  126,  116,  118,  119,  118,
      122,  123,  122,    1,    0,    6,    0,    5,    0,    4,
        0,    0,    0,    0,    0,    0,    0,    0,    1,  115,
        6,    5,  115,  115,  115,  115,  115,  115,  115,  115,
        3,    6,    6,    6,  115,    7,    5,    5,    0,    0,
      121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    4,  115,  127,  125,  126,  116,    0,  124,

        6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  115,  115,  115,
      115,  115,  115,  115,  115,  115,    0,    6,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    6,  120,    6,
        0,    0,    0,    0,    0,    6,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  117,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   97,    0,    0,    0,    0,    0,   93,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   89,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  115,  115,  115,  115,  115,
      115,  115,  115,  115,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   56,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
        0,    0,    0,    0,    0,    0,    0,   72,    0,    0,
        0,   21,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  115,  115,  115,  115,  115,  115,  115,  115,    0,
       98,    0,    0,    0,    0,    0,   57,    0,    0,    0,
       94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   90,    0,    0,    0,    0,    0,
       56,    0,    0,    0,    0,   48,   47,  101,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   21,    0,   25,   26,    0,
        0,    0,   29,   30,    0,   37,   38,    0,    0,  115,
      115,  115,  115,  115,   98,    0,    0,    0,    0,   57,
        0,    0,   94,    0,    0,    0,   49,    0,    0,    0,

        0,    0,    0,    0,   73,    0,    0,   90,    0,    0,
        0,    0,    0,    0,    0,   67,    0,    0,    0,    0,
        0,    0,    0,   83,    0,  113,    0,   85,    0,    0,
        0,    0,    0,    0,    0,    0,   23,   24,    0,    0,
        0,   27,   28,    0,   35,   36,    0,   41,   42,  115,
      115,  115,  115,    0,    0,    0,    0,    0,   69,    0,
        0,    0,   49,    0,  102,    0,    0,    0,    0,    0,
        0,   73,    0,    0,    0,    0,    0,    0,    0,  112,
       67,   68,    0,    0,    0,    0,    0,  107,    0,    0,
        0,   52,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   39,   40,  115,  115,  115,  115,    0,    0,
        0,    0,   69,    0,    0,    0,  102,    0,    0,  108,
        0,    0,    0,   84,    0,   53,    0,    0,   86,    0,
        0,    0,    0,   50,    0,    0,    0,    0,   74,    0,
        0,    0,    0,   54,    0,    0,   81,   52,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  115,  115,  115,  115,  115,  115,
      115,  115,  115,    0,    0,    0,   51,    0,    0,    0,
       76,    0,    0,    0,  108,    0,   55,    0,    0,    0,
       84,   53,    0,   86,    0,    0,    0,   50,    0,    0,

      114,   74,   75,    0,    0,    0,   54,    0,    0,    0,
       91,    0,    0,    0,    0,   33,   34,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  115,  115,  115,  115,
      115,  115,  115,  115,  115,    0,    0,   51,    0,    0,
       76,    0,    0,    0,   55,    0,    0,    0,   82,    0,
        0,    0,   87,    0,    0,   95,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   31,   32,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  115,  115,  115,  115,
      115,  115,  115,  115,  115,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   82,    0,    0,   92,   99,    0,

        0,    0,    0,    0,    0,    0,   58,    0,    0,    0,
        0,    0,    0,    0,   20,    0,    0,   19,    0,    0,
        0,    0,    0,    0,   18,    0,    0,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,    0,
        0,   88,    0,    0,    0,   96,    0,    0,    0,    0,
       60,    0,   92,    0,    0,   79,    0,    0,    0,   61,
      109,   58,   59,    0,    0,    0,    0,   45,   46,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      115,  115,  115,  115,  115,  115,  115,  115,    0,  100,
       88,    0,    0,   96,    0,    0,    0,   63,   60,    0,

       77,    0,    0,   64,    0,  110,   61,   62,    0,    0,
        0,   43,   44,   20,    0,   19,    0,    0,    0,    0,
        0,    0,    0,    0,    8,   18,    0,    0,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  100,
        0,    0,   66,    0,   80,    0,   63,    0,  111,   64,
       65,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,    0,   78,   66,   80,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   17,
        0,    8,    0,    0,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,   78,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  115,
      115,  115,  115,  115,  115,  115,  115,  115,    0,    0,
        0,   70,    0,    0,    0,    0,    0,    0,   17,    0,
        9,    0,   10,    0,  115,  115,  115,  115,  115,  115,
      115,  115,  115,    0,    0,    0,    0,    0,   11,    0,
        0,    0,    0,    0,    0,    0,   22,  115,  115,  115,
      115,  115,  115,  115,    0,    0,   71,  105,    0,   12,
        0,    0,    0,    0,    0,    9,   10,    0,  115,  115,
      115,  115,  115,    0,   71,  103,    0,   11,    0,    0,

        0,    0,   22,  115,  115,  115,  115,    0,  106,    0,
       12,    0,    0,    0,    0,  115,  115,  115,  115,  106,
        0,  104,    0,    0,    0,    0,  115,  115,  115,  115,
      104,    0,    0,    0,    0,  115,  115,  115,  115,    0,
        0,    0,    0,  115,  115,  115,  115,    0,    0,    0,
        0,  115,  115,  115,  115,    0,    0,    0,    0,  115,
      115,  115,  115,    0,    0,    0,    0,  115,  115,  115,
      115,    0,    0,    0,   16,    0,   13,  115,  115,  115,
      115,    0,    0,   14,    0,    0,  115,  115,    0,   15,
        0,   16,   13,  115,    0,   14,   15,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    8,    1,    1,    9,    1,
        1,    8,   10,    1,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    8,    1,   15,
       16,   17,   18,    8,    8,    8,   19,   20,   21,   22,
        8,    8,   23,    8,    8,    8,    8,   24,   25,    8,
        8,   26,   27,   28,   29,   30,    8,    8,    8,    8,
        1,    1,    1,    1,    8,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   40,    8,   41,   42,   43,
       44,   45,    8,   46,   47,   48,   49,   50,    8,   51,
       52,   53,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    2,    2,    2,    2,    1,    3,    2,    4,    1,
        2,    2,    2,    2,    5,    1,    6,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[1112] =
    {   0,
        0,   23, 2847, 2846, 2855, 2854, 2851, 2850,    0,    0,
        0,    0, 2843, 2842,   39,   40,   41,   42, 2856, 2865,
       59,  108, 2848,   64, 2845,    8,  157, 2836,   53,  187,
       81,  113,    0, 2865,    0,    0,    0, 2865, 2865, 2841,
     2865, 2865, 2834,    0,   66,  131, 2833,  236,  259,   92,
     2825, 2817, 2812, 2812,   38,   75, 2802, 2813,  308,  171,
        0,  192,  199,  243,  251,  274,  357,  101,  134,   69,
     2865,  277,  134,    0,  197, 2865,  312,  324, 2832,  374,
     2865, 2798, 2792, 2805, 2796, 2794, 2802,   56, 2801,  217,
     2796, 2803,  330,  118,    0,    0,    0,    0, 2816, 2865,

      361,   38, 2789, 2787, 2795,  301, 2790, 2806, 2779, 2779,
     2774, 2782, 2781, 2776, 2776, 2781, 2778,  115,  168,  239,
      149,  194,  331,  218,  299,  253, 2804,  283, 2806, 2772,
     2766, 2779, 2770, 2768, 2776,  292, 2775,  341, 2770, 2777,
     2764, 2775, 2762, 2757, 2771, 2755, 2761, 2752, 2753, 2760,
     2764, 2750, 2754, 2763, 2746, 2750,   97,  346, 2865,  395,
     2744, 2758, 2742, 2742, 2745,  399, 2751, 2752,  423, 2749,
     2751, 2745, 2746, 2732, 2730,  356,  361,  427,  384,  403,
      246,  405,  407,  392, 2865, 2735, 2746, 2733, 2728, 2742,
     2726, 2732, 2723, 2724, 2731, 2735, 2721, 2725, 2734, 2717,

     2721,   98, 2715, 2720, 2725, 2711,  442, 2711, 2722, 2717,
     2714, 2719, 2709, 2702, 2702, 2702, 2701,  146, 2699, 2708,
     2698,  446, 2698, 2694,  174, 2706, 2696,  468,  459,  475,
     2706, 2705,  483,  490, 2704,  452,  411,  500,  505,  465,
      480,  521,  530,  507,  555, 2697, 2702, 2688,  560, 2688,
      564, 2695, 2692, 2697, 2687, 2680, 2680, 2680, 2679,  183,
     2677,  571, 2677, 2694, 2677, 2691,  587,  515, 2701, 2689,
     2686, 2676,  591, 2671, 2670, 2676, 2666, 2664, 2677,  609,
     2668, 2675, 2678, 2677, 2687, 2675, 2666, 2865, 2660, 2664,
     2698,  582,  613,  538, 2655, 2652,  621,  598,  628,  633,

      643,  590,  612,  650,  481,  549,  660,  666,  670,  675,
      685, 2651, 2668, 2651, 2665,  691,  700, 2675, 2663,  708,
      718, 2660, 2650,  724, 2645, 2644, 2650, 2640, 2638, 2651,
      728, 2642, 2649,  732,  748, 2652, 2636, 2650, 2649, 2636,
      752,  756, 2641, 2629, 2637,  760, 2865, 2648, 2640, 2640,
     2633, 2624, 2628,  776, 2652, 2631, 2620, 2634, 2622,  780,
     2627, 2630, 2616, 2616,  737,  788, 2656, 2652, 2649, 2632,
     2631, 2651, 2647, 2644, 2648, 2644, 2641,  796,  765,  756,
      669,  778,  779,  813,  817, 2603, 2617, 2616, 2603,  821,
      828, 2608,  832, 2596, 2604,  836,  844,  852, 2608, 2608,

     2601, 2592, 2596,  856,  861, 2600, 2589,  872, 2603, 2603,
     2592, 2591, 2598,  878, 2613,  882, 2594, 2589, 2574, 2582,
      896, 2589, 2573, 2865,  900, 2865, 2587, 2865, 2559, 2566,
      904, 2513, 2512, 2494, 2497,  887, 2865, 2865, 2508, 2511,
      909, 2865, 2865,  917, 2865, 2865, 2538, 2534, 2531,  819,
      636,  879,  675, 2508, 2497, 2496, 2503,  927,  931, 2500,
     2495, 2479,  935,  943,  947, 2486,  951, 2494, 2484,  959,
      967,  975, 2504,  983, 2485, 2485, 2474,  987, 2487, 2865,
      991, 2865, 1003, 2471, 2489, 2478, 1007, 2865, 1023, 2475,
     1027, 1031, 2474, 2479, 2478, 1046, 1051, 1055, 2473, 1051,

     2471, 1036, 2865, 2865, 1080,  757, 1111,  926, 2471, 2459,
     1085, 2471, 1062, 1089, 2451, 2468, 1095, 2443, 1105, 1111,
     1116, 2440, 1144, 1121, 1148, 1152, 2431, 1164, 1168, 2438,
     2429, 2423, 1172, 1180, 2407, 2427, 1188, 2415, 1192, 2385,
     2367, 2343, 1206, 1210, 2355, 2359, 2865, 1214, 2344, 2314,
     2333, 1222, 2325, 2329, 1226, 1197, 2304, 2303,  227, 2310,
     2290, 2287, 2266, 2261, 1230,  764, 1205,  910,  966, 1206,
      839,  522,  968, 2240, 2246, 1254, 1260, 2227, 2250, 1264,
     1270, 2237, 2216, 2199, 1280, 1284, 1288, 2181, 2183, 1292,
     1300, 1308, 2164, 1312, 2120, 2111, 2111, 1316, 2122, 2105,

     2865, 1320, 2865, 2087, 2093, 2073, 1324, 2078, 2096, 2019,
     2865, 2030, 2000, 1999, 1999, 1970, 1955, 1920, 1914, 1879,
     1878, 1877, 1829, 1802, 1793, 1805, 1299, 1300,  934, 1149,
      894,  578, 1086, 1055,  988, 1781, 1756, 1330, 1767, 1748,
     1334, 1731, 1731, 1691, 1342, 1696, 1714, 1348, 1352, 1689,
     1356, 1667, 2865, 1652, 1657, 2865, 1654, 1656, 1659, 1364,
     1628, 1624, 1630, 1380, 1238, 2865, 2865, 1384, 1388, 1403,
     1598, 1588, 1571, 1582, 1407, 1568, 1411, 1459, 1507, 1345,
     1387,  667, 1368, 1555, 1172, 1554, 1448, 1544, 1543, 1452,
     1535, 1539, 1542, 1468, 1474, 1526, 1478, 1484, 2865, 1521,

     1529, 1519, 1499, 1500, 1516, 1524, 1522, 1493, 1495, 1544,
     1548, 1564, 1419, 1571,  341, 1480, 1579,  381, 1474, 1455,
     1454, 1420, 1420, 1586,  655, 1427, 1405, 1594, 1603, 1229,
     1610, 1399, 1113, 1394, 1347, 1398, 1619,  717, 1410, 1625,
     1634, 1489, 1390, 1402, 1643, 1494, 1391, 1389, 1652, 1659,
     1668, 1359, 1675, 1351, 1679, 2865, 1336, 1684, 1357, 1700,
     2865, 1704, 2865, 1340, 1708, 1714, 1359, 1355, 1332, 1336,
     1262, 1303, 1258, 1345, 1266, 1237, 1718, 1247, 1216, 1194,
     1485, 1491, 1705, 1569, 1435, 1724, 1221, 1249, 1739, 1743,
     1747, 1191, 1755, 1759, 1763, 1179, 1772, 1779, 1783, 1157,

     2865, 1788, 1169, 1792, 1153, 2865, 1806, 2865, 1130, 1810,
     1797, 2865, 2865, 1129, 1133, 1688, 1124, 1114, 1111, 1083,
     1074, 1056, 1051, 1814, 1818, 1823, 1033, 1038,  745, 1505,
     1600, 1483, 1609, 1371, 1562, 1791, 1829, 1514, 1806, 1844,
     1848, 1854, 1859, 1864, 1870, 1046, 1880, 1021, 2865, 1884,
     2865, 1027, 1022, 1007,  992,  980,  982,  977,  967, 1888,
      959,  994,  947,  958, 1636, 1793, 1863, 1865, 1866, 1849,
     1897, 1877, 1886, 1880, 1920, 1928, 1936, 1940,  938,  928,
      876,  849,  829,  832,  805,  816,  794,  803, 1945, 1874,
      767, 1949,  764,  773, 1922, 1924, 1722, 1925, 1805, 1927,

     1965, 1887, 1931, 1941, 1980,  739,  731,  722,  704,  695,
      691,  669,  650,  608,  619,  645, 1984, 1989,  590, 1964,
     1968, 1970, 1971, 1975, 1878, 2005, 2024, 1994,  579,  577,
      565, 2865,  535, 2028,  532,  507,  512,  518, 2032, 2044,
     2036, 2048, 2054, 2063, 2027, 2067, 2031, 2044, 2047, 2050,
     2086, 2102, 2106,  507, 2110,  496, 2126, 2136, 2082,  508,
      489,  478,  472,  494,  493, 2141, 2092, 2145, 2161, 1948,
     2123, 1967, 2129, 2177,  442, 2181, 2121,  435, 2185, 2098,
      477,  436,  424,  424,  418, 2166, 2194,  433, 2200, 2175,
     2125, 2164, 2180, 2215, 2231, 2865,  413, 2220,  369,  360,

      364,  353, 2225, 2207, 2206, 2214, 2216, 2249, 2255, 2265,
     2241,  330,  345,  334,  319, 2230, 2245, 2242, 2249, 2283,
     2297, 2301,   21,   18,    7,   43, 2264, 2258, 2261, 2278,
     2313,   56,   52,   56,   65, 2288, 2281, 2142, 2190,   69,
       80,  113,  135, 2289, 2280, 2290, 2291,  130,  146,  141,
      142, 2293, 2302, 2304, 2310,  161,  171,  183,  185, 2313,
     2315, 2318, 2319,  194,  197, 2367, 2371, 2329, 2348, 2386,
     2396,  204, 2402, 2406, 2379, 2421, 2391, 2372, 2426, 2436,
     2445, 2461, 2466, 2411,  269,  296, 2476, 2484, 2493, 2431,
      346, 2441, 2451, 2500,  348, 2457, 2488, 2865, 2549, 2555,

     2561, 2567, 2573, 2579, 2585, 2591, 2596, 2602, 2607, 2613,
     2619
    } ;

static yyconst flex_int16_t yy_def[1112] =
    {   0,
     1099, 1099, 1100, 1100, 1101, 1101, 1102, 1102, 1103, 1103,
     1103, 1103, 1104, 1104, 1105, 1105, 1106, 1106, 1098, 1098,
     1098, 1107, 1098, 1107, 1098, 1098, 1107, 1098,   27, 1098,
     1098, 1107, 1108, 1098, 1109, 1110, 1111, 1098, 1098, 1098,
     1098, 1098, 1098,   21, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1107, 1107,
       27,   27, 1107, 1107, 1107, 1107, 1107,   67,   67,   67,
     1098, 1098,   27,   27,   67, 1098, 1098,   67, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098,   67, 1108, 1109, 1110, 1111, 1098, 1098,

     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098,   67,   67,   67,
       67,   67,   67,   67,   67,   67, 1098,   27, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098,   27, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098,   67,   67,   67,   67,   67,
       67,   67,   67,   67, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,

     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098,   67,   67,   67,   67,   67,
       67,   67,   67,   67, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,

     1098,   67,   67,   67,   67,   67,   67,   67,   67, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,   67,
       67,   67,   67,   67, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,

     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,   67,
       67,   67,   67, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,

     1098, 1098, 1098, 1098,   67,   67,   67,   67, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098,   67,   67,   67,   67,   67,   67,
       67,   67,   67, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,

     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098,   67,   67,   67,   67,
       67,   67,   67,   67,   67, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098,   67,   67,   67,   67,
       67,   67,   67,   67,   67, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,

     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
       67,   67,   67,   67,   67,   67,   67,   67, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,

     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,   67,
       67,   67,   67,   67,   67,   67,   67,   67, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098,   67,   67,   67,   67,   67,   67,
       67,   67,   67, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098,   67,   67,   67,
       67,   67,   67,   67, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,   67,   67,
       67,   67,   67, 1098, 1098, 1098, 1098, 1098, 1098, 1098,

     1098, 1098, 1098,   67,   67,   67,   67, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098,   67,   67,   67,   67, 1098,
     1098, 1098, 1098, 1098, 1098, 1098,   67,   67,   67,   67,
     1098, 1098, 1098, 1098, 1098,   67,   67,   67,   67, 1098,
     1098, 1098, 1098,   67,   67,   67,   67, 1098, 1098, 1098,
     1098,   67,   67,   67,   67, 1098, 1098, 1098, 1098,   67,
       67,   67,   67, 1098, 1098, 1098, 1098,   67,   67,   67,
       67, 1098, 1098, 1098, 1098, 1098, 1098,   67,   67,   67,
       67, 1098, 1098, 1098, 1098, 1098,   67,   67, 1098, 1098,
     1098, 1098, 1098,   67, 1098, 1098, 1098,    0, 1098, 1098,

     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098
    } ;

static yyconst flex_int16_t yy_nxt[2919] =
    {   0,
       20,   21,   22,   21,   22,   20,   23, 1098,   25,   20,
       26,   27,   28,   29,   30,   20,   31,   20, 1098,   46,
     1098,   48,   32,   20,   21,   22,   21,   22,   20,   23,
       51,   25,   20,   26,   27,   28,   29,   30,   20,   31,
       20,   39,   39,   42,   42,   32, 1032,  127,  127,   40,
       40,  160, 1033, 1034,   77,   78,   77,   78,   43,   43,
       44,   44,   44,   44,   61, 1098,   62, 1098,  112,   45,
       46,   47,   48,   49, 1098,   50, 1098,   46, 1098,   48,
     1098,   51,   93,   93,   93,   93,  113,  147,   51, 1035,
     1040,   52,   53,   93,   93,   93,   93,   54, 1041,  126,

      148,   55,  149,  150, 1042,  114,   56,   57,   58,   44,
       59,   44,   59, 1043, 1098, 1048, 1098,   60,   45,   61,
       47,   62,   49, 1098,   50, 1098,  115, 1098, 1049, 1098,
       63,  123,   72,   72,   72,   72,   94,  219,  261,  158,
       64,   65,  220,  262,  101,   60,   66,   60,   60,   60,
       67,  102,  124, 1050,   60,   68,   69,   70,   72,   73,
       72,   73,  176,   60,   60,  102,   60, 1098,   60, 1098,
       74, 1098, 1098, 1098, 1098, 1051,  125,   75, 1056,   60,
      280, 1098,   60, 1098,  281, 1098, 1057, 1098, 1058, 1059,
      179,   75,   79,   77,   78,   77,   78,   60,   60,   80,

     1098, 1064, 1098,   61,   81,   62,  127,  127,  288, 1098,
      128, 1098,  281, 1098,  177, 1098,   60,  331, 1065,   82,
       83,  332,   94,   84,   60,   85,   86,   60,   87, 1066,
       88, 1067,   89,   90,   91,  180,   92,   77,   77,   77,
       77, 1072,   60, 1073, 1098,   60, 1098,   46,   60,   48,
     1082,  152, 1098, 1098, 1098, 1098,  102, 1098,  620, 1098,
      153, 1098,  182, 1098,  154, 1098,   60, 1098,  155,   60,
      102,   80, 1092,  118,  621, 1098,   60, 1098,   72,   72,
       72,   72,  241,   60, 1098,  119, 1098,   60, 1098,  178,
     1098,   82,   83,  184,   60,   84,  128,  103,  104, 1093,

      105,   60,   88,   60,   89,  106,  107,  120,   92,   44,
       59,   44,   59,   77,   77,   77,   77,   60,   45,   61,
       47,   62,   49,  192,   50,   77,   78,   77,   78,   60,
       63,   93,   93,   93,   93,  164,  193,  183,  194,  195,
       64,   65,  770,  770,  153,  770,   66,   60,  154, 1096,
       67, 1097,  155, 1026,   60,   68,   69,   70, 1098,   60,
     1098,   60,   72,   72,   72,   72,   60, 1098, 1025, 1098,
     1024, 1098,   60, 1098,  101,  197,  181, 1023, 1015,   60,
       60,  102,  772,  772,  198,  772,   60,  121,  199, 1014,
      236,   60,  200,  237, 1013,  102,   72,   72,   72,   72,

       72,   72,   72,   72,   60,  122,  130,  131,  160,   60,
      132, 1012,  133,  134,   60,  135, 1011,  136,  239,  137,
      138,  139,   60,  140,  228,  228,  228,  228,  228,  238,
      228,  238,   60,   60,  240,   60, 1003,   60,  229,  242,
      244,   60,  229,  267,  267,  267,  267,  267,  267,  267,
      267,   60, 1002,   60,  243,   60,  303,   60,  268,   60,
      291,  291,  268,  291,  269,  292, 1001,  292,  285,  228,
      228,  228,  228, 1000,  999,   60,  293,  293,  293,  293,
      998,  996,   60,  229,  297,  297,  297,  297,  302,  994,
      294,  299,  299,  299,  299,   60,  987,  986,  298,  305,

       60,  228,  238,  228,  238,  300,  293,  304,  293,  304,
       60,   60,  985,   60,  306,  229,  341,  341,  341,  341,
      294,  984,  297,  307,  297,  307,  382,  983,   60,   60,
       60,  299,  308,  299,  308,   60,  298,   60,  982,  367,
      367,  309,  367,  978,  368,  300,  369,  975,   60,  963,
      962,   60,  634,   60,  961,   60,  310,  310,  310,  310,
       60,  316,  316,  316,  316,  320,  320,  320,  320,   60,
       60,  311,  334,  334,  334,  334,  317,  960,   60,   60,
      321,  957,  318,  366,  366,  366,  366,  335,  267,  267,
      267,  267,  346,  346,  346,  346,  383,   60,  322,  372,

      372,  312,  372,  268,  373,  956,  374,  347,   60,  336,
      354,  354,  354,  354,  293,  293,  293,  293,  682,  955,
       60,  355,  297,  297,  297,  297,   60,  954,  294,  299,
      299,  299,  299,  380,  375,  375,  298,  375,   60,  376,
      944,  377,   60,  300,  378,  378,  378,  378,  939,  938,
      381,  293,  304,  293,  304,  937,  778,  778,  379,  778,
       60,  297,  307,  297,  307,  294,   60,  299,  308,  299,
      308,  378,  384,  378,  384,  298,  310,  310,  310,  310,
       60,  300,  936,  506,   60,  379,  385,  385,  385,  385,
       60,  311,  316,  316,  316,  316,   60,   60,   60,   60,

       60,  390,  390,  390,  390,   60,  508,  317,   60,  320,
      320,  320,  320,  451,   60,  735,  935,   60,   60,  393,
      393,  393,  393,   60,  321,  396,  396,  396,  396,  404,
      404,  404,  404,  334,  334,  334,  334,  934,  291,  291,
      397,  291,  933,  292,  405,  292,  932,  787,  335,  408,
      408,  408,  408,  341,  341,  341,  341,  414,  414,  414,
      414,  346,  346,  346,  346,   60,  447,  447,  415,  447,
      931,  448,  416,  449,  930,  865,  347,  354,  354,  354,
      354,  431,  431,  431,  431,  929,   60,   60,  355,  366,
      366,  366,  366,   60,   60,  566,  416,  378,  378,  378,

      378,  450,  452,  453,   60,   60,  919,  627,   60,   60,
      918,  379,   60,  917,  378,  384,  378,  384,  385,  385,
      385,  385,  390,  390,  390,  390,   60,   60,  379,  458,
      458,  458,  458,  393,  393,  393,  393,  396,  396,  396,
      396,  915,  914,   60,  459,  463,  463,  463,  463,   60,
      913,  912,  397,  464,  464,  464,  464,  404,  404,  404,
      404,   60,  472,  472,  472,  472,  911,   60,  465,   60,
      505,  910,  405,  408,  408,  408,  408,  633,  466,  414,
      414,  414,  414,  481,  481,  481,  481,   60,  367,  367,
      415,  367,  909,  368,  416,  369,  482,  487,  487,  487,

      487,  491,  491,  491,  491,  431,  431,  431,  431,   60,
      372,  372,  488,  372,  507,  373,  492,  374,  375,  375,
      416,  375,  908,  376,   60,  377,  681,   60,  458,  458,
      458,  458,  513,  513,  513,  513,  463,  463,  463,  463,
       60,  629,   60,  459,  464,  464,  464,  464,  517,  517,
      517,  517,  519,  519,  519,  519,   60,  630,   60,  465,
      523,  523,  523,  523,   60,  573,  907,  520,  525,  525,
      525,  525,  906,  679,   60,  524,  472,  472,  472,  472,
      894,  893,   60,  526,  528,  528,  528,  528,  533,  533,
      533,  533,  481,  481,  481,  481,   60,  892,   60,  529,

      631,  891,  635,  534,  537,  537,  537,  537,  487,  487,
      487,  487,  888,  535,   60,  538,   60,  887,   60,  539,
      685,  886,  885,  488,  543,  543,  543,  543,  491,  491,
      491,  491,  548,  548,  548,  548,   60,  447,  447,  544,
      447,  884,  448,  492,  449,  883,  545,  552,  552,  552,
      552,  546,  543,  543,  543,  543,  555,  555,  555,  555,
      882,  881,  539,  513,  513,  513,  513,  544,  880,  558,
      556,  879,  864,  863,  553,  559,  560,  561,  562,  554,
      563,  555,  565,  555,  565,   60,  576,  576,  576,  576,
      580,  580,  580,  580,  861,  556,  517,  517,  517,  517,

      684,  577,  860,   60,  859,  581,  519,  519,  519,  519,
       60,  578,  585,  585,  585,  585,   60,  586,  586,  586,
      586,  520,  591,  591,  591,  591,  858,  683,   60,  567,
      770,  770,  587,  770,   60,  568,  569,  570,  571,  588,
      572,   60,  857,   60,  589,  523,  523,  523,  523,  525,
      525,  525,  525,  592,  592,  592,  592,  856,  783,   60,
      524,   60,  855,  854,  526,  528,  528,  528,  528,  594,
      594,  594,  594,  533,  533,  533,  533,  853,  852,   60,
      529,  598,  598,  598,  598,  849,  680,  848,  534,  537,
      537,  537,  537,  602,  602,  602,  602,   60,  615,  615,

      538,  615,   60,  616,  539,  617,  603,  543,  543,  543,
      543,  607,  607,  607,  607,  548,  548,  548,  548,  739,
       60,  846,  544,  552,  552,  552,  552,  555,  555,  555,
      555,  555,  565,  555,  565,   60,   60,  841,  539,  615,
      615,  556,  615,  828,  616,  556,  617,  827,  628,  632,
      826,   60,  838,   60,   60,  576,  576,  576,  576,   60,
       60,  638,  638,  638,  638,  580,  580,  580,  580,   60,
      577,  641,  641,  641,  641,  823,  781,   60,   60,   60,
      581,  585,  585,  585,  585,  586,  586,  586,  586,  645,
      645,  645,  645,  648,  648,  648,  648,   60,  839,  822,

      587,  591,  591,  591,  591,  817,  816,  815,  649,  592,
      592,  592,  592,  594,  594,  594,  594,  598,  598,  598,
      598,  602,  602,  602,  602,  607,  607,  607,  607,   60,
       60,  638,  638,  638,  638,  641,  641,  641,  641,  814,
      813,  677,  678,  645,  645,  645,  645,   60,   60,  648,
      648,  648,  648,  695,  695,  695,  695,  697,  697,  697,
      697,  812,  811,  818,  649,  705,  705,  705,  705,  819,
      809,  820,  698,  806,  821,   60,  706,   60,  805,  733,
      707,  711,  711,  711,  711,  712,  712,  712,  712,  714,
      714,  714,  714,   60,  785,   60,  707,  801,   60,  713,

      800,  870,  736,  715,  717,  717,  717,  717,  724,  724,
      724,  724,  712,  728,  712,  728,   60,   60,  718,   60,
      767,  767,  725,  767,   60,  768,  713,  769,   60,   60,
      734,  782,  796,  795,  716,   60,  793,  719,  792,  784,
       60,   60,   60,  780,  786,  726,   60,   60,  788,  741,
      741,  741,  741,  745,  745,  745,  745,  779,   60,   60,
      714,  729,  714,  729,  742,   60,  777,  776,  746,  750,
      750,  750,  750,  836,  715,  695,  695,  695,  695,  697,
      697,  697,  697,   60,  751,  753,  753,  753,  753,   60,
      791,  791,  791,  791,  698,  794,  794,  794,  794,  775,

      774,  758,  758,  758,  758,  730,  773,   60,  717,  731,
      717,  731,  759,   60,  868,   60,  760,  705,  705,  705,
      705,   60,  718,  762,  762,  762,  762,  771,  706,  765,
      829,   60,  707,   60,  764,   60,  763,   60,  830,   60,
      761,  732,  757,  866,   60,  766,  766,  766,  766,  711,
      711,  711,  711,   60,  873,   60,  724,  737,  724,  737,
      760,  756,   60,  755,  707,  712,  712,  712,  712,  754,
      725,  752,  714,  714,  714,  714,  749,  748,  747,  713,
      717,  717,  717,  717,  744,   60,  715,  724,  724,  724,
      724,  743,   60,  738,  718,  712,  728,  712,  728,   60,

      740,  725,  835,   60,  714,  729,  714,  729,  871,  713,
       60,  717,  731,  717,  731,  727,  723,   60,  715,  722,
      724,  737,  724,  737,   60,  718,  789,  789,  789,  789,
       60,  721,  720,   60,  725,  741,  741,  741,  741,   60,
       60,  790,   60,  867,  745,  745,  745,  745,   60,   60,
      742,   60,  869,  797,  797,  797,  797,   60,   60,  746,
      750,  750,  750,  750,  710,  709,   60,   60,  798,  799,
      799,  799,  799,  708,  895,  751,  753,  753,  753,  753,
      802,  802,  802,  802,   60,  758,  758,  758,  758,  772,
      772,  803,  772,  704,  703,  804,  759,  702,  701,  700,

      760,  807,  807,  807,  807,  762,  762,  762,  762,  810,
      810,  810,  810,  699,  808,  766,  766,  766,  766,  824,
      824,  824,  824,  831,  804,  824,  837,  824,  837,  832,
      760,  833,  696,  825,  834,   60,  694,  693,  692,  825,
      789,  789,  789,  789,  840,  840,  840,  840,  791,  791,
      791,  791,   60,   60,   60,  790,  842,  842,  842,  842,
      794,  794,  794,  794,  844,  844,  844,  844,  922,  691,
       60,  843,   60,  797,  797,  797,  797,  690,  689,  845,
      847,  847,  847,  847,  799,  799,  799,  799,  798,  802,
      802,  802,  802,  850,  850,  850,  850,  688,  767,  767,

      803,  767,  687,  768,  804,  769,  851,  807,  807,  807,
      807,  810,  810,  810,  810,  824,  824,  824,  824,  862,
      862,   60,  862,   60,  778,  778,  804,  778,  686,  825,
      824,  837,  824,  837,  872,   60,   60,  676,  675,   60,
      874,   60,  896,  674,  825,  840,  840,  840,  840,  875,
      875,  875,  875,  924,   60,  842,  842,  842,  842,   60,
      877,  877,  877,  877,  876,  844,  844,  844,  844,  673,
      843,  878,  878,  878,  878,  916,  916,   60,  916,   60,
      845,  847,  847,  847,  847,  850,  850,  850,  850,  889,
      889,  889,  889,   60,  900,   60,   60,   60,  889,  901,

      889,  901,  904,  890,  898,  897,  899,   60,  950,  672,
       60,   60,  890,   60,   60,  671,   60,   60,  670,  902,
      903,  875,  875,  875,  875,   60,   60,   60,   60,  905,
      905,  905,  905,  926,   60,   60,  876,  877,  877,  877,
      877,  878,  878,  878,  878,   60,  889,  889,  889,  889,
      862,  862,   60,  862,   60,   60,  669,   60,  921,  923,
      890,   60,  668,  667,  920,  925,  889,  901,  889,  901,
       60,   60,   60,   60,  928,   60,  666,  927,  990,   60,
      890,  905,  905,  905,  905,  940,  940,  940,  940,   60,
      942,  942,  942,  942,   60,   60,   60,   60,   60,  941,

       60,   60,  665,  948,  943,   60,  940,  951,  940,  951,
      992,  945,   60,   60,  946,   60,   60,  947,   60,   60,
      941,  664,  949,   60,   60,  942,  952,  942,  952,  958,
      958,  958,  958,  916,  916,   60,  916,  964,  964,  943,
      964,  663,   60,  959,  953,  940,  940,  940,  940,  942,
      942,  942,  942,   60,   60,  965,  965,   60,  965,  941,
      662,   60,  661,  943,  966,  966,  966,  966,  958,  969,
      958,  969,   60,  968,   60,   60,  970,   60,  967,   60,
       60,  973,  959,  981,  981,  972,  981,  940,  951,  940,
      951,  971,   60,  988,  988,   60,  988,   60,   60,  997,

      997,  941,  997,  942,  952,  942,  952,  966,  974,  966,
      974,  976,  976,  976,  976,   60,   60,  943,  660,  659,
      658,  967,  995,  995,  995,  995,  977,  979,  979,  979,
      979,  657,   60,  656,   60,  655,   60,  958,  958,  958,
      958,  980,  966,  966,  966,  966,  979,  989,  979,  989,
       60,  959,  654,   60,   60,   60,  967,  653,  652,   60,
      980,  991,  958,  969,  958,  969,  651,  964,  964,  993,
      964,   60,   60,   60, 1005,   60,  959,   60,  966,  974,
      966,  974,  976,  976,  976,  976,  979,  979,  979,  979,
     1046,   60,  967,   60,   60,  965,  965,  977,  965,  650,

      980,  979,  989,  979,  989,   60, 1006,   60,  647,   60,
       60,  646,   60, 1004, 1007,  980, 1008, 1008, 1008, 1008,
       60,  981,  981,   60,  981,   60,  988,  988,   60,  988,
       60, 1009,  995,  995,  995,  995,   60,   60, 1047, 1018,
     1017, 1019,  997,  997,   60,  997,   60,  644,   60, 1016,
     1008, 1008, 1008, 1008,   60,   60, 1020, 1020, 1020, 1020,
       60, 1010,   60,  643,   60, 1009, 1021, 1021, 1021, 1021,
     1028,  642,   60,  640,  639,   60, 1029, 1027,   60,   60,
      637, 1022,  636, 1030, 1020, 1020, 1020, 1020,   60, 1036,
       60,   60, 1037,   60,   60,  626,  625,   60, 1021, 1021,

     1021, 1021, 1031, 1031, 1031, 1031,   60, 1038,   60,   60,
       60,   60,   60, 1022, 1031, 1031, 1031, 1031,   60,   60,
       60,   60, 1044,   60, 1039,  624,   60, 1045, 1053,   60,
     1054, 1055,   60,  623,   60, 1052,   60,   60,   60,   60,
       60, 1060, 1061,   60,  622,   60,  619,  618,   60,   60,
       60, 1062,   60, 1068,  614,  613,  612, 1063,   60,   60,
      611,   60, 1069,   60, 1070, 1071,   60,   60, 1074, 1074,
     1074, 1074, 1076, 1076, 1076, 1076, 1078,   60,   60,  610,
     1085, 1085, 1075, 1085,  609,  608, 1077, 1074, 1080, 1074,
     1080,  606, 1086, 1086, 1079, 1086,   60, 1076, 1081, 1076,

     1081, 1075,   60, 1083, 1083, 1083, 1083, 1074, 1074, 1074,
     1074, 1077, 1091, 1091,  605, 1091,   60, 1084, 1087,  604,
       60, 1075, 1076, 1076, 1076, 1076,   60, 1083, 1088, 1083,
     1088,  601, 1095, 1095,   60, 1095, 1077, 1074, 1080, 1074,
     1080, 1084, 1085, 1085,   60, 1085, 1076, 1081, 1076, 1081,
      600, 1075, 1086, 1086,  599, 1086,   60,  597, 1091, 1091,
     1077, 1091, 1089, 1089, 1089, 1089,   60, 1083, 1083, 1083,
     1083,  596,  595,  593,   60,   60, 1090, 1089, 1094, 1089,
     1094, 1084,  590,  584,   60, 1083, 1088, 1083, 1088, 1095,
     1095, 1090, 1095,   60, 1089, 1089, 1089, 1089,  583, 1084,

      582, 1089, 1094, 1089, 1094,  579,   60,  575, 1090,  574,
      564,  557,  551,  550,   60, 1090,  549,  547,  542,  541,
      540,  536,  532,  531,   60,  530,  527,  522,  521,  518,
       60,  516,   60,  515,  514,  512,  511,  510,  509,  504,
      503,  502,  501,  500,  499,  498,  497,  496,   60,   24,
       24,   24,   24,   24,   24,   33,   33,   33,   33,   33,
       33,   35,   35,   35,   35,   35,   35,   36,   36,   36,
       36,   36,   36,   34,   34,   34,   34,   34,   34,   37,
       37,   37,   37,   37,   37,   38,   38,   38,   38,   38,
       38,   41,   41,   41,   41,   41,   41,   60,  495,  494,

       60,   60,   95,   95,   95,   95,   95,   96,   96,  493,
       96,   96,   96,   97,   97,   97,  490,   97,   97,   98,
       98,   98,   98,  489,   98,  486,  485,  484,  483,  480,
      479,  478,  477,  476,  475,  474,  473,  471,  470,  469,
      468,  467,  462,  461,  460,  457,  456,  455,  454,  446,
      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,
      435,  434,  433,  432,  430,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  420,  419,  418,  417,  413,  412,
      411,  410,  409,  407,  406,  403,  402,  401,  400,  399,
      398,  395,  394,  392,  391,  389,  388,  387,  386,  371,

      370,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      356,  353,  352,  351,  350,  349,  348,  345,  344,  343,
      342,  340,  339,  338,  337,  333,  330,  329,  328,  327,
      326,  325,  324,  323,  319,  315,  314,  313,  301,  296,
      295,  290,  289,  287,  286,  284,  283,  282,  279,  278,
      277,  276,  275,  274,  273,  272,  271,  270,  266,  265,
      264,  263,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  251,  250,  249,  248,  247,  246,  245,  235,  234,
      233,  232,  231,  230,  227,  226,  225,  224,  223,  222,
      221,  218,  217,  216,  215,  214,  213,  212,  211,  210,

      209,  208,  207,  206,  205,  204,  203,  202,  201,  196,
      191,  190,  189,  188,  187,  186,  185,  160,  175,  174,
      173,  172,  171,  170,  169,  168,  167,  166,  165,  163,
      162,  161,  159,  157,  156,  151,  146,  145,  144,  143,
      142,  141,  129,  117,  116,  111,  110,  109,  108,   76,
      100,   99,   76,   71,   71, 1098,   34,   34,   34,   34,
       34,   34,   34,   34,   19, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,

     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098
    } ;

static yyconst flex_int16_t yy_chk[2919] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    0,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    0,   26,
        0,   26,    1,    2,    2,    2,    2,    2,    2,    2,
       26,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   15,   16,   17,   18,    2, 1023,  102,  102,   15,
       16,  102, 1024, 1025,   29,   29,   29,   29,   17,   18,
       21,   21,   21,   21,   29,   24,   29,   24,   55,   21,
       21,   21,   21,   21,   24,   21,   24,   45,   24,   45,
       24,   21,   31,   31,   31,   31,   55,   88,   45, 1026,
     1032,   21,   21,   50,   50,   50,   50,   21, 1033,   70,

       88,   21,   88,   88, 1034,   56,   21,   21,   21,   22,
       22,   22,   22, 1035,   32, 1040,   32,   70,   22,   22,
       22,   22,   22,   32,   22,   32,   56,   32, 1041,   32,
       22,   68,   46,   46,   46,   46,   32,  157,  202,   94,
       22,   22,  157,  202,   46,  118,   22,   73,   94,   68,
       22,   46,   68, 1042,   73,   22,   22,   22,   27,   27,
       27,   27,  118,  118,   69,   46,   94,   27,   73,   27,
       27,   27,   60,   27,   60, 1043,   69,   27, 1048,  121,
      218,   60,   69,   60,  218,   60, 1049,   60, 1050, 1051,
      121,   27,   30,   62,   62,   62,   62,  121,  119,   30,

       63, 1056,   63,   62,   30,   62,   75,   75,  225,   63,
       75,   63,  225,   63,  119,   63,  119,  260, 1057,   30,
       30,  260,   63,   30,  122,   30,   30,   75,   30, 1058,
       30, 1059,   30,   30,   30,  122,   30,   48,   48,   48,
       48, 1064,  122, 1065,   64,   75,   64,   48,  124,   48,
     1072,   90,   65,   64,   65,   64,   48,   64,  559,   64,
       90,   65,  124,   65,   90,   65,  124,   65,   90,  120,
       48,   49, 1085,   64,  559,   66,  181,   66,   72,   72,
       72,   72,  181,  126,   66,   65,   66,  120,   66,  120,
       66,   49,   49,  126,  181,   49,  128,   49,   49, 1086,

       49,  126,   49,  128,   49,   49,   49,   66,   49,   59,
       59,   59,   59,   77,   77,   77,   77,  128,   59,   59,
       59,   59,   59,  136,   59,   78,   78,   78,   78,  125,
       59,   93,   93,   93,   93,  106,  136,  125,  136,  136,
       59,   59,  715,  715,  106,  715,   59,  125,  106, 1091,
       59, 1095,  106, 1015,   78,   59,   59,   59,   67,  158,
       67,  123,  101,  101,  101,  101,  158,   67, 1014,   67,
     1013,   67,   78,   67,  101,  138,  123, 1012, 1002,  123,
      158,  101,  718,  718,  138,  718,  176,   67,  138, 1001,
      176,  177,  138,  177, 1000,  101,  160,  160,  160,  160,

      166,  166,  166,  166,  176,   67,   80,   80,  160,  177,
       80,  999,   80,   80,  179,   80,  997,   80,  179,   80,
       80,   80,  184,   80,  169,  169,  169,  169,  178,  178,
      178,  178,  179,  180,  180,  182,  988,  183,  169,  182,
      184,  237,  178,  207,  207,  207,  207,  222,  222,  222,
      222,  180,  985,  182,  183,  183,  237,  178,  207,  237,
      229,  229,  222,  229,  207,  229,  984,  229,  222,  228,
      228,  228,  228,  983,  982,  178,  230,  230,  230,  230,
      981,  978,  236,  228,  233,  233,  233,  233,  236,  975,
      230,  234,  234,  234,  234,  240,  965,  964,  233,  240,

      236,  238,  238,  238,  238,  234,  239,  239,  239,  239,
      241,  305,  963,  240,  241,  238,  268,  268,  268,  268,
      239,  962,  242,  242,  242,  242,  305,  961,  241,  305,
      238,  243,  243,  243,  243,  239,  242,  244,  960,  294,
      294,  244,  294,  956,  294,  243,  294,  954,  238,  938,
      937,  242,  572,  239,  936,  244,  245,  245,  245,  245,
      243,  249,  249,  249,  249,  251,  251,  251,  251,  242,
      572,  245,  262,  262,  262,  262,  249,  935,  243,  306,
      251,  933,  249,  292,  292,  292,  292,  262,  267,  267,
      267,  267,  273,  273,  273,  273,  306,  306,  251,  298,

      298,  245,  298,  267,  298,  931,  298,  273,  632,  262,
      280,  280,  280,  280,  293,  293,  293,  293,  632,  930,
      302,  280,  297,  297,  297,  297,  632,  929,  293,  299,
      299,  299,  299,  302,  300,  300,  297,  300,  302,  300,
      919,  300,  303,  299,  301,  301,  301,  301,  916,  915,
      303,  304,  304,  304,  304,  914,  725,  725,  301,  725,
      303,  307,  307,  307,  307,  304,  451,  308,  308,  308,
      308,  309,  309,  309,  309,  307,  310,  310,  310,  310,
      304,  308,  913,  451,  451,  309,  311,  311,  311,  311,
      307,  310,  316,  316,  316,  316,  308,  682,  304,  381,

      309,  317,  317,  317,  317,  453,  453,  316,  307,  320,
      320,  320,  320,  381,  308,  682,  912,  381,  309,  321,
      321,  321,  321,  453,  320,  324,  324,  324,  324,  331,
      331,  331,  331,  334,  334,  334,  334,  911,  365,  365,
      324,  365,  910,  365,  331,  365,  909,  738,  334,  335,
      335,  335,  335,  341,  341,  341,  341,  342,  342,  342,
      342,  346,  346,  346,  346,  738,  379,  379,  342,  379,
      908,  379,  342,  379,  907,  829,  346,  354,  354,  354,
      354,  360,  360,  360,  360,  906,  380,  506,  354,  366,
      366,  366,  366,  829,  566,  506,  360,  378,  378,  378,

      378,  380,  382,  383,  380,  506,  894,  566,  382,  383,
      893,  378,  566,  891,  384,  384,  384,  384,  385,  385,
      385,  385,  390,  390,  390,  390,  382,  383,  384,  391,
      391,  391,  391,  393,  393,  393,  393,  396,  396,  396,
      396,  888,  887,  384,  391,  397,  397,  397,  397,  450,
      886,  885,  396,  398,  398,  398,  398,  404,  404,  404,
      404,  384,  405,  405,  405,  405,  884,  450,  398,  571,
      450,  883,  404,  408,  408,  408,  408,  571,  398,  414,
      414,  414,  414,  416,  416,  416,  416,  571,  436,  436,
      414,  436,  882,  436,  414,  436,  416,  421,  421,  421,

      421,  425,  425,  425,  425,  431,  431,  431,  431,  452,
      441,  441,  421,  441,  452,  441,  425,  441,  444,  444,
      431,  444,  881,  444,  631,  444,  631,  452,  458,  458,
      458,  458,  459,  459,  459,  459,  463,  463,  463,  463,
      568,  568,  631,  458,  464,  464,  464,  464,  465,  465,
      465,  465,  467,  467,  467,  467,  508,  568,  568,  464,
      470,  470,  470,  470,  629,  508,  880,  467,  471,  471,
      471,  471,  879,  629,  508,  470,  472,  472,  472,  472,
      864,  863,  629,  471,  474,  474,  474,  474,  478,  478,
      478,  478,  481,  481,  481,  481,  569,  862,  573,  474,

      569,  861,  573,  478,  483,  483,  483,  483,  487,  487,
      487,  487,  859,  478,  569,  483,  573,  858,  635,  483,
      635,  857,  856,  487,  489,  489,  489,  489,  491,  491,
      491,  491,  492,  492,  492,  492,  635,  502,  502,  489,
      502,  855,  502,  491,  502,  854,  489,  496,  496,  496,
      496,  489,  497,  497,  497,  497,  498,  498,  498,  498,
      853,  852,  496,  513,  513,  513,  513,  497,  848,  500,
      498,  846,  828,  827,  497,  500,  500,  500,  500,  497,
      500,  505,  505,  505,  505,  634,  511,  511,  511,  511,
      514,  514,  514,  514,  823,  505,  517,  517,  517,  517,

      634,  511,  822,  634,  821,  514,  519,  519,  519,  519,
      505,  511,  520,  520,  520,  520,  633,  521,  521,  521,
      521,  519,  524,  524,  524,  524,  820,  633,  505,  507,
      814,  814,  521,  814,  633,  507,  507,  507,  507,  521,
      507,  507,  819,  733,  521,  523,  523,  523,  523,  525,
      525,  525,  525,  526,  526,  526,  526,  818,  733,  507,
      523,  733,  817,  815,  525,  528,  528,  528,  528,  529,
      529,  529,  529,  533,  533,  533,  533,  809,  805,  630,
      528,  534,  534,  534,  534,  803,  630,  800,  533,  537,
      537,  537,  537,  539,  539,  539,  539,  630,  556,  556,

      537,  556,  685,  556,  537,  556,  539,  543,  543,  543,
      543,  544,  544,  544,  544,  548,  548,  548,  548,  685,
      685,  796,  543,  552,  552,  552,  552,  555,  555,  555,
      555,  565,  565,  565,  565,  567,  570,  792,  552,  665,
      665,  555,  665,  780,  665,  565,  665,  779,  567,  570,
      778,  787,  787,  567,  570,  576,  576,  576,  576,  730,
      565,  577,  577,  577,  577,  580,  580,  580,  580,  787,
      576,  581,  581,  581,  581,  776,  730,  730,  565,  788,
      580,  585,  585,  585,  585,  586,  586,  586,  586,  587,
      587,  587,  587,  590,  590,  590,  590,  788,  788,  775,

      586,  591,  591,  591,  591,  773,  772,  771,  590,  592,
      592,  592,  592,  594,  594,  594,  594,  598,  598,  598,
      598,  602,  602,  602,  602,  607,  607,  607,  607,  627,
      628,  638,  638,  638,  638,  641,  641,  641,  641,  770,
      769,  627,  628,  645,  645,  645,  645,  627,  628,  648,
      648,  648,  648,  649,  649,  649,  649,  651,  651,  651,
      651,  768,  767,  774,  648,  660,  660,  660,  660,  774,
      764,  774,  651,  759,  774,  680,  660,  735,  757,  680,
      660,  664,  664,  664,  664,  668,  668,  668,  668,  669,
      669,  669,  669,  680,  735,  735,  664,  754,  683,  668,

      752,  834,  683,  669,  670,  670,  670,  670,  675,  675,
      675,  675,  677,  677,  677,  677,  683,  681,  670,  834,
      713,  713,  675,  713,  734,  713,  677,  713,  736,  732,
      681,  732,  748,  747,  669,  681,  744,  670,  743,  734,
      739,  677,  734,  727,  736,  675,  736,  732,  739,  687,
      687,  687,  687,  690,  690,  690,  690,  726,  739,  677,
      678,  678,  678,  678,  687,  785,  723,  722,  690,  694,
      694,  694,  694,  785,  678,  695,  695,  695,  695,  697,
      697,  697,  697,  785,  694,  698,  698,  698,  698,  678,
      742,  742,  742,  742,  697,  746,  746,  746,  746,  721,

      720,  704,  704,  704,  704,  678,  719,  678,  679,  679,
      679,  679,  704,  832,  832,  781,  704,  705,  705,  705,
      705,  782,  679,  707,  707,  707,  707,  716,  705,  709,
      781,  832,  705,  781,  708,  830,  707,  679,  782,  782,
      706,  679,  703,  830,  838,  710,  710,  710,  710,  711,
      711,  711,  711,  830,  838,  679,  684,  684,  684,  684,
      710,  702,  838,  701,  711,  712,  712,  712,  712,  700,
      684,  696,  714,  714,  714,  714,  693,  692,  691,  712,
      717,  717,  717,  717,  689,  684,  714,  724,  724,  724,
      724,  688,  835,  684,  717,  728,  728,  728,  728,  784,

      686,  724,  784,  684,  729,  729,  729,  729,  835,  728,
      835,  731,  731,  731,  731,  676,  674,  784,  729,  673,
      737,  737,  737,  737,  728,  731,  740,  740,  740,  740,
      831,  672,  671,  729,  737,  741,  741,  741,  741,  833,
      731,  740,  728,  831,  745,  745,  745,  745,  831,  737,
      741,  729,  833,  749,  749,  749,  749,  833,  731,  745,
      750,  750,  750,  750,  663,  662,  865,  737,  749,  751,
      751,  751,  751,  661,  865,  750,  753,  753,  753,  753,
      755,  755,  755,  755,  865,  758,  758,  758,  758,  816,
      816,  755,  816,  659,  658,  755,  758,  657,  655,  654,

      758,  760,  760,  760,  760,  762,  762,  762,  762,  765,
      765,  765,  765,  652,  760,  766,  766,  766,  766,  777,
      777,  777,  777,  783,  765,  786,  786,  786,  786,  783,
      766,  783,  650,  777,  783,  783,  647,  646,  644,  786,
      789,  789,  789,  789,  790,  790,  790,  790,  791,  791,
      791,  791,  897,  783,  786,  789,  793,  793,  793,  793,
      794,  794,  794,  794,  795,  795,  795,  795,  897,  643,
      897,  793,  786,  797,  797,  797,  797,  642,  640,  795,
      798,  798,  798,  798,  799,  799,  799,  799,  797,  802,
      802,  802,  802,  804,  804,  804,  804,  639,  811,  811,

      802,  811,  637,  811,  802,  811,  804,  807,  807,  807,
      807,  810,  810,  810,  810,  824,  824,  824,  824,  825,
      825,  836,  825,  866,  826,  826,  810,  826,  636,  824,
      837,  837,  837,  837,  836,  899,  839,  626,  625,  836,
      839,  866,  866,  624,  837,  840,  840,  840,  840,  841,
      841,  841,  841,  899,  839,  842,  842,  842,  842,  837,
      843,  843,  843,  843,  841,  844,  844,  844,  844,  623,
      842,  845,  845,  845,  845,  890,  890,  837,  890,  870,
      844,  847,  847,  847,  847,  850,  850,  850,  850,  860,
      860,  860,  860,  867,  870,  868,  869,  870,  871,  871,

      871,  871,  874,  860,  868,  867,  869,  872,  925,  622,
      874,  867,  871,  868,  869,  621,  873,  902,  620,  872,
      873,  875,  875,  875,  875,  872,  925,  871,  874,  876,
      876,  876,  876,  902,  873,  902,  875,  877,  877,  877,
      877,  878,  878,  878,  878,  871,  889,  889,  889,  889,
      892,  892,  895,  892,  896,  898,  619,  900,  896,  898,
      889,  903,  618,  617,  895,  900,  901,  901,  901,  901,
      895,  904,  896,  898,  904,  900,  616,  903,  970,  903,
      901,  905,  905,  905,  905,  917,  917,  917,  917,  904,
      918,  918,  918,  918,  920,  901,  970,  972,  921,  917,

      922,  923,  615,  923,  918,  924,  926,  926,  926,  926,
      972,  920,  920,  901,  921,  972,  921,  922,  922,  923,
      926,  614,  924,  924,  928,  927,  927,  927,  927,  934,
      934,  934,  934,  939,  939,  926,  939,  941,  941,  927,
      941,  613,  928,  934,  928,  940,  940,  940,  940,  942,
      942,  942,  942,  926,  927,  943,  943,  945,  943,  940,
      612,  947,  610,  942,  944,  944,  944,  944,  946,  946,
      946,  946,  927,  945,  948,  945,  947,  949,  944,  947,
      950,  950,  946,  959,  959,  949,  959,  951,  951,  951,
      951,  948,  948,  967,  967,  949,  967,  946,  950,  980,

      980,  951,  980,  952,  952,  952,  952,  953,  953,  953,
      953,  955,  955,  955,  955,  946,  951,  952,  609,  608,
      606,  953,  977,  977,  977,  977,  955,  957,  957,  957,
      957,  605,  952,  604,  951,  600,  953,  958,  958,  958,
      958,  957,  966,  966,  966,  966,  968,  968,  968,  968,
      952,  958,  599,  971,  953,  991,  966,  597,  596,  973,
      968,  971,  969,  969,  969,  969,  595,  986,  986,  973,
      986,  971, 1038,  991,  991,  968,  969,  973,  974,  974,
      974,  974,  976,  976,  976,  976,  979,  979,  979,  979,
     1038,  969,  974,  968,  992,  987,  987,  976,  987,  593,

      979,  989,  989,  989,  989,  990,  992,  974,  589,  969,
      993,  588,  992,  990,  993,  989,  994,  994,  994,  994,
     1039,  998,  998,  990,  998,  974, 1003, 1003,  993, 1003,
      989,  994,  995,  995,  995,  995, 1005, 1004, 1039, 1006,
     1005, 1007, 1011, 1011, 1006, 1011, 1007,  584,  989, 1004,
     1008, 1008, 1008, 1008, 1005, 1004, 1009, 1009, 1009, 1009,
     1016,  994, 1006,  583, 1007, 1008, 1010, 1010, 1010, 1010,
     1017,  582, 1018,  579,  578, 1017, 1018, 1016, 1016, 1019,
      575, 1010,  574, 1019, 1020, 1020, 1020, 1020, 1028, 1027,
     1018, 1029, 1028, 1017, 1027,  564,  563, 1019, 1021, 1021,

     1021, 1021, 1022, 1022, 1022, 1022, 1028, 1029, 1030, 1029,
     1045, 1037, 1027, 1021, 1031, 1031, 1031, 1031, 1036, 1044,
     1046, 1047, 1036, 1052, 1030,  562, 1030, 1037, 1045, 1037,
     1046, 1047, 1053,  561, 1054, 1044, 1036, 1044, 1046, 1047,
     1055, 1052, 1053, 1060,  560, 1061,  558,  557, 1062, 1063,
     1053, 1054, 1054, 1060,  554,  553,  551, 1055, 1055, 1068,
      550, 1060, 1061, 1061, 1062, 1063, 1062, 1063, 1066, 1066,
     1066, 1066, 1067, 1067, 1067, 1067, 1068, 1068, 1069,  549,
     1075, 1075, 1066, 1075,  546,  545, 1067, 1070, 1070, 1070,
     1070,  542, 1077, 1077, 1069, 1077, 1069, 1071, 1071, 1071,

     1071, 1070, 1078, 1073, 1073, 1073, 1073, 1074, 1074, 1074,
     1074, 1071, 1084, 1084,  541, 1084, 1070, 1073, 1078,  540,
     1078, 1074, 1076, 1076, 1076, 1076, 1071, 1079, 1079, 1079,
     1079,  538, 1090, 1090, 1070, 1090, 1076, 1080, 1080, 1080,
     1080, 1079, 1092, 1092, 1071, 1092, 1081, 1081, 1081, 1081,
      536, 1080, 1093, 1093,  535, 1093, 1079,  532, 1096, 1096,
     1081, 1096, 1082, 1082, 1082, 1082, 1080, 1083, 1083, 1083,
     1083,  531,  530,  527, 1079, 1081, 1082, 1087, 1087, 1087,
     1087, 1083,  522,  518, 1080, 1088, 1088, 1088, 1088, 1097,
     1097, 1087, 1097, 1081, 1089, 1089, 1089, 1089,  516, 1088,

      515, 1094, 1094, 1094, 1094,  512, 1087,  510, 1089,  509,
      501,  499,  495,  494, 1088, 1094,  493,  490,  486,  485,
      484,  479,  477,  476, 1087,  475,  473,  469,  468,  466,
     1094,  462, 1088,  461,  460,  457,  456,  455,  454,  449,
      448,  447,  440,  439,  435,  434,  433,  432, 1094, 1099,
     1099, 1099, 1099, 1099, 1099, 1100, 1100, 1100, 1100, 1100,
     1100, 1101, 1101, 1101, 1101, 1101, 1101, 1102, 1102, 1102,
     1102, 1102, 1102, 1103, 1103, 1103, 1103, 1103, 1103, 1104,
     1104, 1104, 1104, 1104, 1104, 1105, 1105, 1105, 1105, 1105,
     1105, 1106, 1106, 1106, 1106, 1106, 1106, 1107,  430,  429,

     1107, 1107, 1108, 1108, 1108, 1108, 1108, 1109, 1109,  427,
     1109, 1109, 1109, 1110, 1110, 1110,  423, 1110, 1110, 1111,
     1111, 1111, 1111,  422, 1111,  420,  419,  418,  417,  415,
      413,  412,  411,  410,  409,  407,  406,  403,  402,  401,
      400,  399,  395,  394,  392,  389,  388,  387,  386,  377,
      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      364,  363,  362,  361,  359,  358,  357,  356,  355,  353,
      352,  351,  350,  349,  348,  345,  344,  343,  340,  339,
      338,  337,  336,  333,  332,  330,  329,  328,  327,  326,
      325,  323,  322,  319,  318,  315,  314,  313,  312,  296,

      295,  291,  290,  289,  287,  286,  285,  284,  283,  282,
      281,  279,  278,  277,  276,  275,  274,  272,  271,  270,
      269,  266,  265,  264,  263,  261,  259,  258,  257,  256,
      255,  254,  253,  252,  250,  248,  247,  246,  235,  232,
      231,  227,  226,  224,  223,  221,  220,  219,  217,  216,
      215,  214,  213,  212,  211,  210,  209,  208,  206,  205,
      204,  203,  201,  200,  199,  198,  197,  196,  195,  194,
      193,  192,  191,  190,  189,  188,  187,  186,  175,  174,
      173,  172,  171,  170,  168,  167,  165,  164,  163,  162,
      161,  156,  155,  154,  153,  152,  151,  150,  149,  148,

      147,  146,  145,  144,  143,  142,  141,  140,  139,  137,
      135,  134,  133,  132,  131,  130,  129,  127,  117,  116,
      115,  114,  113,  112,  111,  110,  109,  108,  107,  105,
      104,  103,   99,   92,   91,   89,   87,   86,   85,   84,
       83,   82,   79,   58,   57,   54,   53,   52,   51,   47,
       43,   40,   28,   25,   23,   19,   14,   13,    8,    7,
        6,    5,    4,    3, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,

     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[130] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 
    0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
/* $Id$ */
/** @file parseosrl.l
 * 
 * @author  Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin, 
 * @version 2.0, 19/07/2009
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005-2009, Robert Fourer, Jun Ma, Horand Gassmann, Kipp Martin,
 * Northwestern University, Dalhousie University and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 17 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSrLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"


#define PARSERDEBUG
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;
     








#line 102 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 1564 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define recordtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osrllex_init (yyscan_t* scanner);

int osrllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 112 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"



#line 1822 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1099 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2865 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 115 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 119 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 120 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 121 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 122 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 124 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 140 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 142 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 143 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 144 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 145 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 146 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 147 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 148 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 149 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 150 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT; return(NUMBEROFOTHERSOLUTIONRESULTSATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 151 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(NUMBEROFRECORDSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 152 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 153 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 154 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 155 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 156 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 158 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 159 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 160 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 161 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 162 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 163 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 164 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 165 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 166 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 167 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 168 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 169 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 170 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 171 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 172 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 173 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 174 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 175 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 176 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 177 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 178 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 179 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 180 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 181 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 184 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 185 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 186 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 187 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 188 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 189 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 190 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 191 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 192 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 193 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 194 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBEND);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 196 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 197 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICEURISTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 198 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 199 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 200 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICENAMESTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 201 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 202 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 203 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(INSTANCENAMESTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 204 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 205 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 206 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(JOBIDSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 207 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 209 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 210 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 212 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 213 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 215 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 216 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(MESSAGESTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 217 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 219 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 220 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 222 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 223 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 225 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 226 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 228 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 229 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 231 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 232 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 234 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 235 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 237 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 238 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 239 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 240 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 242 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 243 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 244 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 245 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 247 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 248 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 249 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 250 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 252 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 253 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 255 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSSTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 256 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 258 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSTART);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 259 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLUTIONRESULTEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 261 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN recordtext; return(RECORDSTART);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 262 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(RECORDEND);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 264 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTARTANDEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 265 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTARTANDEND);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 266 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTARTANDEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 267 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTARTANDEND);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 268 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTARTANDEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 269 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTARTANDEND);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 273 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext);   yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 274 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (RECORDTEXT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 276 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 118:
#line 278 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 278 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 279 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 281 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 122:
#line 283 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 283 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 284 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 287 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /* yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 288 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 289 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 292 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 304 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
ECHO;
	YY_BREAK
#line 2705 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(recordtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osrlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1099 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1099 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1098);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osrllex_init_extra has the same functionality as osrllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osrlalloc in
 * the yyextra field.
 */

int osrllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osrlset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osrlset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 304 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"





