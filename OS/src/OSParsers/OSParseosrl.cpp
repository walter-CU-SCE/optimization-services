#line 2 "OSParseosrl.cpp"

#line 4 "OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osrllex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 183
#define YY_END_OF_BUFFER 184
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1741] =
    {   0,
        1,    1,  181,  181,  179,  179,  180,  180,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  184,  182,
        1,    1,    2,  169,    2,  169,    6,  169,    5,  182,
        4,  169,  181,  183,  179,  180,  170,  172,  173,  172,
      176,  177,  176,    1,    0,    6,    0,    5,    0,    4,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
      169,  169,    6,  169,    5,  169,  169,  169,  169,  169,
      169,  169,  169,  169,    3,    6,    6,    6,  169,    7,
        5,    5,    0,    0,  175,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    4,

      169,  181,  179,  180,  170,    0,  178,    6,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
        0,  169,    6,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    6,  174,    6,    6,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  171,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   85,    0,
        0,    0,    0,    0,    0,   63,    0,  105,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  165,    0,    0,    0,   24,    0,    0,    0,    0,
        0,    0,    0,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   63,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  143,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  169,  169,  169,  169,  169,
      169,  169,  169,  169,    0,    0,    0,    0,    0,   86,
        0,    0,    0,    0,    0,    0,    0,    0,   64,    0,
        0,    0,  106,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  166,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   68,  101,    0,    0,    0,
       55,   54,  111,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   24,    0,   36,   37,    0,    0,    0,   40,   41,
        0,   44,   45,    0,    0,    0,  169,  169,  169,  169,
      169,  169,    0,    0,    0,    0,   86,    0,    0,    0,
        0,    0,    0,    0,   69,   64,    0,    0,  106,    0,
        0,    0,   56,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  144,    0,    0,    0,    0,    0,    0,
        0,  166,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   70,   68,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  135,    0,    0,   59,    0,
        0,    0,    0,    0,    0,    0,  161,    0,    0,    0,
        0,   34,   35,    0,    0,    0,   38,   39,    0,   42,
       43,    0,   48,   49,    0,  169,  169,  169,  169,  169,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       69,    0,  102,    0,    0,    0,   56,    0,  112,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  144,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   95,   57,    0,   70,

        0,  103,    0,    0,    0,    0,    0,   61,    0,    0,
        0,    0,    0,   59,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   46,
       47,    0,  169,  169,  169,  169,  169,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  102,    0,    0,
        0,  112,    0,    0,    0,    0,    0,    0,    0,    0,
      136,    0,    0,    0,   60,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  162,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   57,    0,    0,    0,    0,
        0,    0,    0,    0,   61,    0,    0,  129,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   96,    0,   58,    0,    0,    0,  104,
        0,    0,    0,    0,    0,    0,   62,    0,    0,    0,
        0,    0,  136,    0,    0,   60,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  162,    0,    0,    0,    0,
       83,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  139,    0,    0,  147,    0,    0,    0,    0,    0,
        0,    0,  167,    0,   28,   29,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,    0,    0,
        0,    0,    0,    0,    0,    0,   96,   58,    0,    0,
      104,    0,    0,    0,    0,    0,    0,   62,    0,    0,
        0,    0,  130,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   93,    0,    0,    0,
      107,    0,    0,    0,    0,    0,    0,  125,    0,    0,

        0,  137,    0,    0,    0,    0,    0,    0,    0,  159,
        0,    0,   26,   27,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,    0,    0,    0,    0,
        0,   84,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  130,    0,
        0,    0,    0,  140,    0,    0,    0,  148,    0,    0,
        0,    0,    0,    0,    0,    0,  168,    0,    0,    0,
        0,   81,   87,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  123,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    8,    0,
        0,    0,   11,    0,    0,    0,    0,    0,    0,    0,
       22,    0,    0,    0,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,    0,
        0,    0,    0,   84,    0,    0,    0,    0,    0,   94,
        0,    0,    0,  108,    0,    0,    0,    0,    0,    0,
        0,  126,    0,    0,    0,    0,  138,  140,    0,    0,
      148,    0,    0,    0,    0,    0,    0,  160,    0,  168,
        0,    0,    0,    0,    0,   91,    0,   99,    0,   67,
       65,  113,    0,    0,    0,    0,    0,  133,    0,    0,

        0,    0,    0,  155,    0,  163,    0,   32,   33,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,    0,    0,    0,    0,    0,   82,
        0,   88,    0,    0,   94,    0,    0,  108,    0,    0,
        0,    0,    0,    0,  124,  126,    0,    0,    0,  138,
        0,    0,    0,    0,    0,    0,    0,  160,    0,    0,
        0,    0,    0,    0,    0,   97,   67,    0,    0,    0,
        0,    0,  131,    0,    0,    0,    0,  153,  157,    0,
       30,   31,    8,    0,    0,   10,   11,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   21,   22,    0,
        0,    0,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,    0,    0,    0,
        0,    0,   82,   88,    0,    0,   92,    0,    0,  100,
        0,   66,    0,    0,  114,    0,    0,    0,  124,    0,
        0,    0,  134,    0,    0,    0,    0,    0,    0,  156,
        0,    0,  164,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  151,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  169,  169,  169,  169,    0,    0,    0,    0,
        0,    0,   92,    0,   98,  100,   66,    0,  114,    0,
        0,    0,    0,    0,  132,  134,    0,    0,    0,    0,
        0,  154,  156,    0,  158,  164,   71,    0,    0,    0,
       79,   89,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   10,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   21,    0,    0,    0,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,    0,    0,
        0,    0,    0,    0,   98,    0,    0,    0,    0,    0,
      132,    0,    0,    0,    0,  152,  154,  158,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,    0,   72,    0,    0,    0,
        0,   80,    0,   90,    0,    0,    0,    0,    0,    0,
        0,    0,  152,    0,   75,    0,    0,    0,  119,    0,
        0,  141,    0,  149,    0,    0,    0,    0,    0,    0,
        0,    0,   18,    0,    0,    0,   23,    0,    0,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,   72,    0,    0,    0,   80,   90,    0,    0,

        0,    0,    0,    0,    0,    0,   73,   77,    0,    0,
      121,  127,  145,    0,    0,   12,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   25,    0,    0,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
        0,    0,   76,    0,    0,    0,    0,  120,    0,    0,
        0,  142,    0,    0,  150,    0,  115,    0,    9,    0,
        0,    0,    0,    0,    0,   18,    0,    0,   20,   23,
        0,    0,   52,   53,  169,  169,  169,  169,  169,  169,
      169,  169,    0,   74,   76,    0,   78,    0,    0,  120,
        0,  122,    0,  128,  142,    0,  146,  150,    0,  117,

        0,   12,    0,    0,    0,   15,    0,    0,    0,    0,
       25,    0,   50,   51,  169,  169,  169,  169,  169,  169,
       74,   78,    0,    0,  116,    0,  122,  128,  146,    0,
        9,    0,    0,    0,    0,    0,    0,   19,   20,  169,
      169,  169,  169,  169,    0,  116,    0,  118,    0,    0,
        0,   15,    0,    0,    0,  169,  169,  169,  169,    0,
      118,    0,    0,    0,    0,    0,   19,  169,  169,  169,
      169,    0,    0,    0,    0,    0,    0,  169,  169,  169,
      169,    0,    0,    0,    0,    0,    0,  169,  169,  169,
      169,    0,  109,    0,    0,    0,    0,  169,  169,  169,

      169,    0,    0,    0,    0,    0,  169,  169,  169,  169,
        0,  110,    0,    0,    0,   16,    0,   17,  169,  169,
      169,  169,  110,    0,    0,   14,    0,    0,  169,  169,
        0,   13,    0,   16,   17,  169,    0,   14,   13,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    8,    1,    1,    9,    1,
        1,    8,   10,    1,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    8,    1,   15,
       16,   17,   18,    8,    8,    8,   19,   20,   21,   22,
        8,    8,   23,   24,    8,    8,   25,   26,   27,   28,
        8,   29,   30,   31,   32,   33,    8,    8,    8,    8,
        1,    1,    1,    1,    8,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,    8,   50,   51,   52,   53,   54,   55,   56,
       57,   58,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[59] =
    {   0,
        1,    2,    2,    2,    2,    1,    3,    2,    4,    1,
        2,    2,    2,    2,    5,    1,    6,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[1754] =
    {   0,
        0,   23, 4358, 4357, 4366, 4365, 4362, 4361,    0,    0,
        0,    0, 4354, 4353,   39,   40,   41,   42, 4367, 4376,
       59,  113, 4359,   50, 4356,   75,  167,   51,  204,  237,
       17,   76,    0, 4376,    0,    0,    0, 4376, 4376, 4353,
     4376, 4376, 4346,    0,   35,  118, 4345,  140,   51,   81,
     4335, 4326, 4321, 4321,   22,   47, 4310, 4322, 4317,  290,
      131,  175,  171,  136,    0,  197,  198,  218,  222,  234,
      282,  261,  294,  243, 4376,  105,  316,  344,  349, 4376,
      191,  232, 4343,  333, 4376,   83, 4319,   46, 4299, 4304,
     4312,   53, 4301, 4310,  289,  342,   55, 4296, 4312,  225,

      308,    0,    0,    0,    0, 4328, 4376,  398,  148, 4322,
     4291, 4291, 4285, 4294, 4293, 4288, 4288, 4294, 4290, 4292,
      389,  394,  403,  406,  411,  412,  420,  429,  436,  446,
     4319,  462,  470, 4321,   93, 4297,  138, 4277, 4282, 4290,
      205, 4279, 4288,  443,  453,  115, 4274, 4290, 4271, 4288,
     4270, 4273, 4269, 4284, 4280, 4269, 4264, 4276, 4278, 4261,
     4268, 4258, 4259, 4267, 4266, 4256, 4260, 4270, 4268, 4251,
     4255, 4248, 4261,  216,  494, 4376,  510,  514, 4260, 4261,
      518, 4258, 4260, 4254, 4255, 4240, 4238, 4250,  523,  524,
      527,  531,  547,  548,  551,  555,  569,  575, 4376, 4237,

     4254, 4236, 4239, 4235, 4250, 4246, 4235, 4230, 4242, 4244,
     4227, 4234, 4224, 4225, 4233, 4232, 4222, 4226, 4236, 4234,
     4217, 4221, 4214, 4227,  217, 4211, 4221,  287, 4211, 4211,
     4215, 4228, 4220, 4205, 4210,  591, 4204, 4216, 4211, 4207,
     4213, 4212, 4195,  150, 4196,  218, 4195,  312, 4212, 4208,
     4191, 4201, 4202, 4191,  595,  453,  600, 4202, 4201,  615,
      621, 4200, 4196,  625,  626,  630,  646,  651,  652,  655,
      676,  671,  680, 4183, 4193,  292,  696, 4184, 4188, 4201,
     4193, 4178, 4183,  700, 4177,  722, 4185, 4181, 4187, 4186,
     4169,  157, 4170,  306, 4169,  323, 4186, 4182, 4165,  726,

     4183, 4171, 4163, 4163, 4161, 4174, 4178, 4168, 4159, 4174,
      731,  747, 4187, 4172, 4169, 4158,  752, 4153, 4165, 4159,
     4148, 4161, 4145, 4155, 4144, 4157, 4164, 4146, 4147,  363,
     4153, 4156, 4141, 4146, 4183,  759,  578, 4136, 4133,  768,
      705,  774,  713,  778, 4132,  783,  784,  800,  791,  805,
      808,  830,  834,  825, 4149, 4137, 4129, 4129,  850,  856,
     4127, 4140, 4144, 4134, 4125, 4140,  861,  866,  870, 4153,
     4138,  877,  882, 4135, 4124,  886, 4119, 4131, 4125, 4114,
     4127, 4111, 4121, 4110, 4123,  893, 4113, 4114,  483, 4120,
      897,  902, 4123, 4111, 4121, 4120, 4123, 4102, 4104, 4116,

     4103, 4114, 4100,  913, 4129,  917, 4376, 4105, 4092, 4101,
      931, 4376,  211, 4089, 4105, 4098, 4089, 4087, 4085, 4102,
     4089,  179, 4094, 4109, 4104, 4089, 4092, 4078, 4093, 4077,
     4077,  465, 4121, 4117, 4114, 4095, 4094, 4116, 4112, 4109,
     4113, 4109, 4106,  935,  922, 4076,  939,  942,  943,  948,
      964,  969, 4068, 4078, 4077, 4080,  990, 4059, 4061, 4073,
     4060, 4071, 4057,  994,  998, 1010, 1014, 4063, 1018, 4050,
     4059, 1022, 1030, 1038, 4047, 4063, 4056, 4047, 4045, 4043,
     4060, 4047, 1042, 1046,  196, 4052, 4067, 4062, 4047, 4050,
     4036, 1058, 4051, 4055, 4049, 4031, 4030, 4047, 4028, 4034,

     4040, 4032, 4040, 1067, 1071, 4062, 4036, 4031, 4014, 4033,
     4022, 4024, 4030, 4019,  407, 4376, 4035, 4013, 1075, 4014,
     4029, 4039, 4013, 4028, 4008, 4012, 4027, 4011, 3998, 4002,
     1080, 4376, 4376, 4014, 4017, 1088, 4376, 4376, 1097, 4376,
     4376, 4047, 4043, 4040, 4011, 1090, 1099,  970, 1106, 1107,
     4017, 4011, 3993, 3992, 4009, 3990, 3996, 4002, 3994, 4002,
     1115, 1123, 1127, 3999, 3994, 3977, 1131, 1150, 1154, 3996,
     3985, 3987, 3993, 3982,  416, 1158, 3998, 3976, 1166, 1174,
     3977, 3992, 4002, 3976, 3991, 3971, 3975, 1182, 3975, 3967,
     3973, 3963, 3975, 3960,  276, 3939, 4376, 1188, 3953, 1192,

     3896, 4376, 3883, 3901, 3883, 3887, 3880, 1198, 3870, 3866,
     3859, 3868, 3842, 1202, 3836, 3825, 3829, 3799, 3793,  456,
     3783, 3776, 3771, 3784, 1206, 3776, 1196, 3771, 1229, 4376,
     4376, 3773, 1237, 1231, 1272, 1241, 1245, 3747, 3753, 3743,
     3758, 3748,  430, 3735, 1261, 1266, 3743, 1277, 1304, 3712,
     3730, 1308, 3711, 3708, 3707, 1312, 3694, 3690, 3680, 1320,
     1328, 3690, 3677, 1337, 1343, 3681, 3672, 3678, 3671, 3681,
      474, 3664, 3651, 1347, 1353, 3619, 3626, 3624, 3619, 3600,
     3597, 3597, 3588, 3568, 3581, 1357, 3566, 3588, 3556, 3569,
     3554, 3540,  261, 3530, 1363, 3532,  112, 4376, 3511, 3507,

     3512, 3506, 3502, 3485, 3477, 3485, 3470, 3464, 3461, 3470,
     3447, 3444, 3442, 1367, 1283, 3415, 3405, 3391,  145,  324,
     3391, 3393, 3371, 3368, 1371, 1375, 1376, 1380, 1392, 1397,
     1396, 1400, 1401, 1418, 3359, 3353, 3329, 3323, 3320, 3305,
     3300, 3313, 1426, 1444, 1452, 1456, 3296, 3319, 1460, 1468,
     3306, 3278, 3276,  282, 3287, 1476, 1480, 3272,  345, 1484,
     3251, 3249, 1492, 3250, 3231, 1500, 3242, 3234, 3213, 3222,
     3205, 3189, 3189, 3207, 3184, 1504, 3174, 3172, 3172,  619,
     4376, 3164, 3164, 3175, 3170, 3137, 3149, 3145, 3139, 3124,
     3121, 3117, 3107, 3118, 3125, 3095, 3117, 3076, 3069,   39,

       93, 4376,   86,  218, 4376,  234,  325,  316,  351,  343,
      360,  383, 4376,  428,  435,  438,  402,  418,  442,  440,
      449,  448,  472,  490,  487,  509,  504, 1404, 1496, 1508,
     1512, 1513, 1516, 1517, 1520, 1534, 1543, 1555,  504,  721,
     1560,  503,  506,  532,  540,  524, 1537, 1571,  542,  544,
     1578,  540,  559,  561,  556,  571,  580, 1583,  566,  590,
      579, 1587, 1591,  588,  603,  626, 1597,  626,  641, 1603,
      635,  655,  641,  656,  647,  649,  669, 1607,  667,  704,
      695,  700,  691,  694,  734,  706, 4376,  707,  719,  720,
     4376,  719,  722,  747,  741,  740,  758, 4376,  752,  770,

      765, 4376,  769,  783,  778,  782,  808,  806,  814, 4376,
      809, 1614, 4376, 4376, 1623, 1627,  816, 1631,  838,  839,
      857,  871, 1646,  859,  874, 1650, 1655, 1659, 1677, 1681,
     1682, 1687, 1699, 1705, 1709, 1725,  861,  900,  900,  911,
     1728, 1746,  902,  904,  942,  910, 1750,  912,  930, 1754,
      929,  926,  940,  933,  936,  952, 1770,  959, 1774,  961,
      953, 1778, 1786, 1794,  958,  972, 1802, 1806,  978,  981,
      995,  998, 1003, 1810,  991, 1818, 1826, 1021, 1021, 1003,
     1010, 4376, 4376, 1009, 1020, 1011, 1027, 1834, 1019, 1030,
     1036, 1061, 1062, 4376, 1070, 1075, 1063, 1091, 1108, 1093,

     1120, 1105, 1108, 1110, 1108, 1838, 1635, 1842, 1211, 1097,
     1099, 1857, 1295, 1128, 1115, 1114, 1134, 1121, 1123, 1861,
     1566, 1146, 1139, 1146, 1865, 1881, 1872, 1886, 1889, 1898,
     1905, 1906, 1910, 1914, 1924, 1947, 1942, 1928, 1952, 1157,
     1166, 1166, 1174, 1969, 1975, 1979, 1173, 1187, 1995, 1999,
     1175, 1199, 2003, 2011, 1197, 1199, 1203, 1228, 1223, 2019,
     2023, 2027, 1217, 1223, 1215, 2039, 2043, 2047, 1229, 1247,
     2055, 1247, 1272, 1263, 1267, 1282, 2059, 2063, 1279, 2067,
     1278, 1355, 1282, 1279, 1275, 4376, 1283, 4376, 2075, 2079,
     1305, 4376, 1289, 1290, 1303, 1305, 1352, 4376, 1376, 1373,

     1392, 1402, 1387, 4376, 1402, 4376, 1437, 1435, 1443, 1462,
     1417, 2083, 1464, 1422, 2071, 1433, 1426, 1456, 2091, 1487,
     1457, 1445, 1474, 2101, 2106, 2110, 2101, 2131, 2135, 2138,
     2154, 2159, 2162, 2163, 1502, 1592, 1504, 1502, 2179, 2184,
     2188, 2195, 1500, 2204, 2199, 1505, 2208, 2215, 2224, 2228,
     1520, 1525, 1547, 2232, 2248, 2253, 1545, 1576, 2257, 2261,
     1581, 1589, 1611, 1612, 1606, 2265, 1626, 2273, 2281, 1622,
     1620, 1626, 1647, 1637, 1643, 4376, 2285, 1647, 1671, 1660,
     1665, 1684, 4376, 1671, 1691, 1676, 1684, 4376, 4376, 1933,
     4376, 4376, 1741, 1705, 2289, 1763, 1847, 1699, 1712, 1727,

     1726, 1721, 1736, 1736, 1758, 1734, 2297, 1984, 1988, 1747,
     1755, 1752, 2293, 2313, 2305, 2317, 2321, 2322, 2329, 2338,
     2346, 2347, 2364, 2380, 2374, 2371, 2388, 1754, 1748, 1753,
     1786, 1767, 2396, 2408, 1771, 2418, 2422, 2429, 2434, 2438,
     2445, 2450, 1776, 2454, 2461, 1796, 1774, 1780, 2465, 1799,
     2470, 2474, 2478, 1782, 1814, 1801, 1805, 2490, 2494, 2498,
     2510, 2514, 2518, 1818, 1811, 1833, 1823, 1818, 1826, 1834,
     1857, 1850, 1880, 1865, 1877, 1883, 1905, 4376, 1911, 1956,
     1907, 1918, 1925, 1934, 1949, 1945, 1962, 1957, 1958, 2013,
     1980, 1996, 1979, 2522, 2526, 2530, 2531, 2534, 2400, 2538,

     2548, 2552, 2555, 2556, 2564, 2574, 1996, 1989, 1999, 1989,
     1982, 2001, 2594, 2598, 2607, 2614, 2618, 2009, 2622, 2017,
     2024, 2043, 2023, 2627, 2631, 2635, 2047, 2041, 2055, 2643,
     2647, 2651, 2663, 2667, 2671, 2675, 4376, 2067, 2068, 2079,
     4376, 4376, 2062, 2066, 2066, 2084, 2087, 2088, 2086, 2093,
     2096, 2142, 2111, 2103, 2122, 2115, 2122, 2153, 2163, 2170,
     2172, 2237, 2173, 2201, 2205, 2679, 2683, 2684, 2687, 2688,
     2691, 2705, 2712, 2713, 2734, 2735, 2738, 2741, 2729, 2209,
     2208, 2213, 2757, 2764, 2708, 2195, 2220, 2219, 2231, 2237,
     2768, 2232, 2229, 2248, 2785, 2789, 2793, 2801, 2265, 2267,

     2270, 2259, 2259, 2262, 2289, 2293, 2296, 2307, 2305, 2302,
     2306, 2306, 2323, 2322, 2317, 2336, 2805, 2322, 2342, 2809,
     2331, 2342, 2813, 2816, 2820, 2825, 2830, 2834, 2837, 2853,
     2862, 2872, 2878, 2886, 2898, 2902, 2894, 2368, 2370, 2372,
     2918, 2922, 2926, 2934, 2362, 2365, 2376, 2383, 2396, 2413,
     2423, 2437, 2942, 2435, 4376, 2448, 2446, 2444, 4376, 2452,
     2457, 4376, 2468, 4376, 2455, 2948, 2458, 2457, 2458, 2483,
     2494, 2952, 2581, 2491, 2510, 2956, 2656, 2971, 2975, 2967,
     2990, 2981, 2984, 2998, 3006, 3007, 3023, 3015, 3039, 3042,
     3058, 3062, 3067, 2512, 3078, 2537, 3082, 3089, 2540, 2545,

     3094, 2554, 2546, 3098, 2567, 3102, 4376, 4376, 2558, 2555,
     4376, 4376, 4376, 3118, 3122, 2775, 2579, 2572, 2590, 2594,
     2598, 2653, 2610, 3126, 2659, 3141, 2841, 3145, 3107, 3149,
     3165, 3156, 3170, 3174, 3182, 3190, 3191, 3198, 3216, 3224,
     3242, 3246, 3250, 3262, 2634, 2645, 3266, 3270, 3282, 3286,
     3290, 3306, 3310, 3314, 3318, 2671, 2668, 3330, 2857, 2719,
     2682, 2694, 3334, 2707, 2719, 2960, 2713, 3338, 3032, 3050,
     2772, 2778, 2776, 2775, 3353, 3194, 3345, 3361, 3357, 3369,
     3377, 3385, 3393, 3409, 3413, 3417, 3421, 2752, 3427, 3433,
     3437, 3443, 3447, 3453, 3457, 3463, 3467, 3471, 2770, 4376,

     2797, 3130, 2769, 2781, 3479, 3134, 2794, 2797, 3483, 2844,
     3255, 3295, 4376, 4376, 3475, 3487, 3503, 3494, 3499, 3527,
     3531, 3535, 2820, 3543, 3547, 3551, 3559, 3567, 3571, 2801,
     3275, 2811, 2844, 2874, 2846, 2847, 3575, 3323, 3380, 3579,
     3580, 3583, 3584, 3600, 2839, 3608, 3621, 3625, 2858, 2879,
     2871, 3403, 2861, 2863, 2912, 3630, 3631, 3635, 3638, 2883,
     3658, 2866, 2894, 2882, 2881, 2887, 3510, 3639, 3663, 3664,
     3668, 2889, 2895, 2915, 2914, 2925, 2936, 3680, 3686, 3689,
     3690, 2936, 2939, 2944, 2958, 2952, 2960, 3694, 3698, 3708,
     3725, 2963, 4376, 2971, 2968, 2978, 2982, 3734, 3742, 3746,

     3750, 3766, 2997, 3000, 3671, 3770, 3774, 3778, 3800, 3804,
     3808, 3828, 3025, 3832, 3836, 3587, 3840, 3717, 3845, 3861,
     3865, 3869, 3885, 3889, 3895, 3753, 3084, 3085, 3899, 3904,
     3920, 3782, 3104, 3848, 3852, 3924, 3109, 3856, 3928, 4376,
     3941, 3947, 3953, 3959, 3965, 3971, 3977, 3983, 3988, 3994,
     3999, 4005, 4011
    } ;

static yyconst flex_int16_t yy_def[1754] =
    {   0,
     1741, 1741, 1742, 1742, 1743, 1743, 1744, 1744, 1745, 1745,
     1745, 1745, 1746, 1746, 1747, 1747, 1748, 1748, 1740, 1740,
     1740, 1749, 1740, 1749, 1740, 1749, 1749, 1749, 1749, 1740,
     1740, 1749, 1750, 1740, 1751, 1752, 1753, 1740, 1740, 1740,
     1740, 1740, 1740,   21, 1740, 1740, 1740, 1740,   30, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1749,
     1749, 1749,   29, 1749,   29, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1740, 1740, 1749,   29, 1749, 1740,
     1740,   29, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1749, 1750, 1751, 1752, 1753, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1740, 1749, 1749, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1749, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1749, 1749, 1749, 1749,
     1749, 1749, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1749, 1749, 1749, 1749, 1749,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1749, 1749, 1749, 1749, 1749, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1749, 1749, 1749,  635, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1749, 1749, 1749, 1749, 1749, 1749, 1749,

     1749, 1749, 1749, 1749, 1749, 1749, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1749, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1749, 1749, 1749, 1749, 1749, 1749,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1749,
     1749, 1749, 1749, 1749, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1749, 1749, 1749, 1749, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1749, 1749, 1749,
     1749, 1740, 1740, 1740, 1740, 1740, 1740, 1749, 1749, 1749,
     1749, 1740, 1740, 1740, 1740, 1740, 1740, 1749, 1749, 1749,
     1749, 1740, 1740, 1740, 1740, 1740, 1740, 1749, 1749, 1749,

     1749, 1740, 1740, 1740, 1740, 1740, 1749, 1749, 1749, 1749,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1749, 1749,
     1749, 1749, 1740, 1740, 1740, 1740, 1740, 1740, 1749, 1749,
     1740, 1740, 1740, 1740, 1740, 1749, 1740, 1740, 1740,    0,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740
    } ;

static yyconst flex_int16_t yy_nxt[4435] =
    {   0,
       20,   21,   22,   21,   22,   20,   23, 1740,   25,   20,
       26,   27,   28,   29,   30,   20,   31,   20,  100,  100,
      100,  100,   32,   20,   21,   22,   21,   22,   20,   23,
     1740,   25,   20,   26,   27,   28,   29,   30,   20,   31,
       20,   39,   39,   42,   42,   32,   46, 1740,   48,   40,
       40, 1740, 1740, 1740, 1740,  114, 1740,   51,   43,   43,
       44,   44,   44,   44, 1740, 1740, 1740,   80, 1740,   45,
       46,   47,   48,   49,  115,   50, 1740, 1740, 1740, 1740,
      116,   51,  100,  100,  100,  100,   63,  901,   65, 1740,
     1740, 1740, 1740,  152,   52,   53,  171,   66,  153,  157,

       54,  101,  172,  117,  158,   55,   76,   76,   76,   76,
       56,   57,   58,   59,   44,   60,   44,   60,  149,   76,
       76,   76,   76,   62,   63,   64,   65,   49,  200,   50,
      902,  108, 1740,  903, 1740,   66,  150, 1740,  109, 1740,
      797,   81,   81,   81,   81, 1740,  201, 1740,   67,   68,
     1740,   46,   80,   48,   69,  109,  222,  131,  131,   70,
      109,  177,  223,  798,   71,   72,   73,   74,   76,   77,
       76,   77,   76,   77,   76,   77, 1740,  109, 1740,  820,
       78, 1740,   61, 1740,   78,  203,   63,   79,   65, 1740,
      204, 1740,   81,   81,   81,   81,  821,   66, 1740, 1740,

     1740, 1740,  321,  322,   79,   81,   82,   81,   82,  380,
      381, 1740, 1740, 1740, 1740,   63,  520,   65, 1740, 1740,
     1740, 1740,  101, 1740,   79, 1740,  100,  100,  100,  100,
      521,  121, 1740,  581, 1740, 1740, 1740, 1740, 1740,  510,
      511,   79,   83,   61, 1740,   61, 1740,  582, 1740,   84,
     1740,  208,   61,  904,   85,  122,  209, 1740,  123, 1740,
      251,  299, 1740,  324, 1740,  252,  300,  124,  325,   61,
       86,   87,   88,   89,   90, 1740,   91, 1740,   92,   93,
      130,  905,   94, 1740,   95, 1740,  125,   96,   97,   98,
       99,   44,   60,   44,   60, 1740, 1740, 1740, 1740,  683,

       62,   63,   64,   65,   49,  684,   50,  128, 1740, 1740,
     1740, 1740,   66,  793,  794,  126,  303,   76,   77,   76,
       77,  357, 1740,  161, 1740,   67,   68,  129,  304,  175,
     1740,   69, 1740,  358,  855,  856,   70,  162,  127,  163,
      164,   71,   72,   73,   74,   76,   77,   76,   77,  327,
     1740,  383, 1740,  328,  906,   61,  384,   78,  131,  132,
      386,  907,  133, 1740,  387, 1740,  135,  136,  137,  138,
      139,  822,  140,  860,  141,  142,  823,  165,  143,  166,
      144,  425,  426,  145,  146,  147,  148,  427,  908,  167,
     1740,  909, 1740,  168,  169, 1740,  861, 1740,  170,   76,

       76,   76,   76, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740,  108, 1740, 1740, 1740, 1740,  910, 1740,  109, 1740,
     1740, 1740, 1740, 1740,  911, 1740, 1740, 1740, 1740,  610,
     1740,  912, 1740,  611, 1740,  109, 1740, 1740,  658, 1740,
      189,  913,  659, 1740,  190, 1740,  914, 1740,  915, 1740,
     1740,  192, 1740,  740,  335,  335,  193,  335,  191,  741,
     1740,  194, 1740, 1740,  916, 1740,  335,  335,  195,  335,
      196,   76,   77,   76,   77,  133, 1740,  212, 1740,  917,
      197,  708,  918,  133, 1740,  709, 1740,  198,  216,  919,
      217,  213,  920,  214,  215,   76,   77,   76,   77,  772,

      218,  488,  489,  773,  219,  220,  921,  490, 1740,  221,
     1740,   76,   76,   76,   76,   76,   76,   76,   76,  255,
      255,  255,  255,  177, 1740, 1740, 1740, 1740,  255,  266,
      255,  266, 1740,  256, 1740,  922,  923, 1740, 1740, 1740,
     1740, 1740,  256, 1740,  924, 1740,  925, 1740, 1740, 1740,
     1740, 1740, 1740,  937, 1740,  943, 1740,  944, 1740,  265,
      264, 1740, 1740, 1740, 1740, 1740,  945, 1740,  267, 1740,
     1740, 1740, 1740,  946,  947,  948, 1740,  949, 1740,  433,
      433,  268,  433, 1740,  434, 1740,  435,  269,  270, 1740,
      950, 1740,  312,  312,  312,  312,  255,  255,  255,  255,

      951,  336,  336,  336,  336,  952,  271,  953,  954,  955,
      256,  956,  957,  313,  273,  337,  340,  340,  340,  340,
      958,  272,  342,  342,  342,  342, 1740, 1740, 1740, 1740,
      341,  255,  266,  255,  266,  960,  343,  880,  881, 1740,
     1740, 1740, 1740,  882, 1740,  256, 1740,  336,  348,  336,
      348,  961, 1740, 1740, 1740, 1740,  340,  351,  340,  351,
     1740,  337, 1740,  962,  346, 1740, 1740, 1740, 1740, 1740,
      341, 1740, 1740,  965, 1740,  347,  966,  342,  352,  342,
      352, 1740,  969, 1740,  970, 1740,  971, 1740,  349,  350,
     1740,  343, 1740,  972, 1740,  973, 1740,  359,  359,  359,

      359,  368,  368,  368,  368,  974,  438,  438,  353,  438,
      975,  439,  360,  440,  441,  441,  369,  441,  978,  442,
      354,  443,  370,  372,  372,  372,  372,  391,  391,  391,
      391,  979,  404,  404,  404,  404,  980,  981,  373,  938,
      939,  982,  392,  405,  983,  940,  361,  406,  312,  312,
      312,  312,  984,  411,  411,  411,  411,  985,  986,  374,
      336,  336,  336,  336,  987,  988,  989,  393,  412,  340,
      340,  340,  340,  990,  337,  342,  342,  342,  342,  444,
      444,  444,  444,  341, 1740, 1740, 1740, 1740,  991,  343,
      992,  993, 1740,  445, 1740,  994,  995, 1740, 1740, 1740,

     1740,  336,  348,  336,  348, 1740, 1740, 1740, 1740,  340,
      351,  340,  351,  996, 1740,  337, 1740,  997,  998, 1740,
      999, 1740, 1740,  341, 1740,  448, 1740, 1000, 1740, 1001,
      447,  342,  352,  342,  352,  444,  451,  444,  451, 1740,
      449, 1740, 1002, 1003, 1740,  343, 1740, 1004, 1740,  445,
     1740,  359,  359,  359,  359, 1005,  450,  457,  457,  457,
      457, 1011,  464,  464,  464,  464,  360,  368,  368,  368,
      368,  466,  466,  466,  466, 1015,  452,  465,  372,  372,
      372,  372,  369,  469,  469,  469,  469,  472,  472,  472,
      472, 1016, 1017,  373,  483,  483,  483,  483,  391,  391,

      391,  391,  473,  492,  492,  492,  492, 1018, 1019,  484,
     1023, 1024, 1040,  392,  404,  404,  404,  404,  505,  505,
      505,  505,  485,  542,  542,  405,  542, 1041,  543,  406,
      544,  506,  411,  411,  411,  411,  444,  444,  444,  444,
     1740, 1042, 1740, 1740, 1740, 1740, 1740,  412, 1043, 1740,
      445, 1740, 1045, 1740, 1046, 1740, 1740, 1740, 1740, 1740,
     1047, 1048, 1740, 1051, 1740,  444,  451,  444,  451,  548,
     1740, 1740, 1740, 1740,  549, 1052, 1055, 1056, 1740,  445,
     1740, 1057, 1058, 1740, 1740, 1740, 1740, 1059,  546, 1060,
      547,  457,  457,  457,  457,  464,  464,  464,  464,  561,

      561,  561,  561, 1063, 1064, 1065,  550, 1069,  635, 1070,
      465,  466,  466,  466,  466,  562,  562,  562,  562,  469,
      469,  469,  469,  472,  472,  472,  472, 1072, 1073, 1074,
      563,  567,  567,  567,  567, 1075, 1076, 1079,  473,  568,
      568,  568,  568,  483,  483,  483,  483,  580,  580,  580,
      580, 1081, 1082, 1083,  569, 1084, 1085, 1086,  484,  492,
      492,  492,  492, 1087, 1088, 1091,  570,  571,  600,  600,
      600,  600,  505,  505,  505,  505,  614,  614,  614,  614,
     1092,  433,  433, 1093,  433,  506,  434, 1094,  435,  438,
      438, 1740,  438, 1740,  439, 1095,  440,  615,  441,  441,

     1740,  441, 1740,  442, 1740,  443, 1740, 1740, 1740, 1740,
     1740, 1096, 1097, 1740, 1098, 1740,  561,  561,  561,  561,
     1740, 1740, 1740, 1740,  562,  562,  562,  562,  648,  648,
      648,  648,  567,  567,  567,  567, 1099, 1100, 1101,  563,
      636, 1102, 1103,  637, 1104, 1105,  633, 1106, 1111, 1112,
      634,  568,  568,  568,  568,  652,  652,  652,  652,  660,
      660,  660,  660, 1114, 1115, 1116,  569,  664,  664,  664,
      664, 1117, 1118, 1119,  661,  580,  580,  580,  580, 1121,
     1122, 1123,  665,  674,  674,  674,  674, 1135,  666,  686,
      686,  686,  686,  600,  600,  600,  600, 1136,  675,  695,

      695,  695,  695,  614,  614,  614,  614,  714,  714,  714,
      714,  676, 1110, 1110,  717, 1110, 1137,  687,  718, 1138,
     1143,  715,  719,  696, 1144,  720,  721, 1146,  722,  697,
      542,  542, 1740,  542, 1740,  543, 1147,  544,  714,  725,
      714,  725, 1740, 1149, 1740, 1740, 1740, 1740, 1740, 1150,
     1151, 1740,  715, 1740, 1152, 1740, 1153, 1740, 1157, 1740,
     1158, 1740,  743,  743,  743,  743, 1159,  745,  745,  745,
      745,  734,  726, 1740, 1161, 1740, 1162,  744,  648,  648,
      648,  648,  746,  733,  814,  814, 1740,  814, 1740,  815,
      727,  816, 1163, 1164,  728,  747, 1113, 1113,  729, 1113,

     1165,  730,  731, 1166,  732,  749,  749,  749,  749,  652,
      652,  652,  652,  756,  756,  756,  756, 1167, 1169, 1170,
      750,  660,  660,  660,  660, 1173, 1174, 1175,  757,  763,
      763,  763,  763, 1176, 1178, 1179,  661,  758,  664,  664,
      664,  664, 1180,  759,  766,  766,  766,  766,  674,  674,
      674,  674, 1181,  665,  776,  776,  776,  776,  686,  686,
      686,  686, 1182,  675,  695,  695,  695,  695,  714,  714,
      714,  714,  714,  725,  714,  725, 1740, 1740, 1740, 1740,
     1171, 1740,  715, 1740, 1172, 1740,  715, 1740, 1183, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1184,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740,  828,  829, 1185, 1186,  831,  743,  743,  743,
      743,  830, 1740,  836, 1740, 1187, 1188,  835,  837, 1189,
     1190, 1191,  744,  832,  833,  847,  847,  847,  847,  834,
      926, 1192,  838,  745,  745,  745,  745,  848,  848,  848,
      848,  749,  749,  749,  749, 1193, 1194, 1197,  746,  851,
      851,  851,  851, 1198, 1204, 1205,  750,  756,  756,  756,
      756,  858,  858,  858,  858,  862,  862,  862,  862, 1206,
     1209, 1210,  757,  763,  763,  763,  763, 1740, 1211, 1740,

      863,  766,  766,  766,  766,  776,  776,  776,  776, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1212, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,  847,  847,
      847,  847,  927, 1228, 1740,  928, 1740, 1231, 1740, 1232,
     1740,  932, 1235,  930,  929, 1238, 1740, 1740, 1740, 1740,
      931,  941,  941,  941,  941,  933, 1246, 1120, 1120, 1740,
     1120, 1740,  848,  848,  848,  848,  942, 1247,  935,  851,
      851,  851,  851,  934,  858,  858,  858,  858,  862,  862,
      862,  862,  959,  959,  959,  959, 1248,  936,  963,  963,

      963,  963, 1250,  863,  967,  967,  967,  967,  976,  976,
      976,  976, 1251,  964, 1254,  814,  814, 1229,  814,  968,
      815, 1230,  816,  977, 1006, 1006, 1006, 1006, 1008, 1008,
     1008, 1008, 1012, 1012, 1012, 1012, 1107, 1107, 1007, 1107,
     1255, 1108, 1009, 1109, 1256, 1257, 1013, 1020, 1020, 1020,
     1020, 1006, 1025, 1006, 1025, 1258, 1008, 1026, 1008, 1026,
     1740, 1021, 1740, 1261, 1740, 1007, 1740, 1264, 1014, 1740,
     1009, 1740, 1265, 1740, 1266, 1740, 1267, 1010, 1012, 1029,
     1012, 1029, 1740, 1740, 1740, 1740, 1268, 1022, 1740, 1269,
     1740, 1740, 1013, 1740, 1270, 1740, 1740, 1740, 1740, 1271,

     1740, 1740, 1740, 1740, 1028, 1027, 1020, 1036, 1020, 1036,
     1740, 1272, 1740, 1740, 1030, 1740, 1273, 1274, 1031, 1740,
     1021, 1740, 1275, 1740, 1276, 1740, 1740, 1277, 1740,  941,
      941,  941,  941, 1278, 1032, 1033, 1035, 1034, 1279, 1740,
     1281, 1740, 1110, 1110,  942, 1110, 1037, 1044, 1044, 1044,
     1044, 1049, 1049, 1049, 1049, 1053, 1053, 1053, 1053, 1282,
     1038, 1283, 1039, 1284, 1280, 1280, 1050, 1280, 1285, 1286,
     1054, 1061, 1061, 1061, 1061,  959,  959,  959,  959, 1066,
     1066, 1066, 1066, 1287, 1288, 1289, 1062,  963,  963,  963,
      963, 1291, 1292, 1293, 1067, 1068, 1068, 1068, 1068, 1307,

     1308, 1309,  964,  967,  967,  967,  967, 1071, 1071, 1071,
     1071, 1077, 1077, 1077, 1077, 1310, 1311, 1312,  968,  976,
      976,  976,  976, 1318, 1320, 1321, 1078, 1080, 1080, 1080,
     1080, 1322, 1323, 1327,  977, 1089, 1089, 1089, 1089, 1006,
     1006, 1006, 1006, 1008, 1008, 1008, 1008, 1328, 1113, 1113,
     1090, 1113, 1329, 1007, 1330, 1337, 1338, 1009, 1012, 1012,
     1012, 1012, 1020, 1020, 1020, 1020, 1006, 1025, 1006, 1025,
     1339, 1340, 1013, 1740, 1341, 1740, 1021, 1342, 1343, 1740,
     1007, 1740, 1008, 1026, 1008, 1026, 1740, 1740, 1740, 1740,
     1012, 1029, 1012, 1029, 1344, 1740, 1009, 1740, 1345, 1740,

     1740, 1740, 1740, 1740, 1013, 1740, 1740, 1740, 1740, 1740,
     1346, 1740, 1740, 1740, 1740, 1740, 1347, 1740, 1348, 1740,
     1740, 1740, 1740, 1124, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1349, 1126, 1107, 1107, 1125, 1107, 1740, 1108,
     1740, 1109, 1740, 1740, 1740, 1740, 1350, 1129, 1020, 1036,
     1020, 1036, 1351, 1740, 1127, 1740, 1740, 1128, 1740, 1352,
     1353, 1740, 1021, 1740, 1354, 1130, 1740, 1355, 1740, 1133,
     1044, 1044, 1044, 1044, 1131, 1132, 1139, 1139, 1139, 1139,
     1141, 1141, 1141, 1141, 1356, 1290, 1290, 1134, 1290, 1120,
     1120, 1140, 1120, 1357, 1358, 1142, 1049, 1049, 1049, 1049,

     1145, 1145, 1145, 1145, 1053, 1053, 1053, 1053, 1359, 1360,
     1361, 1050, 1148, 1148, 1148, 1148, 1362, 1363, 1364, 1054,
     1154, 1154, 1154, 1154, 1061, 1061, 1061, 1061, 1156, 1156,
     1156, 1156, 1365, 1379, 1380, 1155, 1381, 1382, 1383, 1062,
     1066, 1066, 1066, 1066, 1160, 1160, 1160, 1160, 1068, 1068,
     1068, 1068, 1384, 1386, 1387, 1067, 1071, 1071, 1071, 1071,
     1077, 1077, 1077, 1077, 1168, 1168, 1168, 1168, 1080, 1080,
     1080, 1080, 1388, 1389, 1390, 1078, 1089, 1089, 1089, 1089,
     1177, 1177, 1177, 1177, 1195, 1195, 1195, 1195, 1392, 1199,
     1393, 1090, 1207, 1207, 1207, 1207, 1394, 1200, 1196, 1201,

     1202, 1399, 1740, 1203, 1740, 1400, 1208, 1195, 1214, 1195,
     1214, 1740, 1401, 1740, 1402, 1740, 1403, 1740, 1404, 1216,
     1740, 1196, 1740,   61, 1740, 1405, 1740, 1217, 1406, 1218,
     1219,   61, 1740, 1220, 1740, 1407, 1740, 1408, 1740, 1740,
     1409, 1740, 1410, 1280, 1280, 1740, 1280, 1740, 1411, 1740,
     1213, 1740, 1740, 1412, 1740, 1207, 1224, 1207, 1224, 1413,
     1740, 1215, 1740, 1740, 1740, 1740, 1740, 1414, 1740, 1208,
     1740, 1223, 1221, 1740, 1415, 1740, 1740, 1740, 1740, 1740,
     1139, 1139, 1139, 1139, 1222, 1233, 1233, 1233, 1233, 1141,
     1141, 1141, 1141, 1225, 1416, 1140, 1234, 1234, 1234, 1234,

     1145, 1145, 1145, 1145, 1142, 1236, 1236, 1236, 1236, 1239,
     1239, 1239, 1239, 1417, 1227, 1226, 1148, 1148, 1148, 1148,
     1237, 1418, 1419, 1420, 1240, 1241, 1241, 1241, 1241, 1244,
     1244, 1244, 1244, 1154, 1154, 1154, 1154, 1421, 1290, 1290,
     1242, 1290, 1422, 1438, 1245, 1439, 1440, 1445, 1155, 1249,
     1249, 1249, 1249, 1243, 1156, 1156, 1156, 1156, 1252, 1252,
     1252, 1252, 1160, 1160, 1160, 1160, 1259, 1259, 1259, 1259,
     1446, 1447, 1448, 1253, 1168, 1168, 1168, 1168, 1449, 1450,
     1451, 1260, 1262, 1262, 1262, 1262, 1177, 1177, 1177, 1177,
     1195, 1195, 1195, 1195, 1740, 1452, 1740, 1263, 1207, 1207,

     1207, 1207, 1454, 1455, 1196, 1456, 1740, 1740, 1740, 1740,
     1457, 1458, 1208, 1459, 1195, 1214, 1195, 1214, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1294, 1740, 1196, 1740,
     1740, 1740, 1740, 1740, 1460, 1740, 1740, 1740, 1740, 1740,
     1461, 1740, 1462, 1740, 1463, 1740, 1295, 1740, 1740, 1740,
     1740, 1464, 1740, 1465, 1740, 1297, 1466, 1467, 1468, 1298,
     1740, 1740, 1740, 1740, 1296, 1740, 1469, 1740, 1470, 1471,
     1474, 1300, 1740, 1302, 1740, 1740, 1299, 1740, 1740, 1475,
     1740, 1207, 1224, 1207, 1224, 1740, 1478, 1740, 1740, 1740,
     1740, 1740, 1479, 1301, 1740, 1208, 1740, 1233, 1233, 1233,

     1233, 1740, 1740, 1740, 1740, 1494, 1495, 1496, 1305, 1234,
     1234, 1234, 1234, 1499, 1740, 1303, 1740, 1500, 1304, 1236,
     1236, 1236, 1236, 1313, 1313, 1313, 1313, 1501, 1502, 1306,
     1314, 1314, 1314, 1314, 1237, 1239, 1239, 1239, 1239, 1316,
     1316, 1316, 1316, 1503, 1371, 1315, 1241, 1241, 1241, 1241,
     1240, 1317, 1317, 1317, 1317, 1244, 1244, 1244, 1244, 1504,
     1505, 1242, 1319, 1319, 1319, 1319, 1249, 1249, 1249, 1249,
     1245, 1324, 1324, 1324, 1324, 1252, 1252, 1252, 1252, 1326,
     1326, 1326, 1326, 1506, 1507, 1508, 1325, 1509, 1510, 1511,
     1253, 1331, 1331, 1331, 1331, 1259, 1259, 1259, 1259, 1333,

     1333, 1333, 1333, 1512, 1513, 1514, 1332, 1517, 1518, 1519,
     1260, 1334, 1334, 1334, 1334, 1262, 1262, 1262, 1262, 1336,
     1336, 1336, 1336, 1740, 1520, 1740, 1335, 1740, 1521, 1740,
     1263, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1523, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1524, 1541, 1740, 1366, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1369, 1544, 1740, 1368, 1740, 1740, 1367,
     1740, 1545, 1522, 1522, 1370, 1522, 1377, 1372, 1740, 1546,
     1740, 1549, 1550, 1376, 1373, 1313, 1313, 1313, 1313, 1314,

     1314, 1314, 1314, 1553, 1374, 1556, 1557, 1375, 1385, 1385,
     1385, 1385, 1561, 1562, 1315, 1316, 1316, 1316, 1316, 1317,
     1317, 1317, 1317, 1319, 1319, 1319, 1319, 1378, 1324, 1324,
     1324, 1324, 1391, 1391, 1391, 1391, 1326, 1326, 1326, 1326,
     1563, 1564, 1565, 1325, 1395, 1395, 1395, 1395, 1331, 1331,
     1331, 1331, 1397, 1397, 1397, 1397, 1566, 1525, 1525, 1396,
     1525, 1567, 1570, 1332, 1333, 1333, 1333, 1333, 1334, 1334,
     1334, 1334, 1398, 1398, 1398, 1398, 1336, 1336, 1336, 1336,
     1740, 1588, 1740, 1335, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1589, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1385,
     1385, 1385, 1385, 1740, 1740, 1740, 1740, 1599, 1600, 1740,
     1424, 1740, 1602, 1603, 1426, 1423, 1740, 1740, 1740, 1740,
     1436, 1436, 1436, 1436, 1425, 1740, 1740, 1740, 1740, 1740,
     1427, 1740, 1740, 1428, 1740, 1437, 1429, 1604, 1740, 1740,
     1740, 1740, 1740, 1607, 1740, 1740, 1608, 1740, 1441, 1441,
     1441, 1441, 1430, 1609, 1431, 1443, 1443, 1443, 1443, 1391,
     1391, 1391, 1391, 1442, 1434, 1611, 1560, 1560, 1435, 1560,
     1444, 1612, 1613, 1614, 1432, 1433, 1395, 1395, 1395, 1395,
     1453, 1453, 1453, 1453, 1397, 1397, 1397, 1397, 1623, 1630,

     1631, 1396, 1398, 1398, 1398, 1398, 1472, 1472, 1472, 1472,
     1476, 1476, 1476, 1476, 1740, 1632, 1740, 1740, 1633, 1740,
     1473, 1740, 1635, 1740, 1477, 1636, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1571, 1571, 1740, 1571, 1740, 1639, 1740, 1645,
     1740, 1740, 1649, 1740, 1472, 1487, 1472, 1487, 1601, 1601,
     1483, 1601, 1650, 1740, 1480, 1740, 1481, 1740, 1473, 1740,
     1486, 1482, 1651, 1740, 1484, 1740, 1740, 1652, 1740, 1476,
     1490, 1476, 1490, 1653, 1654, 1485, 1740, 1740, 1740, 1740,
     1660, 1662, 1740, 1477, 1740, 1493, 1493, 1493, 1493, 1740,

     1740, 1740, 1740, 1436, 1436, 1436, 1436, 1663, 1664, 1489,
     1488, 1665, 1740, 1666, 1740, 1667, 1672, 1673, 1437, 1441,
     1441, 1441, 1441, 1497, 1497, 1497, 1497, 1443, 1443, 1443,
     1443, 1674, 1675, 1676, 1442, 1498, 1498, 1498, 1498, 1677,
     1682, 1491, 1444, 1453, 1453, 1453, 1453, 1683, 1492, 1515,
     1515, 1515, 1515, 1472, 1472, 1472, 1472, 1476, 1476, 1476,
     1476, 1522, 1522, 1516, 1522, 1684, 1685, 1473, 1740, 1686,
     1740, 1477, 1526, 1526, 1526, 1526, 1528, 1528, 1528, 1528,
     1687, 1740, 1740, 1740, 1740, 1740, 1527, 1740, 1692, 1693,
     1529, 1515, 1531, 1515, 1531, 1740, 1694, 1740, 1740, 1740,

     1740, 1740, 1695, 1696, 1740, 1516, 1740, 1740, 1740, 1740,
     1740, 1697, 1740, 1702, 1740, 1703, 1740, 1530, 1740, 1704,
     1740, 1740, 1740, 1740, 1472, 1487, 1472, 1487, 1705, 1740,
     1532, 1740, 1706, 1610, 1610, 1533, 1610, 1740, 1473, 1740,
     1740, 1536, 1740, 1476, 1490, 1476, 1490, 1535, 1713, 1534,
     1714, 1525, 1525, 1740, 1525, 1740, 1740, 1477, 1740, 1526,
     1539, 1526, 1539, 1528, 1540, 1528, 1540, 1537, 1493, 1493,
     1493, 1493, 1740, 1527, 1740, 1724, 1740, 1529, 1740, 1542,
     1542, 1542, 1542, 1497, 1497, 1497, 1497, 1734, 1735, 1538,
     1498, 1498, 1498, 1498, 1543, 1547, 1547, 1547, 1547, 1551,

     1551, 1551, 1551, 1554, 1554, 1554, 1554, 1738, 1572, 1572,
     1548, 1572, 1739, 1573, 1552, 1574,  900,  899, 1555, 1558,
     1558, 1558, 1558, 1515, 1515, 1515, 1515, 1568, 1568, 1568,
     1568, 1560, 1560, 1559, 1560, 1634, 1634, 1516, 1634,  898,
      897, 1569, 1526, 1526, 1526, 1526, 1528, 1528, 1528, 1528,
     1558, 1575, 1558, 1575,  896,  895, 1527, 1740,  894, 1740,
     1529,  893,  892, 1740, 1559, 1740, 1515, 1531, 1515, 1531,
     1740, 1740, 1740, 1740,  891, 1740,  890, 1740,  889, 1740,
     1516, 1740,  888, 1740, 1740, 1740, 1740,  887, 1740, 1576,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1568,

     1582, 1568, 1582,  886, 1740, 1740, 1740, 1740, 1740,  885,
     1740, 1577, 1740, 1569, 1740,  884,  883, 1526, 1539, 1526,
     1539,  879,  878,  877, 1578, 1528, 1540, 1528, 1540, 1579,
     1740, 1527, 1740,  876, 1580, 1615,  875,  874, 1740, 1529,
     1740,  873, 1581, 1583, 1583, 1583, 1583, 1542, 1542, 1542,
     1542, 1585, 1585, 1585, 1585,  872, 1571, 1571, 1584, 1571,
      871,  870, 1543, 1586, 1586, 1586, 1586, 1547, 1547, 1547,
     1547, 1590, 1590, 1590, 1590,  869, 1601, 1601, 1587, 1601,
      868,  867, 1548, 1591, 1591, 1591, 1591, 1593, 1593, 1593,
     1593, 1551, 1551, 1551, 1551,  866, 1572, 1572, 1592, 1572,

      865, 1573, 1594, 1574,  864,  859, 1552, 1595, 1595, 1595,
     1595, 1596, 1596, 1596, 1596, 1554, 1554, 1554, 1554, 1598,
     1598, 1598, 1598,  857, 1655, 1655, 1597, 1655,  854,  853,
     1555, 1558, 1558, 1558, 1558, 1605, 1605, 1605, 1605, 1568,
     1568, 1568, 1568,  852,  850, 1559, 1740,  849, 1740, 1606,
      846,  845,  844, 1569, 1558, 1575, 1558, 1575, 1740, 1740,
     1740, 1740, 1605, 1617, 1605, 1617,  843, 1740, 1559, 1740,
     1740, 1740, 1740, 1740,  842, 1740, 1606, 1740, 1740,  841,
     1740, 1610, 1610, 1740, 1610, 1740, 1568, 1582, 1568, 1582,
      840, 1740,  839, 1740, 1583, 1583, 1583, 1583, 1616, 1740,

     1569, 1740,  827, 1618, 1634, 1634, 1619, 1634,  826, 1584,
     1621, 1621, 1621, 1621, 1585, 1585, 1585, 1585, 1586, 1586,
     1586, 1586, 1622, 1622, 1622, 1622,  825, 1620, 1624, 1624,
     1624, 1624,  824, 1587, 1590, 1590, 1590, 1590, 1591, 1591,
     1591, 1591,  819, 1625, 1627, 1627, 1627, 1627, 1593, 1593,
     1593, 1593,  818, 1592, 1628, 1628, 1628, 1628, 1595, 1595,
     1595, 1595,  817, 1594, 1596, 1596, 1596, 1596, 1629, 1629,
     1629, 1629, 1598, 1598, 1598, 1598, 1740, 1626, 1740, 1597,
     1605, 1605, 1605, 1605, 1637, 1637, 1637, 1637, 1740, 1740,
     1740, 1740,  813,  812, 1606, 1740,  811, 1740, 1638,  810,

     1740, 1740, 1740, 1740, 1605, 1617, 1605, 1617, 1740,  809,
     1740, 1655, 1655, 1740, 1655, 1740,  808, 1740, 1606, 1740,
      807, 1640, 1642,  806, 1641,  805,  804, 1643, 1637, 1644,
     1637, 1644, 1621, 1621, 1621, 1621, 1622, 1622, 1622, 1622,
      803, 1740, 1638, 1740, 1624, 1624, 1624, 1624, 1646, 1646,
     1646, 1646, 1647, 1647, 1647, 1647,  802,  801,  800, 1625,
     1627, 1627, 1627, 1627,  799,  796,  795, 1648, 1628, 1628,
     1628, 1628, 1629, 1629, 1629, 1629, 1637, 1637, 1637, 1637,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1727, 1727,
     1638, 1727,  792, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1637, 1644, 1637, 1644,  791,  790,  789, 1657, 1646,
     1646, 1646, 1646,  788, 1740, 1638, 1740,  787,  786,  785,
     1658, 1659, 1647, 1647, 1647, 1647, 1661, 1661, 1661, 1661,
     1656, 1740, 1740, 1740, 1740,  784, 1740, 1648, 1740, 1740,
     1740, 1740, 1740,  783, 1740, 1740, 1740, 1740,  782, 1740,
      781, 1740, 1740, 1740, 1740, 1740,  780,  779, 1668, 1661,
     1661, 1661, 1661,  778, 1740, 1740, 1740, 1740, 1669, 1740,
      777, 1740, 1715, 1715, 1715, 1715, 1678, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1670, 1716, 1740, 1671, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,  775, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740,  774, 1740, 1740,
     1740, 1740, 1740, 1679, 1740,  771, 1680,  770, 1728, 1728,
     1681, 1728, 1740,  769, 1740,  768, 1740,  767, 1740,  765,
     1688,  764,  762, 1690, 1691, 1740,  761, 1740, 1689, 1740,
      760, 1740, 1699, 1740,  755, 1740, 1698, 1740, 1740, 1740,
     1740, 1740,  754, 1740, 1733, 1733, 1740, 1733, 1740, 1700,
     1740,  753, 1740,  752, 1740,  751, 1740, 1711, 1711, 1711,
     1711, 1717, 1717, 1717, 1717, 1740, 1701, 1740, 1707, 1740,
      748, 1740, 1712, 1737, 1737, 1718, 1737,  742, 1740,  739,
     1740,  738, 1740, 1708, 1740,  737, 1709,  736,  735,  724,

     1710, 1715, 1721, 1715, 1721, 1717, 1722, 1717, 1722, 1711,
     1711, 1711, 1711,  723, 1740, 1716, 1740,  716, 1740, 1718,
     1740,  713,  712,  711, 1712, 1719,  710,  707, 1720, 1723,
     1723, 1723, 1723, 1725, 1725, 1725, 1725, 1715, 1715, 1715,
     1715, 1717, 1717, 1717, 1717,  706, 1740, 1726, 1740, 1727,
     1727, 1716, 1727, 1728, 1728, 1718, 1728, 1733, 1733, 1740,
     1733, 1740, 1725, 1730, 1725, 1730, 1715, 1721, 1715, 1721,
     1717, 1722, 1717, 1722,  705, 1740, 1726, 1740,  704, 1740,
     1716, 1740,  703, 1740, 1718, 1740, 1723, 1723, 1723, 1723,
     1731, 1731, 1731, 1731,  702, 1729, 1725, 1725, 1725, 1725,

     1731, 1736, 1731, 1736, 1732, 1725, 1730, 1725, 1730,  701,
     1726,  700,  699, 1740, 1732, 1740,  698,  694, 1740, 1726,
     1740, 1731, 1731, 1731, 1731, 1731, 1736, 1731, 1736, 1737,
     1737,  693, 1737,  692,  691, 1732,  690,  689, 1740, 1732,
     1740,   24,   24,   24,   24,   24,   24,   33,   33,   33,
       33,   33,   33,   35,   35,   35,   35,   35,   35,   36,
       36,   36,   36,   36,   36,   34,   34,   34,   34,   34,
       34,   37,   37,   37,   37,   37,   37,   38,   38,   38,
       38,   38,   38,   41,   41,   41,   41,   41,   41,   61,
      688,  685,   61,   61,  102,  102,  102,  102,  102,  103,

      103,  682,  103,  103,  103,  104,  104,  104,  681,  104,
      104,  105,  105,  105,  105,  680,  105,  679,  678,  677,
      673,  672,  671,  670,  669,  668,  667,  663,  662,  657,
      656,  655,  654,  653,  651,  650,  649,  647,  646,  645,
      644,  643,  642,  641,  640,  639,  638,  632,  631,  630,
      629,  628,  627,  626,  625,  624,  623,  622,  621,  620,
      619,  618,  617,  616,  613,  612,  609,  608,  607,  606,
      605,  604,  603,  602,  601,  599,  598,  597,  596,  595,
      594,  593,  592,  591,  590,  589,  588,  587,  586,  585,
      584,  583,  579,  578,  577,  576,  575,  574,  573,  572,

      566,  565,  564,  560,  559,  558,  557,  556,  555,  554,
      553,  552,  551,  545,  541,  540,  539,  538,  537,  536,
      535,  534,  533,  532,  531,  530,  529,  528,  527,  526,
      525,  524,  523,  522,  519,  518,  517,  516,  515,  514,
      513,  512,  509,  508,  507,  504,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  491,  487,  486,
      482,  481,  480,  479,  478,  477,  476,  475,  474,  471,
      470,  468,  467,  463,  462,  461,  460,  459,  458,  456,
      455,  454,  453,  446,  437,  436,  432,  431,  430,  429,
      428,  424,  423,  422,  421,  420,  419,  418,  417,  416,

      415,  414,  413,  410,  409,  408,  407,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  390,  389,  388,
      385,  382,  379,  378,  377,  376,  375,  371,  367,  366,
      365,  364,  363,  362,  356,  355,  345,  344,  339,  338,
      334,  333,  332,  331,  330,  329,  326,  323,  320,  319,
      318,  317,  316,  315,  314,  311,  310,  309,  308,  307,
      306,  305,  302,  301,  298,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  279,  278,  277,  276,  275,  274,  263,
      262,  261,  260,  259,  258,  257,  254,  253,  250,  249,

      248,  247,  246,  245,  244,  243,  242,  241,  240,  239,
      238,  237,  236,  235,  234,  233,  232,  231,  230,  229,
      228,  227,  226,  225,  224,  211,  210,  207,  206,  205,
      202,  199,  177,  188,  187,  186,  185,  184,  183,  182,
      181,  180,  179,  178,  176,  174,  173,  160,  159,  156,
      155,  154,  151,  134,  120,  119,  118,  113,  112,  111,
      110,   80,  107,  106,   75,   75, 1740,   34,   34,   34,
       34,   34,   34,   34,   34,   19, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740
    } ;

static yyconst flex_int16_t yy_chk[4435] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    0,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   31,   31,
       31,   31,    1,    2,    2,    2,    2,    2,    2,    2,
        0,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   15,   16,   17,   18,    2,   45,    0,   45,   15,
       16,   24,   28,   24,   28,   55,   49,   45,   17,   18,
       21,   21,   21,   21,   24,   28,   24,   28,   49,   21,
       21,   21,   21,   21,   55,   21,   26,   32,   26,   32,
       56,   21,   50,   50,   50,   50,   26,  800,   26,   26,
       32,   26,   32,   88,   21,   21,   97,   26,   88,   92,

       21,   32,   97,   56,   92,   21,   76,   76,   76,   76,
       21,   21,   21,   21,   22,   22,   22,   22,   86,   46,
       46,   46,   46,   22,   22,   22,   22,   22,  135,   22,
      801,   46,   61,  803,   61,   22,   86,   64,   46,   64,
      697,   48,   48,   48,   48,   61,  135,   61,   22,   22,
       64,   48,   64,   48,   22,   46,  146,  109,  109,   22,
       48,  109,  146,  697,   22,   22,   22,   22,   27,   27,
       27,   27,   63,   63,   63,   63,   62,   48,   62,  719,
       27,   27,   63,   27,   63,  137,   62,   27,   62,   62,
      137,   62,   81,   81,   81,   81,  719,   62,   66,   67,

       66,   67,  244,  244,   27,   29,   29,   29,   29,  292,
      292,   66,   67,   66,   67,   29,  422,   29,   29,   68,
       29,   68,   66,   69,   29,   69,  100,  100,  100,  100,
      422,   67,   68,  485,   68,   70,   69,   70,   69,  413,
      413,   29,   30,   82,   74,   82,   74,  485,   70,   30,
       70,  141,   82,  804,   30,   68,  141,   74,   69,   74,
      174,  225,   72,  246,   72,  174,  225,   70,  246,   82,
       30,   30,   30,   30,   30,   72,   30,   72,   30,   30,
       74,  806,   30,   71,   30,   71,   70,   30,   30,   30,
       30,   60,   60,   60,   60,   73,   71,   73,   71,  595,

       60,   60,   60,   60,   60,  595,   60,   72,   73,  101,
       73,  101,   60,  693,  693,   71,  228,   77,   77,   77,
       77,  276,  101,   95,  101,   60,   60,   73,  228,  101,
       77,   60,   77,  276,  754,  754,   60,   95,   71,   95,
       95,   60,   60,   60,   60,   78,   78,   78,   78,  248,
       79,  294,   79,  248,  807,   78,  294,   78,   79,   79,
      296,  808,   79,   79,  296,   79,   84,   84,   84,   84,
       84,  720,   84,  759,   84,   84,  720,   96,   84,   96,
       84,  330,  330,   84,   84,   84,   84,  330,  809,   96,
      121,  810,  121,   96,   96,  122,  759,  122,   96,  108,

      108,  108,  108,  121,  123,  121,  123,  124,  122,  124,
      122,  108,  125,  126,  125,  126,  811,  123,  108,  123,
      124,  127,  124,  127,  812,  125,  126,  125,  126,  515,
      128,  814,  128,  515,  127,  108,  127,  129,  575,  129,
      121,  815,  575,  128,  122,  128,  816,  130,  817,  130,
      129,  124,  129,  643,  256,  256,  125,  256,  123,  643,
      130,  126,  130,  132,  818,  132,  432,  432,  127,  432,
      128,  133,  133,  133,  133,  132,  132,  144,  132,  819,
      129,  620,  820,  133,  133,  620,  133,  130,  145,  821,
      145,  144,  822,  144,  144,  175,  175,  175,  175,  671,

      145,  389,  389,  671,  145,  145,  823,  389,  175,  145,
      175,  177,  177,  177,  177,  178,  178,  178,  178,  181,
      181,  181,  181,  177,  189,  190,  189,  190,  191,  191,
      191,  191,  192,  181,  192,  824,  825,  189,  190,  189,
      190,  191,  191,  191,  826,  192,  827,  192,  193,  194,
      193,  194,  195,  839,  195,  842,  196,  843,  196,  190,
      189,  193,  194,  193,  194,  195,  844,  195,  192,  196,
      197,  196,  197,  845,  846,  849,  198,  850,  198,  337,
      337,  193,  337,  197,  337,  197,  337,  194,  195,  198,
      852,  198,  236,  236,  236,  236,  255,  255,  255,  255,

      853,  257,  257,  257,  257,  854,  196,  855,  856,  857,
      255,  859,  860,  236,  198,  257,  260,  260,  260,  260,
      861,  197,  261,  261,  261,  261,  264,  265,  264,  265,
      260,  266,  266,  266,  266,  864,  261,  780,  780,  264,
      265,  264,  265,  780,  266,  266,  266,  267,  267,  267,
      267,  865,  268,  269,  268,  269,  270,  270,  270,  270,
      267,  267,  267,  866,  264,  268,  269,  268,  269,  270,
      270,  270,  272,  868,  272,  265,  869,  271,  271,  271,
      271,  273,  871,  273,  872,  272,  873,  272,  268,  269,
      271,  271,  271,  874,  273,  875,  273,  277,  277,  277,

      277,  284,  284,  284,  284,  876,  341,  341,  272,  341,
      877,  341,  277,  341,  343,  343,  284,  343,  879,  343,
      273,  343,  284,  286,  286,  286,  286,  300,  300,  300,
      300,  880,  311,  311,  311,  311,  881,  882,  286,  840,
      840,  883,  300,  311,  884,  840,  277,  311,  312,  312,
      312,  312,  885,  317,  317,  317,  317,  886,  888,  286,
      336,  336,  336,  336,  889,  890,  892,  300,  317,  340,
      340,  340,  340,  893,  336,  342,  342,  342,  342,  344,
      344,  344,  344,  340,  346,  347,  346,  347,  894,  342,
      895,  896,  349,  344,  349,  897,  899,  346,  347,  346,

      347,  348,  348,  348,  348,  349,  350,  349,  350,  351,
      351,  351,  351,  900,  348,  348,  348,  901,  903,  350,
      904,  350,  351,  351,  351,  347,  354,  905,  354,  906,
      346,  352,  352,  352,  352,  353,  353,  353,  353,  354,
      349,  354,  907,  908,  352,  352,  352,  909,  353,  353,
      353,  359,  359,  359,  359,  911,  350,  360,  360,  360,
      360,  917,  367,  367,  367,  367,  359,  368,  368,  368,
      368,  369,  369,  369,  369,  919,  354,  367,  372,  372,
      372,  372,  368,  373,  373,  373,  373,  376,  376,  376,
      376,  920,  920,  372,  386,  386,  386,  386,  391,  391,

      391,  391,  376,  392,  392,  392,  392,  921,  922,  386,
      924,  925,  937,  391,  404,  404,  404,  404,  406,  406,
      406,  406,  386,  445,  445,  404,  445,  938,  445,  404,
      445,  406,  411,  411,  411,  411,  444,  444,  444,  444,
      447,  939,  447,  448,  449,  448,  449,  411,  940,  450,
      444,  450,  943,  447,  944,  447,  448,  449,  448,  449,
      945,  946,  450,  948,  450,  451,  451,  451,  451,  449,
      452,  548,  452,  548,  450,  949,  951,  952,  451,  451,
      451,  953,  954,  452,  548,  452,  548,  955,  447,  956,
      448,  457,  457,  457,  457,  464,  464,  464,  464,  465,

      465,  465,  465,  958,  960,  961,  452,  965,  548,  966,
      464,  466,  466,  466,  466,  467,  467,  467,  467,  469,
      469,  469,  469,  472,  472,  472,  472,  969,  970,  971,
      467,  473,  473,  473,  473,  972,  973,  975,  472,  474,
      474,  474,  474,  483,  483,  483,  483,  484,  484,  484,
      484,  978,  979,  980,  474,  981,  984,  985,  483,  492,
      492,  492,  492,  986,  987,  989,  474,  474,  504,  504,
      504,  504,  505,  505,  505,  505,  519,  519,  519,  519,
      990,  531,  531,  991,  531,  505,  531,  992,  531,  536,
      536,  546,  536,  546,  536,  993,  536,  519,  539,  539,

      547,  539,  547,  539,  546,  539,  546,  549,  550,  549,
      550,  995,  996,  547,  997,  547,  561,  561,  561,  561,
      549,  550,  549,  550,  562,  562,  562,  562,  563,  563,
      563,  563,  567,  567,  567,  567,  998,  999, 1000,  562,
      549, 1001, 1002,  550, 1003, 1004,  546, 1005, 1010, 1011,
      547,  568,  568,  568,  568,  569,  569,  569,  569,  576,
      576,  576,  576, 1014, 1015, 1016,  568,  579,  579,  579,
      579, 1017, 1018, 1019,  576,  580,  580,  580,  580, 1022,
     1023, 1024,  579,  588,  588,  588,  588, 1040,  579,  598,
      598,  598,  598,  600,  600,  600,  600, 1041,  588,  608,

      608,  608,  608,  614,  614,  614,  614,  625,  625,  625,
      625,  588, 1009, 1009,  627, 1009, 1042,  598,  627, 1043,
     1047,  625,  627,  608, 1048,  627,  627, 1051,  627,  608,
      629,  629,  634,  629,  634,  629, 1052,  629,  633,  633,
      633,  633,  636, 1055,  636,  634,  637,  634,  637, 1056,
     1057,  633,  633,  633, 1058,  636, 1059,  636, 1063,  637,
     1064,  637,  645,  645,  645,  645, 1065,  646,  646,  646,
      646,  637,  634,  635, 1069,  635, 1070,  645,  648,  648,
      648,  648,  646,  636,  715,  715,  635,  715,  635,  715,
      635,  715, 1072, 1073,  635,  646, 1013, 1013,  635, 1013,

     1074,  635,  635, 1075,  635,  649,  649,  649,  649,  652,
      652,  652,  652,  656,  656,  656,  656, 1076, 1079, 1081,
      649,  660,  660,  660,  660, 1083, 1084, 1085,  656,  661,
      661,  661,  661, 1087, 1091, 1093,  660,  656,  664,  664,
      664,  664, 1094,  656,  665,  665,  665,  665,  674,  674,
      674,  674, 1095,  664,  675,  675,  675,  675,  686,  686,
      686,  686, 1096,  674,  695,  695,  695,  695,  714,  714,
      714,  714,  725,  725,  725,  725,  726,  727,  726,  727,
     1082,  728,  714,  728, 1082,  725,  725,  725, 1097,  726,
      727,  726,  727,  729,  728,  729,  728,  731,  730,  731,

      730,  732,  733,  732,  733,  828,  729,  828,  729, 1099,
      731,  730,  731,  730,  732,  733,  732,  733,  828,  734,
      828,  734,  726,  727, 1100, 1101,  729,  743,  743,  743,
      743,  728,  734,  732,  734, 1102, 1103,  731,  733, 1105,
     1107, 1108,  743,  729,  730,  744,  744,  744,  744,  730,
      828, 1109,  734,  745,  745,  745,  745,  746,  746,  746,
      746,  749,  749,  749,  749, 1110, 1111, 1113,  745,  750,
      750,  750,  750, 1114, 1116, 1117,  749,  756,  756,  756,
      756,  757,  757,  757,  757,  760,  760,  760,  760, 1118,
     1120, 1121,  756,  763,  763,  763,  763,  829, 1122,  829,

      760,  766,  766,  766,  766,  776,  776,  776,  776,  830,
      829,  830,  829,  831,  832,  831,  832,  833,  834,  833,
      834,  835,  830,  835,  830, 1123,  831,  832,  831,  832,
      833,  834,  833,  834,  835,  836,  835,  836,  847,  847,
      847,  847,  829, 1135,  837,  830,  837, 1137,  836, 1138,
      836,  834, 1143,  832,  831, 1146,  838,  837,  838,  837,
      833,  841,  841,  841,  841,  835, 1151, 1021, 1021,  838,
     1021,  838,  848,  848,  848,  848,  841, 1152,  837,  851,
      851,  851,  851,  836,  858,  858,  858,  858,  862,  862,
      862,  862,  863,  863,  863,  863, 1153,  838,  867,  867,

      867,  867, 1157,  862,  870,  870,  870,  870,  878,  878,
      878,  878, 1158,  867, 1161,  912,  912, 1136,  912,  870,
      912, 1136,  912,  878,  915,  915,  915,  915,  916,  916,
      916,  916,  918,  918,  918,  918, 1007, 1007,  915, 1007,
     1162, 1007,  916, 1007, 1163, 1164,  918,  923,  923,  923,
      923,  926,  926,  926,  926, 1165,  927,  927,  927,  927,
      928,  923,  928, 1167,  926,  926,  926, 1170,  918,  927,
      927,  927, 1171,  928, 1172,  928, 1173,  916,  929,  929,
      929,  929,  930,  931,  930,  931, 1174,  923,  932, 1175,
      932,  929,  929,  929, 1178,  930,  931,  930,  931, 1179,

      933,  932,  933,  932,  928,  927,  934,  934,  934,  934,
      935, 1180,  935,  933,  929,  933, 1181, 1182,  930,  934,
      934,  934, 1184,  935, 1185,  935,  936, 1186,  936,  941,
      941,  941,  941, 1187,  931,  931,  933,  932, 1194,  936,
     1198,  936, 1193, 1193,  941, 1193,  934,  942,  942,  942,
      942,  947,  947,  947,  947,  950,  950,  950,  950, 1199,
      935, 1200,  936, 1201, 1196, 1196,  947, 1196, 1202, 1203,
      950,  957,  957,  957,  957,  959,  959,  959,  959,  962,
      962,  962,  962, 1204, 1205, 1206,  957,  963,  963,  963,
      963, 1210, 1211, 1212,  962,  964,  964,  964,  964, 1228,

     1229, 1230,  963,  967,  967,  967,  967,  968,  968,  968,
      968,  974,  974,  974,  974, 1231, 1232, 1235,  967,  976,
      976,  976,  976, 1243, 1246, 1247,  974,  977,  977,  977,
      977, 1248, 1250, 1254,  976,  988,  988,  988,  988, 1006,
     1006, 1006, 1006, 1008, 1008, 1008, 1008, 1255, 1197, 1197,
      988, 1197, 1256, 1006, 1257, 1264, 1265, 1008, 1012, 1012,
     1012, 1012, 1020, 1020, 1020, 1020, 1025, 1025, 1025, 1025,
     1266, 1267, 1012, 1027, 1268, 1027, 1020, 1269, 1270, 1025,
     1025, 1025, 1026, 1026, 1026, 1026, 1027, 1028, 1027, 1028,
     1029, 1029, 1029, 1029, 1271, 1026, 1026, 1026, 1272, 1030,

     1028, 1030, 1028, 1029, 1029, 1029, 1031, 1032, 1031, 1032,
     1273, 1033, 1030, 1033, 1030, 1034, 1274, 1034, 1275, 1031,
     1032, 1031, 1032, 1027, 1033, 1035, 1033, 1035, 1034, 1038,
     1034, 1038, 1276, 1030, 1190, 1190, 1028, 1190, 1035, 1190,
     1035, 1190, 1038, 1037, 1038, 1037, 1277, 1033, 1036, 1036,
     1036, 1036, 1279, 1039, 1031, 1039, 1037, 1032, 1037, 1280,
     1281, 1036, 1036, 1036, 1282, 1034, 1039, 1283, 1039, 1038,
     1044, 1044, 1044, 1044, 1035, 1037, 1045, 1045, 1045, 1045,
     1046, 1046, 1046, 1046, 1284, 1208, 1208, 1039, 1208, 1209,
     1209, 1045, 1209, 1285, 1286, 1046, 1049, 1049, 1049, 1049,

     1050, 1050, 1050, 1050, 1053, 1053, 1053, 1053, 1287, 1288,
     1289, 1049, 1054, 1054, 1054, 1054, 1290, 1291, 1292, 1053,
     1060, 1060, 1060, 1060, 1061, 1061, 1061, 1061, 1062, 1062,
     1062, 1062, 1293, 1307, 1308, 1060, 1309, 1310, 1311, 1061,
     1066, 1066, 1066, 1066, 1067, 1067, 1067, 1067, 1068, 1068,
     1068, 1068, 1312, 1318, 1320, 1066, 1071, 1071, 1071, 1071,
     1077, 1077, 1077, 1077, 1078, 1078, 1078, 1078, 1080, 1080,
     1080, 1080, 1321, 1322, 1323, 1077, 1089, 1089, 1089, 1089,
     1090, 1090, 1090, 1090, 1112, 1112, 1112, 1112, 1327, 1115,
     1328, 1089, 1119, 1119, 1119, 1119, 1329, 1115, 1112, 1115,

     1115, 1338, 1124, 1115, 1124, 1339, 1119, 1125, 1125, 1125,
     1125, 1126, 1340, 1126, 1343, 1124, 1344, 1124, 1345, 1127,
     1125, 1125, 1125, 1127, 1126, 1346, 1126, 1127, 1347, 1127,
     1127, 1127, 1128, 1127, 1128, 1348, 1129, 1349, 1129, 1130,
     1350, 1130, 1351, 1352, 1352, 1128, 1352, 1128, 1353, 1129,
     1124, 1129, 1130, 1354, 1130, 1131, 1131, 1131, 1131, 1355,
     1132, 1126, 1132, 1133, 1134, 1133, 1134, 1356, 1131, 1131,
     1131, 1130, 1128, 1132, 1357, 1132, 1133, 1134, 1133, 1134,
     1139, 1139, 1139, 1139, 1129, 1140, 1140, 1140, 1140, 1141,
     1141, 1141, 1141, 1132, 1358, 1139, 1142, 1142, 1142, 1142,

     1145, 1145, 1145, 1145, 1141, 1144, 1144, 1144, 1144, 1147,
     1147, 1147, 1147, 1359, 1134, 1133, 1148, 1148, 1148, 1148,
     1144, 1360, 1361, 1363, 1147, 1149, 1149, 1149, 1149, 1150,
     1150, 1150, 1150, 1154, 1154, 1154, 1154, 1364, 1362, 1362,
     1149, 1362, 1365, 1380, 1150, 1381, 1382, 1386, 1154, 1155,
     1155, 1155, 1155, 1149, 1156, 1156, 1156, 1156, 1159, 1159,
     1159, 1159, 1160, 1160, 1160, 1160, 1166, 1166, 1166, 1166,
     1387, 1388, 1389, 1159, 1168, 1168, 1168, 1168, 1390, 1392,
     1393, 1166, 1169, 1169, 1169, 1169, 1177, 1177, 1177, 1177,
     1195, 1195, 1195, 1195, 1213, 1394, 1213, 1169, 1207, 1207,

     1207, 1207, 1399, 1400, 1195, 1401, 1215, 1213, 1215, 1213,
     1402, 1403, 1207, 1404, 1214, 1214, 1214, 1214, 1216, 1215,
     1216, 1215, 1217, 1218, 1217, 1218, 1213, 1214, 1214, 1214,
     1219, 1216, 1219, 1216, 1405, 1217, 1218, 1217, 1218, 1220,
     1406, 1220, 1407, 1219, 1408, 1219, 1215, 1221, 1222, 1221,
     1222, 1409, 1220, 1410, 1220, 1217, 1411, 1412, 1413, 1218,
     1221, 1222, 1221, 1222, 1216, 1223, 1414, 1223, 1415, 1416,
     1418, 1220, 1226, 1222, 1226, 1225, 1219, 1225, 1223, 1419,
     1223, 1224, 1224, 1224, 1224, 1226, 1421, 1226, 1225, 1227,
     1225, 1227, 1422, 1221, 1224, 1224, 1224, 1233, 1233, 1233,

     1233, 1299, 1227, 1299, 1227, 1438, 1439, 1440, 1226, 1234,
     1234, 1234, 1234, 1445, 1299, 1223, 1299, 1446, 1225, 1236,
     1236, 1236, 1236, 1237, 1237, 1237, 1237, 1447, 1448, 1227,
     1238, 1238, 1238, 1238, 1236, 1239, 1239, 1239, 1239, 1240,
     1240, 1240, 1240, 1449, 1299, 1238, 1241, 1241, 1241, 1241,
     1239, 1242, 1242, 1242, 1242, 1244, 1244, 1244, 1244, 1450,
     1451, 1241, 1245, 1245, 1245, 1245, 1249, 1249, 1249, 1249,
     1244, 1251, 1251, 1251, 1251, 1252, 1252, 1252, 1252, 1253,
     1253, 1253, 1253, 1452, 1454, 1456, 1251, 1457, 1458, 1460,
     1252, 1258, 1258, 1258, 1258, 1259, 1259, 1259, 1259, 1260,

     1260, 1260, 1260, 1461, 1463, 1465, 1258, 1467, 1468, 1469,
     1259, 1261, 1261, 1261, 1261, 1262, 1262, 1262, 1262, 1263,
     1263, 1263, 1263, 1294, 1470, 1294, 1261, 1295, 1471, 1295,
     1262, 1296, 1297, 1296, 1297, 1298, 1294, 1298, 1294, 1300,
     1295, 1300, 1295, 1474, 1296, 1297, 1296, 1297, 1298, 1301,
     1298, 1301, 1300, 1302, 1300, 1302, 1303, 1304, 1303, 1304,
     1475, 1494, 1301, 1294, 1301, 1305, 1302, 1305, 1302, 1303,
     1304, 1303, 1304, 1297, 1496, 1306, 1296, 1306, 1305, 1295,
     1305, 1499, 1473, 1473, 1298, 1473, 1305, 1300, 1306, 1500,
     1306, 1502, 1503, 1304, 1301, 1313, 1313, 1313, 1313, 1314,

     1314, 1314, 1314, 1505, 1302, 1509, 1510, 1303, 1315, 1315,
     1315, 1315, 1517, 1518, 1314, 1316, 1316, 1316, 1316, 1317,
     1317, 1317, 1317, 1319, 1319, 1319, 1319, 1306, 1324, 1324,
     1324, 1324, 1325, 1325, 1325, 1325, 1326, 1326, 1326, 1326,
     1519, 1520, 1521, 1324, 1330, 1330, 1330, 1330, 1331, 1331,
     1331, 1331, 1332, 1332, 1332, 1332, 1522, 1477, 1477, 1330,
     1477, 1523, 1525, 1331, 1333, 1333, 1333, 1333, 1334, 1334,
     1334, 1334, 1335, 1335, 1335, 1335, 1336, 1336, 1336, 1336,
     1366, 1545, 1366, 1334, 1367, 1368, 1367, 1368, 1369, 1370,
     1369, 1370, 1371, 1366, 1371, 1366, 1546, 1367, 1368, 1367,

     1368, 1369, 1370, 1369, 1370, 1371, 1372, 1371, 1372, 1385,
     1385, 1385, 1385, 1373, 1374, 1373, 1374, 1556, 1557, 1372,
     1367, 1372, 1560, 1561, 1369, 1366, 1373, 1374, 1373, 1374,
     1379, 1379, 1379, 1379, 1368, 1375, 1376, 1375, 1376, 1377,
     1370, 1377, 1378, 1371, 1378, 1379, 1372, 1562, 1375, 1376,
     1375, 1376, 1377, 1564, 1377, 1378, 1565, 1378, 1383, 1383,
     1383, 1383, 1373, 1567, 1374, 1384, 1384, 1384, 1384, 1391,
     1391, 1391, 1391, 1383, 1377, 1571, 1516, 1516, 1378, 1516,
     1384, 1572, 1573, 1574, 1375, 1376, 1395, 1395, 1395, 1395,
     1396, 1396, 1396, 1396, 1397, 1397, 1397, 1397, 1588, 1599,

     1601, 1395, 1398, 1398, 1398, 1398, 1417, 1417, 1417, 1417,
     1420, 1420, 1420, 1420, 1423, 1603, 1423, 1424, 1604, 1424,
     1417, 1425, 1607, 1425, 1420, 1608, 1426, 1423, 1426, 1423,
     1424, 1427, 1424, 1427, 1425, 1428, 1425, 1428, 1429, 1426,
     1429, 1426, 1527, 1527, 1427, 1527, 1427, 1610, 1428, 1623,
     1428, 1429, 1630, 1429, 1430, 1430, 1430, 1430, 1559, 1559,
     1426, 1559, 1632, 1431, 1423, 1431, 1424, 1430, 1430, 1430,
     1429, 1425, 1633, 1432, 1427, 1432, 1431, 1634, 1431, 1433,
     1433, 1433, 1433, 1635, 1636, 1428, 1432, 1434, 1432, 1434,
     1645, 1649, 1433, 1433, 1433, 1437, 1437, 1437, 1437, 1435,

     1434, 1435, 1434, 1436, 1436, 1436, 1436, 1650, 1651, 1432,
     1431, 1653, 1435, 1654, 1435, 1655, 1660, 1662, 1436, 1441,
     1441, 1441, 1441, 1442, 1442, 1442, 1442, 1443, 1443, 1443,
     1443, 1663, 1664, 1665, 1441, 1444, 1444, 1444, 1444, 1666,
     1672, 1434, 1443, 1453, 1453, 1453, 1453, 1673, 1435, 1466,
     1466, 1466, 1466, 1472, 1472, 1472, 1472, 1476, 1476, 1476,
     1476, 1566, 1566, 1466, 1566, 1674, 1675, 1472, 1480, 1676,
     1480, 1476, 1478, 1478, 1478, 1478, 1479, 1479, 1479, 1479,
     1677, 1480, 1482, 1480, 1482, 1483, 1478, 1483, 1682, 1683,
     1479, 1481, 1481, 1481, 1481, 1482, 1684, 1482, 1483, 1484,

     1483, 1484, 1685, 1686, 1481, 1481, 1481, 1485, 1486, 1485,
     1486, 1687, 1484, 1692, 1484, 1694, 1488, 1480, 1488, 1695,
     1485, 1486, 1485, 1486, 1487, 1487, 1487, 1487, 1696, 1488,
     1482, 1488, 1697, 1569, 1569, 1483, 1569, 1487, 1487, 1487,
     1489, 1486, 1489, 1490, 1490, 1490, 1490, 1485, 1703, 1484,
     1704, 1570, 1570, 1489, 1570, 1489, 1490, 1490, 1490, 1491,
     1491, 1491, 1491, 1492, 1492, 1492, 1492, 1488, 1493, 1493,
     1493, 1493, 1491, 1491, 1491, 1713, 1492, 1492, 1492, 1495,
     1495, 1495, 1495, 1497, 1497, 1497, 1497, 1727, 1728, 1489,
     1498, 1498, 1498, 1498, 1495, 1501, 1501, 1501, 1501, 1504,

     1504, 1504, 1504, 1506, 1506, 1506, 1506, 1733, 1529, 1529,
     1501, 1529, 1737, 1529, 1504, 1529,  799,  798, 1506, 1514,
     1514, 1514, 1514, 1515, 1515, 1515, 1515, 1524, 1524, 1524,
     1524, 1602, 1602, 1514, 1602, 1606, 1606, 1515, 1606,  797,
      796, 1524, 1526, 1526, 1526, 1526, 1528, 1528, 1528, 1528,
     1530, 1530, 1530, 1530,  795,  794, 1526, 1532,  793, 1532,
     1528,  792,  791, 1530, 1530, 1530, 1531, 1531, 1531, 1531,
     1532, 1533, 1532, 1533,  790, 1534,  789, 1534,  788, 1531,
     1531, 1531,  787, 1535, 1533, 1535, 1533,  786, 1534, 1532,
     1534, 1536, 1537, 1536, 1537, 1576, 1535, 1576, 1535, 1538,

     1538, 1538, 1538,  785, 1536, 1537, 1536, 1537, 1576,  784,
     1576, 1533, 1538, 1538, 1538,  783,  782, 1539, 1539, 1539,
     1539,  779,  778,  777, 1534, 1540, 1540, 1540, 1540, 1535,
     1539, 1539, 1539,  775, 1536, 1576,  774,  773, 1540, 1540,
     1540,  772, 1537, 1541, 1541, 1541, 1541, 1542, 1542, 1542,
     1542, 1543, 1543, 1543, 1543,  771, 1611, 1611, 1541, 1611,
      770,  769, 1542, 1544, 1544, 1544, 1544, 1547, 1547, 1547,
     1547, 1548, 1548, 1548, 1548,  768, 1631, 1631, 1544, 1631,
      767,  765, 1547, 1549, 1549, 1549, 1549, 1550, 1550, 1550,
     1550, 1551, 1551, 1551, 1551,  764, 1612, 1612, 1549, 1612,

      762, 1612, 1550, 1612,  761,  758, 1551, 1552, 1552, 1552,
     1552, 1553, 1553, 1553, 1553, 1554, 1554, 1554, 1554, 1555,
     1555, 1555, 1555,  755, 1638, 1638, 1553, 1638,  753,  752,
     1554, 1558, 1558, 1558, 1558, 1563, 1563, 1563, 1563, 1568,
     1568, 1568, 1568,  751,  748, 1558, 1577,  747, 1577, 1563,
      742,  741,  740, 1568, 1575, 1575, 1575, 1575, 1579, 1577,
     1579, 1577, 1578, 1578, 1578, 1578,  739, 1575, 1575, 1575,
     1580, 1579, 1580, 1579,  738, 1578, 1578, 1578, 1581,  737,
     1581, 1639, 1639, 1580, 1639, 1580, 1582, 1582, 1582, 1582,
      736, 1581,  735, 1581, 1583, 1583, 1583, 1583, 1577, 1582,

     1582, 1582,  724, 1579, 1652, 1652, 1580, 1652,  723, 1583,
     1584, 1584, 1584, 1584, 1585, 1585, 1585, 1585, 1586, 1586,
     1586, 1586, 1587, 1587, 1587, 1587,  722, 1581, 1589, 1589,
     1589, 1589,  721, 1586, 1590, 1590, 1590, 1590, 1591, 1591,
     1591, 1591,  718, 1589, 1592, 1592, 1592, 1592, 1593, 1593,
     1593, 1593,  717, 1591, 1594, 1594, 1594, 1594, 1595, 1595,
     1595, 1595,  716, 1593, 1596, 1596, 1596, 1596, 1597, 1597,
     1597, 1597, 1598, 1598, 1598, 1598, 1615, 1589, 1615, 1596,
     1605, 1605, 1605, 1605, 1609, 1609, 1609, 1609, 1616, 1615,
     1616, 1615,  713,  712, 1605, 1618,  711, 1618, 1609,  710,

     1619, 1616, 1619, 1616, 1617, 1617, 1617, 1617, 1618,  709,
     1618, 1667, 1667, 1619, 1667, 1619,  708, 1617, 1617, 1617,
      707, 1615, 1618,  706, 1616,  705,  704, 1619, 1620, 1620,
     1620, 1620, 1621, 1621, 1621, 1621, 1622, 1622, 1622, 1622,
      703, 1620, 1620, 1620, 1624, 1624, 1624, 1624, 1625, 1625,
     1625, 1625, 1626, 1626, 1626, 1626,  702,  701,  700, 1624,
     1627, 1627, 1627, 1627,  699,  696,  694, 1626, 1628, 1628,
     1628, 1628, 1629, 1629, 1629, 1629, 1637, 1637, 1637, 1637,
     1640, 1641, 1640, 1641, 1642, 1643, 1642, 1643, 1716, 1716,
     1637, 1716,  692, 1640, 1641, 1640, 1641, 1642, 1643, 1642,

     1643, 1644, 1644, 1644, 1644,  691,  690,  689, 1641, 1646,
     1646, 1646, 1646,  688, 1644, 1644, 1644,  687,  685,  684,
     1642, 1643, 1647, 1647, 1647, 1647, 1648, 1648, 1648, 1648,
     1640, 1656, 1657, 1656, 1657,  683, 1658, 1647, 1658, 1659,
     1668, 1659, 1668,  682, 1656, 1657, 1656, 1657,  681, 1658,
      680, 1658, 1659, 1668, 1659, 1668,  679,  678, 1656, 1661,
     1661, 1661, 1661,  677, 1669, 1670, 1669, 1670, 1657, 1671,
      676, 1671, 1705, 1705, 1705, 1705, 1668, 1669, 1670, 1669,
     1670, 1678, 1671, 1678, 1671, 1658, 1705, 1679, 1659, 1679,
     1680, 1681, 1680, 1681, 1678, 1688, 1678, 1688,  673, 1689,

     1679, 1689, 1679, 1680, 1681, 1680, 1681,  672, 1688, 1690,
     1688, 1690, 1689, 1669, 1689,  670, 1670,  669, 1718, 1718,
     1671, 1718, 1690,  668, 1690,  667, 1691,  666, 1691,  663,
     1678,  662,  659, 1680, 1681, 1698,  658, 1698, 1679, 1691,
      657, 1691, 1689, 1699,  655, 1699, 1688, 1700, 1698, 1700,
     1698, 1701,  654, 1701, 1726, 1726, 1699, 1726, 1699, 1690,
     1700,  653, 1700,  651, 1701,  650, 1701, 1702, 1702, 1702,
     1702, 1706, 1706, 1706, 1706, 1707, 1691, 1707, 1698, 1708,
      647, 1708, 1702, 1732, 1732, 1706, 1732,  644, 1707,  642,
     1707,  641, 1708, 1699, 1708,  640, 1700,  639,  638,  632,

     1701, 1709, 1709, 1709, 1709, 1710, 1710, 1710, 1710, 1711,
     1711, 1711, 1711,  628, 1709, 1709, 1709,  626, 1710, 1710,
     1710,  624,  623,  622, 1711, 1707,  621,  619, 1708, 1712,
     1712, 1712, 1712, 1714, 1714, 1714, 1714, 1715, 1715, 1715,
     1715, 1717, 1717, 1717, 1717,  618, 1719, 1714, 1719, 1734,
     1734, 1715, 1734, 1735, 1735, 1717, 1735, 1738, 1738, 1719,
     1738, 1719, 1720, 1720, 1720, 1720, 1721, 1721, 1721, 1721,
     1722, 1722, 1722, 1722,  617, 1720, 1720, 1720,  616, 1721,
     1721, 1721,  615, 1722, 1722, 1722, 1723, 1723, 1723, 1723,
     1724, 1724, 1724, 1724,  613, 1719, 1725, 1725, 1725, 1725,

     1729, 1729, 1729, 1729, 1724, 1730, 1730, 1730, 1730,  612,
     1725,  611,  610, 1729, 1729, 1729,  609,  607, 1730, 1730,
     1730, 1731, 1731, 1731, 1731, 1736, 1736, 1736, 1736, 1739,
     1739,  606, 1739,  605,  604, 1731,  603,  601, 1736, 1736,
     1736, 1741, 1741, 1741, 1741, 1741, 1741, 1742, 1742, 1742,
     1742, 1742, 1742, 1743, 1743, 1743, 1743, 1743, 1743, 1744,
     1744, 1744, 1744, 1744, 1744, 1745, 1745, 1745, 1745, 1745,
     1745, 1746, 1746, 1746, 1746, 1746, 1746, 1747, 1747, 1747,
     1747, 1747, 1747, 1748, 1748, 1748, 1748, 1748, 1748, 1749,
      599,  596, 1749, 1749, 1750, 1750, 1750, 1750, 1750, 1751,

     1751,  594, 1751, 1751, 1751, 1752, 1752, 1752,  593, 1752,
     1752, 1753, 1753, 1753, 1753,  592, 1753,  591,  590,  589,
      587,  586,  585,  584,  583,  582,  581,  578,  577,  574,
      573,  572,  571,  570,  566,  565,  564,  560,  559,  558,
      557,  556,  555,  554,  553,  552,  551,  545,  544,  543,
      542,  535,  534,  530,  529,  528,  527,  526,  525,  524,
      523,  522,  521,  520,  518,  517,  514,  513,  512,  511,
      510,  509,  508,  507,  506,  503,  502,  501,  500,  499,
      498,  497,  496,  495,  494,  493,  491,  490,  489,  488,
      487,  486,  482,  481,  480,  479,  478,  477,  476,  475,

      471,  470,  468,  463,  462,  461,  460,  459,  458,  456,
      455,  454,  453,  446,  443,  442,  441,  440,  439,  438,
      437,  436,  435,  434,  433,  431,  430,  429,  428,  427,
      426,  425,  424,  423,  421,  420,  419,  418,  417,  416,
      415,  414,  410,  409,  408,  405,  403,  402,  401,  400,
      399,  398,  397,  396,  395,  394,  393,  390,  388,  387,
      385,  384,  383,  382,  381,  380,  379,  378,  377,  375,
      374,  371,  370,  366,  365,  364,  363,  362,  361,  358,
      357,  356,  355,  345,  339,  338,  335,  334,  333,  332,
      331,  329,  328,  327,  326,  325,  324,  323,  322,  321,

      320,  319,  318,  316,  315,  314,  313,  310,  309,  308,
      307,  306,  305,  304,  303,  302,  301,  299,  298,  297,
      295,  293,  291,  290,  289,  288,  287,  285,  283,  282,
      281,  280,  279,  278,  275,  274,  263,  262,  259,  258,
      254,  253,  252,  251,  250,  249,  247,  245,  243,  242,
      241,  240,  239,  238,  237,  235,  234,  233,  232,  231,
      230,  229,  227,  226,  224,  223,  222,  221,  220,  219,
      218,  217,  216,  215,  214,  213,  212,  211,  210,  209,
      208,  207,  206,  205,  204,  203,  202,  201,  200,  188,
      187,  186,  185,  184,  183,  182,  180,  179,  173,  172,

      171,  170,  169,  168,  167,  166,  165,  164,  163,  162,
      161,  160,  159,  158,  157,  156,  155,  154,  153,  152,
      151,  150,  149,  148,  147,  143,  142,  140,  139,  138,
      136,  134,  131,  120,  119,  118,  117,  116,  115,  114,
      113,  112,  111,  110,  106,   99,   98,   94,   93,   91,
       90,   89,   87,   83,   59,   58,   57,   54,   53,   52,
       51,   47,   43,   40,   25,   23,   19,   14,   13,    8,
        7,    6,    5,    4,    3, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1740
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[184] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 
    1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "OSParseosrl.l"
/* $Id$ */
/** @file parseosrl.l
 * 
 * @author  Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin, 
 * @version 2.0, 19/07/2009
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005-2009, Robert Fourer, Jun Ma, Horand Gassmann, Kipp Martin,
 * Northwestern University, Dalhousie University and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 17 "OSParseosrl.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSrLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"


#define PARSERDEBUG

#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;
     








#line 103 "OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 2109 "OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 113 "OSParseosrl.l"



#line 2356 "OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1741 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4376 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 120 "OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 122 "OSParseosrl.l"
{ YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 123 "OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 125 "OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 141 "OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* numerical attributes */
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 145 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 146 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 147 "OSParseosrl.l"
{  YY_PRINT;  return(NUMBEROFITEMSATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 148 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 149 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 150 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 151 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 152 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERRESULTSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 153 "OSParseosrl.l"
{  YY_PRINT; return(NUMBEROFOTHERSOLUTIONRESULTSATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 154 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 155 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 156 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLVEROUTPUTSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 157 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSUBSTATUSESATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 158 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 159 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 160 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 162 "OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 163 "OSParseosrl.l"
{YY_PRINT;  return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
/* attributes returning strings */
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 167 "OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 168 "OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 169 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 170 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 171 "OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 172 "OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 173 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 174 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 175 "OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 176 "OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 177 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 178 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 179 "OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 180 "OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 181 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 182 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 183 "OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 184 "OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 185 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 186 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 187 "OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 188 "OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 189 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 190 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 191 "OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 192 "OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 193 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 194 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
/* top level elements */
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 198 "OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 199 "OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 200 "OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 202 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 203 "OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 205 "OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 206 "OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 208 "OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 209 "OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 211 "OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 212 "OSParseosrl.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 214 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 215 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
/* The <item> element is treated specially because it may legitimately contain special characters */
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 220 "OSParseosrl.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 221 "OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 222 "OSParseosrl.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 223 "OSParseosrl.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
/* Remaining elements, sorted alpabetically. */
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 227 "OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMESTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 228 "OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMEEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 229 "OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUNUMBERSTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 230 "OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUNUMBEREND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 231 "OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUSPEEDSTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 232 "OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUSPEEDEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 233 "OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEDISKSPACESTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 234 "OSParseosrl.l"
{YY_PRINT; return(AVAILABLEDISKSPACEEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 235 "OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEMEMORYSTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 236 "OSParseosrl.l"
{YY_PRINT; return(AVAILABLEMEMORYEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 237 "OSParseosrl.l"
{YY_PRINT;  return(BASISSTATUSSTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 238 "OSParseosrl.l"
{YY_PRINT; return(BASISSTATUSEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 239 "OSParseosrl.l"
{YY_PRINT;  return(BASSTATUSSTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 240 "OSParseosrl.l"
{YY_PRINT; return(BASSTATUSEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 241 "OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 242 "OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 243 "OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 244 "OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 245 "OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTSTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 246 "OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 247 "OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATESTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 248 "OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATEEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 249 "OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 250 "OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 251 "OSParseosrl.l"
{YY_PRINT;  return(ENDTIMESTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 252 "OSParseosrl.l"
{YY_PRINT;  return(ENDTIMEEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 253 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 254 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 255 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 256 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 257 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 258 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 259 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 260 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 261 "OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 262 "OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 263 "OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 264 "OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 265 "OSParseosrl.l"
{YY_PRINT;  return(OPTIMIZATIONSOLUTIONSTATUSSTART);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 266 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSOLUTIONSTATUSEND);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 267 "OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 268 "OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 269 "OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSSTART);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 270 "OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSEND);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 271 "OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSTART);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 272 "OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLUTIONRESULTEND);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 273 "OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSSTART);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 274 "OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSEND);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 275 "OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTSTART);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 276 "OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTEND);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 277 "OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 278 "OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 279 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 280 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 281 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 282 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 283 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONSTART);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 284 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONEND);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 285 "OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 286 "OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 287 "OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDSTART);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 288 "OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDEND);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 289 "OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTSTART);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 290 "OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTEND);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 291 "OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 292 "OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 293 "OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMESTART);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 294 "OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMEEND);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 295 "OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSSTART);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 296 "OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSEND);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 297 "OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONSTART);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 298 "OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONEND);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 299 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 300 "OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 301 "OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDSTART);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 302 "OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDEND);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 303 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPSTART);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 304 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPEND);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 305 "OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 306 "OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 307 "OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFARSTART);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 308 "OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFAREND);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 309 "OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBERSTART);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 310 "OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBEREND);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 311 "OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDSTART);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 312 "OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDEND);} 
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 313 "OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACESTART);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 314 "OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACEEND);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 315 "OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYSTART);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 316 "OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYEND);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 317 "OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 318 "OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 319 "OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGSTART);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 320 "OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGEND);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 321 "OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 322 "OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 323 "OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 324 "OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
/* environments and comments */
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 329 "OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext);   yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 330 "OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 332 "OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 172:
#line 334 "OSParseosrl.l"
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 334 "OSParseosrl.l"
;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 335 "OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 337 "OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 176:
#line 339 "OSParseosrl.l"
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 339 "OSParseosrl.l"
;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 340 "OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 343 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /* yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 344 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 345 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 349 "OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 361 "OSParseosrl.l"
ECHO;
	YY_BREAK
#line 3570 "OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1741 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1741 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1740);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 361 "OSParseosrl.l"





