#line 2 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

#line 4 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osrllex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 85
#define YY_END_OF_BUFFER 86
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[741] =
    {   0,
        1,    1,    0,    0,   83,   83,    0,    0,    0,    0,
       86,   84,    1,    1,    2,   73,   84,    5,   84,    4,
       84,    3,   73,   82,   85,   83,   75,   76,   75,   79,
       80,   79,    1,    0,    0,    3,    0,    0,    0,    0,
        0,    1,   73,   73,   73,   73,   73,   73,    5,    4,
        0,    5,   73,    6,    5,    4,    0,    0,   78,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       73,   82,   83,    0,   81,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   73,   73,   73,
       73,   73,   73,    5,    0,    0,    0,    5,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    5,   77,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       73,   73,   73,   73,   73,   73,    5,    5,   74,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   51,    0,    0,    0,    0,
        0,   47,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   43,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   73,   73,   73,   73,   73,

       73,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   62,    0,    0,    0,    0,    0,    0,
       73,   73,   73,   73,   73,    0,   53,    0,    0,    0,
        0,    0,    0,    0,   49,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   45,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    7,   55,    0,    0,
        0,    0,    0,    0,   23,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   62,    0,   65,    0,    0,    0,
       63,   73,   73,   73,   53,    0,    0,    0,    0,    0,
        0,   49,    0,    0,    0,    8,    0,    0,    0,    0,
        0,    0,   25,    0,   45,    0,    0,    0,    0,    0,
        0,    0,   20,    0,    0,    0,    0,    0,    0,   37,
       70,   23,   24,   39,    0,    0,    0,    0,    0,    0,
        0,   65,    0,    0,   63,   73,   73,   73,    0,    0,
        0,    0,    0,   22,    0,    0,    0,    8,    0,   56,
        0,    0,    0,    0,   25,    0,    0,    0,    0,    0,
        0,   69,   20,   21,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   73,
       73,   73,    0,    0,    0,    0,   22,    0,    0,    0,
       56,    0,    0,    0,    0,    0,   38,    0,   40,    0,
        0,    0,    0,    0,    0,    0,   26,    0,    0,    0,
        0,    0,    0,   35,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   73,   73,   73,   73,
       73,   73,    0,    0,    0,    0,    0,   28,    0,    0,
        0,    0,    0,    0,    0,   38,   40,    0,    0,    0,
        0,    0,   71,   26,   27,    0,    0,    0,    0,    0,
        0,   44,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   73,   73,   73,   73,   73,   73,    0,    0,
        0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
       36,    0,    0,   41,    0,    0,   48,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   73,   73,   73,   73,   73,   73,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
       46,   52,    0,    0,    0,    0,    0,   31,    0,    0,
        0,    0,   11,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   73,   73,   73,   73,   73,   73,
        0,    0,   42,    0,    0,    0,   50,    0,    0,   32,

        0,    0,    0,   13,   46,    0,    0,   33,   72,   31,
        0,    0,    0,   14,   66,   11,   12,    0,    0,    0,
       64,    0,    0,    0,    0,    0,    0,   73,   73,   73,
       73,   73,    0,   54,   42,    0,    0,   50,    0,   32,
        0,    0,   16,   13,   29,    0,    0,   17,    0,    9,
       67,   14,   15,    0,   64,    0,    0,    0,    0,    0,
       61,   73,   73,   73,   73,   54,    0,    0,   19,    0,
       34,    0,   10,   16,   68,   17,   18,    9,    0,    0,
        0,    0,   61,   73,   73,   73,   73,    0,   30,   19,
       34,   10,    0,    0,    0,    0,   73,   73,   73,   73,

       30,    0,    0,    0,    0,   73,   73,   73,   73,    0,
        0,    0,    0,    0,    0,   73,   73,   73,   73,    0,
        0,    0,    0,   57,    0,   58,   73,   73,    0,    0,
        0,   60,   57,   58,   73,    0,   59,   60,   59,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    7,    1,    1,    8,    1,
        1,    7,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    7,    1,   14,
       15,   16,   17,    7,    7,    7,   18,   19,   20,   21,
        7,   22,   23,    7,    7,    7,    7,   24,   25,    7,
        7,   26,   27,    7,   28,   29,    7,    7,    7,    7,
        1,    1,    1,    1,    7,    1,   30,   31,   32,   33,

       34,   35,   36,   37,   38,   39,    7,   40,   41,   42,
       43,   44,    7,   45,   46,   47,   48,   49,    7,   50,
       51,   52,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    2,    2,    2,    1,    3,    2,    3,    1,    1,
        2,    2,    2,    2,    1,    4,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2
    } ;

static yyconst flex_int16_t yy_base[749] =
    {   0,
        0,   23,   12,   13, 1804, 1803,   38,   39,   27,   40,
     1818, 1821,   56,  102, 1821,   49,   39,   62, 1801,  148,
      178, 1821,   67,    0, 1821,    0, 1821, 1821, 1806, 1821,
     1821, 1799,    0, 1798,  216, 1821, 1779, 1779,   23, 1780,
     1759,  264,   95,   97,  108,  109,  135,  143,   53,  113,
     1785,   34,  165, 1821,   43,    0, 1798,  280, 1821, 1764,
     1758, 1771, 1762, 1760, 1768,   46, 1767,   89, 1762, 1769,
      159,    0,    0, 1782, 1821, 1755, 1753, 1761, 1760,   91,
     1755, 1746, 1741, 1749, 1748, 1749, 1743,  192,  195,  219,
      230,  259,  270,  117,   75, 1765, 1772,  222, 1774, 1740,

     1734, 1747, 1738, 1736, 1744,  140, 1743,  154, 1738, 1745,
     1732, 1743, 1730, 1725, 1739, 1723, 1729, 1720, 1721, 1728,
     1718, 1718, 1722, 1731, 1719,   55,  262, 1821, 1713, 1727,
     1711, 1710, 1710, 1713, 1721,  284, 1718, 1720, 1712, 1708,
      290,  328,  325,  326,  336,  341, 1695, 1821, 1821, 1663,
     1673, 1644, 1633, 1646, 1621, 1623, 1613, 1614, 1618, 1608,
     1604, 1607, 1612, 1599,  113, 1589, 1593, 1594, 1580, 1602,
     1575, 1585, 1568, 1561, 1565, 1550, 1545, 1540, 1539, 1544,
     1529, 1536, 1525, 1534, 1509, 1506, 1503, 1517, 1497,  361,
      365,  375, 1507, 1507,  378,  372,  384,  399,  384,  396,

      417,  420, 1492, 1497, 1481, 1497, 1468,  423, 1475, 1463,
     1468, 1451, 1439, 1434, 1429, 1437, 1422,  438, 1411, 1427,
     1377, 1390, 1395, 1383, 1375, 1355,  331, 1349, 1349, 1349,
     1338, 1328,  443, 1340, 1337, 1335, 1333, 1312, 1291, 1292,
      446, 1287,  461,  449,  468,  471, 1279, 1269,  478,  482,
      485,  492,  339,  498,  513,  516,  531, 1268, 1281, 1264,
     1265, 1272, 1249,  534,  537, 1240, 1229,  540, 1223, 1219,
     1217, 1207, 1202,  544, 1214,  549,  555, 1205, 1189, 1202,
     1200, 1186,  559, 1181, 1163, 1171,  564, 1821, 1153, 1157,
     1150, 1137,  570, 1166,  574, 1128, 1142, 1126,  577, 1131,

     1106, 1113,  581, 1088,  587,  592,  599, 1100, 1084,  602,
      609,  605,  612,  613,  628, 1071, 1075, 1071, 1055,  631,
     1053,  636, 1015, 1023,  639,  642,  650, 1010, 1019, 1012,
     1002,  654,  657,  984,  660,  997,  997,  982,  981,  980,
      665,  995,  669,  967,  962,  946,   93,  963,  951, 1821,
     1821,  672, 1821, 1821,  953,  945,  676,  940,  170,  938,
      923,  682,  930,  904,  685,  688,  689,  694,  921,  910,
      907,  910,  691,  695,  907,  889,  874,  709,  712,  715,
      185,  886,  876,  718,  723,  728,  873,  872,  861,  878,
      870, 1821,  734, 1821,  737,  853,  870,  865,  853,  172,

      829,  832,  831,  743,  830,  174,  819,  484,  812,  740,
      777,  424,  807,  795,  813,  803,  758,  761,  785,  802,
      764,  801,  794,  185,  780,  767,  770,  778,  782,  785,
      763,  769,  754,  776,  795,  780,  806,  758,  743,  741,
      757,  746,  749, 1821,  712,  733,  810,  708,  721,  724,
      705,  690,  698,  680,  679,  659,  804,  805,  810,  816,
      822,  838,  623,  616,  601,  612,  851,  860,  589,  575,
      573,  588,  586,  583,  866,  871,  874,  553,  545,  541,
      540,  539, 1821,  877, 1821,  518,  517,  524,  516,  490,
      507, 1821,  496,  494,  481,  498,  463,  461,  459,  452,

      446,  456,  872,  873,  877,  878,  883,  888,  431,  422,
      431,  430,  921,  410,  405,  408,  401,  371,  387,  927,
      930,  933,  362, 1821,  358,  353, 1821,  348,  936,  355,
      340,  942,  331,  953,  332,  957,  960,  316,  324,  302,
      310,  278,  964,  969,  971,  975,  976,  979,  274, 1000,
      270,  274, 1004,  266, 1015,  274,  271, 1022, 1030, 1033,
     1037, 1821,  252,  261,  252, 1040,  276, 1043,  246, 1051,
     1056,  273, 1062,  251, 1067, 1071, 1075, 1078, 1082,  237,
      245,  227,  239, 1092, 1096, 1090, 1101, 1107, 1112, 1132,
     1127, 1136, 1147,  210,  217, 1153, 1156,  205, 1159, 1162,

      201, 1168, 1174, 1177, 1183,  198, 1189, 1821, 1821, 1192,
     1195, 1200,  224, 1204, 1821, 1211, 1821, 1217, 1220, 1223,
     1235,  192,  189,  196,  200, 1238, 1241, 1244, 1249, 1250,
     1255, 1278, 1271, 1274, 1281,  176, 1295, 1298, 1301, 1304,
     1310, 1316, 1319, 1325, 1821, 1331,  204, 1334, 1337, 1342,
     1821, 1347, 1821, 1352, 1355,  188,  153,  138,  133, 1358,
     1367, 1361, 1370, 1376, 1381, 1377, 1396, 1399, 1402, 1407,
     1414, 1422, 1425, 1428, 1821, 1431, 1821, 1437,  129,  116,
      110,   93, 1440, 1434, 1435, 1443, 1107, 1450, 1458, 1461,
     1465, 1471,   71,   68,   55,   40, 1466, 1467, 1470, 1478,

     1490,   33,   21, 1503, 1507, 1506, 1510, 1531, 1546,    9,
     1561, 1564, 1567, 1578, 1581, 1513, 1588, 1593, 1608, 1611,
     1614, 1628, 1635, 1493, 1642, 1534, 1649, 1654, 1669, 1672,
     1679, 1686, 1689, 1692, 1695, 1698, 1710, 1713, 1716, 1821,
     1720, 1724, 1728, 1732, 1736, 1739, 1743, 1747
    } ;

static yyconst flex_int16_t yy_def[749] =
    {   0,
      741,  741,  742,  742,  743,  743,  744,  744,  745,  745,
      740,  740,  740,  746,  740,  746,  740,  746,  740,  746,
      740,  740,  746,  747,  740,  748,  740,  740,  740,  740,
      740,  740,   13,  740,  740,  740,  740,  740,  740,  740,
      740,  746,  746,   20,   20,   20,   20,   20,  740,  740,
      740,   20,   20,  740,   20,   20,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
       20,  747,  748,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,   20,   20,   20,
       20,   20,   20,  740,  740,  740,  740,   20,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,   20,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
       20,  746,   20,   20,   20,   20,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,   20,  746,  746,   20,   20,

      746,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      746,  746,  746,  746,  746,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  746,  746,  746,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  746,  746,  746,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  746,
      746,   20,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,   20,   20,   20,   20,
       20,   20,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,   20,   20,   20,   20,   20,   20,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  746,  746,   20,   20,   20,   20,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  746,  746,  746,  746,  746,  746,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  746,  746,  746,
      746,  746,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  746,  746,  746,  746,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  746,  746,  746,   20,  740,  740,  740,
      740,  740,  740,  740,  740,  740,   20,   20,   20,   20,

      740,  740,  740,  740,  740,   20,   20,  746,  746,  740,
      740,  740,  740,  740,  740,  746,  746,  746,  746,  740,
      740,  740,  740,  740,  740,  740,  746,  746,  740,  740,
      740,  740,  740,  740,  746,  740,  740,  740,  740,    0,
      740,  740,  740,  740,  740,  740,  740,  740
    } ;

static yyconst flex_int16_t yy_nxt[1874] =
    {   0,
       12,   13,   14,   14,   12,   15,  740,   15,   12,   17,
       18,   19,   20,   21,   12,   22,   12,   25,   25,   25,
       25,  740,   23,   12,   13,   14,   14,   12,   15,   31,
       15,   12,   17,   18,   19,   20,   21,   12,   22,   12,
       28,   28,   31,   32,   43,   23,   52,   29,   29,   49,
      740,   50,   84,   43,  720,   52,   32,   33,   33,   33,
      740,   51,  740,  740,  740,   94,  711,   34,  740,   35,
       85,   36,   95,  740,   52,  740,  117,  740,  740,  710,
      740,   53,  740,   97,   97,  705,   95,  147,   37,  118,
       71,  119,  120,   38,  181,   53,  740,   39,   40,  182,

      704,  703,   41,   33,   42,   42,  740,   43,  740,   43,
      740,  398,  702,   34,  399,   35,   43,   36,   43,   43,
       43,   43,  122,   49,  133,   50,  696,   43,   43,   94,
       88,  123,   95,  123,   44,  124,   95,  124,   90,   45,
       89,   43,   43,   46,   47,   43,   95,   43,   48,  740,
       95,  695,  217,   43,   43,   43,   91,  218,   55,  740,
       56,  740,   43,  740,  694,   92,  693,   53,   43,   43,
      156,   43,  682,   97,   97,   43,   43,   98,   43,  127,
      681,   53,   57,  157,   43,  158,  159,  161,  405,   58,
      680,  399,   43,   93,   59,  442,  162,  449,   43,  443,

      163,  450,   43,  422,   43,   43,  423,   43,  473,   60,
       61,   43,  474,   62,   43,   63,   64,  679,   65,  675,
       66,  667,   67,   68,   69,   43,   70,   58,   43,   43,
      659,   43,   43,  658,   98,  657,  656,  141,   43,  651,
       43,   43,   43,  645,  142,  641,  639,   60,   61,   43,
      637,   62,   43,   76,   77,   43,   78,  636,   66,  143,
       79,   80,   81,   43,   70,   33,   42,   42,  625,   43,
      144,   43,   43,  624,   43,   34,  623,   35,   43,   36,
       43,   43,   43,  622,  618,  190,  190,  190,  615,   43,
      611,  609,   43,  608,  607,   43,   44,  145,  191,  606,

       43,   45,   43,   43,  602,   46,   47,  601,  598,   43,
       48,  100,  101,  146,  595,  102,  594,  103,  104,  591,
      105,  196,  106,   43,  107,  108,  109,  584,  110,  190,
      197,  197,  287,  287,  287,   43,   43,   43,   43,  740,
      740,  740,  191,  740,   43,   43,   43,  583,   43,  582,
      740,   43,  740,   43,  740,   43,  199,  581,  198,   43,
       43,  580,  190,  190,  190,  576,  243,  243,  243,  200,
      244,  574,  244,  570,  201,  191,  245,  245,  245,  249,
      249,  249,   43,  313,   43,  190,  197,  197,  569,  246,
      565,   43,  250,  564,   43,  740,   43,  740,  191,  740,

      245,  252,  252,   43,  563,   43,   43,  562,   43,  558,
      740,  557,  740,  246,  740,   43,  251,  253,  249,  255,
      255,  256,  256,  256,  264,  264,  264,  254,  740,   43,
      740,  250,  740,  556,   43,  257,   43,  555,  265,  276,
      276,  276,  554,   43,  293,  293,  293,  303,  303,  303,
      305,  305,  305,  277,  294,  553,  266,  462,  295,  552,
      551,  295,  243,  243,  243,  258,  244,  550,  244,  245,
      245,  245,  306,  306,  306,  278,  307,  549,  307,  249,
      249,  249,  246,  310,  310,  310,  740,  311,  542,  311,
      541,  540,  250,  245,  252,  252,  740,  539,  740,  740,

      740,  452,  538,  740,  537,  740,  246,  740,  453,  740,
      454,  740,  455,  740,  249,  255,  255,  256,  256,  256,
      536,  535,  312,  534,  740,  533,  740,  250,  740,  532,
      531,  257,  315,  315,  315,  264,  264,  264,  322,  322,
      322,  325,  325,  325,  314,  332,  332,  332,  530,  265,
      276,  276,  276,  529,  528,  326,  335,  335,  335,  333,
      341,  341,  341,  527,  277,  287,  287,  287,  526,  525,
      342,  293,  293,  293,  343,  352,  352,  352,  357,  357,
      357,  294,  303,  303,  303,  295,  524,  353,  305,  305,
      305,  523,  343,  306,  306,  306,  295,  307,  522,  307,

      362,  362,  362,  310,  310,  310,  740,  311,  519,  311,
      365,  365,  365,  740,  740,  518,  740,  517,  740,  516,
      740,  515,  514,  740,  740,  740,  740,  740,  740,  315,
      315,  315,  373,  373,  373,  512,  367,  322,  322,  322,
      325,  325,  325,  378,  378,  378,  374,  511,  366,  510,
      368,  379,  379,  379,  326,  332,  332,  332,  385,  385,
      385,  335,  335,  335,  509,  380,  341,  341,  341,  333,
      393,  393,  393,  352,  352,  352,  342,  357,  357,  357,
      343,  502,  394,  362,  362,  362,  365,  365,  365,  740,
      740,  343,  373,  373,  373,  740,  417,  417,  417,  740,

      740,  740,  740,  740,  740,  740,  374,  740,  501,  740,
      378,  378,  378,  379,  379,  379,  421,  421,  421,  426,
      426,  426,  500,  411,  385,  385,  385,  380,  499,  428,
      428,  428,  498,  427,  410,  393,  393,  393,  435,  435,
      435,  740,  412,  429,  447,  447,  447,  497,  436,  496,
      495,  740,  437,  740,  494,  740,  493,  492,  437,  417,
      417,  417,  467,  467,  467,  421,  421,  421,  426,  426,
      426,  476,  476,  476,  491,  490,  468,  457,  740,  428,
      428,  428,  427,  477,  477,  477,  489,  488,  740,  487,
      740,  486,  740,  429,  458,  483,  435,  435,  435,  482,

      481,  459,  480,  460,  479,  461,  436,  484,  484,  484,
      437,  447,  447,  447,   43,   43,   43,   43,  478,  485,
       43,  475,   43,   43,   43,  437,   43,  472,   43,   43,
      471,  470,   43,  469,   43,   43,  466,   43,   43,  465,
      505,   43,  464,   43,  463,  456,  503,  504,   43,   43,
       43,  507,  467,  467,  467,   43,  451,   43,  506,  448,
      508,  513,  513,  513,  446,  445,  468,  520,  520,  520,
      444,   43,  476,  476,  476,  477,  477,  477,  484,  484,
      484,  521,   43,   43,   43,   43,  441,   43,   43,   43,
       43,   43,   43,   43,  440,   43,   43,   43,   43,  439,

       43,  438,   43,  434,  433,   43,   43,   43,  432,  431,
       43,   43,  430,  543,  544,  545,   43,  546,  425,  424,
      548,   43,  513,  513,  513,  420,  419,  547,  520,  520,
      520,  559,  559,  559,  560,  560,  560,  566,  566,  566,
      418,  416,  521,  571,  571,  571,  415,  567,  561,  414,
      413,  568,  409,  572,  575,  575,  575,  573,  577,  577,
      577,  578,  578,  578,  408,  578,  585,  585,  568,  407,
      740,  406,  573,  404,  579,  740,  403,  740,  579,  740,
      740,   43,  740,   43,  740,   43,   43,   43,   43,   43,
       43,   43,  402,  401,   43,   43,  400,  397,   43,  396,

      395,  592,  592,  592,  587,  596,  596,  596,   43,   43,
      392,  391,   43,  589,  586,  593,  599,  599,  599,  597,
      390,  389,  588,  603,  603,  603,  388,  387,  590,  386,
      600,  559,  559,  559,  560,  560,  560,  604,  605,  605,
      605,  566,  566,  566,  610,  610,  610,  384,  561,  383,
      382,  567,  612,  612,  612,  568,  381,  571,  571,  571,
      377,  376,  613,  616,  616,  616,  614,  572,  575,  575,
      575,  573,  619,  619,  619,  617,  577,  577,  577,  578,
      578,  578,  568,  620,  620,  620,  614,  621,  375,  621,
      573,  740,  579,  626,  626,  626,  372,  578,  585,  585,

      371,  740,  740,  740,  370,  740,  627,  740,  740,  740,
      579,  740,  740,  740,  740,  369,  740,   43,  740,   43,
      740,  364,  740,  740,  363,  740,   43,  740,  633,  633,
      633,  361,  629,  626,  632,  632,  628,  592,  592,  592,
      700,  631,  634,  740,  360,  740,  627,  740,  635,  635,
      635,  593,  359,  630,  596,  596,  596,  638,  638,  638,
      599,  599,  599,  640,  640,  640,  358,  356,  597,  642,
      642,  642,  355,  354,  600,  603,  603,  603,  644,  644,
      644,  351,  350,  643,  605,  605,  605,  349,  348,  604,
      646,  646,  646,  610,  610,  610,  649,  649,  649,  347,

      647,  612,  612,  612,  648,  652,  652,  652,  346,  345,
      650,  613,  616,  616,  616,  614,  344,  653,  654,  654,
      654,  619,  619,  619,  620,  620,  620,  340,  621,  339,
      621,  338,  648,  337,  336,  614,  655,  655,  655,  626,
      626,  626,  660,  660,  660,  740,  661,  334,  661,  331,
      740,  740,  627,  330,  329,  740,  740,  740,  328,  740,
      740,  740,  740,  740,  740,  740,  740,  327,  740,  324,
      740,  323,  633,  633,  633,  666,  666,  666,  321,  626,
      632,  632,  635,  635,  635,  665,  634,  664,  662,  740,
      320,  740,  627,  740,  319,  663,  668,  668,  668,  638,

      638,  638,  670,  670,  670,  640,  640,  640,  318,  317,
      669,  672,  672,  672,  316,  309,  671,  642,  642,  642,
      674,  674,  674,  308,  304,  673,  644,  644,  644,  302,
      301,  643,  646,  646,  646,  676,  676,  676,  649,  649,
      649,  300,  647,  678,  678,  678,  648,  677,  652,  652,
      652,  299,  650,  654,  654,  654,  655,  655,  655,  660,
      660,  660,  740,  661,  298,  661,  297,  648,  683,  683,
      683,  740,  740,  296,  740,  292,  740,  740,  666,  666,
      666,  740,  740,  740,  291,  740,  290,  740,  289,  740,
      684,  740,  740,  288,  740,  286,  740,  688,  688,  688,

      668,  668,  668,  690,  690,  690,  285,  685,  670,  670,
      670,  689,  284,  283,  669,  691,  691,  691,  686,  282,
      687,  281,  671,  672,  672,  672,  692,  692,  692,  674,
      674,  674,  676,  676,  676,  740,  740,  673,  678,  678,
      678,  683,  683,  683,  740,  740,  740,  740,  740,  740,
      740,  688,  688,  688,  740,  280,  740,  279,  740,  701,
      701,  701,  690,  690,  690,  689,  691,  691,  691,  275,
      274,  697,  692,  692,  692,  273,   43,   43,   43,   43,
       43,  272,   43,  698,  699,   43,   43,  271,   43,   43,
       43,  701,  701,  701,  733,  733,  733,   43,  270,   43,

      707,  269,  268,   43,  712,  712,  712,  706,  714,  714,
      714,   43,  267,  263,  740,  708,   43,  713,   43,  262,
       43,  715,   43,  709,  740,   43,  740,  261,  740,   43,
      260,  259,  712,  718,  718,  734,  734,  734,  248,   43,
      247,  242,  740,   43,  740,  713,  740,  714,  719,  719,
      241,  240,  716,  239,  238,  717,  237,  740,  727,  740,
      715,  740,  721,  721,  721,  712,  712,  712,  723,  723,
      723,  236,  724,  235,  724,  722,  234,  233,  713,  714,
      714,  714,  725,  725,  725,  232,  726,  231,  726,  721,
      728,  728,  715,  230,  712,  718,  718,  229,  228,  740,

      227,  740,  722,  740,  740,  226,  740,  713,  740,  714,
      719,  719,  729,  729,  729,  721,  721,  721,  225,  740,
      224,  740,  715,  740,  223,  730,  222,  221,  722,  731,
      731,  731,  220,  732,  219,  732,  723,  723,  723,  216,
      724,  215,  724,  725,  725,  725,  214,  726,  213,  726,
      729,  735,  735,  212,  211,  721,  728,  728,  210,  209,
      740,  208,  740,  730,  740,  740,  207,  740,  722,  740,
      729,  729,  729,  736,  736,  736,  206,  737,  205,  737,
      731,  731,  731,  730,  732,  204,  732,  738,  738,  738,
      733,  733,  733,  734,  734,  734,  729,  735,  735,  736,

      736,  736,  203,  737,  202,  737,  740,  147,  740,  730,
      740,  739,  739,  739,  738,  738,  738,  739,  739,  739,
       16,   16,   16,   16,   24,   24,   24,   24,   26,   26,
       26,   26,   27,   27,   27,   27,   30,   30,   30,   30,
       43,  195,   43,   72,   72,  194,   72,   73,   73,   73,
      193,  192,  189,  188,  187,  186,  185,  184,  183,  180,
      179,  178,  177,  176,  175,  174,  173,  172,  171,  170,
      169,  168,  167,  166,  165,  164,  160,  155,  154,  153,
      152,  151,  150,  149,  147,  148,  140,  139,  138,  137,
      136,  135,  134,  132,  131,  130,  129,  128,  126,  125,

      121,  116,  115,  114,  113,  112,  111,   99,   96,   87,
       86,   83,   82,   54,   75,   74,   54,  740,   25,   25,
       11,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740
    } ;

static yyconst flex_int16_t yy_chk[1874] =
    {   0,
        1,    1,    1,    1,    1,    1,    0,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    3,
        4,    0,    1,    2,    2,    2,    2,    2,    2,    9,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        7,    8,   10,    9,   52,    2,   52,    7,    8,   17,
       16,   17,   39,   55,  710,   55,   10,   13,   13,   13,
       16,   17,   16,   18,   16,   49,  703,   13,   23,   13,
       39,   13,   49,   18,   18,   18,   66,   18,   23,  702,
       23,   18,   23,   95,   95,  696,   49,   95,   13,   66,
       23,   66,   66,   13,  126,   18,   43,   13,   13,  126,

      695,  694,   13,   14,   14,   14,   43,   44,   43,   44,
       43,  347,  693,   14,  347,   14,   44,   14,   45,   46,
       45,   46,   68,   50,   80,   50,  682,   45,   46,   94,
       44,   68,   50,   80,   14,   68,   94,   80,   46,   14,
       45,   45,   46,   14,   14,   47,   50,   47,   14,   20,
       94,  681,  165,   48,   47,   48,   46,  165,   20,   20,
       20,   20,   48,   20,  680,   47,  679,   20,   47,   71,
      106,   71,  659,   53,   53,   53,   48,   53,   71,   71,
      658,   20,   21,  106,   53,  106,  106,  108,  359,   21,
      657,  359,   71,   48,   21,  400,  108,  406,   53,  400,

      108,  406,   88,  381,   88,   89,  381,   89,  424,   21,
       21,   88,  424,   21,   89,   21,   21,  656,   21,  647,
       21,  636,   21,   21,   21,   88,   21,   35,   89,   90,
      625,   90,   98,  624,   98,  623,  622,   88,   90,  613,
       91,   98,   91,  606,   89,  601,  598,   35,   35,   91,
      595,   35,   90,   35,   35,   98,   35,  594,   35,   90,
       35,   35,   35,   91,   35,   42,   42,   42,  583,   92,
       91,   92,  127,  582,  127,   42,  581,   42,   92,   42,
       93,  127,   93,  580,  574,  136,  136,  136,  572,   93,
      569,  567,   92,  565,  564,  127,   42,   92,  136,  563,

      141,   42,  141,   93,  557,   42,   42,  556,  554,  141,
       42,   58,   58,   93,  552,   58,  551,   58,   58,  549,
       58,  141,   58,  141,   58,   58,   58,  542,   58,  142,
      142,  142,  227,  227,  227,  143,  144,  143,  144,  142,
      253,  142,  142,  142,  143,  144,  145,  541,  145,  540,
      253,  146,  253,  146,  253,  145,  144,  539,  143,  144,
      146,  538,  190,  190,  190,  535,  191,  191,  191,  145,
      191,  533,  191,  531,  146,  190,  192,  192,  192,  195,
      195,  195,  196,  253,  196,  197,  197,  197,  530,  192,
      528,  196,  195,  526,  199,  197,  199,  197,  197,  197,

      198,  198,  198,  199,  525,  196,  200,  523,  200,  519,
      198,  518,  198,  198,  198,  200,  196,  199,  201,  201,
      201,  202,  202,  202,  208,  208,  208,  200,  201,  200,
      201,  201,  201,  517,  412,  202,  412,  516,  208,  218,
      218,  218,  515,  412,  233,  233,  233,  241,  241,  241,
      244,  244,  244,  218,  233,  514,  208,  412,  233,  512,
      511,  241,  243,  243,  243,  202,  243,  510,  243,  245,
      245,  245,  246,  246,  246,  218,  246,  509,  246,  249,
      249,  249,  245,  250,  250,  250,  251,  250,  502,  250,
      501,  500,  249,  252,  252,  252,  251,  499,  251,  254,

      251,  408,  498,  252,  497,  252,  252,  252,  408,  254,
      408,  254,  408,  254,  255,  255,  255,  256,  256,  256,
      496,  495,  251,  494,  255,  493,  255,  255,  255,  491,
      490,  256,  257,  257,  257,  264,  264,  264,  265,  265,
      265,  268,  268,  268,  254,  274,  274,  274,  489,  264,
      276,  276,  276,  488,  487,  268,  277,  277,  277,  274,
      283,  283,  283,  486,  276,  287,  287,  287,  482,  481,
      283,  293,  293,  293,  283,  295,  295,  295,  299,  299,
      299,  293,  303,  303,  303,  293,  480,  295,  305,  305,
      305,  479,  299,  306,  306,  306,  303,  306,  478,  306,

      307,  307,  307,  310,  310,  310,  312,  310,  474,  310,
      311,  311,  311,  313,  314,  473,  312,  472,  312,  471,
      312,  470,  469,  313,  314,  313,  314,  313,  314,  315,
      315,  315,  320,  320,  320,  466,  313,  322,  322,  322,
      325,  325,  325,  326,  326,  326,  320,  465,  312,  464,
      314,  327,  327,  327,  325,  332,  332,  332,  333,  333,
      333,  335,  335,  335,  463,  327,  341,  341,  341,  332,
      343,  343,  343,  352,  352,  352,  341,  357,  357,  357,
      341,  456,  343,  362,  362,  362,  365,  365,  365,  366,
      367,  357,  373,  373,  373,  368,  374,  374,  374,  366,

      367,  366,  367,  366,  367,  368,  373,  368,  455,  368,
      378,  378,  378,  379,  379,  379,  380,  380,  380,  384,
      384,  384,  454,  367,  385,  385,  385,  379,  453,  386,
      386,  386,  452,  384,  366,  393,  393,  393,  395,  395,
      395,  410,  368,  386,  404,  404,  404,  451,  395,  450,
      449,  410,  395,  410,  448,  410,  446,  445,  404,  417,
      417,  417,  418,  418,  418,  421,  421,  421,  426,  426,
      426,  427,  427,  427,  443,  442,  418,  410,  411,  428,
      428,  428,  426,  429,  429,  429,  441,  440,  411,  439,
      411,  438,  411,  428,  411,  436,  435,  435,  435,  434,

      433,  411,  432,  411,  431,  411,  435,  437,  437,  437,
      435,  447,  447,  447,  457,  458,  457,  458,  430,  437,
      459,  425,  459,  457,  458,  447,  460,  423,  460,  459,
      422,  420,  461,  419,  461,  460,  416,  457,  458,  415,
      459,  461,  414,  459,  413,  409,  457,  458,  462,  460,
      462,  461,  467,  467,  467,  461,  407,  462,  460,  405,
      462,  468,  468,  468,  403,  402,  467,  475,  475,  475,
      401,  462,  476,  476,  476,  477,  477,  477,  484,  484,
      484,  475,  503,  504,  503,  504,  399,  505,  506,  505,
      506,  503,  504,  507,  398,  507,  505,  506,  508,  397,

      508,  396,  507,  391,  390,  503,  504,  508,  389,  388,
      505,  506,  387,  503,  504,  505,  507,  506,  383,  382,
      508,  508,  513,  513,  513,  377,  376,  507,  520,  520,
      520,  521,  521,  521,  522,  522,  522,  529,  529,  529,
      375,  372,  520,  532,  532,  532,  371,  529,  522,  370,
      369,  529,  364,  532,  534,  534,  534,  532,  536,  536,
      536,  537,  537,  537,  363,  543,  543,  543,  534,  361,
      544,  360,  536,  358,  537,  543,  356,  543,  543,  543,
      544,  545,  544,  545,  544,  546,  547,  546,  547,  548,
      545,  548,  355,  349,  546,  547,  348,  346,  548,  345,

      344,  550,  550,  550,  545,  553,  553,  553,  546,  547,
      342,  340,  548,  547,  544,  550,  555,  555,  555,  553,
      339,  338,  546,  558,  558,  558,  337,  336,  548,  334,
      555,  559,  559,  559,  560,  560,  560,  558,  561,  561,
      561,  566,  566,  566,  568,  568,  568,  331,  560,  330,
      329,  566,  570,  570,  570,  566,  328,  571,  571,  571,
      324,  323,  570,  573,  573,  573,  570,  571,  575,  575,
      575,  571,  576,  576,  576,  573,  577,  577,  577,  578,
      578,  578,  575,  579,  579,  579,  576,  579,  321,  579,
      577,  586,  578,  584,  584,  584,  319,  585,  585,  585,

      318,  586,  587,  586,  317,  586,  584,  585,  588,  585,
      585,  585,  587,  589,  587,  316,  587,  687,  588,  687,
      588,  309,  588,  589,  308,  589,  687,  589,  591,  591,
      591,  304,  587,  590,  590,  590,  586,  592,  592,  592,
      687,  589,  591,  590,  302,  590,  590,  590,  593,  593,
      593,  592,  301,  588,  596,  596,  596,  597,  597,  597,
      599,  599,  599,  600,  600,  600,  300,  298,  596,  602,
      602,  602,  297,  296,  599,  603,  603,  603,  604,  604,
      604,  294,  292,  602,  605,  605,  605,  291,  290,  603,
      607,  607,  607,  610,  610,  610,  611,  611,  611,  289,

      607,  612,  612,  612,  607,  614,  614,  614,  286,  285,
      611,  612,  616,  616,  616,  612,  284,  614,  618,  618,
      618,  619,  619,  619,  620,  620,  620,  282,  620,  281,
      620,  280,  618,  279,  278,  619,  621,  621,  621,  626,
      626,  626,  627,  627,  627,  628,  627,  275,  627,  273,
      629,  630,  626,  272,  271,  628,  631,  628,  270,  628,
      629,  630,  629,  630,  629,  630,  631,  269,  631,  267,
      631,  266,  633,  633,  633,  634,  634,  634,  263,  632,
      632,  632,  635,  635,  635,  631,  633,  630,  628,  632,
      262,  632,  632,  632,  261,  629,  637,  637,  637,  638,

      638,  638,  639,  639,  639,  640,  640,  640,  260,  259,
      637,  641,  641,  641,  258,  248,  639,  642,  642,  642,
      643,  643,  643,  247,  242,  641,  644,  644,  644,  240,
      239,  642,  646,  646,  646,  648,  648,  648,  649,  649,
      649,  238,  646,  650,  650,  650,  646,  648,  652,  652,
      652,  237,  649,  654,  654,  654,  655,  655,  655,  660,
      660,  660,  662,  660,  236,  660,  235,  654,  661,  661,
      661,  663,  662,  234,  662,  232,  662,  664,  666,  666,
      666,  663,  665,  663,  231,  663,  230,  664,  229,  664,
      662,  664,  665,  228,  665,  226,  665,  667,  667,  667,

      668,  668,  668,  669,  669,  669,  225,  663,  670,  670,
      670,  667,  224,  223,  668,  671,  671,  671,  664,  222,
      665,  221,  670,  672,  672,  672,  673,  673,  673,  674,
      674,  674,  676,  676,  676,  684,  685,  672,  678,  678,
      678,  683,  683,  683,  686,  684,  685,  684,  685,  684,
      685,  688,  688,  688,  686,  220,  686,  219,  686,  689,
      689,  689,  690,  690,  690,  688,  691,  691,  691,  217,
      216,  684,  692,  692,  692,  215,  697,  698,  697,  698,
      699,  214,  699,  685,  686,  697,  698,  213,  700,  699,
      700,  701,  701,  701,  724,  724,  724,  700,  212,  697,

      698,  211,  210,  699,  704,  704,  704,  697,  705,  705,
      705,  700,  209,  207,  716,  699,  706,  704,  706,  206,
      707,  705,  707,  700,  716,  706,  716,  205,  716,  707,
      204,  203,  708,  708,  708,  726,  726,  726,  194,  706,
      193,  189,  708,  707,  708,  708,  708,  709,  709,  709,
      188,  187,  706,  186,  185,  707,  184,  709,  716,  709,
      709,  709,  711,  711,  711,  712,  712,  712,  713,  713,
      713,  183,  713,  182,  713,  711,  181,  180,  712,  714,
      714,  714,  715,  715,  715,  179,  715,  178,  715,  717,
      717,  717,  714,  177,  718,  718,  718,  176,  175,  717,

      174,  717,  717,  717,  718,  173,  718,  718,  718,  719,
      719,  719,  720,  720,  720,  721,  721,  721,  172,  719,
      171,  719,  719,  719,  170,  720,  169,  168,  721,  722,
      722,  722,  167,  722,  166,  722,  723,  723,  723,  164,
      723,  163,  723,  725,  725,  725,  162,  725,  161,  725,
      727,  727,  727,  160,  159,  728,  728,  728,  158,  157,
      727,  156,  727,  727,  727,  728,  155,  728,  728,  728,
      729,  729,  729,  730,  730,  730,  154,  730,  153,  730,
      731,  731,  731,  729,  731,  152,  731,  732,  732,  732,
      733,  733,  733,  734,  734,  734,  735,  735,  735,  736,

      736,  736,  151,  736,  150,  736,  735,  147,  735,  735,
      735,  737,  737,  737,  738,  738,  738,  739,  739,  739,
      741,  741,  741,  741,  742,  742,  742,  742,  743,  743,
      743,  743,  744,  744,  744,  744,  745,  745,  745,  745,
      746,  140,  746,  747,  747,  139,  747,  748,  748,  748,
      138,  137,  135,  134,  133,  132,  131,  130,  129,  125,
      124,  123,  122,  121,  120,  119,  118,  117,  116,  115,
      114,  113,  112,  111,  110,  109,  107,  105,  104,  103,
      102,  101,  100,   99,   97,   96,   87,   86,   85,   84,
       83,   82,   81,   79,   78,   77,   76,   74,   70,   69,

       67,   65,   64,   63,   62,   61,   60,   57,   51,   41,
       40,   38,   37,   34,   32,   29,   19,   11,    6,    5,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[86] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 
    1, 0, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
/** @file parseosrl.l
 * 
 * @author  Robert Fourer,  Jun Ma, Kipp Martin, 
 * @version 1.0, 10/05/2005
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005, Robert Fourer, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"

#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#include <iostream>



#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif




#include <sstream>  
#include "OSErrorClass.h"
#include "OSrLParserData.h"

//#define PARSERDEBUG
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif

#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSParseosrl.tab.hpp"


     




#line 88 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 1194 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

#define INITIAL 0
#define attributetext 1
#define osrlattributetext 2
#define comment 3
#define xmldeclaration 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 98 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"



#line 1437 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 741 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1821 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 101 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{printf("HERE IS WHITESPACE\n");}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 104 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->charval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 105 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 106 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi( yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 107 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << std::endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << std::endl;
		outStr << "See line number: " << yylineno << std::endl;  
		throw ErrorClass( outStr.str());
	} 
return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 119 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 122 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 123 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 124 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(RESULTHEADERSTART);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 125 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(RESULTHEADEREND);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 126 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 127 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICEURISTART);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 128 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 129 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 130 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICENAMESTART);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 131 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 132 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 133 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(INSTANCENAMESTART);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 134 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 135 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 136 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(JOBIDSTART);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 137 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 139 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 140 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(TIMESTART);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 141 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 143 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 144 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(MESSAGESTART);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 145 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 147 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 148 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 150 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(RESULTDATASTART);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 151 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(RESULTDATAEND);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 153 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 154 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 156 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 157 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 159 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 160 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 162 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 163 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 165 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 166 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 168 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 169 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 170 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 171 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 173 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 174 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 175 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 176 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 178 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 179 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 180 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 181 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 184 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 185 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 187 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 188 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 189 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 190 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 191 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVEIDXATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 192 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 193 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN attributetext; return(TYPEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 194 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN attributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 195 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN attributetext; return(NAMEATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 197 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTARTANDEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 198 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTARTANDEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 199 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTARTANDEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 200 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTARTANDEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 201 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTARTANDEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 202 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTARTANDEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 203 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(RESULTDATASTARTANDEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 208 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;  yylval->charval = strdup( yytext);   yyextra->errorText = yylval->charval;    /*yylval->charval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 210 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 75:
#line 212 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 212 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 213 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 215 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 79:
#line 217 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 217 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 219 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 225 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0;  /*yylval->charval = strdup(yytext);*/ yylval->charval = strdup( yytext);  
							  return(ATTRIBUTETEXT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 228 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->charval = strdup(yytext);*/  yylval->charval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 231 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
        outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 246 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
ECHO;
	YY_BREAK
#line 2052 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(attributetext):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 741 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 741 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 740);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 246 "/Users/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"





