#line 2 "OSParseosrl.cpp"

#line 4 "OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osrllex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 234
#define YY_END_OF_BUFFER 235
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1863] =
    {   0,
        1,    1,  232,  232,  230,  230,  231,  231,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  235,  233,
        1,    2,  220,    2,  220,    6,  220,    5,  233,    4,
      220,  232,  234,  230,  231,  221,  223,  224,  223,  227,
      228,  227,    1,  220,  220,    6,  220,    5,    0,    4,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,    3,    6,    6,  220,    7,    5,    0,    0,  226,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    4,  220,
      232,  230,  231,  221,    0,  229,  220,  220,  220,  220,

      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
        6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  108,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    6,  225,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  222,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   98,    0,    0,    0,    0,    0,    0,
        0,  118,    0,    0,    0,   72,    0,    0,    0,  126,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  190,  220,  220,
      220,   28,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  109,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   72,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  166,    0,    0,    0,    0,    0,    0,    0,
      220,  220,   28,  220,   29,  220,   30,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,    0,    0,
        0,    0,    0,    0,    0,    0,   99,    0,    0,    0,
        0,  109,    0,    0,    0,    0,    0,  119,    0,    0,

        0,    0,   73,    0,    0,    0,    0,    0,  127,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  191,    0,    0,    0,    0,    0,    0,    0,    0,
       92,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  197,  122,    0,    0,    0,    0,
      201,    0,    0,   62,   61,  132,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  220,  220,   29,
       30,  220,   43,   44,  220,  220,  220,  220,   47,   48,

      220,   51,   52,  220,  220,  220,    0,    0,    0,    0,
        0,    0,    0,    0,   99,    0,    0,    0,    0,    0,
        0,    0,    0,  119,    0,    0,    0,  198,   73,    0,
        0,    0,    0,  202,  127,    0,    0,    0,   63,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  167,    0,    0,    0,    0,    0,    0,    0,
        0,  191,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      120,  199,  197,    0,    0,    0,  203,  201,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  156,

        0,    0,    0,   68,    0,    0,    0,    0,    0,    0,
        0,    0,  186,  194,    0,  220,  220,   41,   42,  220,
      220,   31,  220,   45,   46,   49,   50,  220,   55,   56,
      220,    0,    0,    0,    0,    0,    0,    0,   93,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      198,    0,  123,    0,    0,  202,    0,    0,   63,    0,
      133,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  167,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   78,   80,    0,
        0,    0,    0,    0,    0,    0,    0,  110,    0,    0,

       66,    0,  199,    0,    0,  124,  203,    0,    0,    0,
        0,    0,    0,    0,   70,    0,    0,    0,    0,    0,
      205,    0,    0,    0,   68,    0,    0,    0,    0,    0,
      176,    0,    0,    0,    0,    0,  220,  220,  220,   31,
      220,   53,   54,  220,    0,    0,    0,    0,    0,    0,
       93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  121,  123,    0,    0,    0,    0,  133,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  206,    0,
      157,    0,    0,    0,    0,   69,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  187,    0,    0,  195,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   66,    0,    0,    0,    0,    0,  217,
        0,    0,    0,    0,    0,    0,    0,   70,    0,    0,
      150,    0,    0,  207,  205,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,    0,    0,   79,    0,   81,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  111,    0,    0,
        0,   67,    0,    0,  121,    0,  218,    0,  125,    0,
        0,    0,    0,    0,    0,    0,   71,    0,    0,    0,

        0,    0,  206,  157,    0,    0,    0,   69,    0,    0,
        0,    0,    0,    0,  177,    0,    0,    0,    0,  187,
        0,  195,    0,    0,    0,   96,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  219,  217,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  207,    0,    0,  160,    0,    0,
        0,  170,    0,    0,    0,    0,    0,    0,    0,  192,
      220,   35,   36,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,    0,   79,   81,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  111,

        0,    0,   67,    0,    0,  218,  125,    0,    0,    0,
        0,    0,    0,    0,   71,    0,    0,    0,    0,  151,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      177,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  106,    0,    0,
        0,    0,    0,  219,    0,    0,  128,    0,    0,    0,
        0,    0,    0,    0,  146,    0,    0,    0,    0,  158,
      162,    0,    0,    0,    0,    0,    0,    0,  184,    0,
       33,   34,  220,  220,  220,   10,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,    0,    0,    0,

        0,    0,   97,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  151,    0,    0,    0,    0,  161,
        0,    0,    0,    0,  171,    0,    0,    0,    0,    0,
        0,    0,    0,  193,    0,    0,    0,    0,    0,   94,
      100,    0,    0,    0,  112,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  144,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      220,  220,  220,    8,  220,   10,  220,  220,   12,  220,
      220,   14,  220,  220,  220,  220,  220,  220,  220,   25,

      220,  220,  220,  220,    0,    0,    0,    0,   97,    0,
        0,    0,    0,    0,    0,    0,  107,    0,    0,    0,
        0,    0,  129,    0,    0,    0,    0,    0,    0,    0,
        0,  147,    0,    0,    0,    0,  159,  161,    0,  163,
        0,    0,  171,    0,    0,    0,    0,    0,    0,  185,
        0,  193,    0,    0,    0,    0,    0,    0,  104,    0,
        0,  209,    0,    0,  213,    0,  116,    0,  196,    0,
        0,  200,   74,  134,    0,    0,   64,    0,    0,    0,
      154,    0,    0,    0,    0,    0,    0,  180,    0,  188,
      220,   39,   40,    8,  220,  220,   12,  220,   14,  220,

      220,  220,  220,  220,  220,   25,  220,  220,  220,  220,
        0,    0,    0,    0,    0,    0,   95,    0,  101,    0,
        0,    0,  210,  107,    0,  113,    0,  214,    0,    0,
      129,    0,    0,    0,    0,    0,    0,    0,  145,  147,
        0,    0,    0,  159,  163,    0,    0,    0,    0,    0,
        0,    0,  185,    0,    0,    0,    0,    0,    0,    0,
        0,  211,  209,    0,  215,  213,    0,  114,  196,    0,
      200,    0,    0,    0,    0,    0,  152,    0,    0,    0,
        0,    0,  178,  182,   37,   38,  220,  220,  220,   13,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,

       24,  220,  220,  220,  220,    0,    0,    0,    0,    0,
        0,   95,  101,    0,    0,  105,  210,  113,  214,    0,
        0,  117,    0,   75,    0,    0,  135,    0,    0,    0,
       65,    0,  145,    0,    0,    0,  155,    0,    0,    0,
        0,    0,    0,  181,    0,    0,  189,    0,    0,    0,
        0,    0,    0,    0,  211,    0,  215,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  174,  220,
      220,   13,  220,  220,  220,  220,  220,  220,  220,  220,
      220,   24,  220,   27,  220,  220,  220,    0,    0,    0,
        0,    0,    0,    0,  105,    0,  115,  117,   75,    0,

      135,    0,    0,   65,    0,    0,    0,  153,  155,    0,
        0,    0,    0,    0,  179,  181,    0,  183,  189,   76,
        0,    0,    0,   88,    0,  102,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,   27,
      220,  220,  220,    0,    0,    0,    0,    0,    0,    0,
      115,    0,    0,    0,    0,    0,  153,    0,    0,    0,
        0,  175,  179,  183,    0,    0,    0,   90,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  204,    0,    0,
        0,  220,  220,  220,  220,  220,  220,  220,  220,  220,

      220,  220,  220,  220,  220,    0,   77,    0,    0,    0,
        0,   89,    0,    0,  103,    0,    0,    0,    0,    0,
        0,    0,    0,  175,    0,   84,    0,    0,    0,    0,
        0,    0,  140,    0,    0,  204,  164,    0,  172,  220,
      220,  220,  220,  220,  220,  220,  220,  220,   21,  220,
      220,  220,   26,  220,  220,   77,    0,    0,    0,   89,
        0,   91,  103,    0,    0,    0,    0,    0,    0,    0,
        0,   82,   86,    0,    0,    0,  216,    0,    0,  142,
      148,  168,  220,  220,  220,   15,  220,  220,  220,  220,
      220,   21,  220,  220,   26,  220,   32,  220,  220,    0,

        0,   85,    0,   91,    0,    0,    0,  141,    0,    0,
        0,  165,    0,    0,  173,    0,    0,  216,    0,  136,
      220,    9,  220,   15,  220,  220,  220,  220,  220,  220,
      220,   23,   32,  220,   59,   60,    0,   83,   85,    0,
       87,    0,    0,  141,    0,  143,    0,  149,  165,    0,
      169,  173,    0,    0,    0,  138,    9,  220,   11,  220,
      220,  220,   18,  220,  220,  220,   23,   57,   58,   83,
       87,    0,    0,  137,    0,  143,  149,  169,    0,    0,
        0,   11,  220,  220,   18,  220,  220,  220,   22,    0,
      137,    0,  139,    0,    0,    0,  220,  220,  220,  220,

       22,    0,  139,    0,    0,    0,  220,  220,  220,  220,
        0,    0,    0,    0,  220,  220,  220,  220,    0,    0,
        0,    0,  220,  220,  220,  220,    0,    0,  208,    0,
      212,  130,  220,  220,  220,  220,    0,  208,  212,  220,
      220,  220,  220,    0,  131,  220,  220,  220,   19,  220,
       20,  131,  220,  220,   17,   19,   20,  220,   16,   17,
       16,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    1,    1,    7,    1,
        1,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,    6,   27,   28,   29,   30,   31,
        6,   32,   33,   34,   35,   36,    6,    6,    6,    6,
        1,    1,    1,    1,    6,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,    6,   53,   54,   55,   56,   57,   58,   59,
       60,   61,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[62] =
    {   0,
        1,    2,    2,    1,    3,    2,    4,    2,    2,    2,
        2,    2,    2,    2,    5,    2,    6,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2
    } ;

static yyconst flex_int16_t yy_base[1876] =
    {   0,
        0,   25, 3632, 3631, 3642, 3641, 3638, 3637,    0,    0,
        0,    0, 3628, 3627,   13,   38,    3,    5, 3641, 3650,
       49, 3635,   16, 3632,   55,   98,   29,  138,  176,   17,
       56,    0, 3650,    0,    0,    0, 3650, 3650, 3629, 3650,
     3650, 3620,  232,   38,  104,  120,   39,  289,   72,   46,
       62,  109,   67,  128,   80,  110,  113,  139,  142,  147,
      148, 3650,  168,  252,  188, 3650,  171, 3627,  294, 3650,
      136, 3598,   27,   40,  119, 3589, 3592,  198, 3581, 3586,
     3589, 3592,  152, 3587,  257,   41,  127, 3590,  206,  245,
        0,    0,    0,    0, 3609, 3650,  195,  222,  241,  244,

      280,  258,  303,  263,  304,  308,  338,  339,  344,  350,
      367, 3616,  319, 3587,   93,   46,  266, 3578, 3581,  338,
     3570, 3575, 3578, 3581,  347, 3576,  355,  234,  186, 3579,
     3560,  193, 3577, 3559, 3562, 3558, 3556, 3572, 3650,   53,
     3560, 3557, 3547, 3551, 3581, 3562, 3564, 3562, 3546, 3550,
     3552, 3542, 3543, 3551, 3540, 3549, 3539,  290, 3554,  232,
     3536, 3540, 3533, 3540, 3545,  257,  388, 3650,  356,  383,
      410,  351,  392,  399,  403,  402,  406,  413,  414,  417,
      418, 3650, 3530,  409, 3547, 3529, 3532, 3528, 3526, 3542,
      324,  142, 3530, 3527, 3517, 3521, 3551, 3532, 3534, 3532,

     3516, 3520, 3522, 3512, 3513, 3521, 3510, 3519, 3509,  389,
     3524,  277, 3506, 3510, 3503, 3510, 3515,  324, 3499, 3503,
     3501, 3507,  405, 3497, 3497, 3510, 3500, 3513, 3497, 3504,
     3503, 3650, 3488, 3489, 3492,  449, 3499, 3485, 3497, 3496,
     3491, 3487, 3493, 3477, 3491, 3474,  399, 3477, 3474,  399,
     3487, 3472,  417, 3489, 3475, 3484, 3467,  350,  442,  448,
      464,  469,  473,  480,  489,  453,  483,  492,  500,  508,
      497,  503, 3466, 3470, 3468, 3474,  486,  519, 3465, 3478,
     3468,  526,  475, 3481, 3465, 3472, 3471,  532, 3456, 3457,
     3460,  537, 3467, 3453, 3465,  539, 3460, 3456, 3462, 3446,

     3460, 3443,  488, 3446, 3443,  483, 3456, 3441,  419, 3458,
     3444, 3453, 3436,  549, 3454, 3432, 3437, 3440, 3432, 3472,
      255, 3430, 3443, 3430, 3446, 3436, 3439, 3459, 3425, 3440,
     3435,  558,  555, 3454, 3424, 3436,  561, 3433, 3422,  565,
     3417, 3421, 3428, 3422, 3411, 3424, 3425, 3407, 3417, 3406,
     3407, 3418, 3425, 3407, 3408, 3404,  556, 3413, 3413, 3415,
      538,  564,  568,  584,  588,  595,  604,  611,  615,  578,
      587,  533,  621,  637,  631,  648,  654,  626, 3414, 3392,
     3397, 3400, 3392, 3432,  385,  656,  613, 3390, 3403, 3390,
     3406,  658, 3396, 3399, 3419, 3385,  665,  672, 3400, 3395,

      674,  676,  681, 3414, 3384, 3396,  683,  685,  687, 3393,
     3382,  692, 3377, 3381, 3388, 3382, 3371, 3384, 3385, 3367,
     3377, 3366, 3367, 3378,  694, 3368, 3369, 3365,  678, 3374,
      701,  705, 3374, 3376, 3364, 3370, 3369, 3372, 3371, 3394,
     3650, 3373, 3352, 3354, 3358, 3365, 3352, 3347, 3346, 3361,
     3347, 3355,  711, 3378,  714, 3650, 3355, 3350,  721, 3375,
      718, 3336, 3345,  723, 3650,  698, 3334, 3332, 3348, 3341,
     3332, 3343, 3329, 3327, 3344, 3342, 3330,  594, 3335, 3351,
     3318, 3344, 3329, 3332, 3318, 3312, 3332,  695,  649,  732,
      739,  748, 3364, 3361,  722,  742,  745,  764, 3362, 3359,

      771, 3360, 3357,  780,  787,  770, 3315, 3321, 3320, 3323,
     3322, 3345,  796, 3324,  798, 3303, 3305, 3309, 3316, 3303,
     3298, 3297, 3312,  803, 3298, 3306,  805,  807,  812,  814,
     3307, 3302,  816,  818,  821, 3289, 3298,  823,  825,  827,
     3287, 3285, 3301, 3294, 3285, 3296, 3282, 3280, 3297, 3295,
     3283,  832,  834,  664, 3288, 3304, 3271, 3297, 3282, 3285,
     3271,  836, 3265, 3285, 3289, 3268, 3267, 3281, 3263, 3298,
     3261, 3278, 3259, 3261, 3264, 3270, 3273, 3268, 3260, 3268,
     3650,  839,  843, 3295, 3264, 3263,  845,  848, 3292, 3257,
     3240, 3259, 3248, 3274, 3249, 3255, 3244,  747,  850, 3650,

     3260, 3238, 3255,  852, 3238, 3253, 3264, 3237, 3237, 3251,
     3231, 3235, 3250, 3650, 3234,  847,  851, 3650, 3650,  854,
      870,  873,  753, 3650, 3650, 3650, 3650,  876, 3276, 3273,
      865, 3246, 3225, 3224, 3238, 3220, 3255,  892,  854, 3218,
     3235, 3216, 3218, 3221, 3227, 3230, 3225, 3217, 3225,  895,
      897,  899,  901, 3222, 3221,  908, 3216, 3199,  911,  915,
      917, 3218, 3207, 3233, 3208, 3214, 3203,  840,  919,  921,
     3219, 3197, 3214,  923,  925, 3197, 3212, 3223, 3196, 3196,
     3210, 3190, 3194,  927,  932, 3194, 3186, 3650, 3650, 3192,
     3183, 3193, 3200, 3191,  105, 3180, 3178, 3650, 3178, 3195,

      939, 3190,  943, 3185,  948, 3650,  950, 3179, 3171, 3190,
     3172, 3177, 3183, 3182,  952, 3172, 3171, 3164,  959, 3202,
      954, 3173, 3161, 3162,  961, 3165, 3157, 3164, 3162, 3173,
     3650,  497, 3163, 3158, 3153, 3166,  975,  922,  978,  971,
      951, 3650, 3650,  979, 3151,  982,  999, 3157, 3148, 3158,
      977, 3165, 3156,  710, 3145, 3143, 1002, 3143, 3160, 1004,
     3155, 1015,  980, 1020, 1022, 1024, 3138, 3156, 1026, 3132,
     3131, 3128, 3127, 1028, 3067, 3065, 3058, 1031, 1033, 1041,
     1044, 3067, 3053, 3047, 1047, 1049, 3047, 3037, 3041, 3035,
     3032, 1051,  563, 3020, 3007, 1053, 1057, 2992, 1059, 1063,

     3002, 3003, 2991, 2971, 2960, 2952, 2946, 2940, 2933, 2935,
     2931, 2923, 2907, 1069, 2902, 2924, 2893, 1071, 2920, 1075,
     2870, 2860, 2832, 2822, 1023, 2838, 2806, 1081, 2807,  140,
     3650, 2772,    2, 1083, 1089,   64,  162,  169,  206,  221,
      277,  334,  366,  388,  431,  441,  466,  455,  493,  505,
     1091, 1094, 1052, 1072, 1083, 1095, 1098, 1101, 1102, 1105,
     1110, 1111,  528, 1127, 1135, 1137, 1143,  567,  571,  595,
      607,  622,  629,  637,  670,  705, 1153, 1156,  716,  709,
     1158, 1160,  725,  755, 1162, 1164, 1166, 1169, 1171,  752,
      748,  756, 1120,  795,  803, 1176, 1180,  837,  860, 1182,

      827,  834, 1185, 1187,  859,  877,  888, 1189,  901,  902,
      906,  929,  921, 1192, 1194,  933,  958,  980,  962, 1198,
      967, 1200,  984,  987, 1184, 3650, 1005, 1019, 1026, 1057,
     1065, 1054, 1060, 1070, 1073, 1095, 1097, 1100, 1204, 1208,
     1132, 1099, 1126, 1153, 1160, 1158, 1173, 1175, 1183, 1168,
     1193, 1174, 1169, 1169, 1222, 1168, 1185, 3650, 1188, 1177,
     1190, 3650, 1179, 1198, 1183, 1192, 1182, 1175, 1191, 3650,
     1235, 1234, 1234, 1228, 1229, 1245, 1234, 1238, 1239, 1242,
     1248, 1251, 1255, 1252, 1256, 1259, 1260, 1205, 1279, 1281,
     1266, 1293, 1227, 1229, 1234, 1253, 1263, 1251, 1249, 1302,

     1256, 1257, 1309, 1276, 1277, 1313, 1315, 1265, 1275, 1273,
     1267, 1282, 1284, 1292, 1324, 1279, 1304, 1285, 1329, 1331,
     1284, 1284, 1296, 1336, 1301, 1290, 1303, 1341, 1294, 1314,
     1346, 1301, 1310, 1300, 1294, 1310, 1354, 1304, 1329, 1316,
     1321, 1310, 1310, 1311, 1346, 1312, 1318, 3650, 1319, 1317,
     1317, 1324, 1325, 1373, 1329, 1337, 3650, 1328, 1325, 1336,
     1329, 1342, 1329, 1344, 3650, 1338, 1340, 1332, 1338, 3650,
     3650, 1337, 1350, 1339, 1342, 1356, 1354, 1359, 3650, 1347,
     3650, 3650, 1396, 1399, 1402, 1405, 1406, 1422, 1411, 1427,
     1416, 1417, 1430, 1431, 1460, 1434, 1437, 1345, 1372, 1361,

     1368, 1433, 1438, 1357, 1373, 1402, 1438, 1404, 1411, 1462,
     1416, 1414, 1414, 1421, 1478, 1420, 1427, 1438, 1433, 1446,
     1433, 1449, 1489, 1445, 1494, 1447, 1442, 1497, 1499, 1501,
     1505, 1456, 1469, 1509, 1515, 1460, 1464, 1481, 1479, 1484,
     1521, 1475, 1525, 1527, 1497, 1497, 1479, 1485, 1475, 3650,
     3650, 1485, 1496, 1537, 3650, 1541, 1485, 1504, 1544, 1504,
     1548, 1503, 1501, 1505, 1527, 1506, 1523, 3650, 1517, 1522,
     1509, 1510, 1518, 1535, 1520, 1547, 1530, 1532, 1534, 1531,
     1573, 1576, 1582, 1592, 1565, 1598, 1587, 1608, 1614, 1588,
     1619, 1624, 1591, 1597, 1623, 1628, 1629, 1632, 1649, 1653,

     1642, 1643, 1646, 1656, 1543, 1551, 1533, 1543, 1616, 1536,
     1672, 1685, 1581, 1592, 1690, 1694, 1651, 1696, 1698, 1581,
     1607, 1701, 1674, 1612, 1613, 1621, 1649, 1628, 1646, 1703,
     1706, 1714, 1640, 1649, 1639, 1719, 1722, 1724, 1726, 1728,
     1661, 1679, 1730, 1665, 1696, 1693, 1695, 1698, 1736, 1738,
     1699, 1742, 1701, 1718, 1701, 1698, 1729, 1696, 3650, 1752,
     1739, 1755, 1757, 1744, 1762, 1708, 3650, 1764, 1769, 1734,
     1773, 1776, 1747, 3650, 1732, 1727, 3650, 1731, 1724, 1746,
     3650, 1734, 1751, 1734, 1754, 1755, 1740, 3650, 1753, 3650,
     1793, 1792, 1792, 1799, 1788, 1789, 1809, 1815, 1818, 1792,

     1819, 1798, 1808, 1823, 1842, 1851, 1812, 1831, 1847, 1848,
     1774, 1841, 1775, 1777, 1816, 1870, 1873, 1875, 1877, 1794,
     1879, 1881, 1883, 1886, 1888, 1891, 1897, 1899, 1802, 1904,
     1906, 1908, 1910, 1817, 1839, 1913, 1844, 1915, 1917, 1920,
     1863, 1886, 1926, 1931, 1933, 1894, 1882, 1901, 1902, 1887,
     1942, 1901, 1944, 1946, 1901, 1895, 1900, 1920, 1901, 1918,
     1906, 1955, 1958, 1951, 1962, 1964, 1957, 3650, 1967, 1930,
     1972, 1921, 1944, 1922, 1923, 1943, 3650, 1942, 1927, 1946,
     1929, 1932, 3650, 3650, 3650, 3650, 1971, 1972, 1988, 1995,
     1977, 1978, 1985, 1984, 1996, 1999, 2000, 2003, 2004, 2024,

     2028, 2046, 2017, 2027, 2035, 1947, 1950, 1955, 1991, 1975,
     1998, 2035, 2051, 1996, 2053, 2055, 2064, 2069, 2071, 2073,
     2075, 2079, 2081, 2083, 2009, 2085, 2091, 2032, 2014, 2093,
     2097, 2024, 2101, 2052, 2103, 2105, 2109, 2036, 2060, 2046,
     2056, 2111, 2113, 2115, 2121, 2123, 2129, 2078, 2072, 2086,
     2077, 2073, 2079, 2080, 2134, 2099, 2139, 2101, 2094, 2097,
     2105, 2095, 2114, 2094, 2109, 2106, 2099, 2108, 3650, 2139,
     2140, 2156, 2145, 2146, 2151, 2150, 2155, 2159, 2160, 2163,
     2164, 2183, 2190, 2206, 2172, 2199, 2173, 2123, 2120, 2141,
     2131, 2131, 2139, 2144, 2215, 2223, 2225, 2229, 2231, 2153,

     2233, 2170, 2163, 2235, 2188, 2174, 2239, 2241, 2243, 2194,
     2194, 2203, 2247, 2249, 2251, 2255, 2257, 2259, 2265, 3650,
     2217, 2222, 2228, 3650, 2232, 3650, 2229, 2226, 2233, 2217,
     2221, 2220, 2232, 2233, 2277, 2230, 2227, 2232, 2269, 2270,
     2273, 2274, 2280, 2281, 2284, 2285, 2288, 2289, 2292, 2308,
     2301, 2305, 2309, 2310, 2254, 2252, 2271, 2330, 2280, 2332,
     2336, 2273, 2277, 2280, 2296, 2298, 2349, 2297, 2298, 2303,
     2354, 2356, 2358, 2360, 2323, 2325, 2327, 3650, 2313, 2320,
     2328, 2315, 2316, 2318, 2325, 2324, 2374, 2376, 2330, 2340,
     2332, 2368, 2369, 2372, 2373, 2377, 2381, 2378, 2382, 2398,

     2387, 2390, 2419, 2391, 2394, 2415, 2422, 2362, 2370, 2373,
     2435, 2438, 2440, 2442, 2444, 2372, 2374, 2394, 2402, 2402,
     2404, 2414, 2406, 2458, 2405, 3650, 2421, 2424, 2423, 2463,
     2422, 2420, 3650, 2428, 2420, 2469, 3650, 2433, 3650, 2459,
     2460, 2476, 2466, 2467, 2470, 2471, 2479, 2487, 2497, 2480,
     2490, 2518, 2524, 2535, 2540, 2506, 2445, 2528, 2460, 2521,
     2544, 2526, 2546, 2461, 2463, 2551, 2474, 2468, 2556, 2492,
     2560, 3650, 3650, 2487, 2540, 2562, 2564, 2518, 2515, 3650,
     3650, 3650, 2569, 2559, 2578, 2585, 2574, 2575, 2581, 2582,
     2586, 2602, 2591, 2607, 2612, 2623, 2628, 2634, 2650, 2639,

     2645, 2580, 2656, 2658, 2524, 2523, 2661, 2666, 2668, 2672,
     2674, 2677, 2679, 2681, 2684, 2562, 2559, 2690, 2566, 2564,
     2692, 2697, 2700, 2703, 2696, 2673, 2719, 2708, 2709, 2712,
     2729, 2736, 2740, 2757, 2616, 2621, 2746, 2765, 2767, 2773,
     2775, 2582, 2777, 2779, 2781, 2783, 2785, 2789, 2793, 2797,
     2801, 2803, 2592, 2613, 2633, 3650, 2805, 2808, 2813, 2739,
     2756, 2824, 2830, 2802, 2820, 2840, 2846, 3650, 3650, 2810,
     2848, 2639, 2851, 2856, 2862, 2864, 2867, 2869, 2642, 2664,
     2649, 2871, 2821, 2845, 2878, 2867, 2868, 2887, 2895, 2655,
     2889, 2897, 2903, 2674, 2673, 2696, 2879, 2898, 2901, 2902,

     2918, 2700, 2920, 2689, 2696, 2697, 2909, 2910, 2913, 2914,
     2706, 2715, 2740, 2745, 2917, 2921, 2925, 2926, 2753, 2942,
     2944, 2764, 2934, 2937, 2943, 2948, 2767, 2964, 2973, 2976,
     2980, 3650, 2969, 2972, 2977, 2980, 2997, 2999, 3002, 2991,
     2994, 3013, 3020, 3016, 3010, 3009, 3036, 3039, 3042, 3058,
     3047, 3018, 3063, 3066, 3069, 3074, 3085, 3090, 3093, 3096,
     3101, 3650, 3118, 3124, 3130, 3136, 3142, 3148, 3154, 3160,
     3165, 3171, 3176, 3182, 3188
    } ;

static yyconst flex_int16_t yy_def[1876] =
    {   0,
     1863, 1863, 1864, 1864, 1865, 1865, 1866, 1866, 1867, 1867,
     1867, 1867, 1868, 1868, 1869, 1869, 1870, 1870, 1862, 1862,
     1871, 1862, 1871, 1862, 1871, 1871, 1871, 1871, 1862, 1862,
     1871, 1872, 1862, 1873, 1874, 1875, 1862, 1862, 1862, 1862,
     1862, 1862, 1871, 1871, 1871, 1871, 1871, 1871,   29, 1862,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1862, 1871, 1871, 1871, 1862, 1871, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1871,
     1872, 1873, 1874, 1875, 1862, 1862, 1871, 1871, 1871, 1871,

     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1871, 1862, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1871, 1871, 1871,
     1871, 1871, 1862, 1862, 1871, 1871, 1871, 1871, 1862, 1862,

     1871, 1862, 1862, 1871, 1871, 1871, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1871, 1871, 1862, 1862, 1871,
     1871, 1871, 1871, 1862, 1862, 1862, 1862, 1871, 1862, 1862,
     1871, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1871, 1871, 1871, 1871,
     1871, 1862, 1862, 1871, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1871, 1862, 1862, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1862, 1862, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,

     1871, 1871, 1871, 1871, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1871, 1862, 1862, 1871, 1871, 1871, 1871, 1871, 1871, 1871,

     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,

     1871, 1871, 1871, 1871, 1871, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,

     1871, 1871, 1871, 1871, 1871, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1871, 1871, 1871, 1871,

     1871, 1862, 1862, 1862, 1862, 1862, 1871, 1871, 1871, 1871,
     1862, 1862, 1862, 1862, 1871, 1871, 1871, 1871, 1862, 1862,
     1862, 1862, 1871, 1871, 1871, 1871, 1862, 1862, 1862, 1862,
     1862, 1862, 1871, 1871, 1871, 1871, 1862, 1862, 1862, 1871,
     1871, 1871, 1871, 1862, 1862, 1871, 1871, 1871, 1871, 1871,
     1871, 1862, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871,    0, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862
    } ;

static yyconst flex_int16_t yy_nxt[3712] =
    {   0,
       20,   21,   21,   20,   22,   41,   24,   41,   25,   26,
       27,   28,   28,   28,   29,   38,   30,   20,   89,   89,
       42,   39,   42, 1862,   31,   20,   21,   21,   20,   22,
     1862,   24, 1862,   25,   26,   27,   28,   28,   28,   29,
       38,   30,   20, 1862, 1862,   66,   39,   89,   89,   31,
       43,   43, 1862, 1862, 1862,   66,  954,   45,   46,   47,
       48,   48,   48,   49,   46,   50,   48,   48,   48, 1862,
     1862, 1862, 1862,   51,  956, 1862, 1862,  135, 1862,   51,
      137, 1862,  136, 1862,   90,  162,  189,   52,   53, 1862,
       90,  163,  228,   54, 1862,  138, 1862,   55,   56,   63,

       63,  190,   57,   58,   59,   60,   61,   98,  229,   64,
       64,   64, 1862,   46, 1862,   48,   48,   48, 1862,   65,
     1862,   63,   63, 1862, 1862, 1862, 1862, 1862,   51, 1862,
      808,   64,   64,   64, 1862,  101, 1862,  809,   65,   67,
       67,   65, 1862,  187, 1862,   97,  102,   46,  188,   48,
       48,   48, 1862, 1862, 1862, 1862, 1862,  104, 1862,   65,
       65, 1862, 1862, 1862, 1862,  103,  139,   99,  140,   63,
       63,  951,   67,   67,  131,  105,  164,  100,   65,   68,
      165,  284, 1862,  108, 1862, 1862,   69, 1862,  109,  151,
      132,  107,  133,   70,  952,  110,  110,  285,  106,  111,

      111,  111, 1862,  152, 1862,  153,  154,   89,   89, 1862,
      957, 1862,   71,   72,   73,   74,   75,   76,   77,  220,
       78,   79,  958,   80,   81,   82,   83,  221,   84,   85,
       86,   87,   88,   43,   43,  216, 1862,  143, 1862,  217,
       45,   46,   47,   48,   48,   48,   49,  144,   50,  169,
      959,  145,  146,   63,   63, 1862,   51, 1862, 1862, 1862,
     1862, 1862,  960,   64,   64,   64, 1862,  167, 1862,  250,
       52,   53, 1862,   65, 1862,  170,   54, 1862,  214, 1862,
       55,   56,  172,  251,  215,   57,   58,   59,   60,   61,
       67,   67,   65,  441, 1862,  156, 1862,  157,   46,  171,

       48,   48,   48, 1862,  257, 1862,  174,  158,  442,  258,
       65,  159,  160,  191,  306,  192,  161, 1862, 1862, 1862,
     1862,  961, 1862,  176, 1862,  282,  282,  173,  307,   65,
      113,  114,  115,  116,  117,  118,  119,  247,  120,  121,
      283,  122,  123,  124,  125,  248,  126,  127,  128,  129,
      130,  175, 1862, 1862, 1862, 1862,  177,  183, 1862,  178,
     1862,  111,  111,  111, 1862, 1862, 1862, 1862,   63,   63,
     1862,  313, 1862,  184,  359,  185,  314,  195,  111,  111,
      111, 1862,  179, 1862,  203,  962,  180,  196,  181,   63,
       63,  197,  198,  208,  360,  209,  259, 1862,  204, 1862,

      205,  206, 1862,  263, 1862,  210, 1862,  963, 1862,  211,
      212,  261,  261, 1862,  213, 1862, 1862, 1862, 1862, 1862,
     1862,  260, 1862,  513, 1862,  262, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862,  274,  303,  319,  514,  265,
      266,  964,  267,  275,  304,  320,  264,  349,  268,  321,
      333,  333,  350,  269,  345,  346, 1862,  353, 1862,  425,
      272,  354, 1862,  426, 1862,  261,  261, 1862,  270, 1862,
      363,  363,  271,  334,  364,  364,  392,  392, 1862,  262,
     1862,  366,  366, 1862,  361, 1862,  965, 1862,  365, 1862,
      368,  368,  966,  370, 1862,  367, 1862, 1862,  967, 1862,

      362,  373,  373, 1862,  369, 1862, 1862,  968, 1862,  375,
      375, 1862,  371, 1862, 1862,  374, 1862, 1862,  383, 1862,
      386,  386, 1862,  376, 1862,  845,  384,  282,  282,  846,
      385,  421,  372,  397,  397,  387,  422,  377,  402,  402,
      408,  408,  283,  417,  418,  969,  378, 1862,  398, 1862,
      431,  431, 1862,  403, 1862,  409,  333,  333,  970,  453,
      453,  404,  459,  459,  988,  432,  464,  464,  454,  363,
      363,  460,  388,  433,  455,  482,  483,  461, 1862,  410,
     1862,  465, 1862,  484, 1862,  364,  364,  497,  488,  490,
      490,  916, 1862,  434, 1862,  917,  366,  366, 1862,  365,

     1862, 1862, 1862, 1862, 1862,  491,  491,  991,  489, 1862,
      367, 1862,  368,  368,  515,  515,  492,  492, 1862,  493,
     1862,  494,  373,  373,  992, 1862,  369, 1862,  496, 1862,
      495, 1862,  375,  375,  605, 1862,  374, 1862,  498,  498,
     1862,  499, 1862,  500,  993, 1862,  376, 1862,  606,  501,
      501, 1862,  502, 1862,  503,  504,  504,  386,  386,  392,
      392,  994, 1862, 1862, 1862, 1862,  397,  397, 1862,  505,
     1862,  995,  387,  524,  524,  527,  527,  402,  402,  996,
      506,  398,  529,  529,  533,  533,  408,  408,  535,  535,
      528,  997,  403,  538,  538,  552,  552,  558,  559,  534,

      617,  409,  431,  431,  676,  560,  562,  562,  539, 1862,
      553, 1862,  453,  453,  998,  583,  583,  432,  677,  588,
      588,  454,  459,  459,  464,  464,  554,  455,  584,  592,
      593,  460,  589,  490,  490,  873, 1862,  461, 1862,  465,
      491,  491,  874,  621,  621,  999, 1862,  616, 1862,  492,
      492,  620,  493, 1862,  494, 1862, 1862,  622, 1862, 1862,
     1001, 1862, 1862, 1002, 1862,  498,  498, 1862,  499, 1862,
      500,  717,  501,  501,  623,  502,  718,  503, 1862, 1004,
     1862,  504,  504, 1005, 1862, 1862, 1862, 1862,  628,  628,
      741,  629, 1008,  630, 1862,  505, 1862,  638,  638,  515,

      515, 1862, 1009, 1862,  524,  524,  527,  527,  651,  651,
      631, 1010,  639,  529,  529,  652,  652,  533,  533,  656,
      656,  528,  535,  535,  538,  538,  659,  659,  660,  660,
      653, 1013,  534,  552,  552,  675,  675,  562,  562,  539,
      703,  703, 1014,  661,  583,  583,  707,  707,  553,  588,
      588,  719,  719,  725,  725,  751,  751,  584,  662,  663,
      720, 1862,  589, 1862,  776, 1862,  721, 1862, 1862,  777,
     1862,  621,  621, 1016,  740,  740,  726,  628,  628, 1862,
      629, 1862,  630, 1021, 1862,  622, 1862, 1862, 1022, 1862,
     1862, 1017, 1862,  638,  638,  739,  762,  762,  651,  651,

      652,  652,  764,  764,  744,  738,  737, 1023,  639,  656,
      656,  763,  659,  659, 1018,  653,  660,  660,  769,  769,
      778,  778,  780,  780,  785,  785,  675,  675,  796,  796,
     1024,  661, 1025,  799,  799,  779, 1862,  781, 1862,  786,
      814,  814, 1026,  797,  703,  703, 1027,  787,  800,  818,
      818,  707,  707,  828,  828,  835,  835, 1028,  819,  798,
      719,  719,  725,  725,  820, 1862,  853, 1862,  836,  720,
     1029,  815,  740,  740, 1030,  721,  851,  851,  751,  751,
      829,  885,  885,  864,  864, 1862,  830, 1862, 1032, 1862,
      852, 1862, 1862, 1862, 1862, 1862,  861,  854,  865,  855,

      866,  866,  856,  877,  877,  881,  881,  857,  862, 1033,
      858,  859, 1034,  860, 1035,  867,  762,  762,  878, 1036,
      882,  764,  764,  886,  886,  888,  888,  769,  769,  896,
      896,  763,  778,  778,  903,  903,  883, 1037,  887, 1038,
      889, 1042,  780,  780,  897,  904,  904,  779,  785,  785,
      908,  908,  914,  914,  796,  796,  898,  781,  920,  920,
      799,  799,  899,  786,  922,  922, 1862,  915, 1862,  797,
      814,  814,  818,  818, 1043,  800,  940,  940,  946,  947,
     1044,  819,  828,  828,  955,  955, 1862,  820, 1862,  941,
      835,  835,  851,  851, 1045,  971,  971, 1862,  972, 1862,

      973, 1046,  974,  836, 1047, 1862,  852, 1862, 1862, 1862,
     1862, 1862, 1862, 1048, 1862, 1862, 1862, 1862, 1862, 1862,
     1049, 1862,  975, 1050, 1862, 1862, 1862, 1862,  864,  864,
      976, 1051,  977, 1052,  978,  980,  989,  989,  866,  866,
     1053,  985, 1055,  865,  990,  990,  984, 1056,  987,  979,
      986,  982,  981,  867,  877,  877,  983, 1000, 1000,  881,
      881, 1003, 1003,  885,  885,  886,  886, 1006, 1006,  878,
      888,  888, 1007, 1007,  882, 1011, 1012,  896,  896, 1057,
      887, 1015, 1015, 1019, 1019,  889,  903,  903,  904,  904,
      908,  908,  897,  914,  914, 1031, 1031, 1058, 1020,  920,

      920,  922,  922, 1039, 1040, 1054, 1054, 1059,  915,  940,
      940, 1041, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
     1068, 1069,  941,  955,  955, 1070, 1071, 1072, 1073, 1074,
     1075, 1076, 1077, 1078, 1079, 1080,  971,  971, 1081,  972,
     1082,  973, 1862, 1862, 1862, 1862, 1085, 1085, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1098, 1862, 1862,
     1086, 1862, 1862, 1104, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1083, 1084, 1089,
      989,  989,  990,  990, 1105, 1099, 1100, 1090, 1106, 1087,
     1107, 1091, 1093, 1101, 1102, 1102, 1088, 1096, 1092, 1108,

     1094, 1109, 1110, 1000, 1000, 1097, 1111, 1112, 1095, 1103,
     1003, 1003, 1113, 1114, 1006, 1006, 1007, 1007, 1115, 1116,
     1117, 1118, 1119, 1120, 1121, 1015, 1015, 1122, 1123, 1124,
     1019, 1019, 1125, 1125, 1126, 1127, 1128, 1129, 1129, 1131,
     1132, 1133, 1134, 1134, 1136, 1020, 1137, 1031, 1031, 1138,
     1139, 1140, 1130, 1141, 1142, 1143, 1143, 1135, 1145, 1146,
     1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
     1144, 1157, 1158, 1159, 1054, 1054, 1160, 1161, 1162, 1163,
     1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173,
     1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1181, 1205,

     1183, 1183, 1206, 1085, 1085, 1207, 1186, 1186, 1208, 1210,
     1862, 1182, 1862, 1862, 1184, 1862, 1862, 1086, 1862, 1862,
     1862, 1862, 1862, 1188, 1188, 1862, 1211, 1862, 1191, 1191,
     1862, 1862, 1862, 1862, 1102, 1102, 1862, 1189, 1862, 1209,
     1209, 1862, 1192, 1862, 1862, 1862, 1862, 1862, 1862, 1103,
     1862, 1862, 1185, 1862, 1187, 1212, 1194, 1213, 1214, 1190,
     1215, 1199, 1199, 1216, 1216, 1218, 1219, 1193, 1220, 1221,
     1224, 1198, 1195, 1196, 1862, 1200, 1862, 1204, 1217, 1222,
     1222, 1225, 1226, 1197, 1201, 1227, 1228, 1229, 1203, 1230,
     1231, 1231, 1233, 1234, 1223, 1125, 1125, 1235, 1236, 1236,

     1129, 1129, 1238, 1238, 1202, 1232, 1239, 1239, 1241, 1242,
     1134, 1134, 1244, 1237, 1245, 1130, 1243, 1243, 1246, 1247,
     1248, 1240, 1249, 1249, 1251, 1135, 1143, 1143, 1252, 1252,
     1253, 1254, 1255, 1256, 1257, 1258, 1259, 1250, 1260, 1260,
     1266, 1144, 1263, 1263, 1267, 1268, 1268, 1261, 1270, 1271,
     1271, 1264, 1273, 1262, 1274, 1275, 1276, 1265, 1277, 1278,
     1269, 1279, 1280, 1281, 1272, 1282, 1283, 1284, 1285, 1286,
     1287, 1288, 1289, 1290, 1181, 1181, 1311, 1291, 1291, 1862,
     1292, 1862, 1293, 1183, 1183, 1312, 1313, 1862, 1182, 1862,
     1862, 1314, 1862, 1294, 1294, 1315, 1862, 1184, 1862, 1186,

     1186, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1188,
     1188, 1862, 1862, 1862, 1862, 1297, 1297, 1209, 1209, 1295,
     1191, 1191, 1862, 1189, 1862, 1299, 1299, 1296, 1862, 1300,
     1862, 1320, 1321, 1862, 1192, 1862, 1329, 1862, 1862, 1862,
     1862, 1298, 1862, 1862, 1862, 1862, 1862, 1330, 1862, 1301,
     1199, 1199, 1324, 1324, 1306, 1306, 1862, 1862, 1862, 1862,
     1862, 1332, 1862, 1862, 1200, 1862, 1333, 1862, 1303, 1862,
     1862, 1334, 1862, 1316, 1316, 1331, 1331, 1302, 1335, 1308,
     1336, 1307, 1337, 1304, 1341, 1305, 1318, 1318, 1317, 1342,
     1309, 1322, 1322, 1343, 1310, 1216, 1216, 1325, 1325, 1327,

     1327, 1319, 1222, 1222, 1338, 1338, 1323, 1231, 1231, 1346,
     1217, 1347, 1326, 1348, 1328, 1340, 1340, 1223, 1349, 1339,
     1236, 1236, 1232, 1344, 1344, 1238, 1238, 1239, 1239, 1345,
     1345, 1243, 1243, 1350, 1351, 1237, 1352, 1249, 1249, 1353,
     1353, 1354, 1240, 1252, 1252, 1355, 1356, 1358, 1359, 1360,
     1357, 1361, 1250, 1260, 1260, 1362, 1363, 1363, 1263, 1263,
     1365, 1368, 1261, 1366, 1366, 1268, 1268, 1264, 1262, 1364,
     1369, 1369, 1370, 1265, 1271, 1271, 1367, 1371, 1371, 1372,
     1269, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1272,
     1381, 1382, 1383, 1384, 1291, 1291, 1385, 1292, 1386, 1293,

     1294, 1294, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1297, 1297, 1862, 1862, 1862, 1862, 1389, 1389, 1406, 1299,
     1299, 1409, 1862, 1862, 1862, 1862, 1862, 1410, 1862, 1862,
     1390, 1862, 1862, 1862, 1862, 1862, 1411, 1862, 1392, 1862,
     1387, 1388, 1397, 1400, 1400, 1862, 1391, 1862, 1393, 1414,
     1394, 1395, 1306, 1306, 1396, 1420, 1862, 1401, 1862, 1399,
     1398, 1862, 1862, 1862, 1862, 1862, 1428, 1862, 1403, 1407,
     1402, 1316, 1316, 1408, 1412, 1412, 1318, 1318, 1413, 1413,
     1415, 1415, 1322, 1322, 1417, 1417, 1317, 1324, 1324, 1325,
     1325, 1319, 1418, 1418, 1429, 1416, 1432, 1323, 1327, 1327,

     1419, 1419, 1405, 1404, 1326, 1421, 1421, 1331, 1331, 1423,
     1423, 1426, 1426, 1328, 1430, 1430, 1338, 1338, 1433, 1433,
     1422, 1340, 1340, 1434, 1424, 1435, 1427, 1436, 1436, 1431,
     1438, 1339, 1344, 1344, 1345, 1345, 1439, 1440, 1441, 1442,
     1425, 1445, 1437, 1443, 1443, 1353, 1353, 1446, 1446, 1448,
     1449, 1450, 1451, 1452, 1453, 1454, 1455, 1455, 1444, 1363,
     1363, 1456, 1447, 1457, 1457, 1366, 1366, 1458, 1369, 1369,
     1459, 1460, 1364, 1371, 1371, 1461, 1462, 1463, 1367, 1464,
     1465, 1466, 1467, 1468, 1469, 1862, 1862, 1862, 1862, 1389,
     1389, 1862, 1862, 1862, 1862, 1488, 1472, 1472, 1862, 1862,

     1862, 1862, 1862, 1390, 1862, 1489, 1490, 1470, 1471, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1473, 1475, 1491, 1476, 1400, 1400, 1492, 1474, 1482,
     1482, 1862, 1480, 1862, 1493, 1478, 1412, 1412, 1862, 1401,
     1862, 1862, 1862, 1862, 1862, 1494, 1477, 1483, 1483, 1862,
     1479, 1862, 1413, 1413, 1415, 1415, 1495, 1495, 1481, 1500,
     1862, 1484, 1862, 1502, 1485, 1417, 1417, 1486, 1503, 1416,
     1418, 1418, 1419, 1419, 1496, 1496, 1421, 1421, 1505, 1487,
     1498, 1498, 1423, 1423, 1499, 1499, 1426, 1426, 1506, 1497,
     1510, 1422, 1501, 1501, 1430, 1430, 1511, 1424, 1504, 1504,

     1512, 1427, 1433, 1433, 1507, 1507, 1436, 1436, 1513, 1431,
     1509, 1509, 1514, 1514, 1443, 1443, 1516, 1516, 1520, 1508,
     1521, 1437, 1517, 1517, 1446, 1446, 1522, 1515, 1523, 1444,
     1519, 1519, 1524, 1525, 1526, 1455, 1455, 1518, 1527, 1447,
     1457, 1457, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
     1536, 1537, 1538, 1862, 1862, 1862, 1862, 1472, 1472, 1862,
     1862, 1862, 1862, 1554, 1862, 1862, 1862, 1862, 1555, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1556, 1557, 1539, 1482, 1482, 1862, 1862, 1862, 1862,
     1558, 1483, 1483, 1559, 1540, 1542, 1543, 1862, 1560, 1862,

     1562, 1541, 1545, 1544, 1862, 1484, 1862, 1550, 1550, 1547,
     1563, 1546, 1551, 1862, 1564, 1862, 1495, 1495, 1548, 1549,
     1862, 1565, 1862, 1552, 1496, 1496, 1561, 1561, 1566, 1553,
     1498, 1498, 1499, 1499, 1501, 1501, 1504, 1504, 1568, 1497,
     1507, 1507, 1567, 1567, 1509, 1509, 1569, 1570, 1571, 1571,
     1514, 1514, 1573, 1573, 1575, 1508, 1516, 1516, 1517, 1517,
     1574, 1574, 1576, 1572, 1577, 1515, 1519, 1519, 1578, 1579,
     1580, 1581, 1582, 1518, 1583, 1584, 1585, 1586, 1587, 1587,
     1589, 1590, 1591, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1608, 1609, 1588, 1862, 1862, 1862, 1862, 1862, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1610, 1862, 1550,
     1550, 1606, 1606, 1594, 1593, 1862, 1613, 1862, 1592, 1862,
     1596, 1862, 1862, 1862, 1862, 1862, 1607, 1595, 1616, 1599,
     1617, 1611, 1611, 1614, 1614, 1618, 1597, 1561, 1561, 1598,
     1619, 1600, 1620, 1601, 1604, 1602, 1612, 1621, 1615, 1605,
     1567, 1567, 1622, 1623, 1603, 1571, 1571, 1624, 1624, 1573,
     1573, 1574, 1574, 1625, 1626, 1627, 1628, 1629, 1630, 1631,
     1572, 1632, 1633, 1634, 1635, 1587, 1587, 1636, 1636, 1637,
     1638, 1639, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1588, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1648,

     1648, 1862, 1657, 1862, 1862, 1862, 1862, 1862, 1862, 1658,
     1862, 1659, 1862, 1649, 1862, 1644, 1606, 1606, 1647, 1641,
     1652, 1652, 1640, 1656, 1656, 1642, 1664, 1643, 1645, 1665,
     1651, 1607, 1646, 1862, 1653, 1862, 1611, 1611, 1650, 1660,
     1660, 1661, 1661, 1614, 1614, 1663, 1663, 1655, 1666, 1654,
     1667, 1612, 1668, 1669, 1670, 1671, 1662, 1672, 1615, 1624,
     1624, 1673, 1674, 1675, 1676, 1676, 1678, 1679, 1680, 1681,
     1636, 1636, 1682, 1862, 1862, 1862, 1862, 1685, 1685, 1677,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1648, 1648,
     1862, 1686, 1862, 1862, 1862, 1862, 1862, 1700, 1692, 1692,

     1703, 1862, 1649, 1862, 1862, 1705, 1862, 1656, 1656, 1684,
     1706, 1862, 1683, 1862, 1709, 1690, 1691, 1710, 1687, 1652,
     1652, 1688, 1660, 1660, 1689, 1695, 1695, 1704, 1704, 1701,
     1701, 1713, 1862, 1653, 1862, 1693, 1696, 1696, 1862, 1716,
     1862, 1698, 1698, 1694, 1702, 1661, 1661, 1663, 1663, 1862,
     1697, 1862, 1707, 1707, 1862, 1699, 1862, 1711, 1711, 1717,
     1662, 1714, 1714, 1676, 1676, 1718, 1718, 1708, 1719, 1720,
     1721, 1721, 1712, 1862, 1742, 1862, 1715, 1743, 1677, 1685,
     1685, 1739, 1739, 1862, 1722, 1862, 1724, 1724, 1862, 1862,
     1862, 1862, 1862, 1686, 1862, 1862, 1862, 1862, 1862, 1862,

     1862, 1862, 1862, 1692, 1692, 1862, 1753, 1862, 1731, 1731,
     1725, 1754, 1723, 1695, 1695, 1755, 1862, 1756, 1862, 1726,
     1768, 1862, 1732, 1862, 1696, 1696, 1862, 1769, 1862, 1733,
     1733, 1772, 1728, 1729, 1727, 1698, 1698, 1862, 1697, 1862,
     1737, 1737, 1862, 1779, 1862, 1730, 1701, 1701, 1862, 1699,
     1862, 1734, 1734, 1780, 1735, 1738, 1736, 1740, 1740, 1704,
     1704, 1702, 1707, 1707, 1862, 1781, 1862, 1744, 1744, 1745,
     1745, 1790, 1741, 1747, 1747, 1711, 1711, 1708, 1749, 1749,
     1750, 1750, 1714, 1714, 1746, 1752, 1752, 1862, 1748, 1862,
     1712, 1718, 1718, 1721, 1721, 1751, 1794, 1715, 1757, 1757,

     1795, 1758, 1758, 1796, 1724, 1724, 1862, 1722, 1862, 1802,
     1862, 1862, 1862, 1862, 1862, 1759, 1862, 1862, 1804, 1862,
     1762, 1762, 1862, 1862, 1862, 1862, 1862, 1805, 1862, 1761,
     1731, 1731, 1806, 1862, 1763, 1862, 1811, 1767, 1767, 1812,
     1760, 1733, 1733, 1862, 1732, 1862, 1813, 1737, 1737, 1765,
     1862, 1814, 1862, 1862, 1862, 1862, 1862, 1764, 1734, 1734,
     1819, 1735, 1738, 1736, 1820, 1766, 1770, 1770, 1739, 1739,
     1862, 1862, 1862, 1862, 1740, 1740, 1771, 1771, 1773, 1773,
     1744, 1744, 1745, 1745, 1776, 1776, 1747, 1747, 1783, 1741,
     1777, 1777, 1821, 1774, 1749, 1749, 1784, 1746, 1750, 1750,

     1822, 1748, 1778, 1778, 1752, 1752, 1757, 1757, 1827, 1758,
     1758, 1770, 1770, 1751, 1782, 1782, 1862, 1832, 1862, 1862,
     1837, 1862, 1862, 1759, 1862, 1762, 1762, 1862,  953, 1862,
     1775, 1785, 1785, 1786, 1862, 1862, 1862, 1862, 1862, 1763,
     1862, 1788, 1788,  950, 1862,  949, 1862, 1767, 1767, 1771,
     1771, 1787, 1773, 1773, 1862, 1789, 1862, 1791, 1791, 1862,
     1862, 1862, 1862, 1792, 1792, 1776, 1776, 1774, 1777, 1777,
     1778, 1778, 1782, 1782,  948, 1797, 1798,  945, 1793, 1785,
     1785, 1862, 1862, 1862, 1862, 1862,  944, 1862, 1788, 1788,
     1791, 1791, 1862, 1862, 1862, 1862, 1801, 1801, 1792, 1792,

      943, 1862, 1789, 1862, 1803, 1803,  942, 1799, 1800, 1862,
     1807, 1862, 1862, 1793, 1862, 1862, 1862, 1862, 1862, 1801,
     1801, 1803, 1803, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862,  939, 1862, 1808, 1862,
     1862, 1862, 1862, 1828, 1828, 1830, 1830,  938, 1862, 1815,
     1862, 1862,  937, 1862, 1809, 1810,  936, 1862, 1829, 1862,
     1831,  935, 1862, 1816, 1862, 1828, 1828,  934, 1817, 1818,
     1823,  933, 1825, 1826, 1838, 1838, 1824, 1830, 1830,  932,
     1829, 1839, 1839, 1862, 1834, 1862, 1862,  931, 1862, 1833,
      930, 1862, 1831, 1862, 1862,  929, 1862, 1835, 1844, 1844,

     1838, 1838, 1836, 1839, 1839, 1862,  928, 1862, 1862,  927,
     1862, 1852, 1852, 1845, 1848, 1848, 1840, 1844, 1844, 1852,
     1852, 1850, 1850, 1862,  926, 1862, 1841, 1862, 1849, 1862,
     1842,  925, 1845, 1843, 1862, 1851, 1862, 1854, 1854,  924,
     1848, 1848,  923, 1856, 1856, 1846,  921, 1847, 1857, 1857,
     1862, 1855, 1862, 1862, 1849, 1862, 1862,  919, 1862, 1850,
     1850, 1862, 1853, 1862, 1858, 1858,  918, 1854, 1854,  913,
     1860, 1860, 1862, 1851, 1862, 1856, 1856, 1862, 1859, 1862,
     1862, 1855, 1862, 1862,  912, 1862, 1857, 1857, 1862,  911,
     1862, 1858, 1858,  910, 1861, 1861,  909, 1860, 1860, 1862,

      907, 1862, 1861, 1861, 1862, 1859, 1862, 1862,  906, 1862,
     1862,  905, 1862,  902,  901, 1862,  900, 1862,   23,   23,
       23,   23,   23,   23,   32,   32,   32,   32,   32,   32,
       34,   34,   34,   34,   34,   34,   35,   35,   35,   35,
       35,   35,   33,   33,   33,   33,   33,   33,   36,   36,
       36,   36,   36,   36,   37,   37,   37,   37,   37,   37,
       40,   40,   40,   40,   40,   40,   44,  895,  894,   44,
       44,   91,   91,   91,   91,   91,   92,   92,  893,   92,
       92,   92,   93,   93,   93,  892,   93,   93,   94,   94,
       94,   94,  891,   94,  890,  884,  880,  879,  876,  875,

      872,  871,  870,  869,  868,  863,  850,  849,  848,  847,
      844,  843,  842,  841,  840,  839,  838,  837,  834,  833,
      832,  831,  827,  826,  825,  824,  823,  822,  821,  817,
      816,  813,  812,  811,  810,  807,  806,  805,  804,  803,
      802,  801,  795,  794,  793,  792,  791,  790,  789,  788,
      784,  783,  782,  775,  774,  773,  772,  771,  770,  768,
      767,  766,  765,  761,  760,  759,  758,  757,  756,  755,
      754,  753,  752,  750,  749,  748,  747,  746,  745,  743,
      742,  736,  735,  734,  733,  732,  731,  730,  729,  728,
      727,  724,  723,  722,  716,  715,  714,  713,  712,  711,

      710,  709,  708,  706,  705,  704,  702,  701,  700,  699,
      698,  697,  696,  695,  694,  693,  692,  691,  690,  689,
      688,  687,  686,  685,  684,  683,  682,  681,  680,  679,
      678,  674,  673,  672,  671,  670,  669,  668,  667,  666,
      665,  664,  658,  657,  655,  654,  650,  649,  648,  647,
      646,  645,  644,  643,  642,  641,  640,  637,  636,  635,
      634,  633,  632,  627,  626,  625,  624,  619,  618,  615,
      614,  613,  612,  611,  610,  609,  608,  607,  604,  603,
      602,  601,  600,  599,  598,  597,  596,  595,  594,  591,
      590,  587,  586,  585,  582,  581,  580,  579,  578,  577,

      576,  575,  574,  573,  572,  571,  570,  569,  568,  567,
      566,  565,  564,  563,  561,  557,  556,  555,  551,  550,
      549,  548,  547,  546,  545,  544,  543,  542,  541,  540,
      537,  536,  532,  531,  530,  526,  525,  523,  522,  521,
      520,  519,  518,  517,  516,  512,  511,  510,  509,  508,
      507,  487,  486,  485,  481,  480,  479,  478,  477,  476,
      475,  474,  473,  472,  471,  470,  469,  468,  467,  466,
      463,  462,  458,  457,  456,  452,  451,  450,  449,  448,
      447,  446,  445,  444,  443,  440,  439,  438,  437,  436,
      435,  430,  429,  428,  427,  424,  423,  420,  419,  416,

      415,  414,  413,  412,  411,  407,  406,  405,  401,  400,
      399,  396,  395,  394,  393,  391,  390,  389,  382,  381,
      380,  379,  358,  357,  356,  355,  352,  351,  348,  347,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      332,  331,  330,  329,  328,  327,  326,  325,  324,  323,
      322,  318,  317,  316,  315,  312,  311,  310,  309,  308,
      305,  302,  301,  300,  299,  298,  297,  296,  295,  294,
      293,  292,  291,  290,  289,  288,  287,  286,  281,  280,
      279,  278,  277,  276,  273,  256,  255,  254,  253,  252,
      249,  246,  245,  244,  243,  242,  241,  240,  239,  238,

      237,  236,  235,  234,  233,  232,  231,  230,  227,  226,
      225,  224,  223,  222,  219,  218,  207,  202,  201,  200,
      199,  194,  193,  186,  182,  168,  166,  155,  150,  149,
      148,  147,  142,  141,  134,  112,   96,   95,   62,   62,
     1862,   33,   33,   33,   33,   33,   33,   33,   33,   19,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862
    } ;

static yyconst flex_int16_t yy_chk[3712] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,   30,   30,
       17,   15,   18,    0,    1,    2,    2,    2,    2,    2,
       23,    2,   23,    2,    2,    2,    2,    2,    2,    2,
       16,    2,    2,   27,    0,   27,   16,   50,   50,    2,
       21,   21,   44,   47,   44,   47,  833,   21,   21,   21,
       21,   21,   21,   21,   25,   21,   25,   25,   25,   25,
       31,   25,   31,   21,  836,   49,   51,   73,   51,   25,
       74,   53,   73,   53,   31,   86,  116,   21,   21,   49,
       51,   86,  140,   21,   55,   74,   55,   21,   21,   26,

       26,  116,   21,   21,   21,   21,   21,   53,  140,   26,
       26,   26,   26,   45,   26,   45,   45,   45,   45,   26,
       45,   46,   46,   52,   56,   52,   56,   57,   45,   57,
      695,   46,   46,   46,   46,   55,   46,  695,   26,   28,
       28,   46,   54,  115,   54,   52,   56,   28,  115,   28,
       28,   28,   28,   58,   28,   58,   59,   57,   59,   28,
       46,   60,   61,   60,   61,   56,   75,   54,   75,   63,
       63,  830,   67,   67,   71,   58,   87,   54,   28,   29,
       87,  192,   63,   60,   63,   67,   29,   67,   61,   83,
       71,   59,   71,   29,  830,   65,   65,  192,   58,   65,

       65,   65,   65,   83,   65,   83,   83,   89,   89,   97,
      837,   97,   29,   29,   29,   29,   29,   29,   29,  132,
       29,   29,  838,   29,   29,   29,   29,  132,   29,   29,
       29,   29,   29,   43,   43,  129,   98,   78,   98,  129,
       43,   43,   43,   43,   43,   43,   43,   78,   43,   97,
      839,   78,   78,   64,   64,   99,   43,   99,  100,   90,
      100,   90,  840,   64,   64,   64,   64,   90,   64,  160,
       43,   43,  102,   64,  102,   98,   43,  104,  128,  104,
       43,   43,  100,  160,  128,   43,   43,   43,   43,   43,
       48,   48,   64,  321,  101,   85,  101,   85,   48,   99,

       48,   48,   48,   48,  166,   48,  102,   85,  321,  166,
       48,   85,   85,  117,  212,  117,   85,  103,  105,  103,
      105,  841,  106,  104,  106,  191,  191,  101,  212,   48,
       69,   69,   69,   69,   69,   69,   69,  158,   69,   69,
      191,   69,   69,   69,   69,  158,   69,   69,   69,   69,
       69,  103,  107,  108,  107,  108,  105,  113,  109,  106,
      109,  110,  110,  110,  110,  172,  110,  172,  111,  111,
      169,  218,  169,  113,  258,  113,  218,  120,  111,  111,
      111,  111,  107,  111,  125,  842,  108,  120,  109,  167,
      167,  120,  120,  127,  258,  127,  169,  170,  125,  170,

      125,  125,  167,  172,  167,  127,  173,  843,  173,  127,
      127,  171,  171,  174,  127,  174,  176,  175,  176,  175,
      177,  170,  177,  385,  171,  171,  171,  178,  179,  178,
      179,  180,  181,  180,  181,  184,  210,  223,  385,  174,
      175,  844,  176,  184,  210,  223,  173,  250,  177,  223,
      236,  236,  250,  178,  247,  247,  259,  253,  259,  309,
      181,  253,  260,  309,  260,  261,  261,  266,  179,  266,
      262,  262,  180,  236,  263,  263,  283,  283,  261,  261,
      261,  264,  264,  262,  259,  262,  845,  263,  263,  263,
      265,  265,  846,  266,  264,  264,  264,  267,  847,  267,

      260,  269,  269,  265,  265,  265,  268,  848,  268,  270,
      270,  271,  267,  271,  269,  269,  269,  272,  277,  272,
      278,  278,  270,  270,  270,  732,  277,  282,  282,  732,
      277,  306,  268,  288,  288,  278,  306,  271,  292,  292,
      296,  296,  282,  303,  303,  849,  272,  372,  288,  372,
      314,  314,  361,  292,  361,  296,  333,  333,  850,  332,
      332,  292,  337,  337,  863,  314,  340,  340,  332,  363,
      363,  337,  278,  314,  332,  357,  357,  337,  362,  296,
      362,  340,  363,  357,  363,  364,  364,  372,  361,  365,
      365,  793,  370,  314,  370,  793,  366,  366,  364,  364,

      364,  371,  365,  371,  365,  367,  367,  868,  362,  366,
      366,  366,  368,  368,  387,  387,  369,  369,  367,  369,
      367,  369,  373,  373,  869,  368,  368,  368,  371,  369,
      370,  369,  375,  375,  478,  373,  373,  373,  374,  374,
      378,  374,  378,  374,  870,  375,  375,  375,  478,  376,
      376,  374,  376,  374,  376,  377,  377,  386,  386,  392,
      392,  871,  376,  489,  376,  489,  397,  397,  377,  377,
      377,  872,  386,  398,  398,  401,  401,  402,  402,  873,
      378,  397,  403,  403,  407,  407,  408,  408,  409,  409,
      401,  874,  402,  412,  412,  425,  425,  429,  429,  407,

      489,  408,  431,  431,  554,  429,  432,  432,  412,  488,
      425,  488,  453,  453,  875,  455,  455,  431,  554,  461,
      461,  453,  459,  459,  464,  464,  425,  453,  455,  466,
      466,  459,  461,  490,  490,  754,  495,  459,  495,  464,
      491,  491,  754,  496,  496,  876,  490,  488,  490,  492,
      492,  495,  492,  491,  492,  491,  496,  496,  496,  497,
      879,  497,  492,  880,  492,  498,  498,  623,  498,  623,
      498,  598,  501,  501,  497,  501,  598,  501,  498,  883,
      498,  504,  504,  884,  506,  501,  506,  501,  505,  505,
      623,  505,  890,  505,  504,  504,  504,  513,  513,  515,

      515,  505,  891,  505,  524,  524,  527,  527,  528,  528,
      506,  892,  513,  529,  529,  530,  530,  533,  533,  534,
      534,  527,  535,  535,  538,  538,  539,  539,  540,  540,
      530,  894,  533,  552,  552,  553,  553,  562,  562,  538,
      582,  582,  895,  540,  583,  583,  587,  587,  552,  588,
      588,  599,  599,  604,  604,  639,  639,  583,  540,  540,
      599,  616,  588,  616,  668,  617,  599,  617,  620,  668,
      620,  621,  621,  898,  622,  622,  604,  628,  628,  631,
      628,  631,  628,  901,  621,  621,  621,  622,  902,  622,
      628,  899,  628,  638,  638,  620,  650,  650,  651,  651,

      652,  652,  653,  653,  631,  617,  616,  905,  638,  656,
      656,  650,  659,  659,  899,  652,  660,  660,  661,  661,
      669,  669,  670,  670,  674,  674,  675,  675,  684,  684,
      906,  660,  907,  685,  685,  669,  738,  670,  738,  674,
      701,  701,  909,  684,  703,  703,  910,  674,  685,  705,
      705,  707,  707,  715,  715,  721,  721,  911,  705,  684,
      719,  719,  725,  725,  705,  741,  738,  741,  721,  719,
      912,  701,  740,  740,  913,  719,  737,  737,  751,  751,
      715,  763,  763,  746,  746,  740,  715,  740,  916,  737,
      737,  737,  739,  744,  739,  744,  741,  739,  746,  739,

      747,  747,  739,  757,  757,  760,  760,  739,  744,  917,
      739,  739,  918,  739,  919,  747,  762,  762,  757,  921,
      760,  764,  764,  765,  765,  766,  766,  769,  769,  774,
      774,  762,  778,  778,  779,  779,  760,  923,  765,  924,
      766,  927,  780,  780,  774,  781,  781,  778,  785,  785,
      786,  786,  792,  792,  796,  796,  774,  780,  797,  797,
      799,  799,  774,  785,  800,  800,  853,  792,  853,  796,
      814,  814,  818,  818,  928,  799,  820,  820,  825,  825,
      929,  818,  828,  828,  834,  834,  854,  818,  854,  820,
      835,  835,  851,  851,  930,  852,  852,  855,  852,  855,

      852,  931,  853,  835,  932,  851,  851,  851,  852,  856,
      852,  856,  857,  933,  857,  858,  859,  858,  859,  860,
      934,  860,  854,  935,  861,  862,  861,  862,  864,  864,
      855,  936,  855,  937,  856,  857,  865,  865,  866,  866,
      938,  860,  941,  864,  867,  867,  859,  942,  862,  856,
      861,  858,  857,  866,  877,  877,  858,  878,  878,  881,
      881,  882,  882,  885,  885,  886,  886,  887,  887,  877,
      888,  888,  889,  889,  881,  893,  893,  896,  896,  943,
      886,  897,  897,  900,  900,  888,  903,  903,  904,  904,
      908,  908,  896,  914,  914,  915,  915,  944,  900,  920,

      920,  922,  922,  925,  925,  939,  939,  945,  914,  940,
      940,  925,  946,  947,  948,  949,  950,  951,  952,  953,
      954,  956,  940,  955,  955,  957,  959,  960,  961,  963,
      964,  965,  966,  967,  968,  969,  971,  971,  972,  971,
      973,  971,  974,  975,  974,  975,  976,  976,  977,  971,
      977,  971,  978,  979,  978,  979,  980,  988,  980,  976,
      976,  976,  981,  993,  981,  982,  984,  982,  984,  983,
      985,  983,  985,  986,  987,  986,  987,  974,  975,  979,
      989,  989,  990,  990,  994,  991,  991,  980,  995,  977,
      996,  981,  983,  991,  992,  992,  978,  986,  982,  997,

      984,  998,  999, 1000, 1000,  987, 1001, 1002,  985,  992,
     1003, 1003, 1004, 1005, 1006, 1006, 1007, 1007, 1008, 1009,
     1010, 1011, 1012, 1013, 1014, 1015, 1015, 1016, 1017, 1018,
     1019, 1019, 1020, 1020, 1021, 1022, 1023, 1024, 1024, 1025,
     1026, 1027, 1028, 1028, 1029, 1019, 1030, 1031, 1031, 1032,
     1033, 1034, 1024, 1035, 1036, 1037, 1037, 1028, 1038, 1039,
     1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050,
     1037, 1051, 1052, 1053, 1054, 1054, 1055, 1056, 1058, 1059,
     1060, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1072,
     1073, 1074, 1075, 1076, 1077, 1078, 1080, 1083, 1083, 1098,

     1084, 1084, 1099, 1085, 1085, 1100, 1086, 1086, 1101, 1104,
     1083, 1083, 1083, 1084, 1084, 1084, 1085, 1085, 1085, 1086,
     1087, 1086, 1087, 1088, 1088, 1089, 1105, 1089, 1090, 1090,
     1091, 1092, 1091, 1092, 1102, 1102, 1088, 1088, 1088, 1103,
     1103, 1090, 1090, 1090, 1093, 1094, 1093, 1094, 1096, 1102,
     1096, 1097, 1084, 1097, 1087, 1106, 1091, 1107, 1108, 1089,
     1109, 1095, 1095, 1110, 1110, 1111, 1112, 1090, 1113, 1114,
     1116, 1094, 1092, 1092, 1095, 1095, 1095, 1097, 1110, 1115,
     1115, 1117, 1118, 1093, 1095, 1119, 1120, 1121, 1096, 1122,
     1123, 1123, 1124, 1126, 1115, 1125, 1125, 1127, 1128, 1128,

     1129, 1129, 1130, 1130, 1095, 1123, 1131, 1131, 1132, 1133,
     1134, 1134, 1136, 1128, 1137, 1129, 1135, 1135, 1138, 1139,
     1140, 1131, 1141, 1141, 1142, 1134, 1143, 1143, 1144, 1144,
     1145, 1146, 1147, 1148, 1149, 1152, 1153, 1141, 1154, 1154,
     1157, 1143, 1156, 1156, 1158, 1159, 1159, 1154, 1160, 1161,
     1161, 1156, 1162, 1154, 1163, 1164, 1165, 1156, 1166, 1167,
     1159, 1169, 1170, 1171, 1161, 1172, 1173, 1174, 1175, 1176,
     1177, 1178, 1179, 1180, 1181, 1181, 1205, 1182, 1182, 1185,
     1182, 1185, 1182, 1183, 1183, 1206, 1207, 1181, 1181, 1181,
     1182, 1208, 1182, 1184, 1184, 1210, 1183, 1183, 1183, 1186,

     1186, 1187, 1190, 1187, 1190, 1193, 1184, 1193, 1184, 1188,
     1188, 1194, 1186, 1194, 1186, 1189, 1189, 1209, 1209, 1185,
     1191, 1191, 1188, 1188, 1188, 1192, 1192, 1187, 1189, 1193,
     1189, 1213, 1214, 1191, 1191, 1191, 1220, 1195, 1192, 1195,
     1192, 1190, 1196, 1197, 1196, 1197, 1198, 1221, 1198, 1194,
     1199, 1199, 1217, 1217, 1200, 1200, 1201, 1202, 1201, 1202,
     1203, 1224, 1203, 1199, 1199, 1199, 1225, 1200, 1196, 1200,
     1204, 1226, 1204, 1211, 1211, 1223, 1223, 1195, 1227, 1202,
     1228, 1201, 1229, 1197, 1233, 1198, 1212, 1212, 1211, 1234,
     1203, 1215, 1215, 1235, 1204, 1216, 1216, 1218, 1218, 1219,

     1219, 1212, 1222, 1222, 1230, 1230, 1215, 1231, 1231, 1241,
     1216, 1242, 1218, 1244, 1219, 1232, 1232, 1222, 1245, 1230,
     1236, 1236, 1231, 1237, 1237, 1238, 1238, 1239, 1239, 1240,
     1240, 1243, 1243, 1246, 1247, 1236, 1248, 1249, 1249, 1250,
     1250, 1251, 1239, 1252, 1252, 1253, 1254, 1255, 1256, 1257,
     1254, 1258, 1249, 1260, 1260, 1261, 1262, 1262, 1263, 1263,
     1264, 1266, 1260, 1265, 1265, 1268, 1268, 1263, 1260, 1262,
     1269, 1269, 1270, 1263, 1271, 1271, 1265, 1272, 1272, 1273,
     1268, 1275, 1276, 1278, 1279, 1280, 1282, 1283, 1284, 1271,
     1285, 1286, 1287, 1289, 1291, 1291, 1292, 1291, 1293, 1291,

     1294, 1294, 1295, 1296, 1295, 1296, 1300, 1291, 1300, 1291,
     1297, 1297, 1302, 1294, 1302, 1294, 1298, 1298, 1311, 1299,
     1299, 1313, 1303, 1297, 1303, 1297, 1307, 1314, 1307, 1298,
     1298, 1298, 1299, 1301, 1299, 1301, 1315, 1304, 1301, 1304,
     1295, 1296, 1302, 1305, 1305, 1308, 1300, 1308, 1301, 1320,
     1301, 1301, 1306, 1306, 1301, 1329, 1305, 1305, 1305, 1304,
     1303, 1309, 1310, 1309, 1310, 1306, 1334, 1306, 1308, 1312,
     1307, 1316, 1316, 1312, 1317, 1317, 1318, 1318, 1319, 1319,
     1321, 1321, 1322, 1322, 1323, 1323, 1316, 1324, 1324, 1325,
     1325, 1318, 1326, 1326, 1335, 1321, 1337, 1322, 1327, 1327,

     1328, 1328, 1310, 1309, 1325, 1330, 1330, 1331, 1331, 1332,
     1332, 1333, 1333, 1327, 1336, 1336, 1338, 1338, 1339, 1339,
     1330, 1340, 1340, 1341, 1332, 1342, 1333, 1343, 1343, 1336,
     1346, 1338, 1344, 1344, 1345, 1345, 1347, 1348, 1349, 1350,
     1332, 1352, 1343, 1351, 1351, 1353, 1353, 1354, 1354, 1355,
     1356, 1357, 1358, 1359, 1360, 1361, 1362, 1362, 1351, 1363,
     1363, 1364, 1354, 1365, 1365, 1366, 1366, 1367, 1369, 1369,
     1370, 1372, 1363, 1371, 1371, 1373, 1374, 1375, 1366, 1376,
     1378, 1379, 1380, 1381, 1382, 1387, 1388, 1387, 1388, 1389,
     1389, 1391, 1392, 1391, 1392, 1406, 1390, 1390, 1394, 1393,

     1394, 1393, 1389, 1389, 1389, 1407, 1408, 1387, 1388, 1390,
     1395, 1390, 1395, 1396, 1397, 1396, 1397, 1398, 1399, 1398,
     1399, 1391, 1393, 1409, 1394, 1400, 1400, 1410, 1392, 1401,
     1401, 1403, 1398, 1403, 1411, 1396, 1412, 1412, 1400, 1400,
     1400, 1404, 1401, 1404, 1401, 1414, 1395, 1402, 1402, 1405,
     1397, 1405, 1413, 1413, 1415, 1415, 1416, 1416, 1399, 1425,
     1402, 1402, 1402, 1428, 1403, 1417, 1417, 1404, 1429, 1415,
     1418, 1418, 1419, 1419, 1420, 1420, 1421, 1421, 1432, 1405,
     1422, 1422, 1423, 1423, 1424, 1424, 1426, 1426, 1434, 1420,
     1438, 1421, 1427, 1427, 1430, 1430, 1439, 1423, 1431, 1431,

     1440, 1426, 1433, 1433, 1435, 1435, 1436, 1436, 1441, 1430,
     1437, 1437, 1442, 1442, 1443, 1443, 1444, 1444, 1448, 1435,
     1449, 1436, 1445, 1445, 1446, 1446, 1450, 1442, 1451, 1443,
     1447, 1447, 1452, 1453, 1454, 1455, 1455, 1445, 1456, 1446,
     1457, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
     1466, 1467, 1468, 1470, 1471, 1470, 1471, 1472, 1472, 1473,
     1474, 1473, 1474, 1488, 1476, 1475, 1476, 1475, 1489, 1477,
     1472, 1477, 1472, 1478, 1479, 1478, 1479, 1480, 1481, 1480,
     1481, 1490, 1491, 1470, 1482, 1482, 1485, 1487, 1485, 1487,
     1492, 1483, 1483, 1493, 1471, 1474, 1475, 1482, 1494, 1482,

     1500, 1473, 1477, 1476, 1483, 1483, 1483, 1484, 1484, 1479,
     1502, 1478, 1485, 1486, 1503, 1486, 1495, 1495, 1480, 1481,
     1484, 1505, 1484, 1486, 1496, 1496, 1497, 1497, 1506, 1487,
     1498, 1498, 1499, 1499, 1501, 1501, 1504, 1504, 1510, 1496,
     1507, 1507, 1508, 1508, 1509, 1509, 1511, 1512, 1513, 1513,
     1514, 1514, 1515, 1515, 1521, 1507, 1516, 1516, 1517, 1517,
     1518, 1518, 1522, 1513, 1523, 1514, 1519, 1519, 1525, 1527,
     1528, 1529, 1530, 1517, 1531, 1532, 1533, 1534, 1535, 1535,
     1536, 1537, 1538, 1539, 1540, 1539, 1540, 1541, 1542, 1541,
     1542, 1555, 1556, 1535, 1543, 1544, 1543, 1544, 1545, 1546,

     1545, 1546, 1547, 1548, 1547, 1548, 1549, 1557, 1549, 1550,
     1550, 1554, 1554, 1541, 1540, 1551, 1559, 1551, 1539, 1552,
     1543, 1552, 1550, 1553, 1550, 1553, 1554, 1542, 1562, 1546,
     1563, 1558, 1558, 1560, 1560, 1564, 1544, 1561, 1561, 1545,
     1565, 1547, 1566, 1548, 1552, 1549, 1558, 1568, 1560, 1553,
     1567, 1567, 1569, 1570, 1551, 1571, 1571, 1572, 1572, 1573,
     1573, 1574, 1574, 1575, 1576, 1577, 1579, 1580, 1581, 1582,
     1571, 1583, 1584, 1585, 1586, 1587, 1587, 1588, 1588, 1589,
     1590, 1591, 1592, 1593, 1592, 1593, 1594, 1595, 1594, 1595,
     1587, 1596, 1598, 1596, 1598, 1597, 1599, 1597, 1599, 1600,

     1600, 1601, 1608, 1601, 1602, 1604, 1602, 1604, 1605, 1609,
     1605, 1610, 1600, 1600, 1600, 1596, 1606, 1606, 1599, 1593,
     1603, 1603, 1592, 1607, 1607, 1594, 1616, 1595, 1597, 1617,
     1602, 1606, 1598, 1603, 1603, 1603, 1611, 1611, 1601, 1612,
     1612, 1613, 1613, 1614, 1614, 1615, 1615, 1605, 1618, 1604,
     1619, 1611, 1620, 1621, 1622, 1623, 1613, 1625, 1614, 1624,
     1624, 1627, 1628, 1629, 1630, 1630, 1631, 1632, 1634, 1635,
     1636, 1636, 1638, 1640, 1641, 1640, 1641, 1642, 1642, 1630,
     1643, 1644, 1643, 1644, 1645, 1646, 1645, 1646, 1648, 1648,
     1642, 1642, 1642, 1647, 1650, 1647, 1650, 1657, 1649, 1649,

     1659, 1648, 1648, 1648, 1651, 1664, 1651, 1656, 1656, 1641,
     1665, 1649, 1640, 1649, 1667, 1646, 1647, 1668, 1643, 1652,
     1652, 1644, 1660, 1660, 1645, 1653, 1653, 1662, 1662, 1658,
     1658, 1670, 1652, 1652, 1652, 1650, 1654, 1654, 1653, 1674,
     1653, 1655, 1655, 1651, 1658, 1661, 1661, 1663, 1663, 1654,
     1654, 1654, 1666, 1666, 1655, 1655, 1655, 1669, 1669, 1675,
     1661, 1671, 1671, 1676, 1676, 1677, 1677, 1666, 1678, 1679,
     1683, 1683, 1669, 1684, 1705, 1684, 1671, 1706, 1676, 1685,
     1685, 1702, 1702, 1683, 1683, 1683, 1686, 1686, 1687, 1688,
     1687, 1688, 1685, 1685, 1685, 1689, 1690, 1689, 1690, 1686,

     1691, 1686, 1691, 1692, 1692, 1693, 1716, 1693, 1694, 1694,
     1687, 1717, 1684, 1695, 1695, 1719, 1692, 1720, 1692, 1688,
     1735, 1694, 1694, 1694, 1696, 1696, 1695, 1736, 1695, 1697,
     1697, 1742, 1690, 1691, 1689, 1698, 1698, 1696, 1696, 1696,
     1700, 1700, 1697, 1753, 1697, 1693, 1701, 1701, 1698, 1698,
     1698, 1699, 1699, 1754, 1699, 1700, 1699, 1703, 1703, 1704,
     1704, 1701, 1707, 1707, 1699, 1755, 1699, 1708, 1708, 1709,
     1709, 1772, 1703, 1710, 1710, 1711, 1711, 1707, 1712, 1712,
     1713, 1713, 1714, 1714, 1709, 1715, 1715, 1726, 1710, 1726,
     1711, 1718, 1718, 1721, 1721, 1713, 1779, 1714, 1722, 1722,

     1780, 1723, 1723, 1781, 1724, 1724, 1721, 1721, 1721, 1790,
     1725, 1722, 1725, 1722, 1723, 1723, 1723, 1724, 1794, 1724,
     1727, 1727, 1728, 1729, 1728, 1729, 1730, 1795, 1730, 1726,
     1731, 1731, 1796, 1727, 1727, 1727, 1802, 1732, 1732, 1804,
     1725, 1733, 1733, 1731, 1731, 1731, 1805, 1737, 1737, 1729,
     1732, 1806, 1732, 1760, 1733, 1760, 1733, 1728, 1734, 1734,
     1811, 1734, 1737, 1734, 1812, 1730, 1738, 1738, 1739, 1739,
     1761, 1734, 1761, 1734, 1740, 1740, 1741, 1741, 1743, 1743,
     1744, 1744, 1745, 1745, 1746, 1746, 1747, 1747, 1760, 1740,
     1748, 1748, 1813, 1743, 1749, 1749, 1761, 1745, 1750, 1750,

     1814, 1747, 1751, 1751, 1752, 1752, 1757, 1757, 1819, 1758,
     1758, 1770, 1770, 1750, 1759, 1759, 1764, 1822, 1764, 1757,
     1827, 1757, 1758, 1758, 1758, 1762, 1762, 1759,  832, 1759,
     1743, 1763, 1763, 1764, 1765, 1783, 1765, 1783, 1762, 1762,
     1762, 1766, 1766,  829, 1763,  827, 1763, 1767, 1767, 1771,
     1771, 1765, 1773, 1773, 1766, 1766, 1766, 1774, 1774, 1784,
     1767, 1784, 1767, 1775, 1775, 1776, 1776, 1773, 1777, 1777,
     1778, 1778, 1782, 1782,  826, 1783, 1784,  824, 1775, 1785,
     1785, 1786, 1787, 1786, 1787, 1782,  823, 1782, 1788, 1788,
     1791, 1791, 1785, 1797, 1785, 1797, 1789, 1789, 1792, 1792,

      822, 1788, 1788, 1788, 1793, 1793,  821, 1786, 1787, 1789,
     1797, 1789, 1798, 1792, 1798, 1799, 1800, 1799, 1800, 1801,
     1801, 1803, 1803, 1807, 1808, 1807, 1808, 1809, 1810, 1809,
     1810, 1815, 1801, 1815, 1801, 1816,  819, 1816, 1798, 1817,
     1818, 1817, 1818, 1820, 1820, 1821, 1821,  817, 1823, 1807,
     1823, 1824,  816, 1824, 1799, 1800,  815, 1825, 1820, 1825,
     1821,  813, 1826, 1808, 1826, 1828, 1828,  812, 1809, 1810,
     1815,  811, 1817, 1818, 1829, 1829, 1816, 1830, 1830,  810,
     1828, 1831, 1831, 1833, 1824, 1833, 1834,  809, 1834, 1823,
      808, 1835, 1830, 1835, 1836,  807, 1836, 1825, 1837, 1837,

     1838, 1838, 1826, 1839, 1839, 1840,  806, 1840, 1841,  805,
     1841, 1845, 1845, 1837, 1842, 1842, 1833, 1844, 1844, 1852,
     1852, 1843, 1843, 1846,  804, 1846, 1834, 1842, 1842, 1842,
     1835,  803, 1844, 1836, 1843, 1843, 1843, 1847, 1847,  802,
     1848, 1848,  801, 1849, 1849, 1840,  798, 1841, 1851, 1851,
     1847, 1847, 1847, 1848, 1848, 1848, 1849,  795, 1849, 1850,
     1850, 1851, 1846, 1851, 1853, 1853,  794, 1854, 1854,  791,
     1855, 1855, 1850, 1850, 1850, 1856, 1856, 1853, 1853, 1853,
     1854, 1854, 1854, 1855,  790, 1855, 1857, 1857, 1856,  789,
     1856, 1858, 1858,  788, 1859, 1859,  787, 1860, 1860, 1857,

      784, 1857, 1861, 1861, 1858, 1858, 1858, 1859,  783, 1859,
     1860,  782, 1860,  777,  776, 1861,  775, 1861, 1863, 1863,
     1863, 1863, 1863, 1863, 1864, 1864, 1864, 1864, 1864, 1864,
     1865, 1865, 1865, 1865, 1865, 1865, 1866, 1866, 1866, 1866,
     1866, 1866, 1867, 1867, 1867, 1867, 1867, 1867, 1868, 1868,
     1868, 1868, 1868, 1868, 1869, 1869, 1869, 1869, 1869, 1869,
     1870, 1870, 1870, 1870, 1870, 1870, 1871,  773,  772, 1871,
     1871, 1872, 1872, 1872, 1872, 1872, 1873, 1873,  771, 1873,
     1873, 1873, 1874, 1874, 1874,  770, 1874, 1874, 1875, 1875,
     1875, 1875,  768, 1875,  767,  761,  759,  758,  756,  755,

      753,  752,  750,  749,  748,  745,  736,  735,  734,  733,
      730,  729,  728,  727,  726,  724,  723,  722,  720,  718,
      717,  716,  714,  713,  712,  711,  710,  709,  708,  704,
      702,  700,  699,  697,  696,  694,  693,  692,  691,  690,
      687,  686,  683,  682,  681,  680,  679,  678,  677,  676,
      673,  672,  671,  667,  666,  665,  664,  663,  662,  658,
      657,  655,  654,  649,  648,  647,  646,  645,  644,  643,
      642,  641,  640,  637,  636,  635,  634,  633,  632,  630,
      629,  615,  613,  612,  611,  610,  609,  608,  607,  606,
      605,  603,  602,  601,  597,  596,  595,  594,  593,  592,

      591,  590,  589,  586,  585,  584,  580,  579,  578,  577,
      576,  575,  574,  573,  572,  571,  570,  569,  568,  567,
      566,  565,  564,  563,  561,  560,  559,  558,  557,  556,
      555,  551,  550,  549,  548,  547,  546,  545,  544,  543,
      542,  541,  537,  536,  532,  531,  526,  525,  523,  522,
      521,  520,  519,  518,  517,  516,  514,  512,  511,  510,
      509,  508,  507,  503,  502,  500,  499,  494,  493,  487,
      486,  485,  484,  483,  482,  481,  480,  479,  477,  476,
      475,  474,  473,  472,  471,  470,  469,  468,  467,  463,
      462,  460,  458,  457,  454,  452,  451,  450,  449,  448,

      447,  446,  445,  444,  443,  442,  440,  439,  438,  437,
      436,  435,  434,  433,  430,  428,  427,  426,  424,  423,
      422,  421,  420,  419,  418,  417,  416,  415,  414,  413,
      411,  410,  406,  405,  404,  400,  399,  396,  395,  394,
      393,  391,  390,  389,  388,  384,  383,  382,  381,  380,
      379,  360,  359,  358,  356,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  345,  344,  343,  342,  341,
      339,  338,  336,  335,  334,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  320,  319,  318,  317,  316,
      315,  313,  312,  311,  310,  308,  307,  305,  304,  302,

      301,  300,  299,  298,  297,  295,  294,  293,  291,  290,
      289,  287,  286,  285,  284,  281,  280,  279,  276,  275,
      274,  273,  257,  256,  255,  254,  252,  251,  249,  248,
      246,  245,  244,  243,  242,  241,  240,  239,  238,  237,
      235,  234,  233,  231,  230,  229,  228,  227,  226,  225,
      224,  222,  221,  220,  219,  217,  216,  215,  214,  213,
      211,  209,  208,  207,  206,  205,  204,  203,  202,  201,
      200,  199,  198,  197,  196,  195,  194,  193,  190,  189,
      188,  187,  186,  185,  183,  165,  164,  163,  162,  161,
      159,  157,  156,  155,  154,  153,  152,  151,  150,  149,

      148,  147,  146,  145,  144,  143,  142,  141,  138,  137,
      136,  135,  134,  133,  131,  130,  126,  124,  123,  122,
      121,  119,  118,  114,  112,   95,   88,   84,   82,   81,
       80,   79,   77,   76,   72,   68,   42,   39,   24,   22,
       19,   14,   13,    8,    7,    6,    5,    4,    3, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[235] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "OSParseosrl.l"
/* $Id$ */
/** @file parseosrl.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
  *
 * \remarks
 * Copyright (C) 2005-2011, Horand Gassmann, Jun Ma, Kipp Martin,
 * Dalhousie University, Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 15 "OSParseosrl.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream> 
 
#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 

//#define PARSERDEBUG

#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"
#include "OSrLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;
     








#line 103 "OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 1993 "OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 113 "OSParseosrl.l"



#line 2238 "OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1863 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3650 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 120 "OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 122 "OSParseosrl.l"
{ YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 123 "OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 125 "OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 141 "OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 145 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 146 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 147 "OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 148 "OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 149 "OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFIDXATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 150 "OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 151 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 152 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 153 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 154 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 155 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERRESULTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 156 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERSOLUTIONRESULTSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 157 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 158 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 159 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLVEROUTPUTSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 160 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSUBSTATUSESATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 161 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 162 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 163 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 164 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 166 "OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 167 "OSParseosrl.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 168 "OSParseosrl.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 169 "OSParseosrl.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 170 "OSParseosrl.l"
{YY_PRINT; return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 174 "OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 175 "OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 176 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 177 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 178 "OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 179 "OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 180 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 181 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 182 "OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 183 "OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 184 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 185 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 186 "OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 187 "OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 188 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 189 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 190 "OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 191 "OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 192 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 193 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 194 "OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 195 "OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 196 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 197 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 198 "OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 199 "OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 200 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 201 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
/* top level elements */
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 205 "OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 206 "OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 207 "OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 209 "OSParseosrl.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 210 "OSParseosrl.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 212 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 213 "OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 215 "OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 216 "OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 218 "OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 219 "OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 221 "OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 222 "OSParseosrl.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 224 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 225 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
/* Remaining elements, sorted alpabetically. */
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 230 "OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMESTART);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 231 "OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMEEND);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 232 "OSParseosrl.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 233 "OSParseosrl.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 234 "OSParseosrl.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 235 "OSParseosrl.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 236 "OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUNUMBERSTART);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 237 "OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUNUMBEREND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 238 "OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUSPEEDSTART);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 239 "OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUSPEEDEND);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 240 "OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEDISKSPACESTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 241 "OSParseosrl.l"
{YY_PRINT; return(AVAILABLEDISKSPACEEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 242 "OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEMEMORYSTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 243 "OSParseosrl.l"
{YY_PRINT; return(AVAILABLEMEMORYEND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 244 "OSParseosrl.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 245 "OSParseosrl.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 246 "OSParseosrl.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 247 "OSParseosrl.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 248 "OSParseosrl.l"
{YY_PRINT;  return(BASISSTATUSSTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 249 "OSParseosrl.l"
{YY_PRINT; return(BASISSTATUSEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 250 "OSParseosrl.l"
{YY_PRINT;  return(BASSTATUSSTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 251 "OSParseosrl.l"
{YY_PRINT; return(BASSTATUSEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 252 "OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 253 "OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 254 "OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 255 "OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 256 "OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTSTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 257 "OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 258 "OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATESTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 259 "OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATEEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 260 "OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 261 "OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 262 "OSParseosrl.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 263 "OSParseosrl.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 264 "OSParseosrl.l"
{YY_PRINT;  return(ENDTIMESTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 265 "OSParseosrl.l"
{YY_PRINT;  return(ENDTIMEEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 266 "OSParseosrl.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 267 "OSParseosrl.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 268 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 269 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 270 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 271 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 272 "OSParseosrl.l"
{YY_PRINT; return(IDXSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 273 "OSParseosrl.l"
{YY_PRINT; return(IDXEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 274 "OSParseosrl.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 275 "OSParseosrl.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 276 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 277 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 278 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 279 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 280 "OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 281 "OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 282 "OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 283 "OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 284 "OSParseosrl.l"
{YY_PRINT;  return(OPTIMIZATIONSOLUTIONSTATUSSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 285 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSOLUTIONSTATUSEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 286 "OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 287 "OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 288 "OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 289 "OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 290 "OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 291 "OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLUTIONRESULTEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 292 "OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 293 "OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 294 "OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 295 "OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 296 "OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 297 "OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 298 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 299 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 300 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 301 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 302 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 303 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 304 "OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 305 "OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 306 "OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 307 "OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 308 "OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTSTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 309 "OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 310 "OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 311 "OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 312 "OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMESTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 313 "OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMEEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 314 "OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 315 "OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 316 "OSParseosrl.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 317 "OSParseosrl.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 318 "OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 319 "OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 320 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 321 "OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 322 "OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 323 "OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 324 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 325 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 326 "OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 327 "OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 328 "OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFARSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 329 "OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFAREND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 330 "OSParseosrl.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 331 "OSParseosrl.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 332 "OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBERSTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 333 "OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBEREND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 334 "OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDSTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 335 "OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDEND);} 
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 336 "OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACESTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 337 "OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACEEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 338 "OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 339 "OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 340 "OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 341 "OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 342 "OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGSTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 343 "OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 344 "OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 345 "OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 346 "OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 347 "OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 348 "OSParseosrl.l"
{YY_PRINT; return(VARIDXSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 349 "OSParseosrl.l"
{YY_PRINT; return(VARIDXEND);}
	YY_BREAK
/* The <item> element and the children of the option header are treated specially because they may legitimately contain special characters */
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 354 "OSParseosrl.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 355 "OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 356 "OSParseosrl.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 357 "OSParseosrl.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 359 "OSParseosrl.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 360 "OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 361 "OSParseosrl.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 362 "OSParseosrl.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 364 "OSParseosrl.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 365 "OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 366 "OSParseosrl.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 367 "OSParseosrl.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 369 "OSParseosrl.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 370 "OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 371 "OSParseosrl.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 372 "OSParseosrl.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 374 "OSParseosrl.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 375 "OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 376 "OSParseosrl.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 377 "OSParseosrl.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 379 "OSParseosrl.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 380 "OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 381 "OSParseosrl.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 382 "OSParseosrl.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* environments and comments */
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 386 "OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext);   yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 387 "OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 389 "OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 223:
#line 391 "OSParseosrl.l"
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 391 "OSParseosrl.l"
;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 392 "OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 394 "OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 227:
#line 396 "OSParseosrl.l"
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 396 "OSParseosrl.l"
;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 397 "OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 400 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 401 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 402 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 406 "OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 418 "OSParseosrl.l"
ECHO;
	YY_BREAK
#line 3758 "OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1863 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1863 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1862);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 418 "OSParseosrl.l"





