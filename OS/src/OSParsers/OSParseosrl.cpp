#line 2 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

#line 4 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 131
#define YY_END_OF_BUFFER 132
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1101] =
    {   0,
        1,    1,  129,  129,  127,  127,  128,  128,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  132,  130,
        1,    1,    2,  117,    2,  130,    6,  130,    5,  130,
        4,  117,  129,  131,  127,  128,  118,  120,  121,  120,
      124,  125,  124,    1,    0,    6,    0,    5,    0,    4,
        0,    0,    0,    0,    0,    0,    0,    0,    1,  117,
        6,    5,  117,  117,  117,  117,  117,  117,  117,  117,
        3,    6,    6,    6,  117,    7,    5,    5,    0,    0,
      123,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,  117,  129,  127,  128,  118,    0,  126,    6,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  117,  117,  117,  117,
      117,  117,  117,  117,  117,    0,    6,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    6,  122,    6,    0,    0,
        0,    0,    0,    6,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  119,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       97,    0,    0,    0,    0,    0,    0,   93,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   89,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  117,  117,  117,  117,  117,  117,  117,
      117,  117,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   56,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   72,    0,    0,
        0,    0,    0,    0,    0,   72,    0,    0,    0,   21,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  117,

      117,  117,  117,  117,  117,  117,  117,    0,   98,    0,
        0,    0,    0,    0,    0,   57,    0,    0,    0,   94,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   90,    0,    0,    0,    0,    0,    0,    0,
      108,   56,    0,    0,    0,    0,   48,   47,  101,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   21,    0,   25,   26,    0,
        0,    0,   29,   30,    0,   37,   38,    0,    0,  117,
      117,  117,  117,  117,   98,    0,    0,    0,    0,    0,
      109,   57,    0,    0,   94,    0,    0,    0,   49,    0,

        0,    0,    0,    0,    0,   73,    0,    0,   90,    0,
        0,    0,    0,    0,  110,    0,    0,    0,   67,    0,
        0,    0,    0,    0,    0,   83,    0,  115,    0,   85,
        0,    0,    0,    0,    0,    0,    0,    0,   23,   24,
        0,    0,    0,   27,   28,    0,   35,   36,    0,   41,
       42,  117,  117,  117,  117,    0,    0,    0,    0,  109,
        0,   69,    0,    0,    0,   49,    0,  102,    0,    0,
        0,    0,    0,   73,    0,    0,    0,    0,    0,    0,
        0,  110,    0,  114,   67,   68,    0,    0,    0,    0,
        0,    0,    0,   52,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   39,   40,  117,  117,  117,  117,
        0,    0,    0,    0,   69,    0,    0,    0,  102,    0,
        0,    0,    0,   84,    0,   53,    0,    0,   86,    0,
        0,    0,    0,   50,    0,    0,    0,    0,    0,   74,
        0,    0,    0,    0,   54,    0,    0,   81,   52,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  117,  117,  117,  117,  117,
      117,  117,  117,  117,    0,    0,    0,   51,    0,    0,
        0,   76,    0,    0,    0,    0,   55,    0,    0,    0,
       84,   53,    0,   86,    0,    0,    0,   50,    0,    0,

        0,  116,   74,   75,    0,    0,    0,   54,    0,    0,
        0,   91,    0,    0,    0,    0,   33,   34,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  117,  117,  117,
      117,  117,  117,  117,  117,  117,    0,    0,   51,    0,
        0,   76,    0,    0,    0,   55,    0,    0,    0,   82,
        0,    0,    0,   87,    0,    0,    0,   95,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   31,   32,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  117,  117,
      117,  117,  117,  117,  117,  117,  117,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   82,    0,    0,   92,

       99,    0,    0,    0,    0,    0,    0,    0,    0,   58,
        0,    0,    0,    0,    0,    0,    0,   20,    0,    0,
        0,   19,    0,    0,    0,    0,    0,   18,    0,    0,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,    0,    0,   88,    0,    0,    0,   96,    0,
        0,    0,    0,   60,    0,   92,    0,    0,    0,  107,
       79,    0,    0,    0,   61,  111,   58,   59,    0,    0,
        0,    0,   45,   46,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  117,  117,  117,  117,  117,
      117,  117,  117,    0,  100,   88,    0,    0,   96,    0,

        0,    0,   63,   60,    0,   77,    0,    0,   64,  107,
        0,  112,   61,   62,    0,    0,    0,   43,   44,   20,
        0,    0,   17,   19,    0,    0,    0,    0,    0,    0,
        0,    8,   18,    0,    0,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  100,    0,    0,   66,
        0,   80,    0,   63,    0,  113,   64,   65,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  117,  117,  117,  117,  117,  117,  117,  117,  117,
        0,   78,   66,   80,    0,    0,    0,    0,    0,   17,
        0,    0,    0,    0,    0,    0,    8,    0,    0,  117,

      117,  117,  117,  117,  117,  117,  117,  117,   78,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  117,  117,  117,  117,  117,  117,  117,  117,
      117,    0,    0,    0,   70,    0,    0,    0,    0,    0,
        0,    0,    9,    0,   10,    0,  117,  117,  117,  117,
      117,  117,  117,  117,  117,    0,    0,    0,    0,    0,
       11,    0,    0,    0,    0,    0,    0,    0,   22,  117,
      117,  117,  117,  117,  117,  117,    0,    0,   71,  105,
        0,   12,    0,    0,    0,    0,    0,    9,   10,    0,
      117,  117,  117,  117,  117,    0,   71,  103,    0,   11,

        0,    0,    0,    0,   22,  117,  117,  117,  117,    0,
      106,    0,   12,    0,    0,    0,    0,  117,  117,  117,
      117,  106,    0,  104,    0,    0,    0,    0,  117,  117,
      117,  117,  104,    0,    0,    0,    0,  117,  117,  117,
      117,    0,    0,    0,    0,  117,  117,  117,  117,    0,
        0,    0,    0,  117,  117,  117,  117,    0,    0,    0,
        0,  117,  117,  117,  117,    0,    0,    0,    0,  117,
      117,  117,  117,    0,    0,    0,   16,    0,   13,  117,
      117,  117,  117,    0,    0,   14,    0,    0,  117,  117,
        0,   15,    0,   16,   13,  117,    0,   14,   15,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    8,    1,    1,    9,    1,
        1,    8,   10,    1,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    8,    1,   15,
       16,   17,   18,    8,    8,    8,   19,   20,   21,   22,
        8,    8,   23,    8,    8,    8,    8,   24,   25,    8,
        8,   26,   27,   28,   29,   30,    8,    8,    8,    8,
        1,    1,    1,    1,    8,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   40,    8,   41,   42,   43,
       44,   45,    8,   46,   47,   48,   49,   50,    8,   51,
       52,   53,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    2,    2,    2,    2,    1,    3,    2,    4,    1,
        2,    2,    2,    2,    5,    1,    6,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[1114] =
    {   0,
        0,   23, 2868, 2867, 2876, 2875, 2872, 2871,    0,    0,
        0,    0, 2864, 2863,   39,   40,   41,   42, 2877, 2886,
       59,  108, 2869,   64, 2866,    8,  157, 2857,   53,  187,
       81,  113,    0, 2886,    0,    0,    0, 2886, 2886, 2862,
     2886, 2886, 2855,    0,   66,  131, 2854,  236,  259,   92,
     2846, 2838, 2833, 2833,   38,   75, 2823, 2834,  308,  171,
        0,  192,  199,  243,  251,  274,  357,  101,  134,   69,
     2886,  277,  134,    0,  197, 2886,  312,  324, 2853,  374,
     2886, 2819, 2813, 2826,    4, 2816, 2824,   56,  217, 2819,
     2826,  330,  118,    0,    0,    0,    0, 2839, 2886,  361,

      188,    5, 2811, 2819,  301, 2814, 2830, 2803, 2803, 2798,
     2806, 2805, 2800, 2800, 2805, 2802,  115,  202,  239,  194,
      253,  331,  228,  299,  338, 2828,  283, 2830, 2796, 2790,
     2803,    6, 2793, 2801,  292,  341, 2796, 2803, 2790, 2801,
     2788, 2783, 2794, 2796, 2780, 2786, 2777, 2778, 2785, 2776,
     2780, 2789, 2772, 2776,   97,  346, 2886,  395, 2770, 2784,
     2768, 2768, 2771,  399, 2777, 2778,  423, 2775, 2777, 2771,
     2772, 2758, 2756,  384,  361,  427,  403,  404,  410,  411,
      406,  160, 2886, 2761, 2772, 2759, 2754, 2765, 2767, 2751,
     2757, 2748, 2749, 2756, 2747, 2751, 2760, 2743, 2747,   98,

     2741, 2746, 2751, 2737, 2742,  446, 2736, 2747, 2742, 2739,
     2744, 2728, 2728, 2728, 2727,  141, 2725, 2734, 2724,  462,
     2724, 2720,  146, 2732, 2722,  468,  484,  478, 2732, 2731,
      493,  497, 2730,  425,  374,  501,  517,  426,  476,  524,
      533,  481,  539, 2723, 2728, 2714, 2719,  555, 2713,  566,
     2720, 2717, 2722, 2706, 2706, 2706, 2705,  178, 2703,  572,
     2703, 2720, 2703, 2717,  589,  593,  549, 2727, 2715, 2712,
     2702,  610, 2697, 2703, 2693, 2691, 2704,  615, 2695, 2702,
     2705, 2704, 2714, 2702, 2693, 2886, 2687, 2691, 2725,  619,
      627,  631, 2682, 2679,  642,  646,  657,  661,  672,  536,

      577,  676,  516,  556,  680,  696,  700,  715,  719, 2678,
     2695, 2678, 2692,  731,  735,  739, 2702, 2690,  751,  755,
     2687, 2677,  759, 2672, 2678, 2668, 2666, 2679,  767, 2670,
     2677,  775,  783, 2680, 2664, 2678, 2677, 2664,  791, 2689,
     2690,  795,  807, 2667, 2655, 2663,  811, 2886, 2674, 2667,
     2660, 2651, 2655,  827, 2679, 2658, 2647, 2661, 2649,  831,
     2654, 2657, 2643, 2643,  684,  839, 2683, 2679, 2676, 2659,
     2658, 2678, 2674, 2671, 2675, 2671, 2668,  847,  816,  608,
      664,  514,  742,  851,  855, 2630, 2644, 2643, 2630,  866,
      870,  874,  882, 2635,  886, 2623, 2630,  890,  899,  906,

     2629, 2616, 2598, 2602,  910,  914, 2556, 2545,  926, 2559,
     2559, 2548, 2547, 2554,  932, 2573,  936, 2568,  940, 2549,
     2544, 2529, 2537, 2545, 2535, 2886,  954, 2886, 2554, 2886,
     2534, 2541,  958, 2538, 2537, 2519, 2521,  945, 2886, 2886,
     2532, 2535,  963, 2886, 2886,  971, 2886, 2886, 2562, 2558,
     2555,  915,  666,  946,  734, 2532, 2521, 2518, 2525,  981,
      985,  989, 2522, 2517, 2502,  994, 1001, 1005, 2509, 2516,
     2502, 1009, 1017, 1025, 2521, 1033, 2488, 2489, 2470, 1037,
     2483, 1041, 2478, 2886, 1053, 2886, 1057, 2453, 2469, 2455,
     1063, 2434, 1073, 1079, 2422, 2425, 2402, 1091, 1095, 1099,

     2392, 1086, 2390, 1118, 2886, 2886, 1126,  984, 1157,  550,
     2386, 2358, 1131, 2371, 1135, 1142, 2349, 2367, 1147, 2356,
     1162, 2350, 1151, 1158, 1190, 1167, 2332, 1194, 1198, 2328,
     2298, 2305, 1210, 1214, 2284, 2300, 2261, 1218, 2291, 1234,
     2237, 2223, 2221, 1238, 1242, 2237, 2239, 2886, 1248, 2207,
     2184, 2203, 1254, 2189, 2186, 1258, 1223, 2146, 2130, 2100,
      235, 2101, 2052, 2058, 2049, 1262,  758, 1042,  816,  849,
     1237, 1040,  459,  659, 2033, 2039, 1280, 1285, 2019, 2035,
     1296, 1300, 2018, 2003, 1975, 1304, 1312, 1990, 1974, 1320,
     1324, 1328, 1921, 1336, 1901, 1870, 1869, 1340, 1882, 1880,

     1874, 2886, 1344, 2886, 1834, 1841, 1831, 1348, 1817, 1833,
     1811, 2886, 1818, 1787, 1803, 1820, 1813, 1798, 1738, 1736,
     1742, 1711, 1699, 1695, 1690, 1681, 1680,  796, 1020, 1242,
     1323, 1324, 1325, 1326,  875,  576, 1664, 1660, 1356, 1661,
     1660, 1374, 1620, 1615, 1602, 1378, 1603, 1620, 1382, 1386,
     1582, 1390, 1565, 2886, 1563, 1564, 1556, 2886, 1526, 1522,
     1520, 1398, 1490, 1493, 1495, 1414, 1362, 2886, 2886, 1418,
     1422, 1481, 1437, 1487, 1459, 1467, 1441, 1445, 1445, 1493,
     1421, 1541, 1245,  461, 1261, 1589, 1000, 1445, 1462, 1434,
     1439, 1482, 1429, 1423, 1423, 1486, 1502, 1390, 1508, 1512,

     2886, 1386, 1393, 1516, 1370, 1365, 1524, 1545, 1387, 1549,
     1355, 1335, 1563, 1579, 1583, 1403, 1598,  341, 1286, 1273,
     1605,  381, 1286, 1266, 1247, 1232, 1613, 1267, 1244, 1215,
     1620, 1628, 1287,  679, 1637, 1365, 1159, 1406, 1428, 1644,
      530, 1429, 1653, 1659, 1669, 1199, 1199, 1677, 1685, 1190,
     1185, 1693, 1697, 1701, 1182, 1713, 1163, 1717, 1721, 1737,
     2886, 1166, 1741, 1187, 1745, 2886, 1759, 2886, 1158, 1763,
     1767, 1179, 1174, 1169, 1173, 1128, 1771, 1169, 1095, 1544,
     1102, 1786, 1128, 1094, 1072, 1425, 1790, 1452, 1778, 1588,
     1809, 1507, 1057, 1813, 1796, 1829, 1071, 1833, 1839, 1843,

     1074, 1849, 1859, 1865, 1079, 2886, 1869, 1068, 1873, 1887,
     1046, 2886, 1891, 2886, 1005, 1895, 1726, 2886, 2886, 1427,
     1021, 1899, 1529, 1706, 1008,  988,  993,  980,  986,  972,
     1903, 1750, 1754,  960,  965,  920, 1918, 1747, 1529, 1603,
     1634, 1402, 1779, 1922, 1548, 1879, 1927, 1937, 1941, 1957,
     1961, 1970,  955, 1977,  931, 2886, 1981, 2886,  897,  887,
      886,  918,  870,  862,  856,  825,  816,  818,  842,  803,
      814, 1938, 1635, 1945, 1564, 1906, 1773, 1958, 1921, 1834,
     1988, 1993, 2006, 2010,  791,  783,  770,  762,  762, 1780,
      768,  754,  755,  733,  742,  728, 1882,  727,  717, 1973,

     1968, 1528, 1971, 1886, 1987, 1988, 1992, 1902, 2025,  703,
      703,  697,  687,  658,  625,  623,  636,  619,  634, 2029,
     2044,  605, 1994, 2007, 2009, 2019, 2013, 1919, 2061, 2067,
     2024,  603,  607,  601, 2886,  594, 2077,  591,  587,  564,
      568, 2083, 2092, 2098, 2102, 2115, 2059, 2119, 2080, 2084,
     2097, 2081, 2135, 2139, 2155,  547, 2159,  536, 2175, 2190,
     2151,  515,  495,  487,  483,  519,  514, 2194, 2170, 2198,
     2214, 2047, 2174, 2103, 2184, 2233,  467, 2237, 2248,  467,
     2253, 2180,  484,  439,  427,  425,  410, 2206, 2219,  440,
     2257, 2195, 2217, 2138, 2197, 2272, 2276, 2886,  436, 2281,

      374,  377,  369,  365, 2288, 2254, 2261, 2268, 2269, 2309,
     2318, 2325, 2299,  342,  352,  336,  319, 2267, 2305, 2302,
     2303, 2341, 2345, 2353,  326,  315,  258,  253, 2333, 2304,
     2078, 2118, 2363,   55,   44,   50,   56, 2338, 2329, 2158,
     2256,   67,   67,   88,  113, 2330, 2276, 2339, 2340,  130,
      146,  141,  142, 2341, 2343, 2352, 2354,  174,  170,  172,
      175, 2355, 2360, 2363, 2364,  182,  185, 2412, 2416, 2374,
     2393, 2431, 2441,  195, 2447, 2451, 2424, 2466, 2436, 2417,
     2471, 2481, 2490, 2506, 2511, 2456,  240,  259, 2521, 2529,
     2538, 2476,  271, 2486, 2496, 2545,  290, 2502, 2533, 2886,

     2594, 2600, 2606, 2612, 2618, 2624, 2630, 2636, 2641, 2647,
     2652, 2658, 2664
    } ;

static yyconst flex_int16_t yy_def[1114] =
    {   0,
     1101, 1101, 1102, 1102, 1103, 1103, 1104, 1104, 1105, 1105,
     1105, 1105, 1106, 1106, 1107, 1107, 1108, 1108, 1100, 1100,
     1100, 1109, 1100, 1109, 1100, 1100, 1109, 1100,   27, 1100,
     1100, 1109, 1110, 1100, 1111, 1112, 1113, 1100, 1100, 1100,
     1100, 1100, 1100,   21, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1109, 1109,
       27,   27, 1109, 1109, 1109, 1109, 1109,   67,   67,   67,
     1100, 1100,   27,   27,   67, 1100, 1100,   67, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100,   67, 1110, 1111, 1112, 1113, 1100, 1100, 1100,

     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100,   67,   67,   67,   67,
       67,   67,   67,   67,   67, 1100,   27, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100,   27, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100,   67,   67,   67,   67,   67,   67,   67,
       67,   67, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,

     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100,   67,   67,   67,   67,   67,   67,   67,
       67,   67, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,   67,

       67,   67,   67,   67,   67,   67,   67, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,   67,
       67,   67,   67,   67, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,

     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100,   67,   67,   67,   67, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,

     1100, 1100, 1100, 1100, 1100, 1100,   67,   67,   67,   67,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100,   67,   67,   67,   67,   67,
       67,   67,   67,   67, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,

     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100,   67,   67,   67,
       67,   67,   67,   67,   67,   67, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,   67,   67,
       67,   67,   67,   67,   67,   67,   67, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,

     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100,   67,   67,   67,   67,   67,
       67,   67,   67, 1100, 1100, 1100, 1100, 1100, 1100, 1100,

     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100,   67,   67,   67,   67,   67,   67,   67,   67,   67,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,   67,

       67,   67,   67,   67,   67,   67,   67,   67, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100,   67,   67,   67,   67,   67,   67,   67,   67,
       67, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100,   67,   67,   67,   67,
       67,   67,   67,   67,   67, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,   67,
       67,   67,   67,   67,   67,   67, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
       67,   67,   67,   67,   67, 1100, 1100, 1100, 1100, 1100,

     1100, 1100, 1100, 1100, 1100,   67,   67,   67,   67, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100,   67,   67,   67,
       67, 1100, 1100, 1100, 1100, 1100, 1100, 1100,   67,   67,
       67,   67, 1100, 1100, 1100, 1100, 1100,   67,   67,   67,
       67, 1100, 1100, 1100, 1100,   67,   67,   67,   67, 1100,
     1100, 1100, 1100,   67,   67,   67,   67, 1100, 1100, 1100,
     1100,   67,   67,   67,   67, 1100, 1100, 1100, 1100,   67,
       67,   67,   67, 1100, 1100, 1100, 1100, 1100, 1100,   67,
       67,   67,   67, 1100, 1100, 1100, 1100, 1100,   67,   67,
     1100, 1100, 1100, 1100, 1100,   67, 1100, 1100, 1100,    0,

     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100
    } ;

static yyconst flex_int16_t yy_nxt[2940] =
    {   0,
       20,   21,   22,   21,   22,   20,   23, 1100,   25,   20,
       26,   27,   28,   29,   30,   20,   31,   20, 1100,   46,
     1100,   48,   32,   20,   21,   22,   21,   22,   20,   23,
       51,   25,   20,   26,   27,   28,   29,   30,   20,   31,
       20,   39,   39,   42,   42,   32,  142,  159,  187,   40,
       40,  143,  143,  188,   77,   78,   77,   78,   43,   43,
       44,   44,   44,   44,   61, 1100,   62, 1100,  111,   45,
       46,   47,   48,   49, 1100,   50, 1100,   46, 1100,   48,
     1100,   51,   92,   92,   92,   92,  112,  146,   51, 1042,
     1043,   52,   53,   92,   92,   92,   92,   54, 1044,  125,

      147,   55,  148,  149, 1045,  113,   56,   57,   58,   44,
       59,   44,   59, 1050, 1100, 1051, 1100,   60,   45,   61,
       47,   62,   49, 1100,   50, 1100,  114, 1100, 1052, 1100,
       63,  122,   72,   72,   72,   72,   93,  217,  259,  156,
       64,   65,  218,  260,  100,   60,   66,   60,   60,   60,
       67,  101,  123, 1053,   60,   68,   69,   70,   72,   73,
       72,   73,  174,   60,   60,  101,   60, 1100,   60, 1100,
       74, 1100, 1100, 1100, 1100,  278,  124,   75, 1058,  279,
      286, 1100,   60, 1100,  279, 1100, 1059, 1100, 1060, 1061,
       60,   75,   79,   77,   78,   77,   78,  126,  126,   80,

     1100,  158, 1100,   61,   81,   62,  126,  126,  242, 1100,
      127, 1100,  329, 1100, 1066, 1100,  330, 1067, 1068,   82,
       83, 1069,   93,   84,   60,   85,   86,   60,   87, 1074,
       88, 1075,   60,   89,   90,  177,   91,   77,   77,   77,
       77, 1084,   60, 1094, 1100,   60, 1100,   46,  175,   48,
       60,  150, 1100, 1100, 1100, 1100,  101, 1100,   60, 1100,
      151, 1100, 1095, 1100,  152, 1100,  622, 1100,  153,   60,
      101,   80,  180,  117, 1098, 1100,   60, 1100,   72,   72,
       72,   72,  623,   60, 1100,  118, 1100,   60, 1100,  176,
     1100,   82,   83, 1099,  178,   84,  127,  102,  103, 1037,

      104,   60,   88,   60, 1036,  105,  106,  119,   91,   44,
       59,   44,   59,   77,   77,   77,   77,   60,   45,   61,
       47,   62,   49,  191,   50,   77,   78,   77,   78,   60,
       63,   92,   92,   92,   92,  162,  192,  181,  193,  194,
       64,   65,  775,  775,  151,  775,   66,   60,  152, 1035,
       67, 1034,  153, 1028,   60,   68,   69,   70, 1100,   60,
     1100,   60,   72,   72,   72,   72,   60, 1100,   60, 1100,
     1027, 1100,   60, 1100,  100,  195,  179, 1026,  182,   60,
       60,  101,  778,  778,  196,  778,   60,  120,  197, 1025,
     1017,   60,  198,  235, 1016,  101,   72,   72,   72,   72,

       72,   72,   72,   72,   60,  121,  129,  130,  158,   60,
      131, 1015,  132,  133,   60,  134, 1014,  135,  234,  301,
      136,  137,   60,  138,  226,  226,  226,  226,  226,  236,
      226,  236,   60,   60,   60,  238,   60,  237,  227, 1013,
       60,   60,  227, 1005, 1004,  240,  239,  266,  266,  266,
      266,   60,   60,  241,   60,   60,   60,   60,   60,   60,
      303,  300,  267,  266,  266,  266,  266, 1003,  268,  226,
      226,  226,  226,   60,   60,   60, 1002, 1001,  267,  291,
      291,  291,  291,  227,  283,  289,  289, 1000,  289,  635,
      290,   60,  290,  292,  295,  295,  295,  295,  297,  297,

      297,  297,  226,  236,  226,  236,   60,   60,  296,  738,
      304,   60,  298,  998,  996,  307,  227,  989,  291,  302,
      291,  302,  988,  987,   60,  295,  305,  295,  305,   60,
      986,   60,  292,  985,  297,  306,  297,  306,  454,  296,
      308,  308,  308,  308,   60,  984,   60,   60,  298,   60,
      342,  342,  342,  342,   60,  309,  315,  315,  315,  315,
      792,  382,   60,   60,   60,   60,   60,  319,  319,  319,
      319,  316,   60,  332,  332,  332,  332,  317,   60,  380,
       60,   60,  320,  980,   60,  310,   60,  977,  333,  574,
      339,  339,  339,  339,  266,  266,  266,  266,   60,  965,

      321,  340,  964,  383,   60,  341,   60,   60,  687,  267,
      334,  347,  347,  347,  347,  381,  354,  354,  354,  354,
      366,  366,  366,  366,   60,   60,  348,  355,  291,  291,
      291,  291,  367,  367,  963,  367,  962,  368,   60,  369,
      959,  958,  292,  295,  295,  295,  295,  372,  372,  957,
      372,  956,  373,  452,  374,  946,   60,  296,  297,  297,
      297,  297,  375,  375,  941,  375,  940,  376,  939,  377,
      938,  937,  298,  378,  378,  378,  378,  291,  302,  291,
      302,  295,  305,  295,  305,  289,  289,  379,  289,   60,
      290,  292,  290,  636,   60,  296,   60,  297,  306,  297,

      306,  378,  384,  378,  384,  936,   60,   60,  453,   60,
       60,  298,   60,  508,   60,  379,  308,  308,  308,  308,
      385,  385,  385,  385,   60,  787,   60,   60,   60,  935,
       60,  309,  390,  390,  390,  390,  315,  315,  315,  315,
      392,  392,  392,  392,   60,  934,  933,  391,   60,  932,
      922,  316,  319,  319,  319,  319,  395,  395,  395,  395,
      398,  398,  398,  398,   60,  510,  455,  320,  405,  405,
      405,  405,   60,  921,  920,  399,  332,  332,  332,  332,
      919,  918,   60,  406,  409,  409,  409,  409,   60,  917,
       60,  333,  339,  339,  339,  339,  342,  342,  342,  342,

      916,  628,  915,  340,  914,  913,   60,  341,  417,  417,
      417,  417,  347,  347,  347,  347,  912,  449,  449,  418,
      449,  911,  450,  419,  451,  910,   60,  348,  354,  354,
      354,  354,  433,  433,  433,  433,  899,  898,  679,  355,
      366,  366,  366,  366,   60,  897,   60,  419,  378,  378,
      378,  378,  378,  384,  378,  384,  385,  385,  385,  385,
      896,  895,  379,  630,   60,  894,  379,  390,  390,  390,
      390,  460,  460,  460,  460,  392,  392,  392,  392,   60,
      631,   60,  391,  461,  461,  461,  461,  395,  395,  395,
      395,  398,  398,  398,  398,  893,  632,   60,  462,   60,

      466,  466,  466,  466,  892,   60,  399,  467,  467,  467,
      467,  405,  405,  405,  405,  474,  474,  474,  474,  891,
      686,  890,  468,   60,  889,  888,  406,  409,  409,  409,
      409,  887,  469,  482,  482,  482,  482,  417,  417,  417,
      417,  485,  485,  485,  485,   60,  367,  367,  418,  367,
      872,  368,  419,  369,  486,  493,  493,  493,  493,  433,
      433,  433,  433,   60,  372,  372,  507,  372,   60,  373,
      494,  374,  375,  375,  419,  375,   60,  376,  886,  377,
      885,  509,  460,  460,  460,  460,  461,  461,  461,  461,
      515,  515,  515,  515,   60,  466,  466,  466,  466,  871,

      870,  462,  467,  467,  467,  467,  519,  519,  519,  519,
      523,  523,  523,  523,   60,  868,  867,  468,  525,  525,
      525,  525,  567,  866,  865,  524,  474,  474,  474,  474,
       60,  864,   60,  526,  528,  528,  528,  528,  533,  533,
      533,  533,  482,  482,  482,  482,  863,  742,   60,  529,
       60,  861,  860,  534,  485,  485,  485,  485,  538,  538,
      538,  538,  680,  535,  544,  544,  544,  544,   60,  539,
       60,  859,   60,  540,  493,  493,  493,  493,  634,  545,
      549,  549,  549,  549,  856,  629,  546,   60,   60,  494,
       60,  547,  553,  553,  553,  553,  544,  544,  544,  544,

      556,  556,  556,  556,  559,   60,  846,  540,  560,  855,
      561,  545,  562,  563,  557,  564,  853,  848,  554,  449,
      449,  835,  449,  555,  450,  834,  451,  556,  566,  556,
      566,  833,  577,  577,  577,  577,  515,  515,  515,  515,
      830,  557,  825,  581,  581,  581,  581,  578,  519,  519,
      519,  519,  523,  523,  523,  523,   60,  579,  582,  591,
      591,  591,  591,  586,  586,  586,  586,  524,  592,  592,
      592,  592,  824,  821,   60,  568,  820,  819,  587,  569,
      818,  570,  817,  571,  572,  588,  573,   60,  815,   60,
      589,  525,  525,  525,  525,  528,  528,  528,  528,  594,

      594,  594,  594,  812,  789,   60,  526,   60,  811,  806,
      529,  533,  533,  533,  533,  598,  598,  598,  598,  538,
      538,  538,  538,  805,  616,  616,  534,  616,  801,  617,
      539,  618,  800,  798,  540,  603,  603,  603,  603,  544,
      544,  544,  544,  608,  608,  608,  608,  797,  604,  549,
      549,  549,  549,  785,  545,  553,  553,  553,  553,  556,
      556,  556,  556,  556,  566,  556,  566,   60,  783,  783,
      540,  783,   60,  557,  784,   60,  681,  557,  782,  737,
      633,  577,  577,  577,  577,   60,  639,  639,  639,  639,
       60,   60,   60,   60,  781,  739,  578,  581,  581,  581,

      581,  642,  642,  642,  642,  586,  586,  586,  586,   60,
       60,  780,  582,  646,  646,  646,  646,   60,  779,  777,
      587,  649,  649,  649,  649,  591,  591,  591,  591,  592,
      592,  592,  592,  776,  786,   60,  650,  594,  594,  594,
      594,  598,  598,  598,  598,  603,  603,  603,  603,  608,
      608,  608,  608,   60,   60,   60,   60,  639,  639,  639,
      639,  683,  682,  616,  616,  684,  616,  685,  617,  770,
      618,   60,   60,   60,   60,  642,  642,  642,  642,  646,
      646,  646,  646,  649,  649,  649,  649,  697,  697,  697,
      697,  699,  699,  699,  699,   60,  769,  788,  650,  708,

      708,  708,  708,  766,  772,  772,  700,  772,  762,  773,
      709,  774,  761,   60,  710,  714,  714,  714,  714,  715,
      715,  715,  715,  717,  717,  717,  717,  758,  775,  775,
      710,  775,  877,  716,  757,  755,   60,  718,  721,  721,
      721,  721,  727,  727,  727,  727,  715,  731,  715,  731,
       60,   60,  722,  790,   60,   60,  728,  752,   60,   60,
      716,  751,  734,  744,  744,  744,  744,  793,  719,   60,
      836,  723,  750,   60,  791,   60,   60,   60,  745,  729,
      747,  746,   60,  748,  748,  748,  748,  753,  753,  753,
      753,  743,  730,   60,  717,  732,  717,  732,  749,  838,

       60,  726,  754,  697,  697,  697,  697,  725,  718,  699,
      699,  699,  699,  756,  756,  756,  756,  759,  759,  759,
      759,  724,  720,   60,  700,  763,  763,  763,  763,  713,
      862,  862,  760,  862,  712,  711,  764,   60,  845,  733,
      765,   60,  721,  735,  721,  735,  708,  708,  708,  708,
      767,  767,  767,  767,  707,   60,  722,  709,   60,   60,
      706,  710,  826,  768,  771,  771,  771,  771,  827,  705,
      828,   60,  874,  829,  925,  736,   60,   60,   60,  765,
      714,  714,  714,  714,  715,  715,  715,  715,  879,   60,
      727,  740,  727,  740,   60,  710,   60,  704,  716,  717,

      717,  717,  717,  903,  728,  703,  721,  721,  721,  721,
      702,  701,   60,  718,  727,  727,  727,  727,   60,   60,
      722,  715,  731,  715,  731,  698,  843,  741,  728,  717,
      732,  717,  732,   60,  875,  716,   60,   60,  721,  735,
      721,  735,  696,  718,  695,  727,  740,  727,  740,  694,
       60,   60,  722,  693,  794,  794,  794,  794,   60,  728,
      744,  744,  744,  744,   60,   60,  692,   60,   60,  795,
      796,  796,  796,  796,   60,  745,   60,  876,  748,  748,
      748,  748,   60,   60,  901,   60,  799,  799,  799,  799,
      691,  690,   60,  749,  802,  802,  802,  802,  753,  753,

      753,  753,  804,  804,  804,  804,  689,  778,  778,  803,
      778,  688,  678,  754,  756,  756,  756,  756,  807,  807,
      807,  807,  759,  759,  759,  759,  677,  772,  772,  808,
      772,  676,  773,  809,  774,  675,  674,  760,  810,  810,
      810,  810,  763,  763,  763,  763,  813,  813,  813,  813,
      673,  869,  869,  764,  869,  783,  783,  765,  783,  814,
      767,  767,  767,  767,  816,  816,  816,  816,  771,  771,
      771,  771,  822,  822,  822,  822,  672,   60,  671,  809,
      670,  862,  862,  765,  862,  873,  823,  831,  831,  831,
      831,  822,  837,  822,  837,   60,  839,  847,  847,  847,

      847,  832,  840,   60,  841,  823,  669,  842,   60,   60,
      831,  844,  831,  844,  794,  794,  794,  794,  905,  668,
       60,   60,  878,  667,  832,  666,   60,   60,  665,  795,
      796,  796,  796,  796,  849,  849,  849,  849,   60,   60,
      799,  799,  799,  799,  851,  851,  851,  851,  664,  850,
      802,  802,  802,  802,  663,  662,  908,   60,  661,  852,
      854,  854,  854,  854,   60,  803,  804,  804,  804,  804,
      807,  807,  807,  807,  857,  857,  857,  857,  660,  659,
      658,  808,   60,  869,  869,  809,  869,  858,  810,  810,
      810,  810,  813,  813,  813,  813,  816,  816,  816,  816,

      822,  822,  822,  822,  831,  831,  831,  831,  657,   60,
      656,  809,  655,  880,  823,  654,   60,  653,  832,  822,
      837,  822,  837,  831,  844,  831,  844,   60,  847,  847,
      847,  847,   60,  823,  927,  931,   60,  832,  881,  881,
      881,  881,  849,  849,  849,  849,  904,  652,   60,  952,
       60,   60,   60,  882,   60,  907,  651,  850,  883,  883,
      883,  883,  851,  851,  851,  851,   60,   60,   60,   60,
       60,  884,  884,  884,  884,   60,  900,  852,  854,  854,
      854,  854,  857,  857,  857,  857,   60,  902,   60,  881,
      881,  881,  881,   60,  909,  909,  909,  909,   60,  648,

      906,   60,  924,   60,  882,  926,   60,  883,  883,  883,
      883,  884,  884,  884,  884,  923,   60,   60,   60,   60,
      647,   60,   60,  645,   60,  928,  909,  909,  909,  909,
      942,  942,  942,  942,  929,   60,   60,   60,  930,   60,
       60,  947,   60,   60,  943,  944,  944,  944,  944,   60,
      644,  950,  643,  948,   60,   60,  949,   60,  641,  945,
      951,   60,  942,  953,  942,  953,  640,   60,  944,  954,
      944,  954,   60,  638,  955,  637,  943,  992,  960,  960,
      960,  960,  945,  627,  942,  942,  942,  942,  626,   60,
      625,   60,  961,  966,  966,   60,  966,   60,  943,  944,

      944,  944,  944,  967,  967,  970,  967,   60,   60,   60,
       60,   60,  975,  945,   60,   60,  968,  968,  968,  968,
      960,  971,  960,  971, 1040,  972,   60,   60,   60,   60,
      969,  973,   60,   60,  961,  974,  942,  953,  942,  953,
      944,  954,  944,  954,  624,   60,  994,  621,   60,   60,
      943,   60,  983,  983,  945,  983,  968,  976,  968,  976,
      978,  978,  978,  978, 1041,   60,   60,   60,   60,   60,
      969,  990,  990,  620,  990,  979,  981,  981,  981,  981,
     1008,  999,  999,   60,  999,   60,   60,   60,   60,  619,
      982,  960,  960,  960,  960,  968,  968,  968,  968,  981,

      991,  981,  991,   60,   60,  961, 1048,  966,  966,  969,
      966,  615,  993,  982,   60,  960,  971,  960,  971,  614,
      967,  967,   60,  967,  995,   60,  613,   60,   60,  961,
      612, 1009,   60, 1006,  968,  976,  968,  976,  978,  978,
      978,  978,  611,   60,   60,   60,   60,   60,  969,  997,
      997,  997,  997,  979,  981,  981,  981,  981,  981,  991,
      981,  991,   60,   60,  610,   60, 1007,  609,  982,  607,
      606,  605,  982, 1010, 1010, 1010, 1010,  997,  997,  997,
      997,   60,  983,  983,   60,  983,   60,   60, 1011,  990,
      990,   60,  990, 1020, 1021, 1019, 1018,   60,   60,   60,

      999,  999,   60,  999, 1049,   60,   60,  602,  601,   60,
     1010, 1010, 1010, 1010, 1029,   60,   60,   60, 1012, 1022,
     1022, 1022, 1022,  600, 1055, 1011, 1023, 1023, 1023, 1023,
     1030,  599,   60,   60,   60,   60, 1031, 1032, 1039,  597,
      596, 1024, 1022, 1022, 1022, 1022, 1023, 1023, 1023, 1023,
       60,   60,   60,   60, 1033, 1033, 1033, 1033, 1038,   60,
       60, 1024,  595,   60, 1033, 1033, 1033, 1033,   60,   60,
       60,   60, 1046,   60,  593, 1047, 1054,   60,   60, 1056,
     1057,   60,   60, 1063,   60,   60,   60,   60,   60, 1062,
       60,   60,  590,   60,   60, 1070,  585,  584,  583, 1064,

       60, 1065,   60,   60,   60,  580,  576, 1071,   60, 1072,
     1073,   60,   60, 1076, 1076, 1076, 1076, 1078, 1078, 1078,
     1078, 1080,   60,   60,  575, 1087, 1087, 1077, 1087,  565,
      558, 1079, 1076, 1082, 1076, 1082,  552, 1088, 1088, 1081,
     1088,   60, 1078, 1083, 1078, 1083, 1077,   60, 1085, 1085,
     1085, 1085, 1076, 1076, 1076, 1076, 1079, 1093, 1093,  551,
     1093,   60, 1086, 1089,  550,   60, 1077, 1078, 1078, 1078,
     1078,   60, 1085, 1090, 1085, 1090,  548, 1097, 1097,   60,
     1097, 1079, 1076, 1082, 1076, 1082, 1086, 1087, 1087,   60,
     1087, 1078, 1083, 1078, 1083,  543, 1077, 1088, 1088,  542,

     1088,   60,  541, 1093, 1093, 1079, 1093, 1091, 1091, 1091,
     1091,   60, 1085, 1085, 1085, 1085,  537,  536,  532,   60,
       60, 1092, 1091, 1096, 1091, 1096, 1086,  531,  530,   60,
     1085, 1090, 1085, 1090, 1097, 1097, 1092, 1097,   60, 1091,
     1091, 1091, 1091,  527, 1086,  522, 1091, 1096, 1091, 1096,
      521,   60,  520, 1092,  518,  517,  516,  514,  513,   60,
     1092,  512,  511,  506,  505,  504,  503,  502,  501,   60,
      500,  499,  498,  497,  496,   60,  495,   60,  492,  491,
      490,  489,  488,  487,  484,  483,  481,  480,  479,  478,
      477,  476,  475,   60,   24,   24,   24,   24,   24,   24,

       33,   33,   33,   33,   33,   33,   35,   35,   35,   35,
       35,   35,   36,   36,   36,   36,   36,   36,   34,   34,
       34,   34,   34,   34,   37,   37,   37,   37,   37,   37,
       38,   38,   38,   38,   38,   38,   41,   41,   41,   41,
       41,   41,   60,  473,  472,   60,   60,   94,   94,   94,
       94,   94,   95,   95,  471,   95,   95,   95,   96,   96,
       96,  470,   96,   96,   97,   97,   97,   97,  465,   97,
      464,  463,  459,  458,  457,  456,  448,  447,  446,  445,
      444,  443,  442,  441,  440,  439,  438,  437,  436,  435,
      434,  432,  431,  430,  429,  428,  427,  426,  425,  424,

      423,  422,  421,  420,  416,  415,  414,  413,  412,  411,
      410,  408,  407,  404,  403,  402,  401,  400,  397,  396,
      394,  393,  389,  388,  387,  386,  371,  370,  365,  364,
      363,  362,  361,  360,  359,  358,  357,  356,  353,  352,
      351,  350,  349,  346,  345,  344,  343,  338,  337,  336,
      335,  331,  328,  327,  326,  325,  324,  323,  322,  318,
      314,  313,  312,  311,  299,  294,  293,  288,  287,  285,
      284,  282,  281,  280,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  265,  264,  263,  262,  261,  258,  257,
      256,  255,  254,  253,  252,  251,  250,  249,  248,  247,

      246,  245,  244,  243,  233,  232,  231,  230,  229,  228,
      225,  224,  223,  222,  221,  220,  219,  216,  215,  214,
      213,  212,  211,  210,  209,  208,  207,  206,  205,  204,
      203,  202,  201,  200,  199,  190,  189,  186,  185,  184,
      183,  158,  173,  172,  171,  170,  169,  168,  167,  166,
      165,  164,  163,  161,  160,  157,  155,  154,  145,  144,
      141,  140,  139,  128,  116,  115,  110,  109,  108,  107,
       76,   99,   98,   76,   71,   71, 1100,   34,   34,   34,
       34,   34,   34,   34,   34,   19, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,

     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100
    } ;

static yyconst flex_int16_t yy_chk[2940] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    0,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    0,   26,
        0,   26,    1,    2,    2,    2,    2,    2,    2,    2,
       26,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   15,   16,   17,   18,    2,   85,  102,  132,   15,
       16,   85,  102,  132,   29,   29,   29,   29,   17,   18,
       21,   21,   21,   21,   29,   24,   29,   24,   55,   21,
       21,   21,   21,   21,   24,   21,   24,   45,   24,   45,
       24,   21,   31,   31,   31,   31,   55,   88,   45, 1034,
     1035,   21,   21,   50,   50,   50,   50,   21, 1036,   70,

       88,   21,   88,   88, 1037,   56,   21,   21,   21,   22,
       22,   22,   22, 1042,   32, 1043,   32,   70,   22,   22,
       22,   22,   22,   32,   22,   32,   56,   32, 1044,   32,
       22,   68,   46,   46,   46,   46,   32,  155,  200,   93,
       22,   22,  155,  200,   46,  117,   22,   73,   93,   68,
       22,   46,   68, 1045,   73,   22,   22,   22,   27,   27,
       27,   27,  117,  117,   69,   46,   93,   27,   73,   27,
       27,   27,   60,   27,   60,  216,   69,   27, 1050,  216,
      223,   60,   69,   60,  223,   60, 1051,   60, 1052, 1053,
      182,   27,   30,   62,   62,   62,   62,  101,  101,   30,

       63,  101,   63,   62,   30,   62,   75,   75,  182,   63,
       75,   63,  258,   63, 1058,   63,  258, 1059, 1060,   30,
       30, 1061,   63,   30,  120,   30,   30,   75,   30, 1066,
       30, 1067,  118,   30,   30,  120,   30,   48,   48,   48,
       48, 1074,  120, 1087,   64,   75,   64,   48,  118,   48,
      118,   89,   65,   64,   65,   64,   48,   64,  123,   64,
       89,   65, 1088,   65,   89,   65,  561,   65,   89,  119,
       48,   49,  123,   64, 1093,   66,  123,   66,   72,   72,
       72,   72,  561,  121,   66,   65,   66,  119,   66,  119,
       66,   49,   49, 1097,  121,   49,  127,   49,   49, 1028,

       49,  121,   49,  127, 1027,   49,   49,   66,   49,   59,
       59,   59,   59,   77,   77,   77,   77,  127,   59,   59,
       59,   59,   59,  135,   59,   78,   78,   78,   78,  124,
       59,   92,   92,   92,   92,  105,  135,  124,  135,  135,
       59,   59,  718,  718,  105,  718,   59,  124,  105, 1026,
       59, 1025,  105, 1017,   78,   59,   59,   59,   67,  156,
       67,  122,  100,  100,  100,  100,  156,   67,  125,   67,
     1016,   67,   78,   67,  100,  136,  122, 1015,  125,  122,
      156,  100,  722,  722,  136,  722,  125,   67,  136, 1014,
     1004,  175,  136,  175, 1003,  100,  158,  158,  158,  158,

      164,  164,  164,  164,  235,   67,   80,   80,  158,  175,
       80, 1002,   80,   80,  174,   80, 1001,   80,  174,  235,
       80,   80,  235,   80,  167,  167,  167,  167,  176,  176,
      176,  176,  174,  177,  178,  178,  181,  177,  167,  999,
      179,  180,  176,  990,  987,  180,  179,  206,  206,  206,
      206,  177,  178,  181,  181,  234,  238,  176,  179,  180,
      238,  234,  206,  220,  220,  220,  220,  986,  206,  226,
      226,  226,  226,  234,  238,  176,  985,  984,  220,  228,
      228,  228,  228,  226,  220,  227,  227,  983,  227,  573,
      227,  684,  227,  228,  231,  231,  231,  231,  232,  232,

      232,  232,  236,  236,  236,  236,  239,  573,  231,  684,
      239,  242,  232,  980,  977,  242,  236,  967,  237,  237,
      237,  237,  966,  965,  239,  240,  240,  240,  240,  242,
      964,  236,  237,  963,  241,  241,  241,  241,  382,  240,
      243,  243,  243,  243,  382,  962,  303,  237,  241,  236,
      267,  267,  267,  267,  240,  243,  248,  248,  248,  248,
      741,  303,  382,  241,  303,  237,  300,  250,  250,  250,
      250,  248,  240,  260,  260,  260,  260,  248,  741,  300,
      510,  241,  250,  958,  300,  243,  304,  956,  260,  510,
      265,  265,  265,  265,  266,  266,  266,  266,  510,  941,

      250,  265,  940,  304,  304,  265,  636,  301,  636,  266,
      260,  272,  272,  272,  272,  301,  278,  278,  278,  278,
      290,  290,  290,  290,  636,  301,  272,  278,  291,  291,
      291,  291,  292,  292,  939,  292,  938,  292,  380,  292,
      936,  934,  291,  295,  295,  295,  295,  296,  296,  933,
      296,  932,  296,  380,  296,  922,  380,  295,  297,  297,
      297,  297,  298,  298,  919,  298,  918,  298,  917,  298,
      916,  915,  297,  299,  299,  299,  299,  302,  302,  302,
      302,  305,  305,  305,  305,  365,  365,  299,  365,  574,
      365,  302,  365,  574,  381,  305,  453,  306,  306,  306,

      306,  307,  307,  307,  307,  914,  302,  574,  381,  734,
      305,  306,  381,  453,  453,  307,  308,  308,  308,  308,
      309,  309,  309,  309,  302,  734,  306,  734,  305,  913,
      307,  308,  314,  314,  314,  314,  315,  315,  315,  315,
      316,  316,  316,  316,  306,  912,  911,  314,  307,  910,
      899,  315,  319,  319,  319,  319,  320,  320,  320,  320,
      323,  323,  323,  323,  455,  455,  383,  319,  329,  329,
      329,  329,  383,  898,  896,  323,  332,  332,  332,  332,
      895,  894,  455,  329,  333,  333,  333,  333,  567,  893,
      383,  332,  339,  339,  339,  339,  342,  342,  342,  342,

      892,  567,  891,  339,  889,  888,  567,  339,  343,  343,
      343,  343,  347,  347,  347,  347,  887,  379,  379,  343,
      379,  886,  379,  343,  379,  885,  628,  347,  354,  354,
      354,  354,  360,  360,  360,  360,  871,  870,  628,  354,
      366,  366,  366,  366,  628,  869,  569,  360,  378,  378,
      378,  378,  384,  384,  384,  384,  385,  385,  385,  385,
      868,  867,  378,  569,  569,  866,  384,  390,  390,  390,
      390,  391,  391,  391,  391,  392,  392,  392,  392,  570,
      570,  384,  390,  393,  393,  393,  393,  395,  395,  395,
      395,  398,  398,  398,  398,  865,  570,  570,  393,  384,

      399,  399,  399,  399,  864,  635,  398,  400,  400,  400,
      400,  405,  405,  405,  405,  406,  406,  406,  406,  863,
      635,  862,  400,  635,  861,  860,  405,  409,  409,  409,
      409,  859,  400,  415,  415,  415,  415,  417,  417,  417,
      417,  419,  419,  419,  419,  452,  438,  438,  417,  438,
      836,  438,  417,  438,  419,  427,  427,  427,  427,  433,
      433,  433,  433,  452,  443,  443,  452,  443,  836,  443,
      427,  443,  446,  446,  433,  446,  454,  446,  855,  446,
      853,  454,  460,  460,  460,  460,  461,  461,  461,  461,
      462,  462,  462,  462,  454,  466,  466,  466,  466,  835,

      834,  461,  467,  467,  467,  467,  468,  468,  468,  468,
      472,  472,  472,  472,  508,  830,  829,  467,  473,  473,
      473,  473,  508,  828,  827,  472,  474,  474,  474,  474,
      687,  826,  508,  473,  476,  476,  476,  476,  480,  480,
      480,  480,  482,  482,  482,  482,  825,  687,  687,  476,
      629,  821,  815,  480,  485,  485,  485,  485,  487,  487,
      487,  487,  629,  480,  491,  491,  491,  491,  629,  487,
      572,  811,  568,  487,  493,  493,  493,  493,  572,  491,
      494,  494,  494,  494,  808,  568,  491,  793,  572,  493,
      568,  491,  498,  498,  498,  498,  499,  499,  499,  499,

      500,  500,  500,  500,  502,  793,  793,  498,  502,  805,
      502,  499,  502,  502,  500,  502,  801,  797,  499,  504,
      504,  785,  504,  499,  504,  784,  504,  507,  507,  507,
      507,  783,  513,  513,  513,  513,  515,  515,  515,  515,
      781,  507,  779,  516,  516,  516,  516,  513,  519,  519,
      519,  519,  523,  523,  523,  523,  507,  513,  516,  524,
      524,  524,  524,  521,  521,  521,  521,  523,  526,  526,
      526,  526,  778,  776,  507,  509,  775,  774,  521,  509,
      773,  509,  772,  509,  509,  521,  509,  509,  769,  737,
      521,  525,  525,  525,  525,  528,  528,  528,  528,  529,

      529,  529,  529,  764,  737,  509,  525,  737,  762,  757,
      528,  533,  533,  533,  533,  534,  534,  534,  534,  538,
      538,  538,  538,  755,  557,  557,  533,  557,  751,  557,
      538,  557,  750,  747,  538,  540,  540,  540,  540,  544,
      544,  544,  544,  545,  545,  545,  545,  746,  540,  549,
      549,  549,  549,  730,  544,  553,  553,  553,  553,  556,
      556,  556,  556,  566,  566,  566,  566,  571,  728,  728,
      553,  728,  630,  556,  729,  683,  630,  566,  726,  683,
      571,  577,  577,  577,  577,  571,  578,  578,  578,  578,
      630,  685,  566,  683,  725,  685,  577,  581,  581,  581,

      581,  582,  582,  582,  582,  586,  586,  586,  586,  685,
      566,  724,  581,  587,  587,  587,  587,  733,  723,  720,
      586,  590,  590,  590,  590,  591,  591,  591,  591,  592,
      592,  592,  592,  719,  733,  733,  590,  594,  594,  594,
      594,  598,  598,  598,  598,  603,  603,  603,  603,  608,
      608,  608,  608,  631,  632,  633,  634,  639,  639,  639,
      639,  632,  631,  667,  667,  633,  667,  634,  667,  712,
      667,  631,  632,  633,  634,  642,  642,  642,  642,  646,
      646,  646,  646,  649,  649,  649,  649,  650,  650,  650,
      650,  652,  652,  652,  652,  736,  711,  736,  649,  662,

      662,  662,  662,  709,  716,  716,  652,  716,  706,  716,
      662,  716,  705,  736,  662,  666,  666,  666,  666,  670,
      670,  670,  670,  671,  671,  671,  671,  703,  820,  820,
      666,  820,  842,  670,  702,  698,  738,  671,  673,  673,
      673,  673,  677,  677,  677,  677,  679,  679,  679,  679,
      842,  681,  673,  738,  738,  786,  677,  695,  739,  742,
      679,  694,  681,  689,  689,  689,  689,  742,  671,  681,
      786,  673,  693,  786,  739,  679,  739,  742,  689,  677,
      691,  690,  788,  692,  692,  692,  692,  696,  696,  696,
      696,  688,  678,  679,  680,  680,  680,  680,  692,  788,

      788,  676,  696,  697,  697,  697,  697,  675,  680,  699,
      699,  699,  699,  700,  700,  700,  700,  704,  704,  704,
      704,  674,  672,  680,  699,  707,  707,  707,  707,  665,
      823,  823,  704,  823,  664,  663,  707,  792,  792,  680,
      707,  680,  682,  682,  682,  682,  708,  708,  708,  708,
      710,  710,  710,  710,  661,  792,  682,  708,  902,  839,
      660,  708,  780,  710,  713,  713,  713,  713,  780,  659,
      780,  682,  839,  780,  902,  682,  902,  839,  845,  713,
      714,  714,  714,  714,  715,  715,  715,  715,  845,  682,
      686,  686,  686,  686,  875,  714,  845,  657,  715,  717,

      717,  717,  717,  875,  686,  656,  721,  721,  721,  721,
      655,  653,  875,  717,  727,  727,  727,  727,  790,  686,
      721,  731,  731,  731,  731,  651,  790,  686,  727,  732,
      732,  732,  732,  840,  840,  731,  790,  686,  735,  735,
      735,  735,  648,  732,  647,  740,  740,  740,  740,  645,
      731,  840,  735,  644,  743,  743,  743,  743,  732,  740,
      744,  744,  744,  744,  841,  873,  643,  735,  731,  743,
      745,  745,  745,  745,  740,  744,  732,  841,  748,  748,
      748,  748,  841,  873,  873,  735,  749,  749,  749,  749,
      641,  640,  740,  748,  752,  752,  752,  752,  753,  753,

      753,  753,  754,  754,  754,  754,  638,  824,  824,  752,
      824,  637,  627,  753,  756,  756,  756,  756,  758,  758,
      758,  758,  759,  759,  759,  759,  626,  817,  817,  758,
      817,  625,  817,  758,  817,  624,  623,  759,  760,  760,
      760,  760,  763,  763,  763,  763,  765,  765,  765,  765,
      622,  832,  832,  763,  832,  833,  833,  763,  833,  765,
      767,  767,  767,  767,  770,  770,  770,  770,  771,  771,
      771,  771,  777,  777,  777,  777,  621,  838,  620,  770,
      619,  890,  890,  771,  890,  838,  777,  782,  782,  782,
      782,  787,  787,  787,  787,  838,  789,  795,  795,  795,

      795,  782,  789,  877,  789,  787,  618,  789,  789,  843,
      791,  791,  791,  791,  794,  794,  794,  794,  877,  617,
      787,  877,  843,  616,  791,  615,  789,  843,  614,  794,
      796,  796,  796,  796,  798,  798,  798,  798,  787,  791,
      799,  799,  799,  799,  800,  800,  800,  800,  613,  798,
      802,  802,  802,  802,  611,  610,  880,  791,  609,  800,
      803,  803,  803,  803,  880,  802,  804,  804,  804,  804,
      807,  807,  807,  807,  809,  809,  809,  809,  607,  606,
      605,  807,  880,  897,  897,  807,  897,  809,  810,  810,
      810,  810,  813,  813,  813,  813,  816,  816,  816,  816,

      822,  822,  822,  822,  831,  831,  831,  831,  601,  846,
      600,  816,  599,  846,  822,  597,  904,  596,  831,  837,
      837,  837,  837,  844,  844,  844,  844,  846,  847,  847,
      847,  847,  908,  837,  904,  908,  876,  844,  848,  848,
      848,  848,  849,  849,  849,  849,  876,  595,  837,  928,
      908,  879,  844,  848,  876,  879,  593,  849,  850,  850,
      850,  850,  851,  851,  851,  851,  837,  928,  872,  879,
      844,  852,  852,  852,  852,  874,  872,  851,  854,  854,
      854,  854,  857,  857,  857,  857,  872,  874,  878,  881,
      881,  881,  881,  874,  882,  882,  882,  882,  901,  589,

      878,  903,  901,  900,  881,  903,  878,  883,  883,  883,
      883,  884,  884,  884,  884,  900,  901,  905,  906,  903,
      588,  900,  907,  585,  923,  905,  909,  909,  909,  909,
      920,  920,  920,  920,  906,  905,  906,  924,  907,  925,
      907,  923,  923,  927,  920,  921,  921,  921,  921,  926,
      584,  926,  583,  924,  931,  924,  925,  925,  580,  921,
      927,  927,  929,  929,  929,  929,  579,  926,  930,  930,
      930,  930,  931,  576,  931,  575,  929,  972,  937,  937,
      937,  937,  930,  565,  942,  942,  942,  942,  564,  947,
      563,  929,  937,  943,  943,  972,  943,  930,  942,  944,

      944,  944,  944,  945,  945,  947,  945,  947, 1031,  929,
      949,  952,  952,  944,  950,  930,  946,  946,  946,  946,
      948,  948,  948,  948, 1031,  949, 1031,  951,  949,  952,
      946,  950,  950,  974,  948,  951,  953,  953,  953,  953,
      954,  954,  954,  954,  562,  951,  974,  560, 1032,  948,
      953,  974,  961,  961,  954,  961,  955,  955,  955,  955,
      957,  957,  957,  957, 1032,  953, 1032,  948,  994,  954,
      955,  969,  969,  559,  969,  957,  959,  959,  959,  959,
      994,  982,  982,  953,  982,  955,  994,  954, 1040,  558,
      959,  960,  960,  960,  960,  968,  968,  968,  968,  970,

      970,  970,  970,  955,  973,  960, 1040,  988,  988,  968,
      988,  555,  973,  970,  975,  971,  971,  971,  971,  554,
      989,  989,  973,  989,  975,  992,  552,  995,  970,  971,
      551,  995,  975,  992,  976,  976,  976,  976,  978,  978,
      978,  978,  550,  992,  971,  995,  970,  993,  976,  979,
      979,  979,  979,  978,  981,  981,  981,  981,  991,  991,
      991,  991,  971,  976,  547,  993,  993,  546,  981,  543,
      542,  541,  991,  996,  996,  996,  996,  997,  997,  997,
      997,  976, 1000, 1000, 1006, 1000, 1041,  991,  996, 1005,
     1005, 1007, 1005, 1008, 1009, 1007, 1006, 1018, 1008, 1009,

     1013, 1013, 1006, 1013, 1041,  991, 1047,  539,  537, 1007,
     1010, 1010, 1010, 1010, 1018, 1018, 1008, 1009,  996, 1011,
     1011, 1011, 1011,  536, 1047, 1010, 1012, 1012, 1012, 1012,
     1019,  535, 1020, 1021, 1030, 1019, 1020, 1021, 1030,  532,
      531, 1012, 1022, 1022, 1022, 1022, 1023, 1023, 1023, 1023,
     1020, 1021, 1030, 1019, 1024, 1024, 1024, 1024, 1029, 1039,
     1046, 1023,  530, 1029, 1033, 1033, 1033, 1033, 1038, 1048,
     1049, 1054, 1038, 1055,  527, 1039, 1046, 1039, 1046, 1048,
     1049, 1029, 1056, 1055, 1057, 1062, 1038, 1048, 1049, 1054,
     1063, 1055,  522, 1064, 1065, 1062,  520,  518,  517, 1056,

     1056, 1057, 1057, 1062, 1070,  514,  512, 1063, 1063, 1064,
     1065, 1064, 1065, 1068, 1068, 1068, 1068, 1069, 1069, 1069,
     1069, 1070, 1070, 1071,  511, 1077, 1077, 1068, 1077,  503,
      501, 1069, 1072, 1072, 1072, 1072,  497, 1079, 1079, 1071,
     1079, 1071, 1073, 1073, 1073, 1073, 1072, 1080, 1075, 1075,
     1075, 1075, 1076, 1076, 1076, 1076, 1073, 1086, 1086,  496,
     1086, 1072, 1075, 1080,  495, 1080, 1076, 1078, 1078, 1078,
     1078, 1073, 1081, 1081, 1081, 1081,  492, 1092, 1092, 1072,
     1092, 1078, 1082, 1082, 1082, 1082, 1081, 1094, 1094, 1073,
     1094, 1083, 1083, 1083, 1083,  490, 1082, 1095, 1095,  489,

     1095, 1081,  488, 1098, 1098, 1083, 1098, 1084, 1084, 1084,
     1084, 1082, 1085, 1085, 1085, 1085,  483,  481,  479, 1081,
     1083, 1084, 1089, 1089, 1089, 1089, 1085,  478,  477, 1082,
     1090, 1090, 1090, 1090, 1099, 1099, 1089, 1099, 1083, 1091,
     1091, 1091, 1091,  475, 1090,  471, 1096, 1096, 1096, 1096,
      470, 1089,  469, 1091,  465,  464,  463,  459,  458, 1090,
     1096,  457,  456,  451,  450,  449,  442,  441,  437, 1089,
      436,  435,  434,  432,  431, 1096,  429, 1090,  425,  424,
      423,  422,  421,  420,  418,  416,  414,  413,  412,  411,
      410,  408,  407, 1096, 1101, 1101, 1101, 1101, 1101, 1101,

     1102, 1102, 1102, 1102, 1102, 1102, 1103, 1103, 1103, 1103,
     1103, 1103, 1104, 1104, 1104, 1104, 1104, 1104, 1105, 1105,
     1105, 1105, 1105, 1105, 1106, 1106, 1106, 1106, 1106, 1106,
     1107, 1107, 1107, 1107, 1107, 1107, 1108, 1108, 1108, 1108,
     1108, 1108, 1109,  404,  403, 1109, 1109, 1110, 1110, 1110,
     1110, 1110, 1111, 1111,  402, 1111, 1111, 1111, 1112, 1112,
     1112,  401, 1112, 1112, 1113, 1113, 1113, 1113,  397, 1113,
      396,  394,  389,  388,  387,  386,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  367,  364,  363,  362,
      361,  359,  358,  357,  356,  355,  353,  352,  351,  350,

      349,  346,  345,  344,  341,  340,  338,  337,  336,  335,
      334,  331,  330,  328,  327,  326,  325,  324,  322,  321,
      318,  317,  313,  312,  311,  310,  294,  293,  289,  288,
      287,  285,  284,  283,  282,  281,  280,  279,  277,  276,
      275,  274,  273,  271,  270,  269,  268,  264,  263,  262,
      261,  259,  257,  256,  255,  254,  253,  252,  251,  249,
      247,  246,  245,  244,  233,  230,  229,  225,  224,  222,
      221,  219,  218,  217,  215,  214,  213,  212,  211,  210,
      209,  208,  207,  205,  204,  203,  202,  201,  199,  198,
      197,  196,  195,  194,  193,  192,  191,  190,  189,  188,

      187,  186,  185,  184,  173,  172,  171,  170,  169,  168,
      166,  165,  163,  162,  161,  160,  159,  154,  153,  152,
      151,  150,  149,  148,  147,  146,  145,  144,  143,  142,
      141,  140,  139,  138,  137,  134,  133,  131,  130,  129,
      128,  126,  116,  115,  114,  113,  112,  111,  110,  109,
      108,  107,  106,  104,  103,   98,   91,   90,   87,   86,
       84,   83,   82,   79,   58,   57,   54,   53,   52,   51,
       47,   43,   40,   28,   25,   23,   19,   14,   13,    8,
        7,    6,    5,    4,    3, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,

     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[132] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
    0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
/* $Id$ */
/** @file parseosrl.l
 * 
 * @author  Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin, 
 * @version 2.0, 19/07/2009
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005-2009, Robert Fourer, Jun Ma, Horand Gassmann, Kipp Martin,
 * Northwestern University, Dalhousie University and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 17 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSrLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"


//#define PARSERDEBUG
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;
     








#line 102 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 1568 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osrllex_init (yyscan_t* scanner);

int osrllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 112 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"



#line 1826 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1101 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2886 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 115 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 119 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 120 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 121 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 122 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 124 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 140 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 142 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 143 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 144 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 145 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 146 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 147 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 148 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 149 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 150 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT; return(NUMBEROFOTHERSOLUTIONRESULTSATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 151 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(NUMBEROFITEMSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 152 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 153 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 154 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 155 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 156 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 158 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 159 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 160 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 161 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 162 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 163 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 164 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 165 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 166 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 167 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 168 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 169 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 170 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 171 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 172 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 173 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 174 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 175 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 176 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 177 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 178 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 179 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 180 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 181 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 184 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 185 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 186 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 187 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 188 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 189 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 190 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 191 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 192 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 193 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 194 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBEND);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 196 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 197 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICEURISTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 198 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 199 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 200 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICENAMESTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 201 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 202 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 203 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(INSTANCENAMESTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 204 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 205 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 206 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(JOBIDSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 207 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 209 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 210 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 212 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 213 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 215 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 216 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(MESSAGESTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 217 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 219 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 220 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 222 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 223 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 225 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 226 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 228 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 229 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 231 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 232 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 234 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 235 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 237 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 238 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 239 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 240 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 242 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 243 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 244 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 245 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 247 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 248 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 249 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 250 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 252 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 253 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 255 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSSTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 256 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 258 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSTART);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 259 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLUTIONRESULTEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 261 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 262 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 263 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 264 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 265 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTARTANDEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 266 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTARTANDEND);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 267 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTARTANDEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 268 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTARTANDEND);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 269 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTARTANDEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 270 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTARTANDEND);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 274 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext);   yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 275 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 277 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 120:
#line 279 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 279 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 280 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 282 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 124:
#line 284 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 284 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 285 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 288 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /* yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 289 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 290 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 293 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 305 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
ECHO;
	YY_BREAK
#line 2721 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osrlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1101 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1101 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1100);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osrllex_init_extra has the same functionality as osrllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osrlalloc in
 * the yyextra field.
 */

int osrllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osrlset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osrlset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 305 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"





