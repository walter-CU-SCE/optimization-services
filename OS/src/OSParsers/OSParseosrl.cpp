#line 2 "OSParseosrl.cpp"

#line 4 "OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osrllex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 185
#define YY_END_OF_BUFFER 186
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1759] =
    {   0,
        1,    1,  183,  183,  181,  181,  182,  182,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  186,  184,
        1,    1,    2,  171,    2,  184,    6,  184,    5,  184,
        4,  171,  183,  185,  181,  182,  172,  174,  175,  174,
      178,  179,  178,    1,    0,    6,    0,    5,    0,    4,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
      171,    6,    5,  171,  171,  171,  171,  171,  171,  171,
      171,  171,    3,    6,    6,    6,  171,    7,    5,    5,
        0,    0,  177,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    4,  171,  183,

      181,  182,  172,    0,  180,    6,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,    0,    6,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    6,  176,    6,    6,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  173,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   85,    0,    0,    0,    0,
        0,    0,   63,    0,  105,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  167,    0,
        0,    0,   24,    0,    0,    0,    0,    0,    0,    0,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   63,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  145,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  171,  171,  171,  171,  171,  171,  171,  171,
      171,    0,    0,    0,    0,    0,   86,    0,    0,    0,
        0,    0,    0,    0,    0,   64,    0,    0,    0,  106,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  168,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   68,  101,    0,    0,    0,   55,   54,  113,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   24,
        0,   36,   37,    0,    0,    0,   40,   41,    0,   44,
       45,    0,    0,    0,  171,  171,  171,  171,  171,  171,
        0,    0,    0,    0,   86,    0,    0,    0,    0,    0,
        0,    0,   69,   64,    0,    0,  106,    0,    0,    0,
       56,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  146,    0,    0,    0,    0,    0,    0,    0,    0,
      168,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   70,   68,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  137,    0,    0,   59,    0,    0,
        0,    0,    0,    0,    0,  163,    0,    0,    0,    0,
       34,   35,    0,    0,    0,   38,   39,    0,   42,   43,
        0,   48,   49,    0,  171,  171,  171,  171,  171,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   69,
        0,  102,    0,    0,    0,   56,    0,  114,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  146,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   95,   57,    0,   70,    0,

      103,    0,    0,    0,    0,    0,   61,    0,    0,    0,
        0,    0,   59,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   46,   47,
        0,  171,  171,  171,  171,  171,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  102,    0,    0,    0,
      114,    0,    0,    0,    0,    0,    0,    0,    0,  138,
        0,    0,    0,   60,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  164,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   57,    0,    0,    0,    0,    0,
        0,    0,    0,   61,    0,    0,  131,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   96,    0,   58,    0,    0,    0,  104,    0,
        0,    0,    0,    0,    0,   62,    0,    0,    0,    0,
        0,  138,    0,    0,   60,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  164,    0,    0,    0,    0,   83,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      141,    0,    0,  149,    0,    0,    0,    0,    0,    0,
        0,  169,    0,   28,   29,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,    0,    0,    0,
        0,    0,    0,    0,    0,   96,   58,    0,    0,  104,
        0,    0,    0,    0,    0,    0,   62,    0,    0,    0,
        0,  132,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   93,    0,    0,    0,  107,
        0,    0,    0,    0,    0,    0,  127,    0,    0,    0,

      139,    0,    0,    0,    0,    0,    0,    0,  161,    0,
        0,   26,   27,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,    0,    0,    0,    0,    0,
       84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  132,    0,    0,
        0,    0,  142,    0,    0,    0,  150,    0,    0,    0,
        0,    0,    0,    0,    0,  170,    0,    0,    0,    0,
       81,   87,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  125,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    8,    0,    0,
        0,   11,    0,    0,    0,    0,    0,    0,    0,   22,
        0,    0,    0,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,    0,    0,
        0,    0,   84,    0,    0,    0,    0,    0,   94,    0,
        0,    0,  108,    0,    0,    0,    0,    0,    0,    0,
      128,    0,    0,    0,    0,  140,  142,    0,    0,  150,
        0,    0,    0,    0,    0,    0,  162,    0,  170,    0,
        0,    0,    0,    0,   91,    0,   99,    0,   67,   65,
      115,    0,    0,    0,    0,    0,  135,    0,    0,    0,

        0,    0,  157,    0,  165,    0,   32,   33,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,    0,    0,    0,    0,    0,   82,    0,
       88,    0,    0,   94,    0,    0,  108,    0,    0,    0,
        0,    0,    0,  126,  128,    0,    0,    0,  140,    0,
        0,    0,    0,    0,    0,    0,  162,    0,    0,    0,
        0,    0,    0,    0,   97,   67,    0,    0,    0,    0,
        0,  133,    0,    0,    0,    0,  155,  159,    0,   30,
       31,    8,    0,    0,   10,   11,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   21,   22,    0,    0,
        0,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,    0,    0,    0,    0,
        0,   82,   88,    0,    0,   92,    0,    0,  100,    0,
       66,    0,    0,  116,    0,    0,    0,  126,    0,    0,
        0,  136,    0,    0,    0,    0,    0,    0,  158,    0,
        0,  166,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  153,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,    0,    0,    0,    0,    0,
        0,   92,    0,   98,  100,   66,    0,  116,    0,    0,
        0,    0,    0,  134,  136,    0,    0,    0,    0,    0,
      156,  158,    0,  160,  166,   71,    0,    0,    0,   79,
       89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       10,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       21,    0,    0,    0,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,    0,    0,    0,
        0,    0,    0,   98,    0,    0,    0,    0,    0,  134,
        0,    0,    0,    0,  154,  156,  160,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,    0,   72,    0,    0,    0,    0,
       80,    0,   90,    0,    0,    0,    0,    0,    0,    0,
        0,  154,    0,   75,    0,    0,    0,  121,    0,    0,
      143,    0,  151,    0,    0,    0,    0,    0,    0,    0,
        0,   18,    0,    0,    0,   23,    0,    0,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,   72,    0,    0,    0,   80,   90,    0,    0,    0,

        0,    0,    0,    0,    0,   73,   77,    0,    0,  123,
      129,  147,    0,    0,   12,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   25,    0,    0,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,    0,
        0,   76,    0,    0,    0,    0,  122,    0,    0,    0,
      144,    0,    0,  152,    0,  117,    0,    9,    0,    0,
        0,    0,    0,    0,   18,    0,    0,   20,   23,    0,
        0,   52,   53,  171,  171,  171,  171,  171,  171,  171,
      171,    0,   74,   76,    0,   78,    0,    0,  122,    0,
      124,    0,  130,  144,    0,  148,  152,    0,  119,    0,

       12,    0,    0,    0,   15,    0,    0,    0,    0,   25,
        0,   50,   51,  171,  171,  171,  171,  171,  171,   74,
       78,    0,    0,  118,    0,  124,  130,  148,    0,    9,
        0,    0,    0,    0,    0,    0,   19,   20,  171,  171,
      171,  171,  171,    0,  118,    0,  120,    0,    0,    0,
        0,   15,    0,    0,    0,  171,  171,  171,  171,    0,
        0,  120,    0,    0,    0,    0,    0,    0,   19,  171,
      171,  171,  171,    0,    0,    0,    0,    0,    0,    0,
        0,  171,  171,  171,  171,    0,    0,    0,    0,    0,
        0,    0,    0,  171,  171,  171,  171,    0,    0,  109,

        0,    0,    0,    0,    0,  171,  171,  171,  171,    0,
        0,    0,    0,    0,    0,    0,  171,  171,  171,  171,
        0,  110,    0,    0,    0,    0,    0,   16,    0,   17,
      171,  171,  171,  171,  110,    0,  111,    0,    0,   14,
        0,    0,  171,  171,    0,    0,   13,    0,   16,   17,
      171,    0,  112,    0,   14,  112,   13,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    8,    1,    1,    9,    1,
        1,    8,   10,    1,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    8,    1,   15,
       16,   17,   18,    8,    8,    8,   19,   20,   21,   22,
        8,    8,   23,   24,    8,    8,   25,   26,   27,   28,
        8,   29,   30,   31,   32,   33,    8,    8,    8,    8,
        1,    1,    1,    1,    8,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,    8,   50,   51,   52,   53,   54,   55,   56,
       57,   58,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[59] =
    {   0,
        1,    2,    2,    2,    2,    1,    3,    2,    4,    1,
        2,    2,    2,    2,    5,    1,    6,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[1772] =
    {   0,
        0,   23, 4399, 4398, 4406, 4405, 4390, 4389,    0,    0,
        0,    0, 4380, 4379,   39,   40,   41,   42, 4393, 4988,
       59,  113, 4371,   64, 4368,    8,  167, 4358,   53,  200,
       81,   76,    0, 4988,    0,    0,    0, 4988, 4988, 4358,
     4988, 4988, 4351,    0,   76,  118, 4336,  171,   86,  105,
     4312, 4303, 4298, 4297,   66,   95, 4276, 4285, 4280,  253,
      129,    0,  196,  213,  210,  258,  299,  270,  307,  315,
      327,  335, 4988,  159,  120,    0,  343, 4988,  191,  363,
     4303,  368, 4988,   99, 4279,    0, 4259, 4263, 4271,    0,
     4260, 4263,  198,  333,   55, 4247, 4256,  275,  376,    0,

        0,    0,    0, 4269, 4988,  421,  137, 4263, 4232, 4222,
     4207, 4207, 4206, 4201, 4196, 4202, 4198, 4187,  426,  434,
      450,  451,  469,  477,  485,  497,  505,  515, 4214,  165,
     4216,  123, 4191,    1, 4171, 4176, 4170,   91, 4158, 4167,
      348,  485,  149, 4152, 4167, 4148, 4165, 4143, 4141, 4134,
     4148, 4141, 4130, 4121, 4122, 4124, 4091, 4095, 4084, 4084,
     4091, 4090, 4080, 4083, 4093, 4090, 4070, 4073, 4066, 4076,
      157,  277, 4988,  541,  429, 4075, 4075,  549, 4063, 4065,
     4059, 4059, 4044, 4042, 4053,  556,  565,  569,  584,  589,
      606,  614,  624,  632,  640, 4988, 4040, 4044, 4026, 4029,

     4024, 4039, 4035, 4011, 4006, 4018, 4019, 4002, 3994, 3961,
     3962, 3970, 3959, 3946, 3950, 3960, 3957, 3923, 3927, 3918,
     3931,  166, 3914, 3924,  115, 3909, 3908, 3912, 3921, 3911,
     3896, 3899,  472, 3893, 3901, 3892, 3885, 3889, 3883, 3866,
      136, 3866,  242, 3861,   56, 3878, 3873, 3855, 3864, 3861,
     3850,  656,  217,  661, 3855, 3853,  665,  684, 3852, 3848,
      680,  688,  705,  709,  713,  750,  754,  758,  779,  774,
     3834, 3844,  199,  799, 3835, 3833, 3832, 3824, 3807, 3789,
      803, 3783,  807, 3791, 3777, 3770, 3768, 3751,  178, 3747,
      246, 3746,  221, 3763, 3758, 3739,  825, 3757, 3744, 3736,

     3729, 3727, 3737, 3741, 3730, 3712, 3726,  830,  609, 3736,
     3720, 3717, 3704,  834, 3699, 3707, 3701, 3689, 3702, 3684,
     3694, 3683, 3691,  231, 3681, 3681,  393, 3687, 3690, 3674,
     3674, 3707,  850,  726, 3657, 3651,  854,  737,  858,  816,
      873, 3648,  869,  877,  893,  889,  909,  930,  938,  953,
      960, 3664, 3638, 3627, 3626,  976,  925, 3623, 3635, 3639,
     3629, 3610, 3625,  980,  984,  945, 3638, 3622, 1000, 1004,
     3619, 3608, 1011, 3602, 3614, 3595, 3584, 3597, 3568, 3578,
     3567, 3579, 1016, 3568, 3569,  516, 3575, 1020, 1027, 3577,
     3556, 3566, 3565, 3567, 3544, 3546, 3557, 3544, 3548, 3534,

     1036, 3560, 1040, 4988, 3536, 3522, 3522, 1054, 4988,  304,
     3508, 3524, 3517, 3507, 3503, 3501, 3517, 3504, 3504, 3489,
     3497, 3512, 3506, 3482, 3485, 3469, 3482, 3466, 3465,  455,
     3509, 3505, 3501, 3482, 3481, 3498, 3494, 3490, 3494, 3490,
     3486, 1058, 1045, 3456, 1062, 1074, 1079, 1082, 1099, 1114,
     3444, 3452, 3451, 3454, 1122, 3432, 3433, 3443, 3427, 3437,
     3418, 1127, 1136, 1143, 1151, 3422, 1155, 3409, 3418, 1159,
     1167, 1175, 3405, 3421, 3410, 3394, 3389, 3387, 3404, 3377,
     1179, 1183, 3384, 3369, 3363, 3378, 3373, 3352, 3355, 3316,
     1195, 3331, 3333, 3327, 3309, 3307, 3322, 3301, 3300, 3306,

     3296, 3304, 1204, 1208, 3322, 3296, 3290, 3273, 3288, 3275,
     3277, 3280, 3269,  298, 4988, 3284, 3261, 1212, 3261, 3274,
     3284, 3257, 3272, 3252, 3255, 3270, 3250, 3230, 3234, 1217,
     4988, 4988, 3244, 3246, 1225, 4988, 4988, 1234, 4988, 4988,
     3275, 3271, 3267, 3236, 1227, 1243, 1244, 1261, 1260, 3235,
     3226, 3208, 3203, 3216, 3195, 3201, 3204, 3196, 3186, 1247,
     1264, 1283, 3183, 3178, 3160, 1287, 1296, 1300, 3179, 3168,
     3157, 3163, 3152,  328, 1304, 3146, 3124, 1312, 1320, 3125,
     3123, 3131, 3105, 3119, 3099, 3103, 1328, 3102, 3094, 3100,
     3086, 3104, 3094,  319, 3082, 4988, 1334, 3096, 1338, 3089,

     4988, 3076, 3094, 3072, 3073, 3076, 1344, 3064, 3063, 3056,
     3065, 3049, 1348, 3050, 3040, 3047, 3043, 3054,  333, 3037,
     3032, 3027, 3039, 1352, 3034, 1342, 3032, 1375, 4988, 4988,
     3046, 1383, 1390, 1431, 1398, 1387, 3020, 3025, 3014, 3028,
     3016,  346, 3002, 1420, 1426, 3015, 1463, 1467, 2997, 3016,
     1471, 2994, 2999, 3004, 1475, 2994, 2989, 2980, 1483, 1491,
     2990, 2976, 1500, 1506, 2981, 2969, 2972, 2967, 2975,  349,
     2965, 2946, 1510, 1516, 2941, 2950, 2940, 2935, 2917, 2902,
     2906, 2886, 2881, 2880, 1520, 2865, 2876, 2847, 2860, 2844,
     2830,  341, 2845, 1526, 2838,  363, 4988, 2812, 2813, 2815,

     2809, 2819, 2806, 2796, 2803, 2790, 2783, 2784, 2800, 2775,
     2771, 2767, 1530, 1450, 2769, 2768, 2762,  102,  246, 2769,
     2774, 2765, 2765, 1534, 1526, 1535, 1548, 1557, 1566, 1575,
     1593, 1602, 1611, 2762, 2757, 2739, 2735, 2739, 2730, 2723,
     2729, 1645, 1538, 1649, 1653, 2711, 2736, 1665, 1669, 2718,
     2693, 2691,  416, 2705, 1673, 1681, 2697,  388, 1689, 2669,
     2669, 1693, 2673, 2661, 1697, 2672, 2668, 2647, 2656, 2643,
     2635, 2638, 2656, 2613, 1705, 2612, 2602, 2589,  543, 4988,
     2585, 2585, 2596, 2596, 2578, 2580, 2576, 2567, 2544, 2550,
     2544, 2536, 2545, 2549,   23,   82,  145,  156,  196,  246,

     4988,  238,  266, 4988,  265,  297,  289,  334,  325,  325,
      346, 4988,  392,  400,  400,  380,  382,  406,  403,  407,
      405,  421,  426,  433,  455,  450, 1692, 1697, 1710, 1719,
     1728, 1737, 1753, 1762, 1771, 1780, 1795,  453,  613, 1827,
      451,  453,  476,  479,  473, 1831, 1837,  491,  495, 1843,
      480,  498,  502,  496,  511,  526, 1847,  518,  543,  533,
     1851, 1855,  531,  532,  546, 1859,  544,  559, 1867,  548,
      567,  553,  565,  560,  558,  578, 1875,  578,  612,  606,
      612,  603,  605,  643,  619, 4988,  621,  628,  629, 4988,
      630,  627,  641,  644,  644,  660, 4988,  657,  660,  653,

     4988,  672,  686,  682,  688,  702,  703,  711, 4988,  701,
     1880, 4988, 4988, 1891, 1895,  703, 1899,  712,  712,  716,
      731, 1914,  721,  739, 1919, 1956, 1920, 1960, 1981, 1970,
     1985, 2002, 2039, 2031, 2040,  728,  758,  748,  756, 1924,
     2043,  744,  746,  779,  747, 2082,  761,  768, 2086,  774,
      779,  798,  791,  792,  808, 2090,  803, 2106,  805,  811,
     2110, 2114, 2118,  815,  830, 2130, 2134,  819,  824,  848,
      847,  853, 2138,  852, 2146, 2154,  870,  871,  854,  862,
     4988, 4988,  862,  874,  862,  878, 2162,  871,  870,  875,
      898,  902, 4988,  895,  900,  893,  907,  930,  917,  943,

      928,  933,  936,  950, 2166, 1903, 2170,  993,  940,  943,
     2185, 1067,  963,  950,  958,  973,  974,  976, 2189, 1105,
     1000,  993, 1000, 2193, 2208, 2049, 2207, 2239, 2238, 2253,
     2262, 2271, 2288, 2293, 2325, 2324, 2329, 2342, 1020, 1033,
     1017, 1034, 2213, 2245, 2332, 1034, 1050, 2377, 2381, 1045,
     1062, 2385, 2393, 1058, 1060, 1066, 1094, 1088, 2401, 2405,
     2409, 1091, 1096, 1084, 2421, 2425, 2429, 1096, 1113, 2437,
     1103, 1128, 1113, 1128, 1130, 2441, 2445, 1127, 2449, 1131,
     1163, 1130, 1127, 1137, 4988, 1140, 4988, 2457, 2461, 1164,
     4988, 1148, 1148, 1152, 1145, 1181, 4988, 1187, 1173, 1199,

     1219, 1220, 4988, 1241, 4988, 1276, 1275, 1284, 1290, 1260,
     2465, 1307, 1260, 1744, 1276, 1269, 1286, 2473, 1322, 1292,
     1274, 1282, 2460, 2492, 2484, 2493, 2502, 2515, 2520, 2553,
     2545, 2554, 2563, 1302, 1333, 1316, 1314, 2595, 2496, 2599,
     2557, 1313, 2615, 2619, 1316, 2623, 2631, 2639, 2643, 1324,
     1321, 1329, 2647, 2663, 2668, 1323, 1346, 2672, 2676, 1355,
     1338, 1357, 1359, 1345, 2680, 1358, 2688, 2696, 1352, 1355,
     1363, 1386, 1369, 1379, 4988, 2700, 1379, 1405, 1384, 1386,
     1405, 4988, 1388, 1411, 1395, 1399, 4988, 4988, 1929, 4988,
     4988, 1558, 1417, 2704, 1608, 1634, 1418, 1415, 1446, 1444,

     1435, 1455, 1442, 1464, 1445, 2712, 1658, 1729, 1453, 1461,
     1464, 2699, 2732, 2724, 2741, 2746, 2761, 2774, 2779, 2796,
     2801, 2816, 2848, 2840, 2857, 2870, 1470, 1473, 1495, 1517,
     1501, 2736, 2852, 1505, 2902, 2906, 2911, 2918, 2922, 2927,
     2934, 1516, 2938, 2943, 1540, 1518, 1521, 2947, 1543, 2954,
     2958, 2962, 1530, 1552, 1539, 1545, 2974, 2978, 2982, 2994,
     2998, 3002, 1563, 1557, 1566, 1558, 1558, 1566, 1577, 1590,
     1582, 1612, 1593, 1617, 1614, 1623, 4988, 1637, 1676, 1627,
     1640, 1645, 1638, 1658, 1654, 1658, 1659, 1660, 1710, 1679,
     1695, 1667, 2989, 2994, 3007, 3016, 3033, 3038, 3055, 3068,

     3073, 3089, 3094, 3110, 3125, 1688, 1689, 1698, 1696, 1696,
     1702, 3157, 3161, 3165, 3169, 3178, 1712, 3182, 1727, 1717,
     1744, 1726, 3186, 3190, 3194, 1737, 1737, 1749, 3202, 3206,
     3210, 3222, 3226, 3230, 3234, 4988, 1761, 1759, 1766, 4988,
     4988, 1752, 1755, 1756, 1770, 1773, 1769, 1767, 1772, 1776,
     1966, 1786, 1776, 1799, 1790, 1812, 1824, 1816, 1821, 1823,
     1977, 1824, 1844, 1848, 3221, 3226, 3239, 3244, 3261, 3266,
     3279, 3297, 3306, 3319, 3324, 3341, 3346, 3378, 1853, 1852,
     1857, 3383, 3387, 3394, 1856, 1862, 1861, 1878, 1883, 3403,
     1894, 1892, 1897, 3407, 3411, 3415, 3423, 1910, 1912, 1916,

     1902, 1902, 1915, 1927, 1927, 1931, 1949, 1941, 1938, 1940,
     1940, 1960, 1954, 1953, 1972, 3427, 1960, 1972, 3431, 1955,
     1962, 3418, 3423, 3436, 3445, 3460, 3473, 3488, 3524, 3516,
     3525, 3564, 3556, 3565, 3601, 3528, 1976, 1980, 1984, 3605,
     3568, 3621, 3625, 1970, 1973, 1975, 1982, 1982, 1984, 1996,
     1990, 3629, 1988, 4988, 2001, 2007, 2006, 4988, 2014, 2009,
     4988, 2020, 4988, 2014, 3637, 2016, 2017, 2022, 2033, 2061,
     3641, 2095, 2049, 2053, 3645, 2123, 3660, 3664, 3651, 3683,
     3682, 3687, 3700, 3715, 3728, 3762, 3754, 3763, 3799, 3807,
     3822, 3687, 2055, 3691, 2068, 3766, 3814, 2082, 2084, 3827,

     2092, 2097, 3837, 2108, 3844, 4988, 4988, 2098, 2100, 4988,
     4988, 4988, 3848, 3853, 2175, 2119, 2112, 2109, 2113, 2117,
     2172, 2129, 3863, 2179, 3868, 2197, 3872, 2218, 3878, 3893,
     3892, 3905, 3910, 3923, 3932, 3945, 3977, 3985, 4000, 3900,
     4005, 3981, 4015, 2136, 2133, 4022, 4026, 4031, 4038, 4042,
     4047, 4058, 4062, 4066, 2156, 2153, 4078, 2230, 2202, 2166,
     2165, 4082, 2181, 2198, 2249, 2188, 4086, 2261, 2294, 2241,
     2252, 2252, 2258, 4101, 4093, 4110, 4142, 4138, 4143, 4156,
     4188, 4150, 4105, 4146, 4193, 4209, 2223, 4213, 4217, 4229,
     4233, 4237, 4245, 4253, 4257, 4263, 4267, 2243, 4988, 2271,

     2303, 2231, 2241, 4273, 2365, 2253, 2258, 4277, 2284, 2414,
     2604, 4988, 4988, 4264, 4269, 4301, 4297, 4302, 4338, 4342,
     4346, 2261, 4353, 4358, 4362, 4369, 4378, 4382, 2279, 2483,
     2248, 2281, 2309, 2279, 2284, 4386, 2652, 2656, 4373, 4378,
     4391, 4400, 4432, 2324, 4437, 4447, 4452, 2291, 2298, 2309,
     2304, 2722, 2294, 2299, 2349, 4442, 4455, 4464, 4473, 2330,
     2331, 4505, 2322, 2340, 2354, 2342, 2346, 2347, 2747, 4495,
     4504, 4513, 4526, 2349, 2364, 2367, 2369, 2384, 2383, 2392,
     2410, 4531, 4544, 4553, 4562, 2403, 2405, 2420, 2438, 2420,
     2435, 2430, 2432, 4581, 4586, 4599, 4614, 2441, 2468, 4988,

     2452, 2460, 2457, 2467, 2468, 4619, 4638, 4651, 4656, 4689,
     2475, 2475, 2479, 2486, 4651, 4693, 4681, 4694, 4726, 4732,
     4752, 4747, 2487, 2490, 2498, 4756, 4763, 2756, 4771, 2780,
     4758, 4790, 4794, 4798, 4818, 2501, 4988, 4822, 4837, 2835,
     2559, 2562, 4841, 4845, 4865, 4869, 2872, 2566, 2876, 2889,
     4873, 4888, 4893, 2567, 2967, 4897, 2987, 4988, 4911, 4917,
     4923, 4929, 4935, 4941, 4947, 4953, 4958, 4964, 4969, 4975,
     4981
    } ;

static yyconst flex_int16_t yy_def[1772] =
    {   0,
     1759, 1759, 1760, 1760, 1761, 1761, 1762, 1762, 1763, 1763,
     1763, 1763, 1764, 1764, 1765, 1765, 1766, 1766, 1758, 1758,
     1758, 1767, 1758, 1767, 1758, 1758, 1767, 1758,   27, 1758,
     1758, 1767, 1768, 1758, 1769, 1770, 1771, 1758, 1758, 1758,
     1758, 1758, 1758,   21, 1758, 1758, 1758, 1758,   30, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1767,
     1767,   27,   27, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
     1767, 1767, 1758, 1758,   27,   27, 1767, 1758, 1758,   27,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1767, 1768,

     1769, 1770, 1771, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1767, 1767,
     1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1758,   27,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758,   27, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758,   27, 1767,   27,   27, 1767,
     1767, 1767, 1767, 1767, 1767, 1758, 1758, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1767, 1767,   27,   27,   27,   27,   27,   27,   27, 1767,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1767, 1767,   27, 1767, 1767,   27,   27,   27,
     1767, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1767, 1767, 1767, 1767,   27,   27,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1767, 1767, 1767, 1767, 1767, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758,   27, 1767, 1767, 1767,  634, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758,   27,  634,  634,  634,  634,  634,  634,
      634,  634,  634, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758,   27,   27,  634,   27,   27,  634,
      634,  634,   27,  634,  634, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758,   27,   27,  634,  634,   27,  634,  634,
      634,  634,  634,  634,   27,  634,  634,  634, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758,  634,   27,  634,  634,  634,  634,  634,   27,
      634,  634,  634, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758,  634,   27,  634,  634,  634,  634,  634,  634,  634,
      634,  634,   27,  634,  634,  634, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758,  634,  634,  634,  634,  634,  634,  634,  634,

      634,  634,  634,  634,  634, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758,  634,  634,  634,  634,  634,  634,  634,   27,  634,
      634,   27,  634,  634, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,  634,   27,
      634,  634,  634,  634,  634,   27,  634,  634,   27,   27,
       27, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,   27,   27,
      634,  634,  634,  634,  634,  634,   27,   27,   27, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758,   27,  634,  634,   27,  634,  634,  634,
       27, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758,  634,  634,   27,  634,  634,   27, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,  634,  634,
      634,  634,   27, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758,  634,  634,  634,  634, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,  634,
      634,  634,  634, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758,  634,  634,  634,  634, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758,  634,  634,  634,  634, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758,  634,  634,  634,  634, 1758,
     1758, 1758, 1758, 1758, 1758, 1758,  634,  634,   27,   27,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
      634,   27,   27,   27, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758,   27,   27, 1758, 1758, 1758, 1758, 1758, 1758,
       27, 1758, 1758, 1758, 1758, 1758, 1758,    0, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758
    } ;

static yyconst flex_int16_t yy_nxt[5047] =
    {   0,
       20,   21,   22,   21,   22,   20,   23, 1758,   25,   20,
       26,   27,   28,   29,   30,   20,   31,   20, 1758,   46,
     1758,   48,   32,   20,   21,   22,   21,   22,   20,   23,
       51,   25,   20,   26,   27,   28,   29,   30,   20,   31,
       20,   39,   39,   42,   42,   32,  154,  149,  200,   40,
       40,  155,  150,  201,   79,   80,   79,   80,   43,   43,
       44,   44,   44,   44,   62, 1758,   63, 1758,  896,   45,
       46,   47,   48,   49, 1758,   50, 1758, 1758, 1758, 1758,
     1758,   51,   98,   98,   98,   98, 1758,   46, 1758,   48,
     1758, 1758, 1758,  324,   52,   53,  168,  325,   51,  112,

       54,   99,  169, 1758,  897,   55,   98,   98,   98,   98,
       56,   57,   58,   59,   44,   60,   44,   60,  113,   74,
       74,   74,   74,   45,   62,   47,   63,   49,  114,   50,
     1758,  106, 1758,   61,  146,   64,  819,  205,  107, 1758,
       61, 1758,  206, 1758,  300, 1758,  129,  129,   65,   66,
      174,  115,  147,  820,   67,  107,  301,   61,  197,   68,
       74,   74,   74,   74,   69,   70,   71,   72,   74,   75,
       74,   75,   79,   79,   79,   79,  198, 1758,  130, 1758,
       76, 1758,   46, 1758,   48,   61,  898,   77,  318,  319,
      219,  107,   79,   79,   79,   79,  220,   79,   80,   79,

       80,  248,   61,  899,   77,   81,  249,   62,  107,   63,
      296, 1758,   82, 1758, 1758,  297, 1758,   83,  332,  332,
     1758,  332, 1758, 1758, 1758, 1758, 1758, 1758,  354, 1758,
      377,  378,  158,   84,   85,   86,   87,   88,   99,   89,
      355,   90,   91,  119,  900,   92,  159,   93,  160,  161,
       94,   95,   96,   97,   44,   60,   44,   60,  383, 1758,
      419, 1758,  384,   45,   62,   47,   63,   49, 1758,   50,
     1758, 1758, 1758, 1758, 1758,   64,   98,   98,   98,   98,
     1758,  420, 1758,  901, 1758,  902, 1758,  321,   65,   66,
       61,  380,  322,  821,   67,  120,  381,   61,  822,   68,

     1758,  903, 1758,  122,   69,   70,   71,   72, 1758, 1758,
     1758, 1758,  904, 1758,   61, 1758, 1758, 1758, 1758, 1758,
      609, 1758,  123, 1758,  610, 1758,  905, 1758, 1758, 1758,
     1758, 1758,  509,  510,  906,  121, 1758, 1758, 1758, 1758,
      124, 1758,  682, 1758, 1758, 1758, 1758, 1758,  683, 1758,
      657, 1758,  129,  129,  658, 1758,  130, 1758,  707, 1758,
      127,  126,  708,  125,   79,   80,   79,   80,  162,  739,
      163,  907,  128,  908,  771,  740,   61, 1758,  772, 1758,
      164,  909,  209,   61,  165,  166, 1758,  910, 1758,  167,
     1758,  796, 1758,  792,  793,  911,  210,  172,  211,  212,

       61,  132,  133,  134,  135,  136,  912,  137,  913,  138,
      139,  423,  424,  140,  797,  141,  859,  425,  142,  143,
      144,  145,   74,   74,   74,   74,  914, 1758,  915, 1758,
       74,   74,   74,   74,  106, 1758, 1758, 1758, 1758,  860,
     1758,  107, 1758,  916, 1758,  917, 1758,  918, 1758,  919,
     1758, 1758, 1758, 1758, 1758,  920,  332,  332,  107,  332,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,  854,  855,
     1758,  921, 1758,  309,  309,  309,  309,  186, 1758, 1758,
     1758, 1758,  922, 1758,  187, 1758, 1758, 1758, 1758, 1758,
      923, 1758,  924, 1758,  310, 1758,  189, 1758, 1758, 1758,

     1758, 1758,  936,  942,  943,  188, 1758, 1758, 1758, 1758,
      944, 1758,  945, 1758,  190, 1758, 1758, 1758, 1758, 1758,
      213, 1758,  214,  946,  947, 1758,  191, 1758,  948, 1758,
      949, 1758,  215,  192,  487,  488,  216,  217,  193,  950,
      489,  218,   74,   74,   74,   74,  951,  952,  953,  194,
      252,  252,  252,  252,  174,  954,  195, 1758,   61, 1758,
       61,  879,  880,  955,  253,  956, 1758,  881, 1758,   61,
      252,  263,  252,  263,  957, 1758,   61, 1758,  959, 1758,
      960, 1758,   61,  961,  253, 1758,   61, 1758,   61,   61,
     1758,  964, 1758,  261,  965,  968,  969,   61,  970, 1758,

      262, 1758,  971, 1758,   61, 1758,   61, 1758,  972, 1758,
      309,  309,  309,  309,  973, 1758, 1758, 1758, 1758,  974,
     1758,  264, 1758,  265, 1758, 1758, 1758, 1758, 1758,  977,
     1758,  937,  938, 1758, 1758, 1758, 1758,  939, 1758,  978,
     1758, 1758, 1758, 1758, 1758,  266, 1758,  979, 1758,  980,
     1758,  267, 1758,  981, 1758,  982, 1758,  252,  252,  252,
      252,  983,  333,  333,  333,  333,  337,  337,  337,  337,
      984,  253,  985,  986,  987,  268,  334,  988,  989,  270,
      338, 1758,  990, 1758,  269,  339,  339,  339,  339, 1758,
     1758, 1758, 1758,  991, 1758,  992, 1758,  993, 1758,  340,

     1758,  994, 1758,  995, 1758,  996,  252,  263,  252,  263,
      333,  345,  333,  345, 1758,   61, 1758,   61,   61,  343,
      253,  997,   61,  998,  334,   61,   61,  431,  431,   61,
      431,  999,  432,   61,  433, 1000, 1001,  344,  436,  436,
     1002,  436,   61,  437, 1003,  438,   61, 1004, 1010, 1014,
      346, 1758,   61, 1758,   61,  337,  348,  337,  348,  339,
      349,  339,  349,   61, 1015, 1016, 1017,   61, 1018,  338,
       61,   61, 1022,  340,   61, 1758, 1023, 1758,   61, 1039,
     1758,   61, 1758,   61, 1758, 1040, 1758,  347, 1758, 1041,
     1758,   61,   61, 1042, 1044,   61, 1045, 1046, 1047,   61,

      356,  356,  356,  356,  365,  365,  365,  365,  369,  369,
      369,  369, 1050, 1051,  351,  357,  350,  439,  439,  366,
      439, 1054,  440,  370,  441,  367,  388,  388,  388,  388,
     1055,  401,  401,  401,  401,  408,  408,  408,  408, 1056,
     1057,  389,  402, 1058,  371, 1059,  403, 1062, 1063,  358,
      409,  333,  333,  333,  333,  337,  337,  337,  337,  339,
      339,  339,  339, 1064, 1068,  334,  390, 1069, 1071,  338,
     1758, 1072, 1758,  340,  442,  442,  442,  442, 1758, 1758,
     1758, 1758, 1073, 1758, 1074, 1758, 1075, 1758,  443, 1758,
     1758, 1758, 1758, 1758,  333,  345,  333,  345, 1078, 1758,

     1080, 1758, 1081, 1758, 1082, 1758,   61, 1083,  334, 1084,
     1758, 1085, 1758,   61, 1086, 1087,  445, 1090,  446, 1758,
     1091, 1758, 1092, 1758, 1093, 1758,  455,  455,  455,  455,
       61,  337,  348,  337,  348, 1094, 1095, 1096,  447,  339,
      349,  339,  349,   61, 1097,  338,  464,  464,  464,  464,
       61,   61, 1098,  340,  442,  449,  442,  449,   61, 1099,
      448, 1758, 1100, 1758, 1101, 1102,   61,   61,  443, 1103,
     1758, 1104, 1758,   61, 1758,   61, 1758,  356,  356,  356,
      356,  462,  462,  462,  462,  365,  365,  365,  365, 1105,
       61, 1110,  357, 1111, 1109, 1109,  463, 1109, 1113, 1114,

      366,  369,  369,  369,  369,  467,  467,  467,  467, 1115,
     1116,  450,  470,  470,  470,  470,  370,  481,  481,  481,
      481,  388,  388,  388,  388, 1117, 1118,  471,  491,  491,
      491,  491,  482, 1120, 1121, 1122,  389,  401,  401,  401,
      401,  504,  504,  504,  504,  483,  541,  541,  402,  541,
     1134,  542,  403,  543,  505,  408,  408,  408,  408,  442,
      442,  442,  442, 1758, 1135, 1758,  484, 1136, 1112, 1112,
      409, 1112, 1758,  443, 1758, 1758, 1758, 1758, 1758, 1137,
     1758, 1142, 1758, 1758, 1758, 1758, 1758, 1143, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1145, 1758, 1146,

      442,  449,  442,  449, 1148,  547, 1119, 1119,  548, 1119,
     1149,  545,   61, 1150,  443, 1758,   61, 1758,   61,   61,
     1151, 1152,  546,  455,  455,  455,  455,   61,  462,  462,
      462,  462, 1156, 1157,   61, 1158,   61,  560,  560,  560,
      560, 1160, 1161,  463,  464,  464,  464,  464, 1162, 1163,
     1164,  549,  561,  561,  561,  561,  467,  467,  467,  467,
      470,  470,  470,  470, 1165, 1166, 1168,  562,  566,  566,
      566,  566, 1169, 1172, 1173,  471,  567,  567,  567,  567,
      481,  481,  481,  481,  579,  579,  579,  579, 1170, 1174,
     1175,  568, 1171, 1177, 1178,  482,  491,  491,  491,  491,

     1179, 1180, 1181,  569,  570,  599,  599,  599,  599,  504,
      504,  504,  504,  613,  613,  613,  613, 1182,  431,  431,
     1183,  431,  505,  432, 1184,  433,  436,  436, 1758,  436,
     1758,  437, 1185,  438,  614,  439,  439, 1758,  439, 1758,
      440, 1758,  441, 1758, 1758, 1758, 1758, 1758,  560,  560,
      560,  560, 1186, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758,  561,  561,  561,  561, 1187,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1188, 1189,
      562, 1190,  634,  632,  647,  647,  647,  647,  566,  566,
      566,  566, 1191, 1192,  633,  635,  636,  567,  567,  567,

      567,  651,  651,  651,  651,  659,  659,  659,  659, 1193,
     1196, 1197,  568,  663,  663,  663,  663, 1203, 1204, 1205,
      660,  579,  579,  579,  579, 1208, 1209, 1210,  664,  673,
      673,  673,  673, 1211,  665,  685,  685,  685,  685,  599,
      599,  599,  599, 1227,  674,  694,  694,  694,  694,  613,
      613,  613,  613,  713,  713,  713,  713,  675, 1228, 1230,
      716, 1231, 1229,  686,  717, 1234, 1237,  714,  718,  695,
     1245,  719,  720, 1246,  721,  696,  541,  541, 1247,  541,
     1249,  542, 1250,  543,  713,  724,  713,  724, 1253, 1254,
     1255, 1758, 1256, 1758, 1257, 1260,   61, 1263,  714, 1758,

     1758, 1758, 1758,   61, 1758,   61, 1758, 1264, 1758,   61,
     1758, 1265, 1758,  733, 1758, 1266,   61,   61, 1267,   61,
       61,  742,  742,  742,  742, 1268, 1269,  744,  744,  744,
      744,  725, 1758, 1270, 1758, 1271,  743, 1272, 1273, 1274,
      732, 1758,  745, 1758, 1275, 1758, 1276, 1758, 1277,  726,
     1278,  813,  813,  727,  813,  746,  814,  728,  815, 1280,
      729,  730, 1281,  731,  647,  647,  647,  647,  748,  748,
      748,  748,  651,  651,  651,  651,  755,  755,  755,  755,
     1282, 1283, 1284,  749,  659,  659,  659,  659, 1285, 1286,
     1287,  756,  762,  762,  762,  762, 1288, 1290, 1291,  660,

      757,  663,  663,  663,  663, 1292,  758,  765,  765,  765,
      765,  673,  673,  673,  673, 1306,  664,  775,  775,  775,
      775,  685,  685,  685,  685, 1307,  674,  694,  694,  694,
      694,  713,  713,  713,  713,  713,  724,  713,  724,  846,
      846,  846,  846, 1308,   61,  714, 1309,   61,   61,  714,
     1310, 1311,   61,   61,   61,   61,   61,   61,   61, 1109,
     1109,   61, 1109, 1317,   61,   61,   61,   61, 1319, 1320,
       61,   61, 1321,  827,   61,   61, 1322,   61,   61,   61,
       61, 1326,  828,   61,   61, 1327,   61,   61,   61,   61,
     1328,  830,   61,   61, 1329,   61,   61,   61,   61,  829,

     1336,   61, 1337, 1338,   61,   61, 1339,   61,  831, 1279,
     1279,   61, 1279,  832, 1340,   61,  834, 1341,  833,   61,
       61, 1342,   61,   61,   61,   61,  835, 1343,   61,   61,
     1344,   61,   61,   61,   61, 1112, 1112,   61, 1112,  836,
       61,   61, 1345,   61, 1346,  837,  742,  742,  742,  742,
      744,  744,  744,  744,  847,  847,  847,  847, 1347, 1289,
     1289,  743, 1289, 1348, 1349,  745,  748,  748,  748,  748,
      850,  850,  850,  850,  755,  755,  755,  755, 1350, 1351,
     1352,  749,  857,  857,  857,  857, 1353, 1354, 1355,  756,
      861,  861,  861,  861,  762,  762,  762,  762,  765,  765,

      765,  765, 1356, 1357, 1358,  862,  775,  775,  775,  775,
       61, 1359, 1360, 1361,   61,   61, 1362, 1363,   61,   61,
     1364,   61,   61,   61,   61, 1378,   61,   61,   61,   61,
     1119, 1119,   61, 1119, 1379, 1380,   61,   61,  925,   61,
       61,   61,   61,  926, 1381,   61,   61,  927,   61,   61,
       61,   61, 1382, 1383,   61,   61, 1385,   61,   61,   61,
       61,  928, 1198,   61, 1386, 1387,   61,   61,  929,   61,
     1199,   61, 1200, 1201, 1388,   61, 1202, 1389, 1391,   61,
       61,  930,   61,   61,   61,   61, 1392,  931,   61,   61,
     1393,   61,   61,   61,   61, 1398, 1399,   61,   61, 1400,

       61,   61,   61,   61, 1401, 1402,   61,  932, 1403,   61,
       61, 1404,   61,   61, 1405,  934, 1406,   61, 1407, 1408,
      933,   61, 1409, 1410,   61,   61, 1411,   61,  940,  940,
      940,  940,  846,  846,  846,  846, 1412,  935,  847,  847,
      847,  847, 1413,  941,  850,  850,  850,  850,  857,  857,
      857,  857,  861,  861,  861,  861,  958,  958,  958,  958,
      962,  962,  962,  962, 1414, 1415, 1416,  862,  966,  966,
      966,  966, 1417, 1418, 1419,  963,  975,  975,  975,  975,
     1420,  813,  813,  967,  813, 1421,  814, 1437,  815, 1438,
     1439,  976, 1005, 1005, 1005, 1005, 1007, 1007, 1007, 1007,

     1011, 1011, 1011, 1011, 1106, 1106, 1006, 1106, 1444, 1107,
     1008, 1108, 1445, 1446, 1012, 1019, 1019, 1019, 1019, 1447,
     1005, 1024, 1005, 1024, 1448,  940,  940,  940,  940, 1020,
     1106, 1106,   61, 1106, 1006, 1107, 1013, 1108,   61,   61,
      941, 1449,   61, 1450, 1451, 1009,   61, 1453, 1454,   61,
       61, 1455,   61, 1456, 1457, 1021,   61, 1007, 1025, 1007,
     1025, 1011, 1028, 1011, 1028, 1027, 1458, 1279, 1279,   61,
     1279, 1008, 1459,   61, 1460, 1012,   61, 1461, 1289, 1289,
       61, 1289, 1758,   61, 1758,   61, 1462, 1463,   61, 1464,
     1465, 1466,   61,   61,   61, 1467,   61, 1029, 1468,   61,

       61,   61,   61,   61, 1469, 1470, 1026,   61, 1473, 1474,
     1477,   61, 1478, 1493,   61,   61, 1494,   61, 1030, 1495,
       61, 1498, 1031, 1032,   61, 1499, 1500, 1501,   61, 1502,
     1503,   61,   61, 1504,   61, 1033, 1505, 1506, 1507, 1034,
     1019, 1035, 1019, 1035, 1043, 1043, 1043, 1043, 1508,   61,
     1509, 1510,   61,   61, 1020, 1511, 1512,   61,   61,   61,
       61,   61,   61,   61, 1513, 1516,   61,   61, 1517,   61,
       61,   61,   61, 1518, 1519,   61,   61, 1038,   61,   61,
     1036,   61, 1037, 1048, 1048, 1048, 1048, 1052, 1052, 1052,
     1052, 1060, 1060, 1060, 1060, 1520, 1521, 1521, 1049, 1521,

     1123, 1522, 1053, 1523, 1540, 1543, 1061,  958,  958,  958,
      958, 1065, 1065, 1065, 1065,  962,  962,  962,  962, 1067,
     1067, 1067, 1067, 1544, 1524, 1524, 1066, 1524, 1545, 1548,
      963,  966,  966,  966,  966, 1070, 1070, 1070, 1070, 1076,
     1076, 1076, 1076, 1549, 1552, 1555,  967,  975,  975,  975,
      975, 1556, 1560, 1561, 1077, 1079, 1079, 1079, 1079, 1562,
     1563, 1564,  976, 1088, 1088, 1088, 1088, 1005, 1005, 1005,
     1005, 1007, 1007, 1007, 1007, 1565, 1559, 1559, 1089, 1559,
     1566, 1006, 1569, 1587, 1588, 1008, 1011, 1011, 1011, 1011,
     1019, 1019, 1019, 1019, 1005, 1024, 1005, 1024, 1570, 1570,

     1012, 1570, 1598, 1599, 1020, 1601,   61, 1602, 1006, 1007,
     1025, 1007, 1025,   61, 1043, 1043, 1043, 1043, 1603, 1571,
     1571,   61, 1571, 1008, 1572,   61, 1573, 1606,   61,   61,
       61, 1600, 1600,   61, 1600, 1607,   61,   61, 1608,   61,
     1011, 1028, 1011, 1028, 1610,   61, 1138, 1138, 1138, 1138,
     1521, 1521,   61, 1521, 1012, 1611,   61, 1124, 1612,   61,
       61, 1139, 1609, 1609,   61, 1609, 1613,   61,   61, 1622,
       61,   61, 1629, 1125, 1630,   61,   61, 1631, 1632,   61,
       61, 1634,   61,   61,   61,   61, 1635, 1638,   61,   61,
     1644,   61,   61,   61,   61, 1524, 1524,   61, 1524, 1650,

       61,   61, 1126,   61, 1559, 1559,   61, 1559, 1128, 1651,
       61,   61, 1652, 1127,   61,   61, 1653,   61,   61,   61,
       61, 1654,   61,   61, 1663,   61, 1019, 1035, 1019, 1035,
     1648, 1649, 1664, 1140, 1140, 1140, 1140, 1665,   61, 1129,
     1020, 1666,   61, 1130, 1667,   61,   61,   61, 1141, 1668,
       61,   61, 1669,   61,   61,   61,   61, 1131,   61,   61,
       61,   61,   61, 1674,   61, 1675, 1633, 1633,   61, 1633,
     1132,   61,   61, 1676,   61, 1660, 1661, 1133, 1048, 1048,
     1048, 1048, 1144, 1144, 1144, 1144, 1052, 1052, 1052, 1052,
     1677, 1678, 1679, 1049, 1147, 1147, 1147, 1147, 1680, 1681,

     1686, 1053, 1153, 1153, 1153, 1153, 1060, 1060, 1060, 1060,
     1155, 1155, 1155, 1155, 1687, 1570, 1570, 1154, 1570, 1688,
     1689, 1061, 1065, 1065, 1065, 1065, 1159, 1159, 1159, 1159,
     1067, 1067, 1067, 1067, 1690, 1691, 1692, 1066, 1070, 1070,
     1070, 1070, 1076, 1076, 1076, 1076, 1167, 1167, 1167, 1167,
     1079, 1079, 1079, 1079, 1693, 1698, 1699, 1077, 1088, 1088,
     1088, 1088, 1176, 1176, 1176, 1176, 1194, 1194, 1194, 1194,
     1700, 1701, 1702, 1089, 1206, 1206, 1206, 1206,   61, 1703,
     1195, 1704,   61, 1705, 1600, 1600,   61, 1600, 1207,   61,
       61, 1710,   61, 1194, 1213, 1194, 1213, 1232, 1232, 1232,

     1232, 1711,   61, 1712, 1713,   61,   61, 1195, 1714, 1212,
       61, 1215,   61,   61,   61,   61,   61, 1715, 1716, 1216,
       61, 1217, 1218,   61,   61, 1219, 1723, 1724,   61,   61,
     1725,   61,   61,   61,   61, 1214, 1726,   61,   61, 1736,
     1737,   61,   61, 1220,   61,   61,   61,   61, 1738,   61,
       61, 1745,   61, 1222, 1206, 1223, 1206, 1223, 1233, 1233,
     1233, 1233, 1749,   61, 1221, 1750,   61,   61, 1207, 1755,
     1757,   61,   61,   61,   61,   61,   61,   61,  895, 1224,
       61,   61,  894,   61,   61,   61,   61,  893,  892,   61,
       61,  891,   61,   61,  890,   61, 1138, 1138, 1138, 1138,

     1140, 1140, 1140, 1140,  889, 1571, 1571, 1225, 1571,  888,
     1572, 1139, 1573,  887, 1226, 1141, 1235, 1235, 1235, 1235,
     1144, 1144, 1144, 1144, 1238, 1238, 1238, 1238,  886,  885,
      884, 1236, 1147, 1147, 1147, 1147,  883,  882,  878, 1239,
     1240, 1240, 1240, 1240, 1243, 1243, 1243, 1243, 1153, 1153,
     1153, 1153,  877, 1655, 1655, 1241, 1655, 1609, 1609, 1244,
     1609,  876,  875, 1154, 1248, 1248, 1248, 1248, 1242, 1155,
     1155, 1155, 1155, 1251, 1251, 1251, 1251, 1159, 1159, 1159,
     1159, 1258, 1258, 1258, 1258,  874,  873,  872, 1252, 1167,
     1167, 1167, 1167,  871,  870,  869, 1259, 1261, 1261, 1261,

     1261, 1176, 1176, 1176, 1176, 1194, 1194, 1194, 1194,  868,
      867,  866, 1262, 1206, 1206, 1206, 1206,   61,  865, 1195,
      864,   61,  863, 1633, 1633,   61, 1633, 1207,   61,   61,
      858,   61, 1293, 1194, 1213, 1194, 1213, 1232, 1232, 1232,
     1232,  856,   61,  853,  852,   61,   61, 1195, 1655, 1655,
       61, 1655,   61,   61,   61,  851,   61, 1741, 1741,   61,
     1741,  849,  848,   61,   61, 1294,  845,   61,   61,   61,
       61,   61,   61,   61,  844,   61,   61,  843,   61,   61,
     1296, 1742, 1742,   61, 1742,  842,  841,   61, 1295,  840,
       61,   61,   61,   61,  839,  838,   61,   61, 1297,  826,

       61,   61,  825,   61,   61,   61,   61,  824,   61,   61,
      823,   61, 1299,  818,   61,  817,  816,  812,   61,   61,
      811, 1298,   61,   61,  810,   61,   61, 1301,   61,  809,
       61,   61,  808,   61,   61,  807, 1748, 1748,   61, 1748,
      806,  805,   61, 1300,  804,   61,   61,  803,   61, 1206,
     1223, 1206, 1223, 1233, 1233, 1233, 1233,  802,   61,  801,
      800,   61,   61, 1207,  799,  798,   61, 1302,   61,   61,
       61,  795,   61, 1754, 1754,   61, 1754, 1741, 1741,   61,
     1741,  794,  791,   61, 1303,   61,   61,   61,   61,   61,
     1742, 1742,   61, 1742, 1304,  790,   61,  789,  788,   61,

       61,  787,   61, 1235, 1235, 1235, 1235, 1312, 1312, 1312,
     1312, 1305, 1313, 1313, 1313, 1313,  786,  785, 1236, 1238,
     1238, 1238, 1238, 1315, 1315, 1315, 1315, 1314, 1240, 1240,
     1240, 1240,  784,  783, 1239, 1316, 1316, 1316, 1316, 1243,
     1243, 1243, 1243, 1241, 1318, 1318, 1318, 1318, 1248, 1248,
     1248, 1248,  782,  781, 1244, 1323, 1323, 1323, 1323, 1251,
     1251, 1251, 1251, 1325, 1325, 1325, 1325,  780, 1748, 1748,
     1324, 1748,  779,  778, 1252, 1330, 1330, 1330, 1330, 1258,
     1258, 1258, 1258, 1332, 1332, 1332, 1332,  777, 1754, 1754,
     1331, 1754,  776,  774, 1259, 1333, 1333, 1333, 1333, 1261,

     1261, 1261, 1261, 1335, 1335, 1335, 1335,   61,  773,  770,
     1334,   61,   61,  769, 1262,   61,   61,  768,   61,   61,
       61,   61,  767,   61,   61,   61,   61,  766,  764,   61,
     1365,  763,  761,   61,   61,  760,   61,   61,   61,   61,
      759,  754,   61,  753,  752,   61,   61, 1366,   61,  751,
      750,   61,  747, 1367,  741,   61,   61,  738, 1368,   61,
       61,  737,   61,   61,   61,   61,  736,   61,   61,  735,
       61,  734,  723,   61,  722,  715,  712,   61,  711,  710,
      709,   61, 1370, 1369,   61,   61,   61,   61,  706,  705,
       61,   61,  704,  703,   61,   61,  702,   61,   61,   61,

       61,  701,   61,   61, 1371,   61,  700,   61,  699,  698,
      697,   61,   61,  693, 1372,   61,   61,  692,   61,   61,
       61,   61,  691,   61,   61, 1373,   61,  690,   61,  689,
      688, 1375, 1376,  687,  684,  681,   61,  680,  679,   61,
       61, 1374,   61,   61,  678,  677,  676,   61,  672,  671,
      670,   61,  669,  668,   61,   61,  667,   61, 1312, 1312,
     1312, 1312, 1313, 1313, 1313, 1313, 1384, 1384, 1384, 1384,
     1315, 1315, 1315, 1315,  666,  662,  661, 1314, 1377, 1316,
     1316, 1316, 1316, 1318, 1318, 1318, 1318, 1323, 1323, 1323,
     1323, 1390, 1390, 1390, 1390, 1325, 1325, 1325, 1325,  656,

      655,  654, 1324, 1394, 1394, 1394, 1394, 1330, 1330, 1330,
     1330, 1396, 1396, 1396, 1396,  653,  652,  650, 1395,  649,
      648,  646, 1331, 1332, 1332, 1332, 1332, 1333, 1333, 1333,
     1333, 1397, 1397, 1397, 1397, 1335, 1335, 1335, 1335,   61,
      645,  644, 1334,   61,   61,  643,  642,   61,   61,  641,
       61,   61,   61,   61,  640,   61,   61,   61,   61,  639,
      638,   61,   61, 1423,  637,   61,   61, 1422,   61,   61,
       61,   61,  631,   61,   61,  630,   61,  629,  628,   61,
      627, 1425,  626,   61,   61,  625,  624,   61,   61, 1424,
       61,   61,   61,   61,  623,   61,   61,   61,   61,  622,

      621,   61,  620,  619,  618,   61,  617,  616,   61,   61,
      615,   61,  612, 1426,  611,   61,  608,  607, 1427,   61,
     1428,  606,  605,   61,   61,  604,   61,   61,   61,   61,
      603,  602,   61,  601,  600,   61,   61,   61,   61,  598,
      597,   61,   61,  596,  595,   61,   61, 1429,   61,   61,
       61,   61,  594,   61,   61,  593,   61, 1430,  592,   61,
      591,  590,  589,   61,   61,  588,  587,   61,   61, 1431,
       61,   61,   61,   61, 1432,   61,   61, 1433,   61, 1435,
     1435, 1435, 1435, 1434, 1440, 1440, 1440, 1440, 1442, 1442,
     1442, 1442,  586,  585, 1436, 1384, 1384, 1384, 1384, 1441,

      584,  583,  582, 1443, 1390, 1390, 1390, 1390, 1394, 1394,
     1394, 1394, 1452, 1452, 1452, 1452, 1396, 1396, 1396, 1396,
      581,  580,  578, 1395, 1397, 1397, 1397, 1397, 1471, 1471,
     1471, 1471, 1475, 1475, 1475, 1475,   61,  577,  576,  575,
       61,   61, 1472,  574,   61,   61, 1476,   61,   61,   61,
       61,  573,   61,   61,   61,   61,  572,  571,   61,  565,
      564,  563,   61,   61,  559,   61,   61,   61,   61, 1479,
      558,   61,  557, 1480,   61,   61,  556,   61,   61,  555,
     1482,  554,   61,  553,  552,  551,   61, 1481,  550,   61,
       61,   61,   61,  544,  540,   61,  539,  538,  537,   61,

      536,  535,   61,   61, 1483,   61,   61,  534,  533,  532,
       61,  531,  530,  529,   61,  528,  527,   61,   61,  526,
       61, 1485,  525,  524, 1484, 1471, 1486, 1471, 1486, 1492,
     1492, 1492, 1492,  523,   61,  522,  521,   61,   61, 1472,
      520,  519,   61,   61,   61,   61,   61,   61,   61,  518,
      517,   61,  516,  515,   61,   61,  514,   61,  513,  512,
      511,   61, 1488,  508, 1487, 1475, 1489, 1475, 1489, 1496,
     1496, 1496, 1496,  507,   61,  506,  503,   61,   61, 1476,
      502,  501,   61,   61,   61,   61,   61,   61,   61,  500,
      499,   61,  498,  497,   61,   61,  496,   61,  495,  494,

      493,   61, 1435, 1435, 1435, 1435, 1440, 1440, 1440, 1440,
      492, 1490,  490,  486,  485, 1491,  480, 1436,  479,  478,
      477, 1441, 1442, 1442, 1442, 1442, 1497, 1497, 1497, 1497,
     1452, 1452, 1452, 1452,  476,  475,  474, 1443, 1514, 1514,
     1514, 1514, 1471, 1471, 1471, 1471, 1475, 1475, 1475, 1475,
      473,  472, 1515,  469,  468,  466, 1472,  465,  461,  460,
     1476, 1525, 1525, 1525, 1525, 1527, 1527, 1527, 1527,   61,
      459,  458,  457,   61,  456, 1526,  454,   61,  453, 1528,
       61,   61,  452,   61, 1514, 1530, 1514, 1530, 1492, 1492,
     1492, 1492, 1541, 1541, 1541, 1541,   61,  451, 1515,  444,

       61, 1529,  435,   61,   61,   61,  434, 1542,   61,   61,
      430,   61,   61,   61,   61,  429,   61,   61,   61,   61,
       61,  428,   61,  427,  426,  422,   61,  421,  418,   61,
       61, 1531,   61,   61,  417,  416,  415,   61, 1532,  414,
      413,   61,  412,  411,   61,   61,   61,   61,  410,  407,
       61, 1533,  406,  405,   61,  404, 1534,   61,   61,  400,
       61,  399, 1535, 1471, 1486, 1471, 1486, 1496, 1496, 1496,
     1496,  398,   61,  397,  396,   61,   61, 1472,  395,  394,
       61,   61,   61,   61,   61,   61,   61,  393,  392,   61,
      391,  387,   61,   61,  386,   61,  385,  382,  379,   61,

     1475, 1489, 1475, 1489,  376,  375, 1536,  374, 1525, 1538,
     1525, 1538,   61, 1537, 1476, 1497, 1497, 1497, 1497,   61,
       61,  373, 1526, 1527, 1539, 1527, 1539,   61, 1546, 1546,
     1546, 1546,  372,  368,  364,   61,   61, 1528, 1550, 1550,
     1550, 1550,   61, 1547,   61, 1553, 1553, 1553, 1553, 1557,
     1557, 1557, 1557, 1551, 1514, 1514, 1514, 1514,  363,   61,
     1554,  362,  361, 1558, 1567, 1567, 1567, 1567, 1515, 1525,
     1525, 1525, 1525, 1527, 1527, 1527, 1527,  360, 1568, 1557,
     1574, 1557, 1574, 1526,  359,  353,  352, 1528,  342,  341,
      336,   61,  335, 1558, 1514, 1530, 1514, 1530,   61,  331,

      330, 1582, 1582, 1582, 1582,  329,   61,  328, 1515,  327,
       61,  326,  323,   61,   61,   61, 1583,  320,   61,  317,
      316,   61,   61,   61,   61, 1575,  315,   61,   61,  314,
       61,   61,   61,  313,   61,   61,   61,   61,  312,   61,
       61,   61,   61,  311,  308,   61, 1576,  307,  306,   61,
       61,  305,   61,   61,   61,   61,  304,  303,   61,  302,
     1577,   61,   61,   61,   61,  299,  298,   61,  295,  294,
     1578,   61,  293,  292,   61,   61, 1579,   61, 1567, 1581,
     1567, 1581, 1584, 1584, 1584, 1584, 1525, 1538, 1525, 1538,
       61,  291, 1568,  290,  289,  288, 1580,   61,   61,  287,

     1526, 1527, 1539, 1527, 1539,   61, 1541, 1541, 1541, 1541,
      286,  285,  284,   61,   61, 1528, 1585, 1585, 1585, 1585,
       61, 1542,   61, 1546, 1546, 1546, 1546, 1589, 1589, 1589,
     1589, 1586, 1590, 1590, 1590, 1590,  283,   61, 1547, 1592,
     1592, 1592, 1592, 1550, 1550, 1550, 1550, 1591, 1594, 1594,
     1594, 1594,  282,  281, 1593,  280,  279,  278, 1551, 1595,
     1595, 1595, 1595, 1553, 1553, 1553, 1553, 1597, 1597, 1597,
     1597,  277,  276,  275, 1596,  274,  273,  272, 1554, 1557,
     1557, 1557, 1557, 1604, 1604, 1604, 1604, 1567, 1567, 1567,
     1567,  271,  260, 1558,  259,  258,  257, 1605,  256,  255,

      254, 1568, 1557, 1574, 1557, 1574, 1620, 1620, 1620, 1620,
      251,   61,  250,  247,   61,   61, 1558,  246,  245,   61,
      244,   61,   61,   61,  243,   61,  242,  241,   61,  240,
      239,  238,   61,  237, 1614,  236,   61,  235,   61,   61,
       61,  234,   61, 1604, 1616, 1604, 1616, 1584, 1584, 1584,
     1584, 1582, 1582, 1582, 1582,   61,   61, 1605,  233,  232,
       61,   61,   61, 1615,   61,   61, 1583,   61,   61,   61,
       61,  231,   61,   61,   61,   61,  230,  229,   61,   61,
     1618,  228,   61,  227, 1617,   61,   61,  226,   61, 1567,
     1581, 1567, 1581,  225, 1585, 1585, 1585, 1585,  224,  223,

      222,   61,  221, 1568,  208,  207, 1619,  204,   61, 1586,
     1621, 1621, 1621, 1621, 1623, 1623, 1623, 1623, 1589, 1589,
     1589, 1589,  203,  202,  199,   61,  196,  174,  185, 1624,
     1590, 1590, 1590, 1590, 1626, 1626, 1626, 1626, 1592, 1592,
     1592, 1592,  184,  183,  182, 1591, 1627, 1627, 1627, 1627,
      181,  180,  179, 1593, 1594, 1594, 1594, 1594, 1595, 1595,
     1595, 1595,  178, 1625, 1628, 1628, 1628, 1628, 1597, 1597,
     1597, 1597,  177, 1596, 1604, 1604, 1604, 1604, 1636, 1636,
     1636, 1636,   61,  176,  175,  173,   61,   61, 1605,  171,
       61,   61, 1637,   61,   61,   61,   61,  170,   61,   61,

      157,   61, 1604, 1616, 1604, 1616, 1640,  156,  153,  152,
     1639,  151,  148,  131,   61,   61, 1605,  118,  117,   61,
       61,   61,  116,   61,   61, 1641,   61,   61,   61,   61,
     1642,   61,   61,  111,   61,  110,  109,  108,   61, 1636,
     1643, 1636, 1643, 1620, 1620, 1620, 1620, 1621, 1621, 1621,
     1621,   61,   78, 1637, 1623, 1623, 1623, 1623,   61, 1645,
     1645, 1645, 1645, 1646, 1646, 1646, 1646,  105,  104, 1624,
     1626, 1626, 1626, 1626,   78,   61,   73,   73, 1647, 1627,
     1627, 1627, 1627, 1628, 1628, 1628, 1628, 1636, 1636, 1636,
     1636,   61, 1758,   34,   34,   61,   61,   34,   34,   61,

       61, 1637,   61,   61,   61,   61, 1657,   61,   61,   61,
       61,   34,   34,   61,   34,   34, 1758,   61,   61, 1758,
       61,   61,   61,   61, 1656, 1758,   61, 1758, 1658,   61,
       61, 1758,   61, 1636, 1643, 1636, 1643, 1659, 1645, 1645,
     1645, 1645, 1758, 1758, 1758,   61, 1758, 1637, 1646, 1646,
     1646, 1646,   61, 1662, 1662, 1662, 1662, 1758, 1758, 1758,
       61, 1758, 1758, 1647,   61, 1758, 1758, 1758,   61,   61,
     1670,   61,   61,   61,   61, 1758, 1758,   61, 1758, 1758,
     1758,   61,   61, 1758,   61,   61,   61,   61, 1758, 1758,
       61,   61, 1671,   61,   61,   61,   61, 1758, 1758,   61,

     1758, 1758,   61,   61, 1758,   61, 1662, 1662, 1662, 1662,
     1758, 1758, 1758,   61, 1672, 1758, 1758,   61, 1758, 1758,
     1758,   61,   61, 1673,   61,   61,   61,   61, 1758, 1758,
       61,   61, 1682,   61,   61,   61,   61, 1758, 1758,   61,
     1758, 1758,   61,   61,   61,   61, 1758, 1758,   61,   61,
     1758, 1758,   61,   61, 1683,   61,   61,   61,   61, 1758,
       61,   61,   61,   61, 1758, 1684,   61, 1758, 1758, 1758,
       61,   61, 1758,   61,   61,   61,   61, 1758, 1685,   61,
       61, 1694,   61,   61,   61,   61, 1758, 1758,   61, 1758,
     1758,   61,   61, 1758,   61, 1758, 1695, 1696, 1758,   61,

     1758, 1758, 1758,   61,   61, 1758, 1697,   61,   61, 1758,
       61,   61,   61,   61, 1758,   61,   61,   61,   61, 1758,
     1758,   61, 1758, 1758, 1758,   61, 1758, 1758,   61,   61,
     1707,   61,   61, 1706, 1758, 1758,   61,   61, 1758, 1758,
       61,   61, 1758,   61,   61,   61,   61, 1758,   61,   61,
     1708,   61, 1727, 1727, 1727, 1727,   61, 1758, 1758, 1758,
       61, 1758, 1758, 1717,   61, 1709, 1728,   61,   61,   61,
       61, 1758, 1758,   61,   61, 1758, 1758,   61,   61, 1758,
       61,   61,   61,   61, 1758,   61,   61, 1758,   61, 1718,
     1721, 1721, 1721, 1721, 1729, 1729, 1729, 1729, 1758,   61,

     1758, 1719, 1758,   61, 1758, 1722, 1720,   61, 1730, 1758,
       61,   61,   61,   61, 1758, 1758,   61, 1758, 1758, 1758,
       61, 1758, 1758,   61,   61, 1758,   61, 1727, 1733, 1727,
     1733, 1758, 1731, 1729, 1734, 1729, 1734, 1758, 1758,   61,
     1758, 1728, 1758, 1758, 1732,   61,   61, 1730, 1735, 1735,
     1735, 1735,   61, 1721, 1721, 1721, 1721, 1739, 1739, 1739,
     1739, 1758, 1758,   61, 1727, 1727, 1727, 1727, 1722,   61,
     1758, 1740, 1729, 1729, 1729, 1729,   61, 1758, 1728, 1758,
       61, 1758, 1758, 1758,   61, 1758, 1730,   61,   61, 1758,
       61, 1739, 1744, 1739, 1744, 1727, 1733, 1727, 1733, 1729,

     1734, 1729, 1734,   61, 1758, 1740, 1758,   61, 1743, 1728,
       61,   61, 1758, 1730,   61, 1758, 1758, 1758,   61, 1735,
     1735, 1735, 1735, 1746, 1746, 1746, 1746,   61, 1758, 1758,
     1758,   61, 1758, 1758, 1758,   61, 1758, 1747, 1739, 1739,
     1739, 1739, 1746, 1751, 1746, 1751, 1739, 1744, 1739, 1744,
     1758, 1758, 1740, 1758,   61, 1758, 1747, 1758,   61, 1758,
     1740,   61, 1758, 1758, 1758,   61, 1752, 1752, 1752, 1752,
     1746, 1746, 1746, 1746, 1746, 1751, 1746, 1751,   61, 1758,
     1758, 1753,   61, 1758, 1747, 1758,   61, 1758, 1747, 1752,
     1752, 1752, 1752,   61, 1756, 1756, 1756, 1756, 1756, 1756,

     1756, 1756, 1758, 1758, 1753, 1758, 1758, 1758, 1758, 1758,
       61,   24,   24,   24,   24,   24,   24,   33,   33,   33,
       33,   33,   33,   35,   35,   35,   35,   35,   35,   36,
       36,   36,   36,   36,   36,   34,   34,   34,   34,   34,
       34,   37,   37,   37,   37,   37,   37,   38,   38,   38,
       38,   38,   38,   41,   41,   41,   41,   41,   41,   61,
     1758, 1758,   61,   61,  100,  100,  100,  100,  100,  101,
      101, 1758,  101,  101,  101,  102,  102,  102, 1758,  102,
      102,  103,  103,  103,  103, 1758,  103,   19, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758
    } ;

static yyconst flex_int16_t yy_chk[5047] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    0,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    0,   26,
        0,   26,    1,    2,    2,    2,    2,    2,    2,    2,
       26,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   15,   16,   17,   18,    2,   90,   86,  134,   15,
       16,   90,   86,  134,   29,   29,   29,   29,   17,   18,
       21,   21,   21,   21,   29,   24,   29,   24,  795,   21,
       21,   21,   21,   21,   24,   21,   24,   32,   24,   32,
       24,   21,   31,   31,   31,   31,   32,   45,   32,   45,
       32,   49,   32,  245,   21,   21,   95,  245,   45,   55,

       21,   32,   95,   49,  796,   21,   50,   50,   50,   50,
       21,   21,   21,   21,   22,   22,   22,   22,   55,   46,
       46,   46,   46,   22,   22,   22,   22,   22,   56,   22,
       61,   46,   61,   75,   84,   22,  718,  138,   46,   61,
       75,   61,  138,   61,  225,   61,  107,  107,   22,   22,
      107,   56,   84,  718,   22,   46,  225,   75,  132,   22,
       74,   74,   74,   74,   22,   22,   22,   22,   27,   27,
       27,   27,   48,   48,   48,   48,  132,   27,  130,   27,
       27,   27,   48,   27,   48,  130,  797,   27,  241,  241,
      143,   48,   79,   79,   79,   79,  143,   63,   63,   63,

       63,  171,  130,  798,   27,   30,  171,   63,   48,   63,
      222,   65,   30,   65,   64,  222,   64,   30,  253,  253,
       65,  253,   65,   64,   65,   64,   65,   64,  273,   64,
      289,  289,   93,   30,   30,   30,   30,   30,   64,   30,
      273,   30,   30,   65,  799,   30,   93,   30,   93,   93,
       30,   30,   30,   30,   60,   60,   60,   60,  293,   66,
      324,   66,  293,   60,   60,   60,   60,   60,   66,   60,
       66,   68,   66,   68,   66,   60,   98,   98,   98,   98,
       68,  324,   68,  800,   68,  802,   68,  243,   60,   60,
      172,  291,  243,  719,   60,   66,  291,  172,  719,   60,

       67,  803,   67,   68,   60,   60,   60,   60,   69,   67,
       69,   67,  805,   67,  172,   67,   70,   69,   70,   69,
      514,   69,   68,   69,  514,   70,  806,   70,   71,   70,
       71,   70,  410,  410,  807,   67,   72,   71,   72,   71,
       69,   71,  594,   71,   77,   72,   77,   72,  594,   72,
      574,   72,   77,   77,  574,   77,   77,   77,  619,   77,
       71,   70,  619,   69,   80,   80,   80,   80,   94,  642,
       94,  808,   72,  809,  670,  642,   80,   99,  670,   99,
       94,  810,  141,   80,   94,   94,   99,  811,   99,   94,
       99,  696,   99,  692,  692,  813,  141,   99,  141,  141,

       80,   82,   82,   82,   82,   82,  814,   82,  815,   82,
       82,  327,  327,   82,  696,   82,  758,  327,   82,   82,
       82,   82,  106,  106,  106,  106,  816,  119,  817,  119,
      175,  175,  175,  175,  106,  120,  119,  120,  119,  758,
      119,  106,  119,  818,  120,  819,  120,  820,  120,  821,
      120,  121,  122,  121,  122,  822,  430,  430,  106,  430,
      121,  122,  121,  122,  121,  122,  121,  122,  753,  753,
      123,  823,  123,  233,  233,  233,  233,  119,  124,  123,
      124,  123,  824,  123,  120,  123,  125,  124,  125,  124,
      825,  124,  826,  124,  233,  125,  122,  125,  126,  125,

      126,  125,  838,  841,  842,  121,  127,  126,  127,  126,
      843,  126,  844,  126,  123,  127,  128,  127,  128,  127,
      142,  127,  142,  845,  848,  128,  124,  128,  849,  128,
      851,  128,  142,  125,  386,  386,  142,  142,  126,  852,
      386,  142,  174,  174,  174,  174,  853,  854,  855,  127,
      178,  178,  178,  178,  174,  856,  128,  186,  186,  186,
      186,  779,  779,  858,  178,  859,  187,  779,  187,  186,
      188,  188,  188,  188,  860,  187,  186,  187,  863,  187,
      864,  187,  188,  865,  188,  189,  189,  189,  189,  188,
      190,  867,  190,  186,  868,  870,  871,  189,  872,  190,

      187,  190,  873,  190,  189,  190,  188,  191,  874,  191,
      309,  309,  309,  309,  875,  192,  191,  192,  191,  876,
      191,  189,  191,  190,  192,  193,  192,  193,  192,  878,
      192,  839,  839,  194,  193,  194,  193,  839,  193,  879,
      193,  195,  194,  195,  194,  191,  194,  880,  194,  881,
      195,  192,  195,  882,  195,  883,  195,  252,  252,  252,
      252,  884,  254,  254,  254,  254,  257,  257,  257,  257,
      885,  252,  887,  888,  889,  193,  254,  891,  892,  195,
      257,  261,  893,  261,  194,  258,  258,  258,  258,  262,
      261,  262,  261,  894,  261,  895,  261,  896,  262,  258,

      262,  898,  262,  899,  262,  900,  263,  263,  263,  263,
      264,  264,  264,  264,  265,  265,  265,  265,  263,  261,
      263,  902,  264,  903,  264,  263,  265,  334,  334,  264,
      334,  904,  334,  265,  334,  905,  906,  262,  338,  338,
      907,  338,  263,  338,  908,  338,  264,  910,  916,  918,
      265,  266,  266,  266,  266,  267,  267,  267,  267,  268,
      268,  268,  268,  266,  919,  919,  920,  267,  921,  267,
      266,  268,  923,  268,  267,  270,  924,  270,  268,  936,
      269,  269,  269,  269,  270,  937,  270,  266,  270,  938,
      270,  267,  269,  939,  942,  268,  943,  944,  945,  269,

      274,  274,  274,  274,  281,  281,  281,  281,  283,  283,
      283,  283,  947,  948,  270,  274,  269,  340,  340,  281,
      340,  950,  340,  283,  340,  281,  297,  297,  297,  297,
      951,  308,  308,  308,  308,  314,  314,  314,  314,  952,
      953,  297,  308,  954,  283,  955,  308,  957,  959,  274,
      314,  333,  333,  333,  333,  337,  337,  337,  337,  339,
      339,  339,  339,  960,  964,  333,  297,  965,  968,  337,
      343,  969,  343,  339,  341,  341,  341,  341,  344,  343,
      344,  343,  970,  343,  971,  343,  972,  344,  341,  344,
      346,  344,  346,  344,  345,  345,  345,  345,  974,  346,

      977,  346,  978,  346,  979,  346,  345,  980,  345,  983,
      347,  984,  347,  345,  985,  986,  343,  988,  344,  347,
      989,  347,  990,  347,  991,  347,  357,  357,  357,  357,
      345,  348,  348,  348,  348,  992,  994,  995,  346,  349,
      349,  349,  349,  348,  996,  348,  366,  366,  366,  366,
      348,  349,  997,  349,  350,  350,  350,  350,  349,  998,
      347,  351,  999,  351, 1000, 1001,  350,  348,  350, 1002,
      351, 1003,  351,  350,  351,  349,  351,  356,  356,  356,
      356,  364,  364,  364,  364,  365,  365,  365,  365, 1004,
      350, 1009,  356, 1010, 1008, 1008,  364, 1008, 1013, 1014,

      365,  369,  369,  369,  369,  370,  370,  370,  370, 1015,
     1016,  351,  373,  373,  373,  373,  369,  383,  383,  383,
      383,  388,  388,  388,  388, 1017, 1018,  373,  389,  389,
      389,  389,  383, 1021, 1022, 1023,  388,  401,  401,  401,
      401,  403,  403,  403,  403,  383,  443,  443,  401,  443,
     1039,  443,  401,  443,  403,  408,  408,  408,  408,  442,
      442,  442,  442,  445, 1040,  445,  383, 1041, 1012, 1012,
      408, 1012,  445,  442,  445,  446,  445,  446,  445, 1042,
      447, 1046,  447,  448,  446,  448,  446, 1047,  446,  447,
      446,  447,  448,  447,  448,  447,  448, 1050,  448, 1051,

      449,  449,  449,  449, 1054,  447, 1020, 1020,  448, 1020,
     1055,  445,  449, 1056,  449,  450,  450,  450,  450,  449,
     1057, 1058,  446,  455,  455,  455,  455,  450,  462,  462,
      462,  462, 1062, 1063,  450, 1064,  449,  463,  463,  463,
      463, 1068, 1069,  462,  464,  464,  464,  464, 1071, 1072,
     1073,  450,  465,  465,  465,  465,  467,  467,  467,  467,
      470,  470,  470,  470, 1074, 1075, 1078,  465,  471,  471,
      471,  471, 1080, 1082, 1083,  470,  472,  472,  472,  472,
      481,  481,  481,  481,  482,  482,  482,  482, 1081, 1084,
     1086,  472, 1081, 1090, 1092,  481,  491,  491,  491,  491,

     1093, 1094, 1095,  472,  472,  503,  503,  503,  503,  504,
      504,  504,  504,  518,  518,  518,  518, 1096,  530,  530,
     1098,  530,  504,  530, 1099,  530,  535,  535,  545,  535,
      545,  535, 1100,  535,  518,  538,  538,  545,  538,  545,
      538,  545,  538,  545,  546,  547,  546,  547,  560,  560,
      560,  560, 1101,  546,  547,  546,  547,  546,  547,  546,
      547,  549,  548,  549,  548,  561,  561,  561,  561, 1102,
      549,  548,  549,  548,  549,  548,  549,  548, 1104, 1106,
      561, 1107,  547,  545,  562,  562,  562,  562,  566,  566,
      566,  566, 1108, 1109,  546,  548,  549,  567,  567,  567,

      567,  568,  568,  568,  568,  575,  575,  575,  575, 1110,
     1112, 1113,  567,  578,  578,  578,  578, 1115, 1116, 1117,
      575,  579,  579,  579,  579, 1119, 1120, 1121,  578,  587,
      587,  587,  587, 1122,  578,  597,  597,  597,  597,  599,
      599,  599,  599, 1134,  587,  607,  607,  607,  607,  613,
      613,  613,  613,  624,  624,  624,  624,  587, 1135, 1136,
      626, 1137, 1135,  597,  626, 1142, 1145,  624,  626,  607,
     1150,  626,  626, 1151,  626,  607,  628,  628, 1152,  628,
     1156,  628, 1157,  628,  632,  632,  632,  632, 1160, 1161,
     1162,  633, 1163,  633, 1164, 1166,  632, 1169,  632,  635,

      633,  635,  633,  632,  633,  636,  633, 1170,  635,  636,
      635, 1171,  635,  636,  635, 1172,  636,  636, 1173,  636,
      632,  644,  644,  644,  644, 1174, 1177,  645,  645,  645,
      645,  633,  634, 1178,  634, 1179,  644, 1180, 1181, 1183,
      635,  634,  645,  634, 1184,  634, 1185,  634, 1186,  634,
     1193,  714,  714,  634,  714,  645,  714,  634,  714, 1197,
      634,  634, 1198,  634,  647,  647,  647,  647,  648,  648,
      648,  648,  651,  651,  651,  651,  655,  655,  655,  655,
     1199, 1200, 1201,  648,  659,  659,  659,  659, 1202, 1203,
     1204,  655,  660,  660,  660,  660, 1205, 1209, 1210,  659,

      655,  663,  663,  663,  663, 1211,  655,  664,  664,  664,
      664,  673,  673,  673,  673, 1227,  663,  674,  674,  674,
      674,  685,  685,  685,  685, 1228,  673,  694,  694,  694,
      694,  713,  713,  713,  713,  724,  724,  724,  724,  743,
      743,  743,  743, 1229,  725,  713, 1230,  724,  725,  724,
     1231, 1234,  725,  726,  724,  725,  725,  726,  725, 1192,
     1192,  726, 1192, 1242,  726,  726,  727,  726, 1245, 1246,
      727,  724, 1247,  725,  727,  728, 1249,  727,  727,  728,
      727, 1253,  726,  728,  729, 1254,  728,  728,  729,  728,
     1255,  728,  729,  730, 1256,  729,  729,  730,  729,  727,

     1263,  730, 1264, 1265,  730,  730, 1266,  730,  728, 1195,
     1195,  731, 1195,  729, 1267,  731,  730, 1268,  729,  731,
      732, 1269,  731,  731,  732,  731,  731, 1270,  732,  733,
     1271,  732,  732,  733,  732, 1196, 1196,  733, 1196,  732,
      733,  733, 1272,  733, 1273,  733,  742,  742,  742,  742,
      744,  744,  744,  744,  745,  745,  745,  745, 1274, 1207,
     1207,  742, 1207, 1275, 1276,  744,  748,  748,  748,  748,
      749,  749,  749,  749,  755,  755,  755,  755, 1278, 1279,
     1280,  748,  756,  756,  756,  756, 1281, 1282, 1283,  755,
      759,  759,  759,  759,  762,  762,  762,  762,  765,  765,

      765,  765, 1284, 1285, 1286,  759,  775,  775,  775,  775,
      827, 1287, 1288, 1289,  827,  828, 1290, 1291,  827,  828,
     1292,  827,  827,  828,  827, 1306,  828,  828,  829,  828,
     1208, 1208,  829, 1208, 1307, 1308,  829,  830,  827,  829,
      829,  830,  829,  828, 1309,  830,  831,  829,  830,  830,
      831,  830, 1310, 1311,  831,  832, 1317,  831,  831,  832,
      831,  830, 1114,  832, 1319, 1320,  832,  832,  831,  832,
     1114,  833, 1114, 1114, 1321,  833, 1114, 1322, 1326,  833,
      834,  832,  833,  833,  834,  833, 1327,  833,  834,  835,
     1328,  834,  834,  835,  834, 1337, 1338,  835,  836, 1339,

      835,  835,  836,  835, 1342, 1343,  836,  834, 1344,  836,
      836, 1345,  836,  837, 1346,  836, 1347,  837, 1348, 1349,
      835,  837, 1350, 1352,  837,  837, 1353,  837,  840,  840,
      840,  840,  846,  846,  846,  846, 1354,  837,  847,  847,
      847,  847, 1355,  840,  850,  850,  850,  850,  857,  857,
      857,  857,  861,  861,  861,  861,  862,  862,  862,  862,
      866,  866,  866,  866, 1356, 1357, 1358,  861,  869,  869,
      869,  869, 1359, 1360, 1362,  866,  877,  877,  877,  877,
     1363,  911,  911,  869,  911, 1364,  911, 1379,  911, 1380,
     1381,  877,  914,  914,  914,  914,  915,  915,  915,  915,

      917,  917,  917,  917, 1006, 1006,  914, 1006, 1385, 1006,
      915, 1006, 1386, 1387,  917,  922,  922,  922,  922, 1388,
      925,  925,  925,  925, 1389,  940,  940,  940,  940,  922,
     1189, 1189,  925, 1189,  925, 1189,  917, 1189,  927,  925,
      940, 1391,  927, 1392, 1393,  915,  927, 1398, 1399,  927,
      927, 1400,  927, 1401, 1402,  922,  925,  926,  926,  926,
      926,  928,  928,  928,  928,  927, 1403, 1351, 1351,  926,
     1351,  926, 1404,  928, 1405,  928,  926, 1406, 1361, 1361,
      928, 1361,  929,  929,  929,  929, 1407, 1408,  930, 1409,
     1410, 1411,  930,  926,  929, 1412,  930,  928, 1413,  930,

      930,  929,  930,  931, 1414, 1415,  926,  931, 1417, 1418,
     1420,  931, 1421, 1437,  931,  931, 1438,  931,  929, 1439,
      932, 1444,  930,  930,  932, 1445, 1446, 1447,  932, 1448,
     1449,  932,  932, 1450,  932,  931, 1451, 1453, 1455,  932,
      933,  933,  933,  933,  941,  941,  941,  941, 1456,  934,
     1457, 1459,  933,  934,  933, 1460, 1462,  934,  935,  933,
      934,  934,  935,  934, 1464, 1466,  935, 1026, 1467,  935,
      935, 1026,  935, 1468, 1469, 1026,  933,  935, 1026, 1026,
      933, 1026,  934,  946,  946,  946,  946,  949,  949,  949,
      949,  956,  956,  956,  956, 1470, 1472, 1472,  946, 1472,

     1026, 1473,  949, 1474, 1493, 1495,  956,  958,  958,  958,
      958,  961,  961,  961,  961,  962,  962,  962,  962,  963,
      963,  963,  963, 1498, 1476, 1476,  961, 1476, 1499, 1501,
      962,  966,  966,  966,  966,  967,  967,  967,  967,  973,
      973,  973,  973, 1502, 1504, 1508,  966,  975,  975,  975,
      975, 1509, 1516, 1517,  973,  976,  976,  976,  976, 1518,
     1519, 1520,  975,  987,  987,  987,  987, 1005, 1005, 1005,
     1005, 1007, 1007, 1007, 1007, 1521, 1515, 1515,  987, 1515,
     1522, 1005, 1524, 1544, 1545, 1007, 1011, 1011, 1011, 1011,
     1019, 1019, 1019, 1019, 1024, 1024, 1024, 1024, 1526, 1526,

     1011, 1526, 1555, 1556, 1019, 1559, 1024, 1560, 1024, 1025,
     1025, 1025, 1025, 1024, 1043, 1043, 1043, 1043, 1561, 1528,
     1528, 1025, 1528, 1025, 1528, 1027, 1528, 1563, 1025, 1027,
     1024, 1558, 1558, 1027, 1558, 1564, 1027, 1027, 1566, 1027,
     1028, 1028, 1028, 1028, 1570, 1025, 1044, 1044, 1044, 1044,
     1565, 1565, 1028, 1565, 1028, 1571, 1029, 1027, 1572, 1028,
     1029, 1044, 1568, 1568, 1029, 1568, 1573, 1029, 1029, 1587,
     1029, 1030, 1598, 1029, 1600, 1030, 1028, 1602, 1603, 1030,
     1031, 1606, 1030, 1030, 1031, 1030, 1607, 1609, 1031, 1032,
     1622, 1031, 1031, 1032, 1031, 1569, 1569, 1032, 1569, 1631,

     1032, 1032, 1030, 1032, 1601, 1601, 1033, 1601, 1032, 1632,
     1033, 1034, 1633, 1031, 1033, 1034, 1634, 1033, 1033, 1034,
     1033, 1635, 1034, 1034, 1648, 1034, 1035, 1035, 1035, 1035,
     1629, 1629, 1649, 1045, 1045, 1045, 1045, 1650, 1035, 1033,
     1035, 1651, 1036, 1034, 1653, 1035, 1036, 1037, 1045, 1654,
     1036, 1037, 1655, 1036, 1036, 1037, 1036, 1036, 1037, 1037,
     1038, 1037, 1035, 1660, 1038, 1661, 1605, 1605, 1038, 1605,
     1037, 1038, 1038, 1663, 1038, 1644, 1644, 1038, 1048, 1048,
     1048, 1048, 1049, 1049, 1049, 1049, 1052, 1052, 1052, 1052,
     1664, 1665, 1666, 1048, 1053, 1053, 1053, 1053, 1667, 1668,

     1674, 1052, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060,
     1061, 1061, 1061, 1061, 1675, 1610, 1610, 1059, 1610, 1676,
     1677, 1060, 1065, 1065, 1065, 1065, 1066, 1066, 1066, 1066,
     1067, 1067, 1067, 1067, 1678, 1679, 1680, 1065, 1070, 1070,
     1070, 1070, 1076, 1076, 1076, 1076, 1077, 1077, 1077, 1077,
     1079, 1079, 1079, 1079, 1681, 1686, 1687, 1076, 1088, 1088,
     1088, 1088, 1089, 1089, 1089, 1089, 1111, 1111, 1111, 1111,
     1688, 1689, 1690, 1088, 1118, 1118, 1118, 1118, 1123, 1691,
     1111, 1692, 1123, 1693, 1630, 1630, 1123, 1630, 1118, 1123,
     1123, 1698, 1123, 1124, 1124, 1124, 1124, 1139, 1139, 1139,

     1139, 1699, 1125, 1701, 1702, 1124, 1125, 1124, 1703, 1123,
     1125, 1126, 1124, 1125, 1125, 1126, 1125, 1704, 1705, 1126,
     1127, 1126, 1126, 1126, 1127, 1126, 1711, 1712, 1127, 1124,
     1713, 1127, 1127, 1128, 1127, 1125, 1714, 1128, 1129, 1723,
     1724, 1128, 1129, 1127, 1128, 1128, 1129, 1128, 1725, 1129,
     1129, 1736, 1129, 1129, 1130, 1130, 1130, 1130, 1141, 1141,
     1141, 1141, 1741, 1131, 1128, 1742, 1130, 1131, 1130, 1748,
     1754, 1131, 1132, 1130, 1131, 1131, 1132, 1131,  794, 1131,
     1132, 1133,  793, 1132, 1132, 1133, 1132,  792,  791, 1133,
     1130,  790, 1133, 1133,  789, 1133, 1138, 1138, 1138, 1138,

     1140, 1140, 1140, 1140,  788, 1611, 1611, 1132, 1611,  787,
     1611, 1138, 1611,  786, 1133, 1140, 1143, 1143, 1143, 1143,
     1144, 1144, 1144, 1144, 1146, 1146, 1146, 1146,  785,  784,
      783, 1143, 1147, 1147, 1147, 1147,  782,  781,  778, 1146,
     1148, 1148, 1148, 1148, 1149, 1149, 1149, 1149, 1153, 1153,
     1153, 1153,  777, 1637, 1637, 1148, 1637, 1638, 1638, 1149,
     1638,  776,  774, 1153, 1154, 1154, 1154, 1154, 1148, 1155,
     1155, 1155, 1155, 1158, 1158, 1158, 1158, 1159, 1159, 1159,
     1159, 1165, 1165, 1165, 1165,  773,  772,  771, 1158, 1167,
     1167, 1167, 1167,  770,  769,  768, 1165, 1168, 1168, 1168,

     1168, 1176, 1176, 1176, 1176, 1194, 1194, 1194, 1194,  767,
      766,  764, 1168, 1206, 1206, 1206, 1206, 1212,  763, 1194,
      761, 1212,  760, 1652, 1652, 1212, 1652, 1206, 1212, 1212,
      757, 1212, 1212, 1213, 1213, 1213, 1213, 1232, 1232, 1232,
     1232,  754, 1214,  752,  751, 1213, 1214, 1213, 1669, 1669,
     1214, 1669, 1213, 1214, 1214,  750, 1214, 1728, 1728, 1215,
     1728,  747,  746, 1215, 1216, 1214,  741, 1215, 1216, 1213,
     1215, 1215, 1216, 1215,  740, 1216, 1216,  739, 1216, 1217,
     1216, 1730, 1730, 1217, 1730,  738,  737, 1217, 1215,  736,
     1217, 1217, 1218, 1217,  735,  734, 1218, 1219, 1217,  723,

     1218, 1219,  722, 1218, 1218, 1219, 1218,  721, 1219, 1219,
      720, 1219, 1219,  717, 1220,  716,  715,  712, 1220, 1221,
      711, 1218, 1220, 1221,  710, 1220, 1220, 1221, 1220,  709,
     1221, 1221,  708, 1221, 1222,  707, 1740, 1740, 1222, 1740,
      706,  705, 1222, 1220,  704, 1222, 1222,  703, 1222, 1223,
     1223, 1223, 1223, 1233, 1233, 1233, 1233,  702, 1224,  701,
      700, 1223, 1224, 1223,  699,  698, 1224, 1222, 1223, 1224,
     1224,  695, 1224, 1747, 1747, 1225, 1747, 1749, 1749, 1225,
     1749,  693,  691, 1225, 1224, 1223, 1225, 1225, 1226, 1225,
     1750, 1750, 1226, 1750, 1225,  690, 1226,  689,  688, 1226,

     1226,  687, 1226, 1235, 1235, 1235, 1235, 1236, 1236, 1236,
     1236, 1226, 1237, 1237, 1237, 1237,  686,  684, 1235, 1238,
     1238, 1238, 1238, 1239, 1239, 1239, 1239, 1237, 1240, 1240,
     1240, 1240,  683,  682, 1238, 1241, 1241, 1241, 1241, 1243,
     1243, 1243, 1243, 1240, 1244, 1244, 1244, 1244, 1248, 1248,
     1248, 1248,  681,  680, 1243, 1250, 1250, 1250, 1250, 1251,
     1251, 1251, 1251, 1252, 1252, 1252, 1252,  679, 1755, 1755,
     1250, 1755,  678,  677, 1251, 1257, 1257, 1257, 1257, 1258,
     1258, 1258, 1258, 1259, 1259, 1259, 1259,  676, 1757, 1757,
     1257, 1757,  675,  672, 1258, 1260, 1260, 1260, 1260, 1261,

     1261, 1261, 1261, 1262, 1262, 1262, 1262, 1293,  671,  669,
     1260, 1293, 1294,  668, 1261, 1293, 1294,  667, 1293, 1293,
     1294, 1293,  666, 1294, 1294, 1295, 1294,  665,  662, 1295,
     1293,  661,  658, 1295, 1296,  657, 1295, 1295, 1296, 1295,
      656,  654, 1296,  653,  652, 1296, 1296, 1294, 1296,  650,
      649, 1297,  646, 1295,  643, 1297, 1298,  641, 1296, 1297,
     1298,  640, 1297, 1297, 1298, 1297,  639, 1298, 1298,  638,
     1298,  637,  631, 1299,  627,  625,  623, 1299,  622,  621,
      620, 1299, 1298, 1297, 1299, 1299, 1300, 1299,  618,  617,
     1300, 1301,  616,  615, 1300, 1301,  614, 1300, 1300, 1301,

     1300,  612, 1301, 1301, 1299, 1301,  611, 1302,  610,  609,
      608, 1302, 1303,  606, 1300, 1302, 1303,  605, 1302, 1302,
     1303, 1302,  604, 1303, 1303, 1301, 1303,  603, 1304,  602,
      600, 1303, 1304,  598,  595,  593, 1304,  592,  591, 1304,
     1304, 1302, 1304, 1305,  590,  589,  588, 1305,  586,  585,
      584, 1305,  583,  582, 1305, 1305,  581, 1305, 1312, 1312,
     1312, 1312, 1313, 1313, 1313, 1313, 1314, 1314, 1314, 1314,
     1315, 1315, 1315, 1315,  580,  577,  576, 1313, 1305, 1316,
     1316, 1316, 1316, 1318, 1318, 1318, 1318, 1323, 1323, 1323,
     1323, 1324, 1324, 1324, 1324, 1325, 1325, 1325, 1325,  573,

      572,  571, 1323, 1329, 1329, 1329, 1329, 1330, 1330, 1330,
     1330, 1331, 1331, 1331, 1331,  570,  569,  565, 1329,  564,
      563,  559, 1330, 1332, 1332, 1332, 1332, 1333, 1333, 1333,
     1333, 1334, 1334, 1334, 1334, 1335, 1335, 1335, 1335, 1365,
      558,  557, 1333, 1365, 1366,  556,  555, 1365, 1366,  554,
     1365, 1365, 1366, 1365,  553, 1366, 1366, 1367, 1366,  552,
      551, 1367, 1368, 1366,  550, 1367, 1368, 1365, 1367, 1367,
     1368, 1367,  544, 1368, 1368,  543, 1368,  542,  541, 1369,
      534, 1368,  533, 1369, 1370,  529,  528, 1369, 1370, 1367,
     1369, 1369, 1370, 1369,  527, 1370, 1370, 1371, 1370,  526,

      525, 1371,  524,  523,  522, 1371,  521,  520, 1371, 1371,
      519, 1371,  517, 1369,  516, 1372,  513,  512, 1370, 1372,
     1371,  511,  510, 1372, 1373,  509, 1372, 1372, 1373, 1372,
      508,  507, 1373,  506,  505, 1373, 1373, 1374, 1373,  502,
      501, 1374, 1375,  500,  499, 1374, 1375, 1372, 1374, 1374,
     1375, 1374,  498, 1375, 1375,  497, 1375, 1373,  496, 1376,
      495,  494,  493, 1376, 1377,  492,  490, 1376, 1377, 1374,
     1376, 1376, 1377, 1376, 1375, 1377, 1377, 1376, 1377, 1378,
     1378, 1378, 1378, 1377, 1382, 1382, 1382, 1382, 1383, 1383,
     1383, 1383,  489,  488, 1378, 1384, 1384, 1384, 1384, 1382,

      487,  486,  485, 1383, 1390, 1390, 1390, 1390, 1394, 1394,
     1394, 1394, 1395, 1395, 1395, 1395, 1396, 1396, 1396, 1396,
      484,  483,  480, 1394, 1397, 1397, 1397, 1397, 1416, 1416,
     1416, 1416, 1419, 1419, 1419, 1419, 1422,  479,  478,  477,
     1422, 1423, 1416,  476, 1422, 1423, 1419, 1422, 1422, 1423,
     1422,  475, 1423, 1423, 1424, 1423,  474,  473, 1424,  469,
      468,  466, 1424, 1425,  461, 1424, 1424, 1425, 1424, 1422,
      460, 1425,  459, 1423, 1425, 1425,  458, 1425, 1426,  457,
     1425,  456, 1426,  454,  453,  452, 1426, 1424,  451, 1426,
     1426, 1427, 1426,  444,  441, 1427,  440,  439,  438, 1427,

      437,  436, 1427, 1427, 1426, 1427, 1428,  435,  434,  433,
     1428,  432,  431,  429, 1428,  428,  427, 1428, 1428,  426,
     1428, 1428,  425,  424, 1427, 1429, 1429, 1429, 1429, 1436,
     1436, 1436, 1436,  423, 1430,  422,  421, 1429, 1430, 1429,
      420,  419, 1430, 1431, 1429, 1430, 1430, 1431, 1430,  418,
      417, 1431,  416,  415, 1431, 1431,  414, 1431,  413,  412,
      411, 1429, 1431,  407, 1430, 1432, 1432, 1432, 1432, 1441,
     1441, 1441, 1441,  406, 1433,  405,  402, 1432, 1433, 1432,
      400,  399, 1433, 1434, 1432, 1433, 1433, 1434, 1433,  398,
      397, 1434,  396,  395, 1434, 1434,  394, 1434,  393,  392,

      391, 1432, 1435, 1435, 1435, 1435, 1440, 1440, 1440, 1440,
      390, 1433,  387,  385,  384, 1434,  382, 1435,  381,  380,
      379, 1440, 1442, 1442, 1442, 1442, 1443, 1443, 1443, 1443,
     1452, 1452, 1452, 1452,  378,  377,  376, 1442, 1465, 1465,
     1465, 1465, 1471, 1471, 1471, 1471, 1475, 1475, 1475, 1475,
      375,  374, 1465,  372,  371,  368, 1471,  367,  363,  362,
     1475, 1477, 1477, 1477, 1477, 1478, 1478, 1478, 1478, 1479,
      361,  360,  359, 1479,  358, 1477,  355, 1479,  354, 1478,
     1479, 1479,  353, 1479, 1480, 1480, 1480, 1480, 1492, 1492,
     1492, 1492, 1494, 1494, 1494, 1494, 1480,  352, 1480,  342,

     1481, 1479,  336, 1480, 1481, 1482,  335, 1494, 1481, 1482,
      332, 1481, 1481, 1482, 1481,  331, 1482, 1482, 1483, 1482,
     1480,  330, 1483,  329,  328,  326, 1483,  325,  323, 1483,
     1483, 1481, 1483, 1484,  322,  321,  320, 1484, 1482,  319,
      318, 1484,  317,  316, 1484, 1484, 1485, 1484,  315,  313,
     1485, 1483,  312,  311, 1485,  310, 1484, 1485, 1485,  307,
     1485,  306, 1485, 1486, 1486, 1486, 1486, 1496, 1496, 1496,
     1496,  305, 1487,  304,  303, 1486, 1487, 1486,  302,  301,
     1487, 1488, 1486, 1487, 1487, 1488, 1487,  300,  299, 1488,
      298,  296, 1488, 1488,  295, 1488,  294,  292,  290, 1486,

     1489, 1489, 1489, 1489,  288,  287, 1487,  286, 1490, 1490,
     1490, 1490, 1489, 1488, 1489, 1497, 1497, 1497, 1497, 1489,
     1490,  285, 1490, 1491, 1491, 1491, 1491, 1490, 1500, 1500,
     1500, 1500,  284,  282,  280, 1491, 1489, 1491, 1503, 1503,
     1503, 1503, 1491, 1500, 1490, 1505, 1505, 1505, 1505, 1513,
     1513, 1513, 1513, 1503, 1514, 1514, 1514, 1514,  279, 1491,
     1505,  278,  277, 1513, 1523, 1523, 1523, 1523, 1514, 1525,
     1525, 1525, 1525, 1527, 1527, 1527, 1527,  276, 1523, 1529,
     1529, 1529, 1529, 1525,  275,  272,  271, 1527,  260,  259,
      256, 1529,  255, 1529, 1530, 1530, 1530, 1530, 1529,  251,

      250, 1540, 1540, 1540, 1540,  249, 1530,  248, 1530,  247,
     1531,  246,  244, 1530, 1531, 1529, 1540,  242, 1531,  240,
      239, 1531, 1531, 1532, 1531, 1531,  238, 1532, 1533,  237,
     1530, 1532, 1533,  236, 1532, 1532, 1533, 1532,  235, 1533,
     1533, 1534, 1533,  234,  232, 1534, 1532,  231,  230, 1534,
     1535,  229, 1534, 1534, 1535, 1534,  228,  227, 1535,  226,
     1533, 1535, 1535, 1536, 1535,  224,  223, 1536,  221,  220,
     1534, 1536,  219,  218, 1536, 1536, 1535, 1536, 1537, 1537,
     1537, 1537, 1542, 1542, 1542, 1542, 1538, 1538, 1538, 1538,
     1537,  217, 1537,  216,  215,  214, 1536, 1537, 1538,  213,

     1538, 1539, 1539, 1539, 1539, 1538, 1541, 1541, 1541, 1541,
      212,  211,  210, 1539, 1537, 1539, 1543, 1543, 1543, 1543,
     1539, 1541, 1538, 1546, 1546, 1546, 1546, 1547, 1547, 1547,
     1547, 1543, 1548, 1548, 1548, 1548,  209, 1539, 1546, 1549,
     1549, 1549, 1549, 1550, 1550, 1550, 1550, 1548, 1551, 1551,
     1551, 1551,  208,  207, 1549,  206,  205,  204, 1550, 1552,
     1552, 1552, 1552, 1553, 1553, 1553, 1553, 1554, 1554, 1554,
     1554,  203,  202,  201, 1552,  200,  199,  198, 1553, 1557,
     1557, 1557, 1557, 1562, 1562, 1562, 1562, 1567, 1567, 1567,
     1567,  197,  185, 1557,  184,  183,  182, 1562,  181,  180,

      179, 1567, 1574, 1574, 1574, 1574, 1583, 1583, 1583, 1583,
      177, 1575,  176,  170, 1574, 1575, 1574,  169,  168, 1575,
      167, 1574, 1575, 1575,  166, 1575,  165,  164, 1576,  163,
      162,  161, 1576,  160, 1575,  159, 1576,  158, 1574, 1576,
     1576,  157, 1576, 1577, 1577, 1577, 1577, 1584, 1584, 1584,
     1584, 1582, 1582, 1582, 1582, 1577, 1578, 1577,  156,  155,
     1578, 1579, 1577, 1576, 1578, 1579, 1582, 1578, 1578, 1579,
     1578,  154, 1579, 1579, 1580, 1579,  153,  152, 1580, 1577,
     1579,  151, 1580,  150, 1578, 1580, 1580,  149, 1580, 1581,
     1581, 1581, 1581,  148, 1585, 1585, 1585, 1585,  147,  146,

      145, 1581,  144, 1581,  140,  139, 1580,  137, 1581, 1585,
     1586, 1586, 1586, 1586, 1588, 1588, 1588, 1588, 1589, 1589,
     1589, 1589,  136,  135,  133, 1581,  131,  129,  118, 1588,
     1590, 1590, 1590, 1590, 1591, 1591, 1591, 1591, 1592, 1592,
     1592, 1592,  117,  116,  115, 1590, 1593, 1593, 1593, 1593,
      114,  113,  112, 1592, 1594, 1594, 1594, 1594, 1595, 1595,
     1595, 1595,  111, 1588, 1596, 1596, 1596, 1596, 1597, 1597,
     1597, 1597,  110, 1595, 1604, 1604, 1604, 1604, 1608, 1608,
     1608, 1608, 1614,  109,  108,  104, 1614, 1615, 1604,   97,
     1614, 1615, 1608, 1614, 1614, 1615, 1614,   96, 1615, 1615,

       92, 1615, 1616, 1616, 1616, 1616, 1615,   91,   89,   88,
     1614,   87,   85,   81, 1616, 1617, 1616,   59,   58, 1617,
     1618, 1616,   57, 1617, 1618, 1617, 1617, 1617, 1618, 1617,
     1618, 1618, 1618,   54, 1618,   53,   52,   51, 1616, 1619,
     1619, 1619, 1619, 1620, 1620, 1620, 1620, 1621, 1621, 1621,
     1621, 1619,   47, 1619, 1623, 1623, 1623, 1623, 1619, 1624,
     1624, 1624, 1624, 1625, 1625, 1625, 1625,   43,   40, 1623,
     1626, 1626, 1626, 1626,   28, 1619,   25,   23, 1625, 1627,
     1627, 1627, 1627, 1628, 1628, 1628, 1628, 1636, 1636, 1636,
     1636, 1639,   19,   14,   13, 1639, 1640,    8,    7, 1639,

     1640, 1636, 1639, 1639, 1640, 1639, 1640, 1640, 1640, 1641,
     1640,    6,    5, 1641,    4,    3,    0, 1641, 1642,    0,
     1641, 1641, 1642, 1641, 1639,    0, 1642,    0, 1641, 1642,
     1642,    0, 1642, 1643, 1643, 1643, 1643, 1642, 1645, 1645,
     1645, 1645,    0,    0,    0, 1643,    0, 1643, 1646, 1646,
     1646, 1646, 1643, 1647, 1647, 1647, 1647,    0,    0,    0,
     1656,    0,    0, 1646, 1656,    0,    0,    0, 1656, 1643,
     1656, 1656, 1656, 1657, 1656,    0,    0, 1657,    0,    0,
        0, 1657, 1658,    0, 1657, 1657, 1658, 1657,    0,    0,
     1658, 1659, 1657, 1658, 1658, 1659, 1658,    0,    0, 1659,

        0,    0, 1659, 1659,    0, 1659, 1662, 1662, 1662, 1662,
        0,    0,    0, 1670, 1658,    0,    0, 1670,    0,    0,
        0, 1670, 1671, 1659, 1670, 1670, 1671, 1670,    0,    0,
     1671, 1672, 1670, 1671, 1671, 1672, 1671,    0,    0, 1672,
        0,    0, 1672, 1672, 1673, 1672,    0,    0, 1673, 1682,
        0,    0, 1673, 1682, 1671, 1673, 1673, 1682, 1673,    0,
     1682, 1682, 1683, 1682,    0, 1672, 1683,    0,    0,    0,
     1683, 1684,    0, 1683, 1683, 1684, 1683,    0, 1673, 1684,
     1685, 1682, 1684, 1684, 1685, 1684,    0,    0, 1685,    0,
        0, 1685, 1685,    0, 1685,    0, 1683, 1684,    0, 1694,

        0,    0,    0, 1694, 1695,    0, 1685, 1694, 1695,    0,
     1694, 1694, 1695, 1694,    0, 1695, 1695, 1696, 1695,    0,
        0, 1696,    0,    0,    0, 1696,    0,    0, 1696, 1696,
     1695, 1696, 1697, 1694,    0,    0, 1697, 1706,    0,    0,
     1697, 1706,    0, 1697, 1697, 1706, 1697,    0, 1706, 1706,
     1696, 1706, 1715, 1715, 1715, 1715, 1707,    0,    0,    0,
     1707,    0,    0, 1706, 1707, 1697, 1715, 1707, 1707, 1708,
     1707,    0,    0, 1708, 1709,    0,    0, 1708, 1709,    0,
     1708, 1708, 1709, 1708,    0, 1709, 1709,    0, 1709, 1707,
     1710, 1710, 1710, 1710, 1716, 1716, 1716, 1716,    0, 1717,

        0, 1708,    0, 1717,    0, 1710, 1709, 1717, 1716,    0,
     1717, 1717, 1718, 1717,    0,    0, 1718,    0,    0,    0,
     1718,    0,    0, 1718, 1718,    0, 1718, 1719, 1719, 1719,
     1719,    0, 1717, 1720, 1720, 1720, 1720,    0,    0, 1719,
        0, 1719,    0,    0, 1718, 1720, 1719, 1720, 1722, 1722,
     1722, 1722, 1720, 1721, 1721, 1721, 1721, 1726, 1726, 1726,
     1726,    0,    0, 1719, 1727, 1727, 1727, 1727, 1721, 1720,
        0, 1726, 1729, 1729, 1729, 1729, 1731,    0, 1727,    0,
     1731,    0,    0,    0, 1731,    0, 1729, 1731, 1731,    0,
     1731, 1732, 1732, 1732, 1732, 1733, 1733, 1733, 1733, 1734,

     1734, 1734, 1734, 1732,    0, 1732,    0, 1733, 1731, 1733,
     1732, 1734,    0, 1734, 1733,    0,    0,    0, 1734, 1735,
     1735, 1735, 1735, 1738, 1738, 1738, 1738, 1732,    0,    0,
        0, 1733,    0,    0,    0, 1734,    0, 1738, 1739, 1739,
     1739, 1739, 1743, 1743, 1743, 1743, 1744, 1744, 1744, 1744,
        0,    0, 1739,    0, 1743,    0, 1743,    0, 1744,    0,
     1744, 1743,    0,    0,    0, 1744, 1745, 1745, 1745, 1745,
     1746, 1746, 1746, 1746, 1751, 1751, 1751, 1751, 1743,    0,
        0, 1745, 1744,    0, 1746,    0, 1751,    0, 1751, 1752,
     1752, 1752, 1752, 1751, 1753, 1753, 1753, 1753, 1756, 1756,

     1756, 1756,    0,    0, 1752,    0,    0,    0,    0,    0,
     1751, 1759, 1759, 1759, 1759, 1759, 1759, 1760, 1760, 1760,
     1760, 1760, 1760, 1761, 1761, 1761, 1761, 1761, 1761, 1762,
     1762, 1762, 1762, 1762, 1762, 1763, 1763, 1763, 1763, 1763,
     1763, 1764, 1764, 1764, 1764, 1764, 1764, 1765, 1765, 1765,
     1765, 1765, 1765, 1766, 1766, 1766, 1766, 1766, 1766, 1767,
        0,    0, 1767, 1767, 1768, 1768, 1768, 1768, 1768, 1769,
     1769,    0, 1769, 1769, 1769, 1770, 1770, 1770,    0, 1770,
     1770, 1771, 1771, 1771, 1771,    0, 1771, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,

     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[186] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 
    0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "OSParseosrl.l"
/* $Id$ */
/** @file parseosrl.l
 * 
 * @author  Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin, 
 * @version 2.0, 19/07/2009
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005-2009, Robert Fourer, Jun Ma, Horand Gassmann, Kipp Martin,
 * Northwestern University, Dalhousie University and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 17 "OSParseosrl.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSrLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"


#define PARSERDEBUG

#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;
     








#line 103 "OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 2249 "OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 113 "OSParseosrl.l"



#line 2496 "OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1759 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4988 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 120 "OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 122 "OSParseosrl.l"
{ YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 123 "OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 125 "OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 141 "OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* numerical attributes */
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 145 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 146 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 147 "OSParseosrl.l"
{  YY_PRINT;  return(NUMBEROFITEMSATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 148 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 149 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 150 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 151 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 152 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERRESULTSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 153 "OSParseosrl.l"
{  YY_PRINT; return(NUMBEROFOTHERSOLUTIONRESULTSATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 154 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 155 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 156 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLVEROUTPUTSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 157 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSUBSTATUSESATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 158 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 159 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 160 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 162 "OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 163 "OSParseosrl.l"
{YY_PRINT;  return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
/* attributes returning strings */
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 167 "OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 168 "OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 169 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 170 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 171 "OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 172 "OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 173 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 174 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 175 "OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 176 "OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 177 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 178 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 179 "OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 180 "OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 181 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 182 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 183 "OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 184 "OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 185 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 186 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 187 "OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 188 "OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 189 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 190 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 191 "OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 192 "OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 193 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 194 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
/* top level elements */
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 198 "OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 199 "OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 200 "OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 202 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 203 "OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 205 "OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 206 "OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 208 "OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 209 "OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 211 "OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 212 "OSParseosrl.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 214 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 215 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
/* The <item> element is treated specially because it may legitimately contain special characters */
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 220 "OSParseosrl.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 221 "OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 222 "OSParseosrl.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 223 "OSParseosrl.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
/* Remaining elements, sorted alpabetically. */
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 227 "OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMESTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 228 "OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMEEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 229 "OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUNUMBERSTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 230 "OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUNUMBEREND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 231 "OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUSPEEDSTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 232 "OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUSPEEDEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 233 "OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEDISKSPACESTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 234 "OSParseosrl.l"
{YY_PRINT; return(AVAILABLEDISKSPACEEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 235 "OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEMEMORYSTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 236 "OSParseosrl.l"
{YY_PRINT; return(AVAILABLEMEMORYEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 237 "OSParseosrl.l"
{YY_PRINT;  return(BASISSTATUSSTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 238 "OSParseosrl.l"
{YY_PRINT; return(BASISSTATUSEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 239 "OSParseosrl.l"
{YY_PRINT;  return(BASSTATUSSTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 240 "OSParseosrl.l"
{YY_PRINT; return(BASSTATUSEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 241 "OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 242 "OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 243 "OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 244 "OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 245 "OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTSTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 246 "OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 247 "OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATESTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 248 "OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATEEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 249 "OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 250 "OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 251 "OSParseosrl.l"
{YY_PRINT;  return(ENDTIMESTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 252 "OSParseosrl.l"
{YY_PRINT;  return(ENDTIMEEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 253 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 254 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 255 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 256 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 257 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 258 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 259 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 260 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 261 "OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 262 "OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 263 "OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 264 "OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 265 "OSParseosrl.l"
{YY_PRINT;  return(OPTIMIZATIONSOLUTIONSTATUSSTART);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 266 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSOLUTIONSTATUSEND);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 267 "OSParseosrl.l"
{YY_PRINT;  return(OPTIMIZATIONSOLUTIONSUBSTATUSSTART);}	   
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 268 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSOLUTIONSUBSTATUSEND);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 269 "OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 270 "OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 271 "OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSSTART);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 272 "OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSEND);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 273 "OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSTART);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 274 "OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLUTIONRESULTEND);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 275 "OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSSTART);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 276 "OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSEND);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 277 "OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTSTART);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 278 "OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTEND);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 279 "OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 280 "OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 281 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 282 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 283 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 284 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 285 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONSTART);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 286 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONEND);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 287 "OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 288 "OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 289 "OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDSTART);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 290 "OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDEND);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 291 "OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTSTART);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 292 "OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTEND);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 293 "OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 294 "OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 295 "OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMESTART);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 296 "OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMEEND);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 297 "OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSSTART);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 298 "OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSEND);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 299 "OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONSTART);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 300 "OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONEND);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 301 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 302 "OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 303 "OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDSTART);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 304 "OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDEND);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 305 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPSTART);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 306 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPEND);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 307 "OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 308 "OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 309 "OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFARSTART);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 310 "OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFAREND);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 311 "OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBERSTART);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 312 "OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBEREND);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 313 "OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDSTART);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 314 "OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDEND);} 
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 315 "OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACESTART);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 316 "OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACEEND);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 317 "OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYSTART);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 318 "OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYEND);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 319 "OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 320 "OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 321 "OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGSTART);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 322 "OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGEND);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 323 "OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 324 "OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 325 "OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 326 "OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
/* environments and comments */
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 331 "OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext);   yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 332 "OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 334 "OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 174:
#line 336 "OSParseosrl.l"
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 336 "OSParseosrl.l"
;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 337 "OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 339 "OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 178:
#line 341 "OSParseosrl.l"
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 341 "OSParseosrl.l"
;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 342 "OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 345 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /* yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 346 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 347 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 351 "OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 363 "OSParseosrl.l"
ECHO;
	YY_BREAK
#line 3722 "OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1759 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1759 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1758);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 363 "OSParseosrl.l"





