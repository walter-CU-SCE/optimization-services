#line 2 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

#line 4 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 34
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 * Given that the standard has decreed that size_t exists since 1989,
 * I guess we can afford to depend on it. Manoj.
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 120
#define YY_END_OF_BUFFER 121
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[988] =
    {   0,
        1,    1,  118,  118,  116,  116,  117,  117,    0,    0,
        0,    0,    0,    0,    0,    0,  121,  119,    1,    1,
        2,  107,    2,  119,    6,  119,    5,  119,    4,  107,
      118,  120,  116,  117,  109,  110,  109,  113,  114,  113,
        1,    0,    6,    0,    5,    0,    4,    0,    0,    0,
        0,    0,    0,    0,    0,    1,  107,    6,    5,  107,
      107,  107,  107,  107,  107,  107,  107,    3,    6,    6,
        6,  107,    7,    5,    5,    0,    0,  112,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    4,  107,
      118,  116,  117,    0,  115,    6,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  107,  107,  107,  107,  107,  107,  107,  107,
      107,    0,    6,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        6,  111,    6,    0,    0,    0,    0,    0,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  108,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   95,    0,    0,    0,    0,    0,

       91,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       87,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  107,  107,  107,  107,
      107,  107,  107,  107,  107,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   54,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   70,    0,
        0,    0,    0,    0,    0,    0,   70,    0,    0,    0,
       19,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      107,  107,  107,  107,  107,  107,  107,  107,    0,   96,

        0,    0,    0,    0,    0,   55,    0,    0,    0,   92,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   88,    0,    0,    0,    0,    0,   54,    0,
        0,    0,    0,   46,   45,   99,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   19,    0,   23,   24,    0,    0,    0,   27,
       28,    0,   35,   36,    0,    0,  107,  107,  107,  107,
      107,   96,    0,    0,    0,    0,   55,    0,    0,   92,
        0,    0,    0,   47,    0,    0,    0,    0,    0,    0,
       71,    0,    0,   88,    0,    0,    0,    0,    0,    0,

        0,   65,    0,    0,    0,    0,    0,   81,    0,  105,
        0,   83,    0,    0,    0,    0,    0,    0,    0,    0,
       21,   22,    0,    0,    0,   25,   26,    0,   33,   34,
        0,   39,   40,  107,  107,  107,  107,    0,    0,    0,
        0,    0,   67,    0,    0,    0,   47,    0,  100,    0,
        0,    0,    0,   71,    0,    0,    0,    0,    0,    0,
        0,  104,   65,   66,    0,    0,    0,    0,    0,    0,
       50,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   37,   38,  107,  107,  107,  107,    0,    0,    0,
        0,   67,    0,    0,    0,  100,    0,    0,    0,   82,

        0,   51,    0,    0,   84,    0,    0,    0,    0,   48,
        0,    0,    0,    0,   72,    0,    0,    0,   52,    0,
        0,   79,   50,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  107,  107,
      107,  107,  107,  107,  107,  107,    0,    0,    0,   49,
        0,    0,    0,   74,    0,    0,    0,   53,    0,    0,
        0,   82,   51,    0,   84,    0,    0,    0,   48,    0,
        0,  106,   72,   73,    0,    0,   52,    0,    0,    0,
       89,    0,    0,    0,    0,   31,   32,    0,    0,    0,
        0,    0,    0,    0,    0,  107,  107,  107,  107,  107,

      107,  107,  107,    0,    0,   49,    0,    0,   74,    0,
        0,   53,    0,    0,    0,   80,    0,    0,    0,   85,
        0,    0,   93,    0,    0,    0,    0,    0,    0,    0,
        0,   29,   30,    0,    0,    0,    0,    0,    0,    0,
        0,  107,  107,  107,  107,  107,  107,  107,  107,    0,
        0,    0,    0,    0,    0,    0,    0,   80,    0,    0,
       90,   97,    0,    0,    0,    0,    0,    0,   56,    0,
        0,    0,    0,    0,    0,    0,   18,    0,    0,   17,
        0,    0,    0,    0,    0,   16,    0,    0,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,    0,

        0,   86,    0,    0,    0,   94,    0,    0,    0,   58,
        0,   90,    0,    0,   77,    0,    0,   59,  101,   56,
       57,    0,    0,    0,    0,   43,   44,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  107,  107,  107,
      107,  107,  107,  107,    0,   98,   86,    0,    0,   94,
        0,    0,   61,   58,    0,   75,    0,    0,   62,  102,
       59,   60,    0,    0,    0,   41,   42,   18,    0,   17,
        0,    0,    0,    0,    0,    0,    8,   16,    0,    0,
      107,  107,  107,  107,  107,  107,  107,  107,  107,   98,
        0,    0,   64,    0,   78,   61,    0,  103,   62,   63,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      107,  107,  107,  107,  107,  107,  107,  107,    0,   76,
       64,   78,    0,    0,    0,    0,    0,    0,    0,    0,
        8,    0,    0,  107,  107,  107,  107,  107,  107,  107,
      107,   76,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  107,  107,  107,  107,  107,  107,  107,  107,
        0,   68,    0,    0,    0,    0,    0,    0,    9,    0,
       10,    0,  107,  107,  107,  107,  107,  107,  107,  107,
        0,    0,    0,   11,    0,    0,    0,    0,    0,    0,
       20,  107,  107,  107,  107,  107,  107,    0,   69,    0,

       12,    0,    0,    0,    0,    9,   10,    0,  107,  107,
      107,  107,   69,    0,   11,    0,    0,    0,   20,  107,
      107,  107,   12,    0,    0,    0,  107,  107,  107,    0,
        0,    0,  107,  107,  107,    0,    0,    0,  107,  107,
      107,    0,    0,    0,  107,  107,  107,    0,    0,    0,
      107,  107,  107,    0,    0,    0,  107,  107,  107,    0,
        0,    0,  107,  107,  107,    0,    0,    0,   13,  107,
      107,  107,    0,    0,   14,    0,  107,  107,    0,   15,
        0,   13,  107,    0,   14,   15,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    8,    1,    1,    9,    1,
        1,    8,   10,    1,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    8,    1,   15,
       16,   17,   18,    8,    8,    8,   19,   20,   21,   22,
        8,    8,   23,    8,    8,    8,    8,   24,   25,    8,
        8,   26,   27,   28,   29,   30,    8,    8,    8,    8,
        1,    1,    1,    1,    8,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   40,    8,   41,   42,   43,
       44,   45,    8,   46,   47,   48,   49,   50,    8,   51,
       52,   53,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    2,    2,    2,    2,    1,    3,    2,    4,    1,
        2,    2,    2,    2,    2,    1,    5,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[999] =
    {   0,
        0,   23, 2569, 2568, 2577, 2576, 2573, 2572,    0,    0,
        0,    0,   39,   40,   41,   42, 2580, 2587,   59,  108,
     2572,   64, 2569,    8,  157, 2560,   53,  187,   81,  113,
        0, 2587,    0,    0, 2587, 2587, 2565, 2587, 2587, 2558,
        0,   66,  131, 2557,  236,  259,   92, 2549, 2541, 2536,
     2536,   38,   75, 2526, 2537,  308,  171,    0,  192,  199,
      243,  251,  274,  357,  101,  134,   69, 2587,  277,  134,
        0,  197, 2587,  312,  324, 2556,  374, 2587, 2522, 2516,
     2529, 2520, 2518, 2526,   56,  217, 2521, 2528,  330,  118,
        0,    0,    0, 2541, 2587,  361,   38, 2514, 2512, 2520,

      301, 2515, 2531, 2504, 2504, 2499, 2507, 2506, 2501, 2501,
     2506, 2503,  115,  168,  239,  149,  194,  331,  218,  299,
      253, 2529,  283, 2531, 2497, 2491, 2504, 2495, 2493, 2501,
      292,  341, 2496, 2503, 2490, 2501, 2488, 2483, 2497, 2481,
     2487, 2478, 2479, 2486, 2477, 2481, 2490, 2473, 2477,   97,
      346, 2587,  395, 2471, 2485, 2469, 2469, 2472,  399, 2478,
     2479,  423, 2476, 2478, 2472, 2473, 2459, 2457,  356,  361,
      427,  384,  403,  246,  405,  389,  202, 2587, 2462, 2473,
     2460, 2455, 2469, 2453, 2459, 2450, 2451, 2458, 2449, 2453,
     2462, 2445, 2449,   98, 2443, 2448, 2453, 2439,  442, 2439,

     2450, 2445, 2442, 2447, 2431, 2431, 2431, 2430,  146, 2428,
     2437, 2427,  446, 2427, 2423,  174, 2435, 2425,  468,  459,
      475, 2435, 2434,  483,  490, 2433,  452,  411,  500,  505,
      465,  480,  521,  530,  507,  555, 2426, 2431, 2417,  560,
     2417,  564, 2424, 2421, 2426, 2410, 2410, 2410, 2409,  183,
     2407,  571, 2407, 2424, 2407, 2421,  587,  515, 2431, 2419,
     2416, 2406,  591, 2401, 2407, 2397, 2395, 2408,  609, 2399,
     2406, 2409, 2408, 2418, 2406, 2397, 2587, 2391, 2395, 2429,
      582,  613,  538, 2386, 2383,  621,  598,  628,  633,  643,
      590,  612,  650,  481,  549,  660,  666,  670,  675,  685,

     2382, 2399, 2382, 2396,  691,  700, 2406, 2394,  708,  718,
     2391, 2381,  724, 2376, 2382, 2372, 2370, 2383,  728, 2374,
     2381,  732,  748, 2384, 2368, 2382, 2381, 2368,  752,  756,
     2373, 2361, 2369,  760, 2587, 2587, 2374, 2367, 2358, 2362,
      776, 2386, 2365, 2354, 2368, 2356,  780, 2361, 2364, 2350,
     2350,  737,  788, 2390, 2386, 2383, 2366, 2365, 2385, 2381,
     2378, 2382, 2378, 2375,  796,  765,  756,  669,  392,  778,
      812,  816, 2337, 2351, 2350, 2337,  820,  827, 2342,  831,
     2330, 2338,  835,  843,  851, 2343, 2335, 2321, 2318,  855,
      860, 2322, 2274,  871, 2288, 2288, 2277, 2276, 2283,  875,

     2298,  879, 2279, 2274, 2259, 2276, 2266, 2587,  893, 2587,
     2286, 2587, 2267, 2274,  897, 2271, 2270, 2251, 2254,  884,
     2587, 2587, 2265, 2268,  902, 2587, 2587,  910, 2587, 2587,
     2294, 2290, 2287,  755,  636,  777,  675, 2264, 2253, 2252,
     2259,  918,  922, 2256, 2249, 2234,  926,  934,  938, 2250,
     2229,  942,  950,  958, 2248,  966, 2228, 2225, 2209,  970,
     2221, 2587,  974, 2587,  986, 2190, 2203,  990, 2190, 1006,
     1013, 2180, 2181, 2170, 1022, 1026, 1030, 2158, 1017, 2145,
     1049, 2587, 2587, 1057,  757, 1038,  917, 2145, 2127, 1072,
     2129, 1076, 1080, 2111, 2117, 1088, 1098, 2076, 1106, 1114,

     1126, 1130, 2061, 1134, 1142, 2068, 2035, 2024, 1150, 1154,
     1998, 2013, 1158, 1989, 1174, 1970, 1950, 1178, 1182, 1962,
     1957, 2587, 1188, 1946, 1921, 1936, 1194, 1920, 1917, 1198,
     1163, 1894, 1878,  227, 1853, 1836, 1817, 1812, 1202,  859,
     1063,  818, 1177,  973,  425,  949, 1776, 1783, 1220, 1225,
     1769, 1764, 1236, 1240, 1744, 1708, 1244, 1252, 1720, 1706,
     1260, 1264, 1268, 1695, 1276, 1676, 1644, 1644, 1280, 1659,
     1622, 2587, 1284, 2587, 1605, 1612, 1288, 1606, 1624, 1594,
     2587, 1592, 1580, 1571, 1589, 1582, 1551, 1515, 1513, 1511,
     1497, 1487, 1485, 1480, 1491, 1055, 1263, 1065, 1182,  578,

      971, 1018,  522, 1456, 1453, 1293, 1468, 1461, 1297, 1444,
     1439, 1305, 1421, 1434, 1311, 1315, 1407, 1319, 1384, 2587,
     1382, 1355, 2587, 1352, 1353, 1327, 1320, 1323, 1329, 1343,
     1332, 2587, 2587, 1347, 1351, 1366, 1327, 1308, 1307, 1370,
     1290, 1374, 1422, 1470,  951,  667, 1201, 1518,  885, 1280,
     1389, 1278, 1269, 1411, 1261, 1269, 1415, 1431, 1257, 1437,
     1441, 2587, 1226, 1225, 1216, 1445, 1463, 1235, 1479, 1177,
     1181, 1485, 1493, 1509, 1378, 1513,  341, 1167, 1528,  381,
     1177, 1142, 1126, 1126, 1534,  655, 1138, 1125, 1538, 1543,
      901, 1559, 1093, 1163, 1022, 1227, 1568,  717, 1294, 1574,

     1578, 1504, 1101, 1114, 1598, 1602, 1105, 1607, 1616, 1623,
     1099, 1627, 1093, 1632, 2587, 1637, 1108, 1653, 2587, 1657,
     2587, 1090, 1661, 1667, 1116, 1065, 1039, 1037,  975, 1002,
      957, 1370,  962, 1671,  992,  953,  931, 1353, 1186, 1658,
     1372, 1677, 1428,  745, 1692, 1696, 1700,  918, 1708, 1712,
     1716, 1725, 1732, 1736,  933, 2587, 1741,  941, 1745, 2587,
     1759, 2587,  908, 1763, 1750, 2587, 2587, 1035,  887, 1356,
      867,  841,  839,  839,  798, 1767, 1405, 1550,  800,  776,
      820, 1373, 1742, 1565, 1064, 1743, 1773, 1753, 1421, 1793,
     1803, 1807, 1811, 1823, 1827, 1831,  762, 2587, 1839, 2587,

      736,  732,  697,  700,  698,  671,  640,  652,  615,  626,
     1454, 1636, 1750, 1806, 1567, 1807, 1814, 1406, 1849, 1855,
     1865, 1869,  602,  584,  577,  571,  535,  543,  512,  503,
     1563,  501,  510, 1833, 1830, 1675, 1846, 1751, 1754, 1831,
     1430, 1881,  495,  485,  474,  466,  450,  464,  459, 1885,
     1889,  431, 1865, 1868, 1871, 1790, 1867, 1905, 1921, 1880,
      438, 2587,  428, 1930,  421,  407,  421, 1937, 1583, 1945,
     1641, 1953, 1881, 1960, 1928, 1896, 1935, 1976, 1983, 1992,
     1998, 2008, 2014, 1901,  381,  356,  349,  375,  374, 2024,
     1970, 2031, 2040, 1869, 2000, 2017, 2048, 2065, 2070, 2082,

     2052,  367,  330,  304,  317, 2058, 2088,  346, 2097, 2057,
     1940, 2046, 2105,  301, 2109,  257,  238,  218, 2113, 2074,
     2089, 2095, 2127,  194,  206,  195, 1973, 2096, 2100,  193,
      167,  143, 2108, 2102, 2045,  154,  140,  130, 2105, 2094,
     1989,  129,  105,   88, 2111, 2034, 2121,   67,   73,   57,
     2116, 2122, 2119,   58,   43,   43, 2125, 2124, 2128,    6,
        6, 2176, 2138, 2151, 2186,    0, 2191, 2206, 2201, 2152,
     2210, 2216, 2226, 2234, 2222,   17, 2241, 2250, 2258, 2246,
       15, 2265, 2273,    4, 2277, 2281, 2587, 2322, 2327, 2332,
     2337, 2342, 2347, 2352, 2356, 2361, 2365, 2370

    } ;

static yyconst flex_int16_t yy_def[999] =
    {   0,
      988,  988,  989,  989,  990,  990,  991,  991,  992,  992,
      992,  992,  993,  993,  994,  994,  987,  987,  987,  995,
      987,  995,  987,  987,  995,  987,   25,  987,  987,  995,
      996,  987,  997,  998,  987,  987,  987,  987,  987,  987,
       19,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  995,  995,   25,   25,  995,
      995,  995,  995,  995,   64,   64,   64,  987,  987,   25,
       25,   64,  987,  987,   64,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,   64,
      996,  997,  998,  987,  987,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  987,   25,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
       25,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
       64,   64,   64,   64,   64,   64,   64,   64,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,   64,   64,   64,   64,
       64,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,   64,   64,   64,   64,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,   64,   64,   64,   64,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,   64,   64,
       64,   64,   64,   64,   64,   64,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,   64,   64,   64,   64,   64,

       64,   64,   64,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,   64,   64,   64,   64,   64,   64,   64,   64,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,   64,   64,   64,
       64,   64,   64,   64,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
       64,   64,   64,   64,   64,   64,   64,   64,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,   64,   64,   64,   64,   64,   64,   64,
       64,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,   64,   64,   64,   64,   64,   64,   64,   64,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,   64,   64,   64,   64,   64,   64,   64,   64,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,   64,   64,   64,   64,   64,   64,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,   64,   64,
       64,   64,  987,  987,  987,  987,  987,  987,  987,   64,
       64,   64,  987,  987,  987,  987,   64,   64,   64,  987,
      987,  987,   64,   64,   64,  987,  987,  987,   64,   64,
       64,  987,  987,  987,   64,   64,   64,  987,  987,  987,
       64,   64,   64,  987,  987,  987,   64,   64,   64,  987,
      987,  987,   64,   64,   64,  987,  987,  987,  987,   64,
       64,   64,  987,  987,  987,  987,   64,   64,  987,  987,
      987,  987,   64,  987,  987,  987,    0,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987

    } ;

static yyconst flex_int16_t yy_nxt[2641] =
    {   0,
       18,   19,   20,   19,   20,   18,   21,  986,   23,   18,
       24,   25,   26,   27,   28,   18,   29,   18,  985,   43,
      982,   45,   30,   18,   19,   20,   19,   20,   18,   21,
       48,   23,   18,   24,   25,   26,   27,   28,   18,   29,
       18,   36,   36,   39,   39,   30,  973,  122,  122,   37,
       37,  153,  967,  966,   74,   75,   74,   75,   40,   40,
       41,   41,   41,   41,   58,  987,   59,  987,  107,   42,
       43,   44,   45,   46,  987,   47,  987,   43,  987,   45,
      987,   48,   89,   89,   89,   89,  108,  141,   48,  962,
      961,   49,   50,   89,   89,   89,   89,   51,  960,  121,

      142,   52,  143,  144,  956,  109,   53,   54,   55,   41,
       56,   41,   56,  955,  987,  954,  987,   57,   42,   58,
       44,   59,   46,  987,   47,  987,  110,  987,  950,  987,
       60,  118,   69,   69,   69,   69,   90,  210,  251,  151,
       61,   62,  211,  252,   96,   57,   63,   57,   57,   57,
       64,   97,  119,  949,   57,   65,   66,   67,   69,   70,
       69,   70,  169,   57,   57,   97,   57,  987,   57,  987,
       71,  987,  987,  987,  987,  948,  120,   72,  944,   57,
      269,  987,   57,  987,  270,  987,  943,  987,  942,  938,
      172,   72,   76,   74,   75,   74,   75,   57,   57,   77,

      987,  937,  987,   58,   78,   59,  122,  122,  277,  987,
      123,  987,  270,  987,  170,  987,   57,  319,  936,   79,
       80,  320,   90,   81,   57,   82,   83,   57,   84,  932,
       85,  931,   57,   86,   87,  173,   88,   74,   74,   74,
       74,  930,   57,  926,  987,   57,  987,   43,   57,   45,
      235,  145,  987,  987,  987,  987,   97,  987,  590,  987,
      146,  987,  175,  987,  147,  987,   57,  987,  148,   57,
       97,   77,  925,  113,  591,  987,   57,  987,   69,   69,
       69,   69,  232,   57,  987,  114,  987,   57,  987,  171,
      987,   79,   80,  177,   57,   81,  123,   98,   99,  924,

      100,   57,   85,   57,  923,  101,  102,  115,   88,   41,
       56,   41,   56,   74,   74,   74,   74,   57,   42,   58,
       44,   59,   46,  185,   47,   74,   75,   74,   75,   57,
       60,   89,   89,   89,   89,  157,  186,  176,  187,  188,
       61,   62,  728,  728,  146,  728,   63,   57,  147,  919,
       64,  918,  148,  917,   57,   65,   66,   67,  987,   57,
      987,   57,   69,   69,   69,   69,   57,  987,  916,  987,
      915,  987,   57,  987,   96,  189,  174,  907,  906,   57,
       57,   97,  730,  730,  190,  730,   57,  116,  191,  905,
      227,   57,  192,  228,  904,   97,   69,   69,   69,   69,

       69,   69,   69,   69,   57,  117,  125,  126,  153,   57,
      127,  903,  128,  129,   57,  130,  436,  131,  230,   57,
      132,  133,   57,  134,  219,  219,  219,  219,  219,  229,
      219,  229,   57,   57,  231,   57,  234,   57,  220,  233,
       57,   57,  220,  257,  257,  257,  257,  257,  257,  257,
      257,   57,  887,   57,  886,  602,  292,   57,  258,   57,
      280,  280,  258,  280,  259,  281,  885,  281,  274,  219,
      219,  219,  219,   57,  882,   57,  282,  282,  282,  282,
      881,  872,   57,  220,  286,  286,  286,  286,  291,  867,
      283,  288,  288,  288,  288,   57,  866,  865,  287,  294,

       57,  219,  229,  219,  229,  289,  282,  293,  282,  293,
       57,   57,  864,   57,  295,  220,  329,  329,  329,  329,
      283,  863,  286,  296,  286,  296,  369,  862,   57,   57,
       57,  288,  297,  288,  297,   57,  287,   57,  861,  354,
      354,  298,  354,  852,  355,  289,  356,  851,   57,  850,
      849,   57,   57,   57,  649,   57,  299,  299,  299,  299,
       57,  305,  305,  305,  305,  309,  309,  309,  309,   57,
       57,  300,  322,  322,  322,  322,  306,  848,   57,   57,
      310,  847,  307,  353,  353,  353,  353,  323,  257,  257,
      257,  257,  334,  334,  334,  334,  370,   57,  311,  359,

      359,  301,  359,  258,  360,  846,  361,  335,   57,  324,
      341,  341,  341,  341,  282,  282,  282,  282,  646,  845,
       57,  342,  286,  286,  286,  286,   57,  844,  283,  288,
      288,  288,  288,  367,  362,  362,  287,  362,   57,  363,
      843,  364,   57,  289,  365,  365,  365,  365,  833,  832,
      368,  282,  293,  282,  293,  831,  735,  735,  366,  735,
       57,  286,  296,  286,  296,  283,   57,  288,  297,  288,
      297,  365,  371,  365,  371,  287,  299,  299,  299,  299,
       57,  289,  830,  485,   57,  366,  372,  372,  372,  372,
       57,  300,  305,  305,  305,  305,   57,   57,   57,   57,

       57,  377,  377,  377,  377,   57,  487,  306,   57,  309,
      309,  309,  309,  435,   57,  695,  829,   57,   57,  380,
      380,  380,  380,   57,  310,  383,  383,  383,  383,  390,
      390,  390,  390,  322,  322,  322,  322,  828,  280,  280,
      384,  280,  827,  281,  391,  281,  826,  743,  323,  394,
      394,  394,  394,  329,  329,  329,  329,  400,  400,  400,
      400,  334,  334,  334,  334,   57,  431,  431,  401,  431,
      825,  432,  402,  433,  824,   57,  335,  341,  341,  341,
      341,  415,  415,  415,  415,   57,   57,   57,  342,  353,
      353,  353,  353,   57,  789,  540,  402,  365,  365,  365,

      365,  434,  437,   57,   57,   57,  484,   57,   57,  823,
      810,  366,  486,  365,  371,  365,  371,  372,  372,  372,
      372,  377,  377,  377,  377,   57,   57,  366,  442,  442,
      442,  442,  380,  380,  380,  380,  383,  383,  383,  383,
      809,  807,   57,  443,  447,  447,  447,  447,   57,  598,
      811,  384,  448,  448,  448,  448,  390,  390,  390,  390,
       57,  454,  454,  454,  454,  599,   57,  449,   57,  806,
      805,  391,  394,  394,  394,  394,  400,  400,  400,  400,
      463,  463,  463,  463,  804,  354,  354,  401,  354,   57,
      355,  402,  356,  464,  470,  470,  470,  470,  415,  415,

      415,  415,  596,  359,  359,  803,  359,   57,  360,  471,
      361,  362,  362,  402,  362,   57,  363,  802,  364,  442,
      442,  442,  442,  492,  492,  492,  492,  447,  447,  447,
      447,   57,  699,   57,  443,  448,  448,  448,  448,  496,
      496,  496,  496,  499,  499,  499,  499,   57,  738,   57,
      449,  501,  501,  501,  501,  801,  546,  798,  500,  454,
      454,  454,  454,  797,  791,   57,  502,  504,  504,  504,
      504,  509,  509,  509,  509,  463,  463,  463,  463,   57,
      780,   57,  505,  603,  779,  694,  510,  513,  513,  513,
      513,  518,  518,  518,  518,  778,  511,   57,  514,   57,

      775,   57,  515,   57,  771,  770,  519,  470,  470,  470,
      470,  601,  647,  520,  523,  523,  523,  523,  521,   57,
      769,   57,  471,  527,  527,  527,  527,  518,  518,  518,
      518,  530,  530,  530,  530,  533,  728,  728,  515,  728,
      768,  534,  519,  535,  536,  531,  537,  767,   57,  528,
      431,  431,   57,  431,  529,  432,  541,  433,  530,  539,
      530,  539,  542,  648,  543,  544,   57,  545,   57,  741,
       57,  766,  531,  549,  549,  549,  549,  492,  492,  492,
      492,  553,  553,  553,  553,   57,   57,   57,  550,  496,
      496,  496,  496,   57,  815,   57,  554,  642,  551,  557,

      557,  557,  557,   57,  644,   57,  597,  499,  499,  499,
      499,   57,   57,   57,  558,  562,  562,  562,  562,  765,
      763,  559,  500,   57,  760,  739,  560,  501,  501,  501,
      501,  563,  563,  563,  563,  504,  504,  504,  504,  756,
      755,   57,  502,  565,  565,  565,  565,  751,  749,  748,
      505,  509,  509,  509,  509,  569,  569,  569,  569,  513,
      513,  513,  513,  737,  585,  585,  510,  585,  736,  586,
      514,  587,  734,  733,  515,  573,  573,  573,  573,  518,
      518,  518,  518,  577,  577,  577,  577,  732,  574,  523,
      523,  523,  523,   57,  519,  527,  527,  527,  527,  530,

      530,  530,  530,  530,  539,  530,  539,   57,  740,  731,
      515,   57,   57,  531,  729,  723,   57,  531,  722,  645,
      600,  549,  549,  549,  549,   57,  606,  606,  606,  606,
       57,   57,   57,  782,   57,  696,  550,  553,  553,  553,
      553,  609,  609,  609,  609,  557,  557,  557,  557,   57,
       57,  719,  554,  612,  612,  612,  612,   57,  715,  714,
      558,  615,  615,  615,  615,  562,  562,  562,  562,  563,
      563,  563,  563,  742,  713,   57,  616,  565,  565,  565,
      565,  569,  569,  569,  569,  573,  573,  573,  573,  577,
      577,  577,  577,   57,  606,  606,  606,  606,  609,  609,

      609,  609,  711,  708,  707,  643,  612,  612,  612,  612,
      704,   57,  615,  615,  615,  615,  658,  658,  658,  658,
      660,  660,  660,  660,   57,  703,  700,  616,  667,  667,
      667,  667,  744,  585,  585,  661,  585,  688,  586,  668,
      587,  684,   57,  669,  673,  673,  673,  673,  674,  674,
      674,  674,  676,  676,  676,  676,  683,  730,  730,  669,
      730,  682,  675,  672,  671,  670,  677,  679,  679,  679,
      679,  685,  685,  685,  685,  674,  689,  674,  689,  725,
      725,  680,  725,   57,  726,  686,  727,  666,  772,  675,
      701,  701,  701,  701,  773,  665,  664,  678,  781,  774,

      681,   57,   57,   57,   57,  702,  808,  808,  687,  808,
      786,  812,  705,  705,  705,  705,  709,  709,  709,  709,
       57,   57,   57,  676,  690,  676,  690,  706,  841,  663,
      662,  710,  658,  658,  658,  658,   57,  677,  660,  660,
      660,  660,  712,  712,  712,  712,  716,  716,  716,  716,
      659,   57,   57,  661,   57,  818,  657,  717,   57,  788,
       57,  718,  656,  860,  667,  667,  667,  667,  691,   57,
       57,  679,  692,  679,  692,  668,   57,  655,   57,  669,
      720,  720,  720,  720,   57,  680,  724,  724,  724,  724,
      654,  653,  834,  721,  673,  673,  673,  673,  652,  651,

       57,  718,   57,  650,  693,  747,  747,  747,  747,  669,
      674,  674,  674,  674,  676,  676,  676,  676,   57,  685,
      697,  685,  697,  641,  675,  640,  639,  638,  677,  679,
      679,  679,  679,  686,  637,  685,  685,  685,  685,  674,
      689,  674,  689,  680,  676,  690,  676,  690,   57,  686,
      636,  735,  735,  675,  735,  635,  698,  634,  677,  633,
      679,  692,  679,  692,  808,  808,   57,  808,   57,  685,
      697,  685,  697,   57,  680,  745,  745,  745,  745,  701,
      701,  701,  701,  686,  888,  888,   57,  888,  632,   57,
      746,   57,  631,  630,  702,   57,  814,   57,   57,  705,

      705,  705,  705,  750,  750,  750,  750,   57,  752,  752,
      752,  752,  838,   57,  706,   57,   57,  709,  709,  709,
      709,  629,  628,  753,  754,  754,  754,  754,  712,  712,
      712,  712,  710,  757,  757,  757,  757,  627,  716,  716,
      716,  716,  889,  889,  758,  889,  626,  625,  759,  717,
      624,  623,  622,  718,  761,  761,  761,  761,  720,  720,
      720,  720,  764,  764,  764,  764,   57,  762,  724,  724,
      724,  724,  776,  776,  776,  776,  783,  759,  776,  787,
      776,  787,  784,  718,   57,  835,  777,  785,   57,  621,
      620,  619,  777,  745,  745,  745,  745,  790,  790,  790,

      790,  747,  747,  747,  747,   57,   57,   57,  746,  792,
      792,  792,  792,  750,  750,  750,  750,  794,  794,  794,
      794,  855,  618,   57,  793,   57,  752,  752,  752,  752,
      617,  614,  795,  796,  796,  796,  796,  754,  754,  754,
      754,  753,  757,  757,  757,  757,  799,  799,  799,  799,
      613,  725,  725,  758,  725,  611,  726,  759,  727,  800,
      761,  761,  761,  761,  764,  764,  764,  764,  776,  776,
      776,  776,   57,   57,  776,  787,  776,  787,  610,  759,
       57,   57,  777,   57,   57,  813,  816,  608,  777,  857,
       57,   57,  836,  817,  790,  790,  790,  790,   57,   57,

      858,   57,   57,   57,  819,  819,  819,  819,  792,  792,
      792,  792,  821,  821,  821,  821,  607,  605,  604,  820,
       57,   57,  876,  793,  794,  794,  794,  794,  822,  822,
      822,  822,  796,  796,  796,  796,   57,   57,   57,  795,
      799,  799,  799,  799,   57,  837,  595,  594,  840,  839,
      819,  819,  819,  819,   57,   57,  842,  842,  842,  842,
       57,   57,   57,   57,  854,  820,  821,  821,  821,  821,
      822,  822,  822,  822,  593,  853,   57,  859,   57,   57,
      856,   57,  842,  842,  842,  842,  868,  868,  868,  868,
      870,  870,  870,  870,   57,   57,  592,  877,   57,  910,

      869,   57,  902,  902,  871,  902,  868,  878,  868,  878,
       57,   57,  873,   57,  874,   57,   57,   57,  875,   57,
      869,  589,  870,  879,  870,  879,   57,  892,   57,   57,
      880,  883,  883,  883,  883,   57,  871,  588,  868,  868,
      868,  868,  584,  895,   57,  884,  870,  870,  870,  870,
      583,   57,  869,   57,  890,  890,  890,  890,   57,  582,
      871,  883,  893,  883,  893,   57,  896,  581,  891,   57,
       57,  908,  908,  894,  908,  884,   57,  868,  878,  868,
      878,  580,  579,   57,  870,  879,  870,  879,   57,  921,
       57,  869,  578,  890,  897,  890,  897,  576,  871,  898,

      898,  898,  898,   57,  575,  572,   57,  891,   57,  900,
      900,  900,  900,   57,  899,  883,  883,  883,  883,   57,
      933,   57,   57,  901,   57,  890,  890,  890,  890,  884,
       57,   57,  900,  909,  900,  909,  571,  947,  911,  891,
       57,  883,  893,  883,  893,  570,  901,   57,   57,  890,
      897,  890,  897,  914,  914,  884,  914,  912,  568,  888,
      888,   57,  888,  891,   57,   57,  898,  898,  898,  898,
       57,  913,  913,  913,  913,   57,   57,  567,   57,   57,
      922,  899,  952,  900,  900,  900,  900,   57,   57,  889,
      889,  941,  889,   57,   57,  920,   57,  901,  900,  909,

      900,  909,  566,  564,   57,   57,  913,  913,  913,  913,
      902,  902,  901,  902,  908,  908,  927,  908,  561,   57,
      929,  934,   57,  928,   57,   57,   57,   57,  914,  914,
       57,  914,   57,  939,  935,   57,  940,   57,   57,  945,
      946,   57,   57,   57,   57,   57,   57,  556,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  951,   57,   57,
      555,  953,  958,  552,  957,  963,  959,   57,   57,   57,
       57,  964,   57,   57,  965,  548,   57,  968,  968,  968,
      968,   57,   57,  547,  538,  970,   57,  968,  972,  968,
      972,  969,  974,  974,  974,  974,  532,  971,  977,   57,

       57,  969,  976,  976,  526,  976,  975,  968,  968,  968,
      968,  974,  978,  974,  978,  525,   57,  968,  972,  968,
      972,  969,  524,  981,  981,  975,  981,  979,  979,  979,
      979,  969,  522,  517,   57,  974,  974,  974,  974,  516,
       57,  980,  979,  983,  979,  983,   57,  984,  984,  975,
      984,  974,  978,  974,  978,  512,  980,  508,   57,  979,
      979,  979,  979,  507,   57,  975,  976,  976,  506,  976,
      503,   57,  498,  980,  979,  983,  979,  983,  981,  981,
       57,  981,  984,  984,  497,  984,  495,  494,  980,   57,
      493,  491,  490,  489,  488,  483,  482,  481,   57,  480,

      479,  478,  477,   57,  476,  475,  474,  473,  472,  469,
      468,  467,  466,  465,  462,  461,  460,  459,  458,  457,
      456,   57,   22,   22,   22,   22,   22,   31,   31,   31,
       31,   31,   33,   33,   33,   33,   33,   34,   34,   34,
       34,   34,   32,   32,   32,   32,   32,   35,   35,   35,
       35,   35,   38,   38,   38,   38,   38,   57,  455,  453,
       57,   91,   91,   91,   91,   92,   92,  452,   92,   92,
       93,   93,   93,  451,   93,  450,  446,  445,  444,  441,
      440,  439,  438,  430,  429,  428,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  416,  414,  413,

      412,  411,  410,  409,  408,  407,  406,  405,  404,  403,
      399,  398,  397,  396,  395,  393,  392,  389,  388,  387,
      386,  385,  382,  381,  379,  378,  376,  375,  374,  373,
      358,  357,  352,  351,  350,  349,  348,  347,  346,  345,
      344,  343,  340,  339,  338,  337,  336,  333,  332,  331,
      330,  328,  327,  326,  325,  321,  318,  317,  316,  315,
      314,  313,  312,  308,  304,  303,  302,  290,  285,  284,
      279,  278,  276,  275,  273,  272,  271,  268,  267,  266,
      265,  264,  263,  262,  261,  260,  256,  255,  254,  253,
      250,  249,  248,  247,  246,  245,  244,  243,  242,  241,

      240,  239,  238,  237,  236,  226,  225,  224,  223,  222,
      221,  218,  217,  216,  215,  214,  213,  212,  209,  208,
      207,  206,  205,  204,  203,  202,  201,  200,  199,  198,
      197,  196,  195,  194,  193,  184,  183,  182,  181,  180,
      179,  178,  153,  168,  167,  166,  165,  164,  163,  162,
      161,  160,  159,  158,  156,  155,  154,  152,  150,  149,
      140,  139,  138,  137,  136,  135,  124,  112,  111,  106,
      105,  104,  103,   73,   95,   94,   73,   68,   68,  987,
       32,   32,   32,   32,   32,   32,   17,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987
    } ;

static yyconst flex_int16_t yy_chk[2641] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,  984,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,  981,   24,
      976,   24,    1,    2,    2,    2,    2,    2,    2,    2,
       24,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   13,   14,   15,   16,    2,  966,   97,   97,   13,
       14,   97,  961,  960,   27,   27,   27,   27,   15,   16,
       19,   19,   19,   19,   27,   22,   27,   22,   52,   19,
       19,   19,   19,   19,   22,   19,   22,   42,   22,   42,
       22,   19,   29,   29,   29,   29,   52,   85,   42,  956,
      955,   19,   19,   47,   47,   47,   47,   19,  954,   67,

       85,   19,   85,   85,  950,   53,   19,   19,   19,   20,
       20,   20,   20,  949,   30,  948,   30,   67,   20,   20,
       20,   20,   20,   30,   20,   30,   53,   30,  944,   30,
       20,   65,   43,   43,   43,   43,   30,  150,  194,   90,
       20,   20,  150,  194,   43,  113,   20,   70,   90,   65,
       20,   43,   65,  943,   70,   20,   20,   20,   25,   25,
       25,   25,  113,  113,   66,   43,   90,   25,   70,   25,
       25,   25,   57,   25,   57,  942,   66,   25,  938,  116,
      209,   57,   66,   57,  209,   57,  937,   57,  936,  932,
      116,   25,   28,   59,   59,   59,   59,  116,  114,   28,

       60,  931,   60,   59,   28,   59,   72,   72,  216,   60,
       72,   60,  216,   60,  114,   60,  114,  250,  930,   28,
       28,  250,   60,   28,  117,   28,   28,   72,   28,  926,
       28,  925,  177,   28,   28,  117,   28,   45,   45,   45,
       45,  924,  117,  918,   61,   72,   61,   45,  119,   45,
      177,   86,   62,   61,   62,   61,   45,   61,  534,   61,
       86,   62,  119,   62,   86,   62,  119,   62,   86,  115,
       45,   46,  917,   61,  534,   63,  174,   63,   69,   69,
       69,   69,  174,  121,   63,   62,   63,  115,   63,  115,
       63,   46,   46,  121,  174,   46,  123,   46,   46,  916,

       46,  121,   46,  123,  914,   46,   46,   63,   46,   56,
       56,   56,   56,   74,   74,   74,   74,  123,   56,   56,
       56,   56,   56,  131,   56,   75,   75,   75,   75,  120,
       56,   89,   89,   89,   89,  101,  131,  120,  131,  131,
       56,   56,  677,  677,  101,  677,   56,  120,  101,  908,
       56,  905,  101,  904,   75,   56,   56,   56,   64,  151,
       64,  118,   96,   96,   96,   96,  151,   64,  903,   64,
      902,   64,   75,   64,   96,  132,  118,  889,  888,  118,
      151,   96,  680,  680,  132,  680,  169,   64,  132,  887,
      169,  170,  132,  170,  886,   96,  153,  153,  153,  153,

      159,  159,  159,  159,  169,   64,   77,   77,  153,  170,
       77,  885,   77,   77,  172,   77,  369,   77,  172,  176,
       77,   77,  369,   77,  162,  162,  162,  162,  171,  171,
      171,  171,  172,  173,  173,  175,  176,  176,  162,  175,
      369,  228,  171,  199,  199,  199,  199,  213,  213,  213,
      213,  173,  867,  175,  866,  545,  228,  171,  199,  228,
      220,  220,  213,  220,  199,  220,  865,  220,  213,  219,
      219,  219,  219,  545,  863,  171,  221,  221,  221,  221,
      861,  852,  227,  219,  224,  224,  224,  224,  227,  849,
      221,  225,  225,  225,  225,  231,  848,  847,  224,  231,

      227,  229,  229,  229,  229,  225,  230,  230,  230,  230,
      232,  294,  846,  231,  232,  229,  258,  258,  258,  258,
      230,  845,  233,  233,  233,  233,  294,  844,  232,  294,
      229,  234,  234,  234,  234,  230,  233,  235,  843,  283,
      283,  235,  283,  833,  283,  234,  283,  832,  229,  830,
      829,  233,  603,  230,  603,  235,  236,  236,  236,  236,
      234,  240,  240,  240,  240,  242,  242,  242,  242,  233,
      603,  236,  252,  252,  252,  252,  240,  828,  234,  295,
      242,  827,  240,  281,  281,  281,  281,  252,  257,  257,
      257,  257,  263,  263,  263,  263,  295,  295,  242,  287,

      287,  236,  287,  257,  287,  826,  287,  263,  600,  252,
      269,  269,  269,  269,  282,  282,  282,  282,  600,  825,
      291,  269,  286,  286,  286,  286,  600,  824,  282,  288,
      288,  288,  288,  291,  289,  289,  286,  289,  291,  289,
      823,  289,  292,  288,  290,  290,  290,  290,  810,  809,
      292,  293,  293,  293,  293,  808,  686,  686,  290,  686,
      292,  296,  296,  296,  296,  293,  435,  297,  297,  297,
      297,  298,  298,  298,  298,  296,  299,  299,  299,  299,
      293,  297,  807,  435,  435,  298,  300,  300,  300,  300,
      296,  299,  305,  305,  305,  305,  297,  646,  293,  368,

      298,  306,  306,  306,  306,  437,  437,  305,  296,  309,
      309,  309,  309,  368,  297,  646,  806,  368,  298,  310,
      310,  310,  310,  437,  309,  313,  313,  313,  313,  319,
      319,  319,  319,  322,  322,  322,  322,  805,  352,  352,
      313,  352,  804,  352,  319,  352,  803,  698,  322,  323,
      323,  323,  323,  329,  329,  329,  329,  330,  330,  330,
      330,  334,  334,  334,  334,  698,  366,  366,  330,  366,
      802,  366,  330,  366,  801,  744,  334,  341,  341,  341,
      341,  347,  347,  347,  347,  434,  367,  485,  341,  353,
      353,  353,  353,  744,  744,  485,  347,  365,  365,  365,

      365,  367,  370,  434,  367,  485,  434,  436,  370,  797,
      780,  365,  436,  371,  371,  371,  371,  372,  372,  372,
      372,  377,  377,  377,  377,  436,  370,  371,  378,  378,
      378,  378,  380,  380,  380,  380,  383,  383,  383,  383,
      779,  775,  371,  378,  384,  384,  384,  384,  542,  542,
      781,  383,  385,  385,  385,  385,  390,  390,  390,  390,
      371,  391,  391,  391,  391,  542,  542,  385,  781,  774,
      773,  390,  394,  394,  394,  394,  400,  400,  400,  400,
      402,  402,  402,  402,  772,  420,  420,  400,  420,  540,
      420,  400,  420,  402,  409,  409,  409,  409,  415,  415,

      415,  415,  540,  425,  425,  771,  425,  540,  425,  409,
      425,  428,  428,  415,  428,  649,  428,  769,  428,  442,
      442,  442,  442,  443,  443,  443,  443,  447,  447,  447,
      447,  691,  649,  649,  442,  448,  448,  448,  448,  449,
      449,  449,  449,  452,  452,  452,  452,  487,  691,  691,
      448,  453,  453,  453,  453,  763,  487,  758,  452,  454,
      454,  454,  454,  755,  748,  487,  453,  456,  456,  456,
      456,  460,  460,  460,  460,  463,  463,  463,  463,  546,
      737,  645,  456,  546,  736,  645,  460,  465,  465,  465,
      465,  468,  468,  468,  468,  735,  460,  546,  465,  645,

      733,  601,  465,  544,  731,  730,  468,  470,  470,  470,
      470,  544,  601,  468,  471,  471,  471,  471,  468,  601,
      729,  544,  470,  475,  475,  475,  475,  476,  476,  476,
      476,  477,  477,  477,  477,  479,  768,  768,  475,  768,
      728,  479,  476,  479,  479,  477,  479,  727,  602,  476,
      481,  481,  695,  481,  476,  481,  486,  481,  484,  484,
      484,  484,  486,  602,  486,  486,  602,  486,  486,  695,
      695,  726,  484,  490,  490,  490,  490,  492,  492,  492,
      492,  493,  493,  493,  493,  596,  486,  484,  490,  496,
      496,  496,  496,  541,  785,  598,  493,  596,  490,  497,

      497,  497,  497,  596,  598,  484,  541,  499,  499,  499,
      499,  541,  785,  598,  497,  500,  500,  500,  500,  725,
      722,  497,  499,  693,  717,  693,  497,  501,  501,  501,
      501,  502,  502,  502,  502,  504,  504,  504,  504,  713,
      711,  693,  501,  505,  505,  505,  505,  707,  704,  703,
      504,  509,  509,  509,  509,  510,  510,  510,  510,  513,
      513,  513,  513,  688,  531,  531,  509,  531,  687,  531,
      513,  531,  684,  683,  513,  515,  515,  515,  515,  518,
      518,  518,  518,  519,  519,  519,  519,  682,  515,  523,
      523,  523,  523,  694,  518,  527,  527,  527,  527,  530,

      530,  530,  530,  539,  539,  539,  539,  543,  694,  681,
      527,  694,  599,  530,  678,  671,  739,  539,  670,  599,
      543,  549,  549,  549,  549,  543,  550,  550,  550,  550,
      599,  647,  539,  739,  739,  647,  549,  553,  553,  553,
      553,  554,  554,  554,  554,  557,  557,  557,  557,  647,
      539,  668,  553,  558,  558,  558,  558,  696,  665,  664,
      557,  561,  561,  561,  561,  562,  562,  562,  562,  563,
      563,  563,  563,  696,  663,  696,  561,  565,  565,  565,
      565,  569,  569,  569,  569,  573,  573,  573,  573,  577,
      577,  577,  577,  597,  606,  606,  606,  606,  609,  609,

      609,  609,  659,  656,  655,  597,  612,  612,  612,  612,
      653,  597,  615,  615,  615,  615,  616,  616,  616,  616,
      618,  618,  618,  618,  699,  652,  650,  615,  626,  626,
      626,  626,  699,  631,  631,  618,  631,  641,  631,  626,
      631,  639,  699,  626,  630,  630,  630,  630,  634,  634,
      634,  634,  635,  635,  635,  635,  638,  770,  770,  630,
      770,  637,  634,  629,  628,  627,  635,  636,  636,  636,
      636,  640,  640,  640,  640,  642,  642,  642,  642,  675,
      675,  636,  675,  738,  675,  640,  675,  625,  732,  642,
      651,  651,  651,  651,  732,  624,  622,  635,  738,  732,

      636,  738,  741,  782,  642,  651,  777,  777,  640,  777,
      741,  782,  654,  654,  654,  654,  657,  657,  657,  657,
      741,  782,  642,  643,  643,  643,  643,  654,  818,  621,
      619,  657,  658,  658,  658,  658,  818,  643,  660,  660,
      660,  660,  661,  661,  661,  661,  666,  666,  666,  666,
      617,  789,  643,  660,  818,  789,  614,  666,  743,  743,
      841,  666,  613,  841,  667,  667,  667,  667,  643,  789,
      643,  644,  644,  644,  644,  667,  743,  611,  841,  667,
      669,  669,  669,  669,  811,  644,  672,  672,  672,  672,
      610,  608,  811,  669,  673,  673,  673,  673,  607,  605,

      644,  672,  811,  604,  644,  702,  702,  702,  702,  673,
      674,  674,  674,  674,  676,  676,  676,  676,  644,  648,
      648,  648,  648,  595,  674,  594,  593,  592,  676,  679,
      679,  679,  679,  648,  591,  685,  685,  685,  685,  689,
      689,  689,  689,  679,  690,  690,  690,  690,  648,  685,
      590,  778,  778,  689,  778,  589,  648,  588,  690,  587,
      692,  692,  692,  692,  831,  831,  648,  831,  689,  697,
      697,  697,  697,  690,  692,  700,  700,  700,  700,  701,
      701,  701,  701,  697,  869,  869,  689,  869,  586,  692,
      700,  690,  585,  584,  701,  784,  784,  815,  697,  705,

      705,  705,  705,  706,  706,  706,  706,  692,  708,  708,
      708,  708,  815,  784,  705,  815,  697,  709,  709,  709,
      709,  583,  582,  708,  710,  710,  710,  710,  712,  712,
      712,  712,  709,  714,  714,  714,  714,  580,  716,  716,
      716,  716,  871,  871,  714,  871,  579,  578,  714,  716,
      576,  575,  571,  716,  718,  718,  718,  718,  720,  720,
      720,  720,  723,  723,  723,  723,  812,  718,  724,  724,
      724,  724,  734,  734,  734,  734,  740,  723,  742,  742,
      742,  742,  740,  724,  812,  812,  734,  740,  740,  570,
      568,  567,  742,  745,  745,  745,  745,  746,  746,  746,

      746,  747,  747,  747,  747,  836,  740,  742,  745,  749,
      749,  749,  749,  750,  750,  750,  750,  751,  751,  751,
      751,  836,  566,  836,  749,  742,  752,  752,  752,  752,
      564,  560,  751,  753,  753,  753,  753,  754,  754,  754,
      754,  752,  757,  757,  757,  757,  759,  759,  759,  759,
      559,  765,  765,  757,  765,  556,  765,  757,  765,  759,
      761,  761,  761,  761,  764,  764,  764,  764,  776,  776,
      776,  776,  783,  786,  787,  787,  787,  787,  555,  764,
      813,  838,  776,  788,  839,  783,  786,  552,  787,  838,
      783,  786,  813,  788,  790,  790,  790,  790,  813,  838,

      839,  788,  839,  787,  791,  791,  791,  791,  792,  792,
      792,  792,  793,  793,  793,  793,  551,  548,  547,  791,
      856,  787,  856,  792,  794,  794,  794,  794,  795,  795,
      795,  795,  796,  796,  796,  796,  814,  816,  856,  794,
      799,  799,  799,  799,  817,  814,  538,  537,  817,  816,
      819,  819,  819,  819,  814,  816,  820,  820,  820,  820,
      835,  840,  817,  834,  835,  819,  821,  821,  821,  821,
      822,  822,  822,  822,  536,  834,  837,  840,  835,  840,
      837,  834,  842,  842,  842,  842,  850,  850,  850,  850,
      851,  851,  851,  851,  837,  853,  535,  857,  854,  894,

      850,  855,  884,  884,  851,  884,  858,  858,  858,  858,
      860,  873,  853,  853,  854,  857,  854,  894,  855,  855,
      858,  533,  859,  859,  859,  859,  876,  873,  860,  873,
      860,  864,  864,  864,  864,  858,  859,  532,  868,  868,
      868,  868,  529,  876,  876,  864,  870,  870,  870,  870,
      528,  859,  868,  858,  872,  872,  872,  872,  875,  526,
      870,  874,  874,  874,  874,  877,  877,  525,  872,  859,
      911,  891,  891,  875,  891,  874,  875,  878,  878,  878,
      878,  524,  521,  877,  879,  879,  879,  879,  911,  911,
      874,  878,  520,  880,  880,  880,  880,  517,  879,  881,

      881,  881,  881,  927,  516,  514,  878,  880,  874,  882,
      882,  882,  882,  879,  881,  883,  883,  883,  883,  941,
      927,  927,  880,  882,  878,  890,  890,  890,  890,  883,
      895,  879,  892,  892,  892,  892,  512,  941,  895,  890,
      880,  893,  893,  893,  893,  511,  892,  896,  895,  897,
      897,  897,  897,  901,  901,  893,  901,  896,  508,  906,
      906,  892,  906,  897,  946,  896,  898,  898,  898,  898,
      893,  899,  899,  899,  899,  935,  912,  507,  897,  892,
      912,  898,  946,  900,  900,  900,  900,  910,  893,  907,
      907,  935,  907,  935,  912,  910,  897,  900,  909,  909,

      909,  909,  506,  503,  920,  910,  913,  913,  913,  913,
      915,  915,  909,  915,  919,  919,  920,  919,  498,  921,
      922,  928,  920,  921,  940,  922,  928,  909,  923,  923,
      929,  923,  934,  933,  929,  939,  934,  921,  933,  939,
      940,  945,  940,  922,  928,  909,  951,  495,  929,  953,
      934,  947,  952,  939,  958,  957,  933,  945,  959,  945,
      494,  947,  952,  491,  951,  957,  953,  953,  963,  947,
      952,  958,  958,  957,  959,  489,  959,  962,  962,  962,
      962,  964,  970,  488,  480,  963,  963,  965,  965,  965,
      965,  962,  967,  967,  967,  967,  478,  964,  970,  964,

      970,  965,  969,  969,  474,  969,  967,  968,  968,  968,
      968,  971,  971,  971,  971,  473,  965,  972,  972,  972,
      972,  968,  472,  975,  975,  971,  975,  973,  973,  973,
      973,  972,  469,  467,  965,  974,  974,  974,  974,  466,
      971,  973,  977,  977,  977,  977,  972,  980,  980,  974,
      980,  978,  978,  978,  978,  461,  977,  459,  971,  979,
      979,  979,  979,  458,  972,  978,  982,  982,  457,  982,
      455,  977,  451,  979,  983,  983,  983,  983,  985,  985,
      978,  985,  986,  986,  450,  986,  446,  445,  983,  977,
      444,  441,  440,  439,  438,  433,  432,  431,  978,  424,

      423,  419,  418,  983,  417,  416,  414,  413,  411,  407,
      406,  405,  404,  403,  401,  399,  398,  397,  396,  395,
      393,  983,  988,  988,  988,  988,  988,  989,  989,  989,
      989,  989,  990,  990,  990,  990,  990,  991,  991,  991,
      991,  991,  992,  992,  992,  992,  992,  993,  993,  993,
      993,  993,  994,  994,  994,  994,  994,  995,  392,  389,
      995,  996,  996,  996,  996,  997,  997,  388,  997,  997,
      998,  998,  998,  387,  998,  386,  382,  381,  379,  376,
      375,  374,  373,  364,  363,  362,  361,  360,  359,  358,
      357,  356,  355,  354,  351,  350,  349,  348,  346,  345,

      344,  343,  342,  340,  339,  338,  337,  333,  332,  331,
      328,  327,  326,  325,  324,  321,  320,  318,  317,  316,
      315,  314,  312,  311,  308,  307,  304,  303,  302,  301,
      285,  284,  280,  279,  278,  276,  275,  274,  273,  272,
      271,  270,  268,  267,  266,  265,  264,  262,  261,  260,
      259,  256,  255,  254,  253,  251,  249,  248,  247,  246,
      245,  244,  243,  241,  239,  238,  237,  226,  223,  222,
      218,  217,  215,  214,  212,  211,  210,  208,  207,  206,
      205,  204,  203,  202,  201,  200,  198,  197,  196,  195,
      193,  192,  191,  190,  189,  188,  187,  186,  185,  184,

      183,  182,  181,  180,  179,  168,  167,  166,  165,  164,
      163,  161,  160,  158,  157,  156,  155,  154,  149,  148,
      147,  146,  145,  144,  143,  142,  141,  140,  139,  138,
      137,  136,  135,  134,  133,  130,  129,  128,  127,  126,
      125,  124,  122,  112,  111,  110,  109,  108,  107,  106,
      105,  104,  103,  102,  100,   99,   98,   94,   88,   87,
       84,   83,   82,   81,   80,   79,   76,   55,   54,   51,
       50,   49,   48,   44,   40,   37,   26,   23,   21,   17,
        8,    7,    6,    5,    4,    3,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[121] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
/** @file parseosrl.l
 * 
 * @author  Robert Fourer,  Jun Ma, Kipp Martin, 
 * @version 2.0, 02/04/2009
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005-2009, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSrLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"


#define PARSERDEBUG
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;
     







#line 100 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 1459 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osrllex_init (yyscan_t* scanner);

int osrllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 110 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"



#line 1711 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 988 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2587 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 113 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 117 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 118 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 119 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 120 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 122 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 136 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 138 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 139 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 140 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 141 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 142 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 143 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 144 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 145 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 146 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 147 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 148 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 149 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 150 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 152 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 153 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 154 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 155 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 156 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 157 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 158 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 159 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 160 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 161 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 162 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 163 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 164 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 165 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 166 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 167 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 168 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 169 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 170 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 171 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 172 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 173 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 174 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 175 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 178 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 179 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 180 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 181 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 182 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 183 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 184 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 185 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 186 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 187 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 188 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBEND);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 190 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 191 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICEURISTART);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 192 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 193 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 194 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICENAMESTART);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 195 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 196 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 197 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(INSTANCENAMESTART);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 198 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 199 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 200 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(JOBIDSTART);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 201 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 203 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 204 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 206 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 207 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 209 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 210 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(MESSAGESTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 211 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 213 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 214 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 216 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 217 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 219 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 220 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 222 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 223 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 225 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 226 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 228 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 229 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 231 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 232 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 233 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 234 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 236 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 237 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 238 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 239 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 241 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 242 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 243 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 244 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 247 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 248 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 250 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTARTANDEND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 251 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTARTANDEND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 252 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTARTANDEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 253 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTARTANDEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 254 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTARTANDEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 255 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTARTANDEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 260 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext);   yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 262 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 109:
#line 264 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 264 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 265 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 267 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 113:
#line 269 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 269 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 270 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 273 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /* yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 274 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 275 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 278 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 290 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"
ECHO;
	YY_BREAK
#line 2538 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osrlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 988 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 988 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 987);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osrllex_init_extra has the same functionality as osrllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osrlalloc in
 * the yyextra field.
 */

int osrllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osrlset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osrlset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 290 "/home/kmartin/coin/os-trunk/OS/src/OSParsers/OSParseosrl.l"





