#define yy_create_buffer osil_create_buffer
#define yy_delete_buffer osil_delete_buffer
#define yy_scan_buffer osil_scan_buffer
#define yy_scan_string osil_scan_string
#define yy_scan_bytes osil_scan_bytes
#define yy_flex_debug osil_flex_debug
#define yy_init_buffer osil_init_buffer
#define yy_flush_buffer osil_flush_buffer
#define yy_load_buffer_state osil_load_buffer_state
#define yy_switch_to_buffer osil_switch_to_buffer
#define yyin osilin
#define yyleng osilleng
#define yylex osillex
#define yyout osilout
#define yyrestart osilrestart
#define yytext osiltext
#define yylineno osillineno

#line 20 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/root/flex/flex/skel.c,v 1.2 2004/05/07 00:28:17 jkh Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 88
#define YY_END_OF_BUFFER 89
static yyconst short int yy_acclist[189] =
    {   0,
       85,   85,   86,   86,   84,   84,   89,   87,   88,    1,
       87,   88,    1,   88,    2,   87,   88,   87,   88,   87,
       88,   87,   88,    4,    5,   87,   88,   87,   88,    3,
       87,   88,   87,   88,   85,   88,   88,   86,   88,   84,
       88,   77,   88,   78,   88,   77,   88,   81,   88,   82,
       88,   81,   88,    3,    4,    5,    5,    6,   80,   85,
       86,   84,   83,    5,   44,    5,   79,   76,   64,   58,
       34,   37,   65,   59,   45,   62,   60,   64,   58,   66,
       68,   34,   37,   35,   29,   63,   61,   65,   59,   67,
       45,   69,   62,   60,   66,   12,    7,   50,   26,   68,

       32,   38,   29,   36,   63,   61,   67,   14,    8,   51,
       69,   52,   39,   12,   13,   72,   50,   56,   46,   32,
       38,   36,   33,   53,   14,    8,   51,   57,   27,   47,
       48,   52,   54,   56,   15,   46,   30,   31,   33,   49,
       53,   55,   73,   57,   17,   47,   48,   54,   70,   40,
       15,   16,   74,   30,   31,   49,   55,   71,   17,   70,
       71,   75,   18,   20,   41,   18,   19,   21,   20,   23,
       21,   23,   10,   11,    9,   10,   11,    9,   42,   24,
       43,   43,   25,   28,   25,   28,   22,   22
    } ;

static yyconst short int yy_accept[629] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    4,    5,    6,
        7,    7,    7,    7,    7,    8,   10,   13,   15,   18,
       20,   22,   24,   28,   30,   33,   35,   37,   38,   40,
       42,   44,   46,   48,   50,   52,   54,   54,   54,   54,
       55,   55,   55,   55,   55,   55,   55,   57,   57,   58,
       59,   59,   59,   59,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   61,
       62,   63,   63,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   67,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   70,   70,   70,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   74,   74,   74,   75,   75,   75,   75,   75,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   77,   77,   77,   77,   78,   79,
       79,   80,   80,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   82,   82,   82,
       82,   82,   82,   82,   82,   84,   85,   85,   86,   86,
       86,   86,   86,   86,   86,   86,   87,   87,   87,   87,
       88,   89,   89,   90,   90,   91,   91,   91,   91,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       93,   93,   93,   94,   94,   94,   95,   95,   96,   96,

       96,   96,   97,   97,   97,   97,   98,   98,   99,   99,
       99,  100,  100,  100,  101,  101,  101,  101,  101,  101,
      101,  103,  104,  104,  104,  104,  104,  105,  105,  105,
      106,  106,  106,  107,  107,  108,  108,  108,  109,  109,
      109,  109,  109,  110,  110,  111,  111,  111,  111,  111,
      111,  112,  112,  112,  112,  112,  112,  112,  113,  114,
      115,  116,  116,  116,  117,  118,  118,  119,  119,  119,
      119,  119,  120,  120,  120,  120,  122,  122,  122,  122,
      122,  122,  123,  123,  124,  124,  124,  124,  124,  125,
      126,  126,  126,  126,  127,  128,  128,  129,  129,  130,

      130,  130,  130,  131,  131,  131,  131,  132,  132,  133,
      133,  134,  134,  135,  135,  135,  135,  135,  136,  137,
      137,  137,  137,  137,  138,  138,  139,  139,  140,  140,
      140,  141,  141,  142,  142,  143,  143,  143,  144,  145,
      145,  145,  145,  146,  147,  147,  147,  148,  148,  149,
      149,  149,  150,  150,  151,  152,  153,  154,  154,  155,
      156,  156,  156,  156,  157,  157,  158,  158,  158,  159,
      159,  160,  160,  160,  160,  160,  160,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  162,  162,  162,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,

      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  165,  165,  165,
      165,  165,  166,  167,  168,  168,  169,  169,  169,  169,
      169,  169,  170,  170,  171,  171,  171,  171,  172,  172,
      172,  172,  172,  172,  173,  173,  173,  173,  173,  173,
      174,  174,  174,  174,  174,  174,  175,  175,  175,  176,
      177,  177,  177,  177,  177,  178,  178,  178,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  180,  180,  180,

      180,  180,  180,  181,  181,  181,  182,  182,  182,  182,
      182,  183,  184,  184,  184,  185,  186,  186,  187,  187,
      187,  187,  187,  187,  187,  188,  189,  189
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    1,    6,    1,
        1,    1,    7,    1,    8,    9,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    1,    1,   12,
       13,   14,   15,    1,    1,    1,   16,   17,   18,   19,
        1,   20,   21,    1,    1,    1,    1,   22,   23,    1,
       24,    1,    1,   25,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   26,   27,   28,   29,

       30,   31,   32,    1,   33,    1,    1,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[48] =
    {   0,
        1,    1,    1,    1,    2,    2,    1,    1,    1,    1,
        1,    3,    1,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[638] =
    {   0,
        0,   20,   10,   12,    0,    0, 1098, 1097, 1098, 1097,
       16,   30,   24,   32, 1108, 1113,   46,    0, 1113,   31,
     1096, 1092,   35,   87, 1113, 1083,    0, 1113,    0,    0,
     1113, 1113, 1096, 1113, 1113, 1089,    0, 1088,   39, 1113,
     1064, 1071, 1056, 1051, 1071, 1085,   46, 1073,   48, 1113,
       62, 1086,  106, 1113, 1066,   51, 1046,   14, 1055,   59,
       69, 1049,   49,   62,   24, 1056, 1062, 1068,    0,    0,
        0, 1072, 1113,   63,  123,   34, 1055,  105, 1049, 1045,
     1048, 1070, 1069, 1071, 1051,   68, 1031,   73, 1040,  101,
      128, 1034,  127,   90,   57, 1041, 1047, 1031, 1030, 1026,

     1031,  166, 1027,  170, 1021, 1030, 1030, 1032, 1113, 1027,
     1027, 1028, 1017, 1014, 1021, 1027, 1030, 1012, 1019, 1018,
     1012, 1113, 1113, 1010, 1015, 1006, 1017,  172,  176,  174,
     1020, 1016, 1002, 1113, 1003, 1002,  998, 1003,  186,  999,
      188,  993, 1002, 1002, 1004, 1021,  998,  998,  999,  988,
      985,  992,  998, 1001,  983,  990,  989,  983,  190,  994,
      988,  192,  205,   34,  978,  207,   60,  209,  976,  988,
      991,  982,  988,  980,  972,  982,  982,  970,  980,  968,
      211,  977,  973,  977,  974,  963,  213,  225,  230,  235,
      237,  966,  956,  970,  242,  969,  215,  970,  964,  244,

      247,  108,  954,  249,  135,  251,  952,  964,  967,  153,
      958,  964,  956,  948,  958,  958,  946,  956,  944,  254,
      953,  949,  257,  264,  941,  951,  267,  270,  272,  953,
      274,  276,  280,  937,  282,  935,  943,  945,  284,  286,
      934,  930,  937,  931,  942,  291,  295,  928,  942,  927,
      299,  938,  301,  304,  309, 1113,  313,  318,  935,  927,
      923,  320,  322,  327,  329,  332,  922,  932,  334,  336,
      339,  934,  342,  344,  347,  918,  349,  916,  351,  924,
      926,  353,  357,  915,  911,  918,  912,  923,  359,  362,
      909,  923,  366,  915,  917,  372,  910,  374,  376,  378,

      931,  381,  914,  907,  902,  383,  392,  394,  396,  913,
     1113,  914,  909,  398,  400,  911,  904,  402,  906,  406,
      415,  417,  419,  421,  912,  423,  428,  433,  435,  440,
      901,  903,  442,  896,  445,  447,  449,  451,  901,  894,
      889,  453,  455,  457,  462,  466,  900,  913,  900,  895,
      470,  472,  897,  885,  474,  894,  476,  479, 1113,  481,
     1113,  489,  891, 1113,  491,  493,  495,  878,  877,  498,
      502,  507,  884,  879,  511,  515,  517,  521,  519,  531,
      885,  526,  536,  541,  877,  543,  886,  545,  547,  549,
      551,  883,  553,  558,  560,  566,  568,  870, 1113,  869,

      570,  572,  574,  876,  867,  576,  579,  878,  585,  589,
      591,  881,  593,  595,  873,  597,  891,  602,  599,  874,
      861,  610,  613,  618,  620,  625,  174,  627,  860,  629,
      631,  871,  633,  635,  637,  874,  639, 1113,  642,  644,
      866,  648,  652,  654,  868,  864,  657,  166,  661,  856,
      663,  665,  867, 1113,  667, 1113, 1113,  861,  669,  671,
      856,  849,  858,  673,  482,  676,  850,  678,  680,  861,
      682,  684,  851,  861,  856,  867,  686,  868,  846,  846,
      855,  843,  853,  848,  859,  688,  860,  691, 1113,  839,
      832,  846,  818,  793,  790,  786,  776,  763,  751,  748,

      716,  723,  693,  723,  707,  694,  693,  697,  686,  672,
      699,  684,  677,  666,  667,  706,  647,  712,  715,  622,
      608,  586,  719,  574,  582,  723,  725,  728,  576,  549,
      554, 1113,  732, 1113,  736,  738,  543,  536,  533,  528,
      498,  741,  743,  745,  495,  501,  484,  749,  751,  470,
      473,  463,  454,  753,  756,  444,  437,  761,  452,  764,
      421,  411,  393,  399,  766,  770,  374,  385,  774,  776,
      374,  358,  371,  362,  779,  349,  339,  781,  333,  336,
      311,  296,  280,  278,  263,  259,  253,  240,  228,  226,
      200,  192,  184,  187,  179,  163, 1113,  162,  171,  129,

      149,  118, 1113,  111,  783,  785,  132,   89,  787,  789,
      795,  799,   86,  801,  806,  808,   77,  810,   36,   10,
      812,  814,  816,  826,  821,  831, 1113,  834,  838,  842,
      846,  850,  854,  858,  862,  866,  869
    } ;

static yyconst short int yy_def[638] =
    {   0,
      628,  628,  629,  629,  630,  630,  631,  631,  632,  632,
      633,  633,  634,  634,  627,  627,  627,   17,  627,  627,
      627,  627,  627,  627,  627,  627,  635,  627,  636,  637,
      627,  627,  627,  627,  627,  627,   17,  627,   24,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  635,  636,
      637,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,

      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,

      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,

      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,

      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,

      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,

      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,    0,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627
    } ;

static yyconst short int yy_nxt[1161] =
    {   0,
      627,   17,   18,  627,   19,   19,  627,   20,   21,   22,
       23,   24,  627,   25,   28,   28,   28,   28,   32,  627,
       26,   17,   18,   33,   19,   19,   35,   20,   21,   22,
       23,   24,   32,   25,   35,  229,  229,   33,   36,   46,
       26,   47,  627,   46,  102,   47,   36,   37,   37,  103,
      621,   48,   51,  627,   46,   38,   47,   39,   49,   40,
      118,  231,  231,   51,   51,   51,  119,   74,   82,   82,
      126,  620,   83,   41,   75,   51,  119,   51,   42,   76,
       99,   43,  113,  100,  105,  114,  116,   44,  115,   45,
       52,  106,  124,  155,  107,  100,   53,  136,  108,  156,

      137,   54,  109,  139,  117,  110,  128,  128,  140,  271,
      271,  111,   55,  619,  153,   56,   57,  129,  617,   58,
       59,   60,   61,   62,   63,   64,  142,   65,   66,  613,
       67,   85,  154,  143,   86,   87,  273,  273,   88,   89,
       90,   91,   92,   93,   94,  612,   95,   96,  125,   97,
      130,  608,  108,  144,  279,  279,  109,  145,  607,  110,
      150,  146,  606,  151,  147,  111,  152,  163,  163,  605,
      148,  166,  166,  128,  128,  190,  190,  188,  188,  164,
      189,  189,  474,  167,  129,  475,  191,  201,  201,  204,
      204,  223,  223,  227,  227,  461,  192,  462,  193,  202,

      604,  205,  603,  224,  602,  228,  163,  163,  166,  166,
      232,  232,  246,  246,  253,  253,  265,  265,  164,  601,
      167,  600,  233,  599,  247,  254,  188,  188,  266,  189,
      189,  255,  255,  598,  256,  256,  190,  190,  257,  257,
      597,  258,  258,  262,  262,  269,  269,  191,  201,  201,
      204,  204,  274,  274,  263,  289,  289,  270,  223,  223,
      202,  596,  205,  595,  275,  293,  293,  290,  227,  227,
      224,  296,  296,  229,  229,  231,  231,  232,  232,  594,
      228,  298,  298,  300,  300,  306,  306,  307,  307,  233,
      593,  301,  246,  246,  592,  302,  314,  314,  591,  308,

      318,  318,  253,  253,  247,  320,  320,  590,  321,  321,
      255,  255,  302,  254,  257,  257,  589,  258,  258,  322,
      322,  262,  262,  326,  326,  588,  327,  327,  328,  328,
      265,  265,  263,  330,  330,  269,  269,  333,  333,  329,
      271,  271,  266,  273,  273,  274,  274,  270,  335,  335,
      337,  337,  279,  279,  342,  342,  587,  275,  344,  344,
      289,  289,  338,  351,  351,  586,  343,  293,  293,  585,
      345,  584,  290,  296,  296,  298,  298,  357,  357,  300,
      300,  583,  360,  360,  306,  306,  582,  301,  581,  358,
      580,  302,  361,  307,  307,  365,  365,  366,  366,  314,

      314,  371,  371,  318,  318,  308,  579,  320,  320,  367,
      321,  321,  577,  372,  576,  302,  376,  376,  322,  322,
      377,  377,  379,  379,  326,  326,  574,  327,  327,  382,
      382,  378,  573,  380,  328,  328,  383,  383,  572,  384,
      384,  330,  330,  333,  333,  329,  335,  335,  388,  388,
      337,  337,  390,  390,  342,  342,  394,  394,  344,  344,
      389,  571,  338,  395,  395,  569,  343,  396,  396,  568,
      345,  351,  351,  402,  402,  406,  406,  357,  357,  397,
      409,  409,  360,  360,  567,  403,  564,  407,  563,  358,
      410,  410,  365,  365,  366,  366,  413,  413,  483,  416,

      416,  484,  411,  371,  371,  562,  367,  417,  419,  419,
      561,  418,  422,  422,  557,  372,  376,  376,  377,  377,
      379,  379,  423,  423,  418,  424,  424,  382,  382,  378,
      556,  380,  425,  425,  555,  426,  426,  383,  383,  553,
      384,  384,  428,  428,  430,  430,  388,  388,  433,  433,
      390,  390,  434,  434,  437,  437,  431,  552,  389,  394,
      394,  395,  395,  551,  435,  550,  438,  396,  396,  439,
      439,  442,  442,  402,  402,  444,  444,  406,  406,  397,
      447,  447,  549,  443,  547,  403,  409,  409,  546,  407,
      410,  410,  449,  449,  413,  413,  451,  451,  416,  416,

      419,  419,  411,  455,  455,  545,  417,  541,  452,  540,
      418,  422,  422,  456,  423,  423,  539,  424,  424,  459,
      459,  425,  425,  418,  426,  426,  460,  460,  428,  428,
      430,  430,  464,  464,  433,  433,  434,  434,  466,  466,
      437,  437,  431,  439,  439,  468,  468,  538,  435,  442,
      442,  537,  438,  471,  471,  444,  444,  469,  447,  447,
      532,  443,  449,  449,  451,  451,  477,  477,  455,  455,
      459,  459,  460,  460,  464,  464,  452,  466,  466,  468,
      468,  486,  486,  471,  471,  488,  488,  477,  477,  486,
      486,  469,  488,  488,  516,  516,  531,  489,  523,  523,

      526,  526,  517,  530,  489,  529,  518,  516,  516,  528,
      518,  525,  527,  533,  533,  517,  535,  535,  524,  518,
      523,  523,  522,  534,  526,  526,  542,  542,  536,  543,
      543,  521,  518,  533,  533,  520,  527,  535,  535,  548,
      548,  544,  542,  542,  543,  543,  554,  554,  519,  536,
      548,  548,  558,  558,  554,  554,  544,  565,  565,  515,
      559,  514,  558,  558,  560,  570,  570,  565,  565,  566,
      559,  575,  575,  513,  560,  578,  578,  570,  570,  566,
      575,  575,  578,  578,  609,  609,  611,  611,  609,  609,
      614,  614,  512,  615,  615,  610,  611,  611,  511,  610,

      616,  616,  614,  614,  510,  615,  615,  618,  618,  616,
      616,  618,  618,  622,  622,  622,  622,  624,  624,  509,
      625,  625,  626,  626,  623,  508,  623,  624,  624,  507,
      625,  625,  626,  626,   16,   16,   16,   16,   27,   27,
       27,   27,   28,   28,   28,   28,   29,   29,   29,   29,
       30,   30,   30,   30,   31,   31,   31,   31,   34,   34,
       34,   34,   69,  506,   69,   69,   70,   70,   70,   71,
       71,  505,   71,  504,  503,  502,  501,  500,  499,  498,
      497,  496,  495,  494,  493,  492,  491,  490,  487,  485,
      482,  481,  480,  479,  478,  476,  473,  472,  470,  467,

      465,  463,  458,  457,  454,  453,  450,  448,  446,  445,
      441,  440,  436,  432,  429,  427,  421,  420,  415,  414,
      412,  408,  405,  404,  401,  400,  399,  398,  393,  392,
      391,  387,  386,  385,  381,  375,  374,  373,  370,  369,
      368,  364,  363,  362,  359,  356,  355,  354,  353,  352,
      350,  349,  348,  347,  346,  341,  340,  339,  336,  334,
      332,  331,  325,  324,  323,  319,  317,  316,  315,  313,
      312,  311,  310,  309,  305,  304,  303,  299,  297,  295,
      294,  292,  291,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  278,  277,  276,  272,  268,  267,  264,  261,

      260,  259,  252,  251,  250,  249,  248,  245,  244,  243,
      242,  241,  240,  239,  238,  237,  236,  235,  234,  230,
      226,  225,  222,  221,  220,  219,  218,  217,  216,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  206,  203,
      200,  199,  198,  197,  196,  195,  194,  187,  186,  185,
      184,  183,  182,  181,  180,  179,  178,  177,  176,  175,
      174,  173,  172,  171,  170,  169,  168,  165,  162,  161,
      160,  159,  158,  157,  149,  141,  138,  135,  134,   83,
       83,  133,  132,  131,  127,  123,  122,  121,  120,  112,
      104,  101,   98,   84,   68,   49,   81,   80,   79,   78,

       77,   50,   73,   72,   68,   50,   49,  627,   28,   28,
       28,   28,   15,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627
    } ;

static yyconst short int yy_chk[1161] =
    {   0,
        0,    1,    1,    0,    1,    1,    0,    1,    1,    1,
        1,    1,    0,    1,    3,    3,    4,    4,   11,    0,
        1,    2,    2,   11,    2,    2,   13,    2,    2,    2,
        2,    2,   12,    2,   14,  164,  164,   12,   13,   20,
        2,   20,   39,   23,   58,   23,   14,   17,   17,   58,
      620,   20,   23,   39,   47,   17,   47,   17,   49,   17,
       65,  167,  167,   47,   23,   49,   65,   39,   51,   51,
       76,  619,   51,   17,   39,   47,   76,   49,   17,   39,
       56,   17,   63,   56,   60,   63,   64,   17,   63,   17,
       24,   60,   74,   95,   61,   74,   24,   86,   61,   95,

       86,   24,   61,   88,   64,   61,   78,   78,   88,  202,
      202,   61,   24,  617,   94,   24,   24,   78,  613,   24,
       24,   24,   24,   24,   24,   24,   90,   24,   24,  608,
       24,   53,   94,   90,   53,   53,  205,  205,   53,   53,
       53,   53,   53,   53,   53,  607,   53,   53,   75,   53,
       78,  604,   75,   91,  210,  210,   75,   91,  602,   75,
       93,   91,  601,   93,   91,   75,   93,  102,  102,  600,
       91,  104,  104,  128,  128,  130,  130,  129,  129,  102,
      129,  129,  448,  104,  128,  448,  130,  139,  139,  141,
      141,  159,  159,  162,  162,  427,  130,  427,  130,  139,

      599,  141,  598,  159,  596,  162,  163,  163,  166,  166,
      168,  168,  181,  181,  187,  187,  197,  197,  163,  595,
      166,  594,  168,  593,  181,  187,  188,  188,  197,  188,
      188,  189,  189,  592,  189,  189,  190,  190,  191,  191,
      591,  191,  191,  195,  195,  200,  200,  190,  201,  201,
      204,  204,  206,  206,  195,  220,  220,  200,  223,  223,
      201,  590,  204,  589,  206,  224,  224,  220,  227,  227,
      223,  228,  228,  229,  229,  231,  231,  232,  232,  588,
      227,  233,  233,  235,  235,  239,  239,  240,  240,  232,
      587,  235,  246,  246,  586,  235,  247,  247,  585,  240,

      251,  251,  253,  253,  246,  254,  254,  584,  254,  254,
      255,  255,  251,  253,  257,  257,  583,  257,  257,  258,
      258,  262,  262,  263,  263,  582,  263,  263,  264,  264,
      265,  265,  262,  266,  266,  269,  269,  270,  270,  264,
      271,  271,  265,  273,  273,  274,  274,  269,  275,  275,
      277,  277,  279,  279,  282,  282,  581,  274,  283,  283,
      289,  289,  277,  290,  290,  580,  282,  293,  293,  579,
      283,  577,  289,  296,  296,  298,  298,  299,  299,  300,
      300,  576,  302,  302,  306,  306,  574,  300,  573,  299,
      572,  300,  302,  307,  307,  308,  308,  309,  309,  314,

      314,  315,  315,  318,  318,  307,  571,  320,  320,  309,
      320,  320,  568,  315,  567,  318,  321,  321,  322,  322,
      323,  323,  324,  324,  326,  326,  564,  326,  326,  327,
      327,  323,  563,  324,  328,  328,  329,  329,  562,  329,
      329,  330,  330,  333,  333,  328,  335,  335,  336,  336,
      337,  337,  338,  338,  342,  342,  343,  343,  344,  344,
      336,  561,  337,  345,  345,  559,  342,  346,  346,  557,
      344,  351,  351,  352,  352,  355,  355,  357,  357,  346,
      358,  358,  360,  360,  556,  352,  553,  355,  552,  357,
      362,  362,  365,  365,  366,  366,  367,  367,  465,  370,

      370,  465,  362,  371,  371,  551,  366,  370,  372,  372,
      550,  370,  375,  375,  547,  371,  376,  376,  377,  377,
      379,  379,  378,  378,  375,  378,  378,  382,  382,  377,
      546,  379,  380,  380,  545,  380,  380,  383,  383,  541,
      383,  383,  384,  384,  386,  386,  388,  388,  389,  389,
      390,  390,  391,  391,  393,  393,  386,  540,  388,  394,
      394,  395,  395,  539,  391,  538,  393,  396,  396,  397,
      397,  401,  401,  402,  402,  403,  403,  406,  406,  396,
      407,  407,  537,  401,  531,  402,  409,  409,  530,  406,
      410,  410,  411,  411,  413,  413,  414,  414,  416,  416,

      419,  419,  410,  418,  418,  529,  416,  525,  414,  524,
      416,  422,  422,  418,  423,  423,  522,  423,  423,  424,
      424,  425,  425,  422,  425,  425,  426,  426,  428,  428,
      430,  430,  431,  431,  433,  433,  434,  434,  435,  435,
      437,  437,  430,  439,  439,  440,  440,  521,  434,  442,
      442,  520,  437,  443,  443,  444,  444,  440,  447,  447,
      517,  442,  449,  449,  451,  451,  452,  452,  455,  455,
      459,  459,  460,  460,  464,  464,  451,  466,  466,  468,
      468,  469,  469,  471,  471,  472,  472,  477,  477,  486,
      486,  468,  488,  488,  503,  503,  515,  472,  508,  508,

      511,  511,  503,  514,  488,  513,  503,  516,  516,  512,
      508,  510,  511,  518,  518,  516,  519,  519,  509,  516,
      523,  523,  507,  518,  526,  526,  527,  527,  519,  528,
      528,  506,  523,  533,  533,  505,  526,  535,  535,  536,
      536,  528,  542,  542,  543,  543,  544,  544,  504,  535,
      548,  548,  549,  549,  554,  554,  543,  555,  555,  502,
      549,  501,  558,  558,  549,  560,  560,  565,  565,  555,
      558,  566,  566,  500,  558,  569,  569,  570,  570,  565,
      575,  575,  578,  578,  605,  605,  606,  606,  609,  609,
      610,  610,  499,  610,  610,  605,  611,  611,  498,  609,

      612,  612,  614,  614,  497,  614,  614,  615,  615,  616,
      616,  618,  618,  621,  621,  622,  622,  623,  623,  496,
      623,  623,  625,  625,  621,  495,  622,  624,  624,  494,
      624,  624,  626,  626,  628,  628,  628,  628,  629,  629,
      629,  629,  630,  630,  630,  630,  631,  631,  631,  631,
      632,  632,  632,  632,  633,  633,  633,  633,  634,  634,
      634,  634,  635,  493,  635,  635,  636,  636,  636,  637,
      637,  492,  637,  491,  490,  487,  485,  484,  483,  482,
      481,  480,  479,  478,  476,  475,  474,  473,  470,  467,
      463,  462,  461,  458,  453,  450,  446,  445,  441,  436,

      432,  429,  421,  420,  417,  415,  412,  408,  405,  404,
      400,  398,  392,  387,  385,  381,  374,  373,  369,  368,
      363,  356,  354,  353,  350,  349,  348,  347,  341,  340,
      339,  334,  332,  331,  325,  319,  317,  316,  313,  312,
      310,  305,  304,  303,  301,  297,  295,  294,  292,  291,
      288,  287,  286,  285,  284,  281,  280,  278,  276,  272,
      268,  267,  261,  260,  259,  252,  250,  249,  248,  245,
      244,  243,  242,  241,  238,  237,  236,  234,  230,  226,
      225,  222,  221,  219,  218,  217,  216,  215,  214,  213,
      212,  211,  209,  208,  207,  203,  199,  198,  196,  194,

      193,  192,  186,  185,  184,  183,  182,  180,  179,  178,
      177,  176,  175,  174,  173,  172,  171,  170,  169,  165,
      161,  160,  158,  157,  156,  155,  154,  153,  152,  151,
      150,  149,  148,  147,  146,  145,  144,  143,  142,  140,
      138,  137,  136,  135,  133,  132,  131,  127,  126,  125,
      124,  121,  120,  119,  118,  117,  116,  115,  114,  113,
      112,  111,  110,  108,  107,  106,  105,  103,  101,  100,
       99,   98,   97,   96,   92,   89,   87,   85,   84,   83,
       82,   81,   80,   79,   77,   72,   68,   67,   66,   62,
       59,   57,   55,   52,   48,   46,   45,   44,   43,   42,

       41,   38,   36,   33,   26,   22,   21,   15,   10,    9,
        8,    7,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
#define INITIAL 0
/** @file parseosil.l
 * 
 * @author  Robert Fourer,  Jun Ma, Kipp Martin, 
 * @version 1.0, 10/05/2005
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005, Robert Fourer, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"



#include <stdio.h> 
#include "lexyaccparser.h"
#include "externalvars.h"
#include <time.h>
#include <ctype.h>
#include <Base64.h>
#include "ErrorClass.h"


extern OSInstance* osinstance;
#include "parseosil.tab.hpp"


#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", osiltext);
#else     
	#define YY_PRINT ;
#endif
//
//
// the global variables for parsing
clock_t start, finish;
double duration;
double atofmod(char *ch);
int atoimod(char *ch);
bool isnewline(char c);
char *ch = NULL;
bool parseVariables();
bool parseObjectives();
bool parseObjCoef( int objcount);
bool parseConstraints();
bool parseLinearConstraintCoefficients();
bool parseStart();
bool parseRowIdx();
bool parseColIdx();
bool parseValue();
char *parseBase64(int *dataSize );


#define GAIL printf("GAIL ANN HONDA\n")

#define	ISWHITESPACE( char_) ((char_) == ' ' || \
                     (char_) == '\t' ||  (char_) == '\r')

#define	ISDIGIT(_c) ((_c) >= '0' && (_c) <= '9')

#define GETATTRIBUTETEXT  	\
	for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ; \
	if( *ch != '=') {osiltext = &ch[0]; osilerror("found an attribute not defined"); }  \
	ch++; \
	for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;	\
	if(*ch != '\"'  && *ch != '\"') {osiltext = &ch[0]; osilerror("missing quote on attribute"); } \
	ch++; \
	for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ; \
	attText = &*ch; \
	for( ; *ch != '\"' &&  *ch != '\''; ch++); \
	*ch = '\0'; 
	
#define ECHOCHECK \
	GAIL; \
	printf("%c", ch[-2]); \
	printf("%c", ch[-1]); \
	printf("%c", ch[0]); \
	printf("%c", ch[1]); \
	printf("%c", ch[2]); \
	printf("%c", ch[3]); \
	printf("%c", ch[4]); \
	printf("%c", ch[5]); \
	printf("%c \n", ch[6]); \
	GAIL;
					 
#define attributetext 1

#define startelement 2

#define osilattributetext 3

#define elementtext 4

#define comment 5

#define xmldeclaration 6

#line 979 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 110 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"

 
#line 1133 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 628 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1113 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 112 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 114 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 115 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 116 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; osillval.ival = atoi(osiltext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 117 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; osillval.dval = atof(osiltext); return(DOUBLE);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 118 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 122 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; BEGIN osilattributetext;  return(OSILSTART);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 123 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(OSILEND);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 124 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(INSTANCEHEADER);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 125 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(INSTANCEHEADERSTART);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 126 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(INSTANCEHEADEREND);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 127 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; BEGIN elementtext; return(NAMESTART);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 128 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; unput('<'); return(NAMESTART);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 129 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;  return(NAMEEND);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 130 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; BEGIN elementtext;  return(SOURCESTART);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 131 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; unput('<'); return(SOURCESTART);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 132 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;   return(SOURCEEND);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 133 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; BEGIN elementtext; return(DESCRIPTIONSTART);} 
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 134 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; unput('<'); return(DESCRIPTIONSTART);} 
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 135 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;  return(DESCRIPTIONEND);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 136 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{
	//
	int k = strlen(yy_current_buffer->yy_buf_pos);
	ch = &yy_current_buffer->yy_ch_buf[k+ 1];
	osiltext = &ch[ 0];
	//printf("starting INSTANCE DATA:\n %s\n", ch);
	parseVariables();
	parseObjectives();
	parseConstraints(); 
	parseLinearConstraintCoefficients();
	//printf("testing \n %s\n", ch);
	osil_delete_buffer( yy_current_buffer);
	osil_scan_buffer(ch , strlen(  ch) + 2);		
	return(INSTANCEDATASTART);
	//
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 153 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 154 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(INSTANCEDATAEND);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 155 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSSTART);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 156 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSEND);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 157 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(QTERMSTART);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 158 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(QTERMEND);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 159 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(NUMBEROFQTERMSATT);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 160 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;   return(IDXATT);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 161 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;   return(IDXONEATT);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 162 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;   return(IDXTWOATT);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 163 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 164 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;  return(VALUEATT);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 165 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; BEGIN attributetext; return(IDATT);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 166 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; unput('\"'); return(IDATT);  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 167 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; BEGIN attributetext; return(TYPEATT);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 168 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; BEGIN attributetext; return(IDATT);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 169 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 170 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;  return(NAMESTARTANDEND);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 171 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;  return(SOURCESTARTANDEND);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 172 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;  return(DESCRIPTIONSTARTANDEND);}
	YY_BREAK
 
// the nonlinear element tokens

case 42:
YY_RULE_SETUP
#line 179 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 180 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 181 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 182 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 183 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 184 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 185 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 186 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 187 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 188 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 189 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 190 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 191 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 192 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 193 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 194 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 195 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 196 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 197 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 198 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 199 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 200 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 203 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 204 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 206 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 207 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 210 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 211 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 212 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 213 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 214 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 215 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 216 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 217 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 219 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
BEGIN comment;
	YY_BREAK
case 77:
#line 221 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
case 78:
YY_RULE_SETUP
#line 221 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 222 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
BEGIN 0;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 224 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
BEGIN xmldeclaration;
	YY_BREAK
case 81:
#line 226 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
case 82:
YY_RULE_SETUP
#line 226 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 227 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
BEGIN 0;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 229 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;  BEGIN 0; osillval.sval = strdup(osiltext);    return(ELEMENTTEXT);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 230 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;  BEGIN 0; osillval.sval = strdup(osiltext); return(ATTRIBUTETEXT);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 231 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;  BEGIN 0; osillval.sval = strdup(osiltext); return(OSILATTRIBUTETEXT);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 233 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
{YY_PRINT;  osilerror( "ecountered a spurious character in the lexer");   }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 235 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"
ECHO;
	YY_BREAK
#line 1676 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(attributetext):
			case YY_STATE_EOF(startelement):
			case YY_STATE_EOF(osilattributetext):
			case YY_STATE_EOF(elementtext):
			case YY_STATE_EOF(comment):
			case YY_STATE_EOF(xmldeclaration):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 628 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 628 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 627);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 235 "/Users/kmartin/Documents/files/code/cpp/Coin-OS/OS/src/OSParsers/parseosil.l"



bool isnewline(char c){
	if(c != '\n') return false;
	osillineno++;
	return true;
}//end isnewline()

bool parseVariables(){
	start = clock(); 
	char *c_numberOfVariables = "numberOfVariables";
	char *startVariables = "variables";
	char *endVariables = "</variables";
	char *startVar = "<var";
	char *endVar = "</var";
	// the attributes
	char *attText = NULL;
	char *name = "name";
	char *initString = "initString";
	char *type = "type";
	char *mult = "mult";
	// others
	int i;
	int varcount = 0;
	int numberOfVariables = 0;
// variable attribute boolean variables
	bool varlbattON  = false;
	bool varubattON = false ;
	bool vartypeattON  = false;
	bool varnameattON = false ;
	bool varinitattON = false ;
	bool varinitStringattON = false ;
	bool varmultattON = false;
	bool foundVar = false;
	//
	// start parsing
	// the way flex works is that the ch should be pointing to variables
	for(i = 0; startVariables[i]  == *ch; i++, ch++);
	if(i != 9) {osiltext = &ch[0]; osilerror("incorrect <variables tag>");}
	// find numberOfVariables attribute
	// eat the white space
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	for(i = 0; c_numberOfVariables[i]  == *ch; i++, ch++);
	if(i != 17) {osiltext = &ch[0]; osilerror("incorrect numberOfVariables attribute in <variables tag>");}	
	// buf_index should be pointing to the first character after numberOfVariables
	GETATTRIBUTETEXT;
	ch++;
	numberOfVariables = atoimod( attText);
	osinstance->instanceData->variables->numberOfVariables = numberOfVariables;
	osinstance->instanceData->variables->var = new Variable*[ numberOfVariables];
	for(i = 0; i < numberOfVariables; i++){
		osinstance->instanceData->variables->var[ i] = new Variable();
	} 
	// get rid of white space after the numberOfVariables element
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ )
	// since there must be at least one variable,  this element must end with > 
	// better have an > sign or not valid
	if(*ch != '>' ) {osiltext = &ch[0]; osilerror("variables element does not have a proper closing >");}
	ch++;
	// get rid of white space
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// now loop over the var elements, there must be at least one var element
	for(i = 0; startVar[i]  == *ch; i++, ch++);
	if(i ==  4) foundVar = true;
		else {osiltext = &ch[0]; osilerror("there must be at least one <var> element");}
	while(foundVar){
		varlbattON  = false;
		varubattON = false ;
		vartypeattON  = false;
		varnameattON = false ;
		varinitattON = false ;
		varinitStringattON = false ;
		varmultattON = false;
		foundVar = false;
		// assume we are pointing to the first character after the r in <var
		// it should be whitespace
		for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
		while(*ch != '/' && *ch != '>'){
			switch (*ch) {
			case 'n':
				for(i = 0; name[i]  == *ch; i++, ch++);
				if( i != 4 ) {osiltext = &ch[0]; osilerror("error in variables name attribute");}
				if(varnameattON == true) {osiltext = &ch[0]; osilerror("error too many variable name attributes");}
				varnameattON == true;
				GETATTRIBUTETEXT;
				osinstance->instanceData->variables->var[varcount]->name=attText;
				//printf("ATTRIBUTE = %s\n", attText);
				break;
			case 'i':
				for(i = 0; initString[i]  == *ch; i++, ch++);
				// if i < 4 there is an error
				// if i = 4 we matched init
				// if i = 10 we matched initString
				if( (i != 4)  && (i != 10)) {osiltext = &ch[0]; osilerror("error in variables init or initString attribute");}
				if(i == 4){
					if(varinitattON == true) {osiltext = &ch[0]; osilerror("error too many variable init attributes");}
					varinitattON = true;
					GETATTRIBUTETEXT;
					//printf("ATTRIBUTE = %s\n", attText);
					osinstance->instanceData->variables->var[varcount]->init=atofmod(attText);
				}
				else{
					if(varinitStringattON == true) {osiltext = &ch[0]; osilerror("error too many variable initString attributes");}
					varinitStringattON = true;
					GETATTRIBUTETEXT;
					//printf("ATTRIBUTE = %s\n", attText);
					osinstance->instanceData->variables->var[varcount]->initString=attText;
				}
				break;
			case 't':
				for(i = 0; type[i]  == *ch; i++, ch++);
				if(i != 4) {osiltext = &ch[0]; osilerror("error in variables type attribute");}
				if(vartypeattON == true) {osiltext = &ch[0]; osilerror("error too many variable type attributes");}
				vartypeattON = true;
				GETATTRIBUTETEXT;
				if( strchr("CBIS", attText[0]) == NULL ) {osiltext = &ch[0]; osilerror("variable type not C,B,I, or S");}
				osinstance->instanceData->variables->var[varcount]->type = attText[0];
				break;
			case 'l':
				ch++;
				if(*ch++ != 'b') {osiltext = &ch[0]; osilerror("error in variables lower bound attribute");}
				if(varlbattON == true) {osiltext = &ch[0]; osilerror("error too many variable lb attributes");}
				varlbattON = true;
				GETATTRIBUTETEXT;
				osinstance->instanceData->variables->var[varcount]->lb = atofmod(attText);
				//printf("ATTRIBUTE = %s\n", attText);
				break;
			case 'u':
				ch++;
				if(*ch++ != 'b') {osiltext = &ch[0]; osilerror("error in variables upper bound attribute");}
				if(varubattON == true) {osiltext = &ch[0]; osilerror("error too many variable ub attributes");}
				varubattON = true;
				GETATTRIBUTETEXT;
				osinstance->instanceData->variables->var[varcount]->ub = atofmod(attText);
				//printf("ATTRIBUTE = %s\n", attText);
				break;
			case 'm':
				for(i = 0; mult[i]  == *ch; i++, ch++);
				if(i != 4) {osiltext = &ch[0]; osilerror("error in variables mult attribute");}
				if(varmultattON == true) {osiltext = &ch[0]; osilerror("error too many variable mult attributes");}
				varmultattON = true;
				GETATTRIBUTETEXT;
				//printf("ATTRIBUTE = %s\n", attText);
				break;
			case ' ':
				break;
			case '\n':
				osillineno++;
				break;
			case '\t':
				break;
			case '\r':
				break;
			default:
				{osiltext = &ch[0]; osilerror("invalid attribute character");}
				break;
			}
			ch++;
		}
		//
		// assume all the attributes have been processed
		// must have either /> or > and then whitespace and </var whitespace>
		if( *ch != '/' && *ch != '>') {osiltext = &ch[0]; osilerror("incorrect end of <var> element");}
		if(*ch == '/'){
			ch++;
			if(*ch != '>') {osiltext = &ch[0]; osilerror("incorrect end of <var> element");}
			// get rid of whitespace
			ch++;
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// either have another <var> element or foundVar = false;
			for(i = 0; startVar[i]  == *ch; i++, ch++);
			if(i == 4) {
				foundVar = true;
			}
			else {
				foundVar = false;
			}
		}
		else{
			// the buf_index is the > at the end of the var element 
			// double check to make sure it really is a >
			if(*ch != '>') {osiltext = &ch[0]; osilerror("improper ending to a <var> element");}
			// look for </var
			// fist get rid of white space
			ch++;
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// we should be at </var or there is an error
			for(i = 0; endVar[i]  == *ch; i++, ch++);
			if(i != 5) {osiltext = &ch[0]; osilerror("</var> element missing");}
			// burn off the whitespace
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// better have an > to end </var
			if(*ch++ != '>') {osiltext = &ch[0]; osilerror("</var> element missing >");}
			// look for a new <var> element
			// get rid of whitespace
			ch++;
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// either have another <var> element or foundVar = false;
			for(i = 0; startVar[i]  == *ch; i++, ch++);
			if(i == 4) {
				foundVar = true;
			}
			else {
				foundVar = false;
			}
		}
		varcount++;
	}
	ch -= i;
	if(varcount > numberOfVariables) {osiltext = &ch[0];  osilerror("attribute numberOfVariables is less than actual number found");}
	if(varcount < numberOfVariables) {osiltext = &ch[0]; osilerror("attribute numberOfVariables is greater than actual number found");}
	// get the </variables> tag
	for(i = 0; endVariables[i]  == *ch; i++, ch++);
	if(i != 11) {osiltext = &ch[0];  osilerror("cannot find </varialbes> tag");}
	for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );	
	// better have >
	if(*ch != '>') {osiltext = &ch[0];  osilerror("improperly formed </variables> tag");}
	ch++;
	finish = clock();
	duration = (double) (finish - start) / CLOCKS_PER_SEC; 
	printf("TIME TO PARSE VARIABLES = %f\n", duration);
	return true;
}//end parseVariables


bool parseObjectives(){
	start = clock();
	char *c_numberOfObjectives = "numberOfObjectives";
	char *startObjectives = "<objectives";
	char *endObjectives = "</objectives";
	char *startObj = "<obj";
	char *endObj = "</obj";
	// attributes
	char *attText = NULL;
	char *constant = "constant";
	char *maxOrMin = "maxOrMin";
	char *numberOfObjCoef = "numberOfObjCoeff";
	char *weight = "weight";
	char *name = "name";
	char *mult = "mult";
	// others
	int i;
	// objective function attribute boolean variables
	bool objmaxOrMinattON = false;
	bool objnameattON = false;
	bool objconstantattON = false;
	bool objweightattON = false;
	bool objmultattON = false;
	bool objnumberOfObjCoefattON = false;
	int objcount = 0;
	int numberOfObjectives;
	bool foundObj;
	// start parsing
	// burn white space
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// if, present we should be pointing to <objectives element if there -- it is not required
	for(i = 0; startObjectives[i]  == *ch; i++, ch++);
	if(i != 11) {
		//reset ch
		ch -= i;
		return false;
	}
	// find numberOfObjectives attribute -- it is valid for this attribute to be missing. If so
	// assume it is	1 in 
	// eat the white space
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// we just ate the white space. If numberOfObjectives is missing we should have a  > char
	if(*ch == '>'){
		numberOfObjectives = 1;
		ch++;
	}
	else{
		for(i = 0; c_numberOfObjectives[i]  == *ch; i++, ch++);
		if(i != 18) {osiltext = &ch[0]; osilerror("incorrect numberOfObjectives attribute in <objectives> tag");}	
		GETATTRIBUTETEXT;
		numberOfObjectives = atoimod( attText);
		ch++;
		// get rid of white space after the numberOfObjectives attribute
		for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
		// we should have either an />  OR an >
		if(*ch == '/'){
			ch++;
			if( *ch++ != '>') {osiltext = &ch[0]; osilerror("the objectives element does not have a proper closing"); }
			else{
				if(numberOfObjectives > 0){osiltext = &ch[0];  osilerror("numberOfObjectives positive but there are no objectives");}
				return false;
			}
		}
		//  we better have an > 
		if( *ch++ != '>') {osiltext = &ch[0]; osilerror("the objectives element does not have a proper closing");} 
	}
	osinstance->instanceData->objectives->numberOfObjectives = numberOfObjectives;
	osinstance->instanceData->objectives->obj = new Objective*[ numberOfObjectives];
	for(i = 0; i < numberOfObjectives; i++){
		osinstance->instanceData->objectives->obj[ i] = new Objective();
	} 	
	// get rid of white space after the <objectives> element
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// now loop over the obj elements, there must be at least one con element
	for(i = 0; startObj[ i] == *ch; i++, ch++);
	if( i == 4) foundObj = true;
		else {osiltext = &ch[0]; osilerror("there must be at least one <obj> element");}
	start = clock();	
	while(foundObj){
		objmaxOrMinattON = false;
		objnameattON = false;
		objconstantattON = false;
		objweightattON = false;
		objmultattON = false;
		objnumberOfObjCoefattON = false;
		// assume we are pointing to the first character after the r in <obj
		// it should be a space so let's increment ch
		ch++;
		while(*ch != '/' && *ch != '>'){
			switch (*ch) {
			case 'n':
				if( *(ch+1) == 'u'){
					for(i = 0; numberOfObjCoef[i]  == *ch; i++, ch++);
					if( (i != 15)  ) {osiltext = &ch[0]; osilerror("error in objective numberOfObjCoef attribute");}
					else{
						if(objnumberOfObjCoefattON == true) {osiltext = &ch[0]; osilerror("error too many obj numberOfObjCoefatt attributes");}
						objnumberOfObjCoefattON = true;
						GETATTRIBUTETEXT;
						//printf("ATTRIBUTE = %s\n", attText);
						osinstance->instanceData->objectives->obj[objcount]->numberOfObjCoef=atoimod(attText);
						osinstance->instanceData->objectives->obj[objcount]->coef = new ObjCoef*[osinstance->instanceData->objectives->obj[ objcount]->numberOfObjCoef];
						for(int i = 0; i < osinstance->instanceData->objectives->obj[ objcount]->numberOfObjCoef; i++)osinstance->instanceData->objectives->obj[objcount]->coef[i] = new ObjCoef();
					}
				}
				else{
					for(i = 0; name[i]  == *ch; i++, ch++);
					if( (i != 4)  ) {osiltext = &ch[0]; osilerror("error in objective name attribute");}
					else{
						if(objnameattON == true) {osiltext = &ch[0]; osilerror("error too many obj name attributes");}
						objnameattON = true;
						GETATTRIBUTETEXT;
						//printf("ATTRIBUTE = %s\n", attText);
						osinstance->instanceData->objectives->obj[objcount]->name=attText;
					}
				}
				break;
			case 'c':
				for(i = 0; constant[i]  == *ch; i++, ch++);
				if( (i != 7)  ) {osiltext = &ch[0]; osilerror("error in objective constant attribute");}
				else{
					if(objconstantattON == true) {osiltext = &ch[0]; osilerror("error too many obj constant attributes");}
					objconstantattON = true;
					GETATTRIBUTETEXT;
					//printf("ATTRIBUTE = %s\n", attText);
					osinstance->instanceData->objectives->obj[objcount]->constant=atofmod(attText);
				}
				break;
			case 'w':
				for(i = 0; weight[i]  == *ch; i++, ch++);
				if( (i != 6)  ) {osiltext = &ch[0]; osilerror("error in objective weight attribute");}
				else{
					if(objweightattON == true) {osiltext = &ch[0]; osilerror("error too many obj weight attributes");}
					objweightattON = true;
					GETATTRIBUTETEXT;
					//printf("ATTRIBUTE = %s\n", attText);
					osinstance->instanceData->objectives->obj[objcount]->weight=atofmod(attText);
				}
				break;
			case 'm':
				if(*(ch+1) == 'a'){
					for(i = 0; maxOrMin[i]  == *ch; i++, ch++);
					if( (i != 8)  ) {osiltext = &ch[0]; osilerror("error in objective maxOrMin attribute");}
					else{
						if(objmaxOrMinattON == true) {osiltext = &ch[0]; osilerror("error too many obj maxOrMin attributes");}
						objmaxOrMinattON = true;
						GETATTRIBUTETEXT;
						//printf("ATTRIBUTE = %s\n", attText);
						if( (strcmp("max", attText) != 0 ) && (strcmp("min", attText) != 0 ) )osilerror("maxOrMin attribute in objective must be a max or min");
						osinstance->instanceData->objectives->obj[objcount]->maxOrMin = attText;
					}
				}
				else{
					for(i = 0; mult[i]  == *ch; i++, ch++);
					if( (i != 4)  ) {osiltext = &ch[0]; osilerror("error in objective mult attribute");}
					else{
						if(objmultattON == true) {osiltext = &ch[0]; osilerror("error too many obj mult attributes");}
						objmultattON = true;
						GETATTRIBUTETEXT;
						//printf("ATTRIBUTE = %s\n", attText);
						//osinstance->instanceData->objectives->obj[objcount]->name=attText;
					}
				}
				break;
			// come back and do multiplicity
			case ' ':
				break;
			case '\n':
				osillineno++;
				break;
			case '\t':
				break;
			case '\r':
				break;
			default:
				osiltext = &ch[0];
				osilerror("invalid attribute character");
				break;
			}
			ch++;
		}
		//
		// assume all the attributes have been processed
		// must have either /> or > and then whitespace and </obj whitespace>
		if( *ch != '/' && *ch != '>') {osiltext = &ch[0];  osilerror("incorrect end of <obj> element");}
		if(*ch == '/'){
			ch++;
			if(*ch != '>') {osiltext = &ch[0]; osilerror("incorrect end of <obj> element");}
			// get rid of whitespace
			ch++;
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// either have another <obj> element or foundObj = false;
			for(i = 0; startObj[i]  == *ch; i++, ch++);
			if(i == 4) foundObj = true;
				else foundObj = false;
		}
		else{
			// the ch is the > at the end of the obj element
			// double check to make sure it really is a >
			if(*ch != '>') {osiltext = &ch[0]; osilerror("improper ending to a <obj> element");}
			// look for </obj
			// fist get rid of white space
			ch++;
			// first get the <coef> elements
			parseObjCoef( objcount);
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// we should be at </obj or there is an error
			for(i = 0; endObj[i]  == *ch; i++, ch++);
			if(i != 5) {osiltext = &ch[0]; osilerror("</obj> element missing");}
			// burn off the whitespace
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// better have an > to end </obj
			if(*ch++ != '>'){osiltext = &ch[0];  osilerror("</obj> element missing >");}
			// look for a new <obj> element
			// get rid of whitespace
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// either have another <obj> element or foundObj = false;
			for(i = 0; startObj[i]  == *ch; i++, ch++);
			if(i == 4) foundObj = true;
				else foundObj = false;
		}
		objcount++;
	}
	if(objcount > numberOfObjectives) {osiltext = &ch[0]; osilerror("attribute numberOfObjectives is less than actual number found");}
	if(objcount < numberOfObjectives) {osiltext = &ch[0]; osilerror("attribute numberOfObjectives is greater than actual number found");}
	ch -= i;
	// get the </objectives> tag
	for(i = 0; endObjectives[i]  == *ch; i++, ch++);
	if(i != 12) {osiltext = &ch[0]; osilerror( "cannot find </objectives> tag");}
	for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );	
	// better have >
	if(*ch != '>') {osiltext = &ch[0]; osilerror("improperly formed </objectives> tag");}	
	ch++;
	finish = clock();
	duration = (double) (finish - start) / CLOCKS_PER_SEC; 
	printf("TIME TO PARSE OBJECTIVES = %f\n", duration);
	return true;
}//end parseObjectives

bool parseConstraints(){
	start = clock();	
	char *c_numberOfConstraints = "numberOfConstraints";
	char *startConstraints = "<constraints";
	char *endConstraints = "</constraints";
	char *startCon = "<con";
	char *endCon = "</con";
	// attributes
	char *attText = NULL;
	char *name = "name";
	char *constant = "constant";
	char *mult = "mult";
	// others
	int i;
	int concount = 0;
	int numberOfConstraints = 0;
	// constraint attribute boolean variables
	bool conlbattON = false ;
	bool conubattON  = false;
	bool connameattON = false;
	bool conconstantattON  = false;
	bool conmultattON = false;
	bool foundCon = false;
	// start parsing
	// burn white space
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// if, present we should be pointing to <constraints element if there -- it is not required
	for(i = 0; startConstraints[i]  == *ch; i++, ch++);
	if(i != 12) {
		//reset ch
		ch -= i;
		return false;
	}
	// find numberOfConstraints attribute
	// eat the white space
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	for(i = 0; c_numberOfConstraints[i]  == *ch; i++, ch++);
	if(i != 19) {osiltext = &ch[0]; osilerror("incorrect numberOfConstraints attribute in <constraints> tag");}	
	// ch should be pointing to the first character after numberOfObjectives
	GETATTRIBUTETEXT;
	ch++;
	numberOfConstraints = atoimod( attText);
	osinstance->instanceData->constraints->numberOfConstraints = numberOfConstraints;
	osinstance->instanceData->constraints->con = new Constraint*[ numberOfConstraints];
	for(i = 0; i < numberOfConstraints; i++){
		osinstance->instanceData->constraints->con[ i] = new Constraint();
	} 
	// get rid of white space after the numberOfConstraints element
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// we should have either an />  OR an >
	if(*ch == '/'){
		ch++;
		if( *ch++ != '>') {osiltext = &ch[0]; osilerror("the constraints element does not have a proper closing"); }
		else{
			if(numberOfConstraints > 0) {osiltext = &ch[0];  osilerror("numberOfConstraints positive, but there are no objectives");}
			return false;
		}		
	}
	//  we better have an > 
	if( *ch++ != '>') {osiltext = &ch[0];  osilerror("the constraints element does not have a proper closing");} 
	// get rid of white space after the <constraints> element
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// now loop over the con elements, there must be at least one con element
	for(i = 0; startCon[i]  == *ch; i++, ch++);
	if( i == 4) foundCon = true;
		else {osiltext = &ch[0]; osilerror("there must be at least one <con> element");}
	while(foundCon){
		conlbattON = false ;
		conubattON  = false;
		connameattON = false;
		conconstantattON  = false;
		conmultattON = false;
		// assume we are pointing to the first character after the n in <con
		// it should be a space so let's increment ch
		for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
		while(*ch != '/' && *ch != '>'){
			switch (*ch) {
			case 'n':
				for(i = 0; name[i]  == *ch; i++, ch++);
				if(i != 4) {osiltext = &ch[0]; osilerror("error in constraints name attribute");}
				if(connameattON == true) {osiltext = &ch[0]; osilerror("error too many con name attributes");}
				connameattON = true;
				GETATTRIBUTETEXT;
				osinstance->instanceData->constraints->con[concount]->name=attText;
				//printf("ATTRIBUTE = %s\n", attText);
				break;
			case 'c':
				for(i = 0; constant[i]  == *ch; i++, ch++);
				if( (i != 7)  ) {osiltext = &ch[0]; osilerror("error in constraint constant attribute");}
				if(conconstantattON == true) {osiltext = &ch[0]; osilerror("error too many con constant attributes");}
				conconstantattON = true;
				GETATTRIBUTETEXT;
				//printf("ATTRIBUTE = %s\n", attText);
				osinstance->instanceData->constraints->con[concount]->constant=atofmod(attText);
				break;
			case 'l':
				ch++;
				if(*ch++ != 'b') { osiltext = &ch[0]; osilerror("error in constraint lb attribute");}
				if(conlbattON == true) {osiltext = &ch[0]; osilerror("error too many con lb attributes");}
				conlbattON = true;
				GETATTRIBUTETEXT;
				osinstance->instanceData->constraints->con[concount]->lb = atofmod(attText);
				//printf("ATTRIBUTE = %s\n", attText);
				break;
			case 'u':
				ch++;
				if(*ch++ != 'b') {osiltext = &ch[0]; osilerror("error in constraint ub attribute");}
				if(conubattON == true) {osiltext = &ch[0]; osilerror("error too many con ub attributes");}
				conubattON = true;
				GETATTRIBUTETEXT;
				osinstance->instanceData->constraints->con[concount]->ub = atofmod(attText);
				//printf("ATTRIBUTE = %s\n", attText);
				break;
			case 'm':
				for(i = 0; mult[i]  == *ch; i++, ch++);
				if(i != 4) {osiltext = &ch[0]; osilerror("error in constraints mult attribute");}
				if(conmultattON == true) {osiltext = &ch[0]; osilerror("error too many con mult attributes");}
				conmultattON = true;
				GETATTRIBUTETEXT;
				//printf("ATTRIBUTE = %s\n", attText);
				break;
			case ' ':
				break;
			case '\n':
				osillineno++;
				break;
			case '\t':
				break;
			case '\r':
				break;
			default:
				osiltext = &ch[0];
				osilerror("invalid attribute character");
				break;
			}
			ch++;
		}
		//
		// assume all the attributes have been processed
		// must have either /> or > and then whitespace and </con whitespace>
		if( *ch != '/' && *ch != '>') {osiltext = &ch[0]; osilerror("incorrect end of <con> element");}
		if(*ch == '/'){
			ch++;
			if(*ch != '>') {osiltext = &ch[0]; osilerror("incorrect end of <con> element");}
			// get rid of whitespace
			ch++;
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// either have another <con> element or foundCon = false;
			for( i = 0; startCon[i]  == *ch; i++, ch++);
			if( i == 4) foundCon = true;
				else foundCon = false;
		}
		else{
			// the ch is the > at the end of the con element 
			// double check to make sure it really is a >
			if(*ch != '>') {osiltext = &ch[0]; osilerror("improper ending to a <obj> element");}
			// look for </con
			// fist get rid of white space
			ch++;
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// we should be at </con or there is an error
			for(i = 0; endCon[i]  == *ch; i++, ch++);
			if(i != 5) {osiltext = &ch[0]; osilerror("</con> element missing");}
			// burn off the whitespace
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// better have an > to end </con
			if(*ch++ != '>') {osiltext = &ch[0]; osilerror("</con> element missing >");}
			// look for a new <con> element
			// get rid of whitespace
			ch++;
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// either have another <con> element or foundVar = false;
			for(i = 0; startCon[i]  == *ch; i++, ch++);
			if(i == 4) foundCon = true;
				else foundCon = false;
		}
		concount++;
	}
	if(concount > numberOfConstraints) {osiltext = &ch[0]; osilerror("attribute numberOfConstraints is less than actual number found");}
	if(concount < numberOfConstraints) {osiltext = &ch[0]; osilerror("attribute numberOfConstraints is greater than actual number found");}
	ch -= i;
	// get the </constraints> tag
	for(i = 0; endConstraints[i]  == *ch; i++, ch++);
	if(i != 13) {osiltext = &ch[0]; osilerror( "cannot find </constraints> tag");}
	for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );	
	// better have >
	if(*ch != '>') {osiltext = &ch[0]; osilerror("improperly formed </constraints> tag");	}
	ch++;
	finish = clock();
	duration = (double) (finish - start) / CLOCKS_PER_SEC; 
	printf("TIME TO PARSE CONSTRAINTS = %f\n", duration);
	return true;
}//end parseConstraints

bool parseLinearConstraintCoefficients(){
	start = clock();	
	char *c_numberOfValues = "numberOfValues";
	char *startlinearConstraintCoefficients = "<linearConstraintCoefficients";
	char *endlinearConstraintCoefficients = "</linearConstraintCoefficients";
	// attributes
	char *attText = NULL;
	// others
	int i;
	int numberOfValues;
	// start parsing
	// burn white space
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// if, present we should be pointing to <linearConstraintCoefficients element if there -- it is not required
	for(i = 0; startlinearConstraintCoefficients[i]  == *ch; i++, ch++);
	if(i != 29) {
		//reset ch
		ch -= i;
		return false;
	}
	// find numberOfValues attribute
	// eat the white space
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	for(i = 0; c_numberOfValues[i]  == *ch; i++, ch++);
	if(i != 14) {osiltext = &ch[0]; osilerror("incorrect numberOfValues attribute in <linearConstraintCoefficients> tag");}
	// ch should be pointing to the first character after numberOfObjectives
	GETATTRIBUTETEXT;
	ch++;
	numberOfValues = atoimod( attText);
	osinstance->instanceData->linearConstraintCoefficients->numberOfValues = numberOfValues;
	
	// get rid of white space after the numberOfConstraints element
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// we should have either an />  OR an >
	if(*ch == '/'){
		ch++;
		if( *ch++ != '>') {osiltext = &ch[0]; osilerror("the linearConstraintCoefficients element does not have a proper closing");} 
		else{
			if(numberOfValues > 0) {osiltext = &ch[0]; osilerror("numberOfValues positive, but there are no objectives");}
			return false;
		}		
	}
	//  we better have an > 
	if( *ch++ != '>') {osiltext = &ch[0]; osilerror("the <linearConstraintCoefficients> element does not have a proper closing"); }
	// get rid of white space after the <linearConstraintCoefficients> element
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	parseStart();
	parseColIdx();
	parseRowIdx();
	if( (parseColIdx() == true) && (parseRowIdx() == true) ){osiltext = &ch[0]; osilerror("cannot store by both row and column");}
	parseValue();
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;	
	// get the </linearConstraintCoefficients> tag
	for(i = 0; endlinearConstraintCoefficients[ i]  == *ch; i++, ch++);
	if(i != 30) {osiltext = &ch[0]; osilerror( "cannot find </linearConstraintCoefficients> tag");}
	for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );	
	// better have >
	if(*ch != '>') {osiltext = &ch[0]; osilerror("improperly formed </linearConstraintCoefficients> tag");}
	ch++;	
	return true;
}//end parseLinearConstraintCoefficients

bool parseStart(){
	start = clock(); 
	char* startStart = "<start";
	char* endStart = "</start";
	char* startEl = "<el";
	char* endEl = "</el";
	int kount = 0;
	char* number = NULL;
	int i;
	bool foundEl = false;
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// if, present we should be pointing to <start element 
	for(i = 0; startStart[i]  == *ch; i++, ch++);
	if(i != 6) {
		//reset ch
		ch -= i;
		return false;
	}
	// get rid of white space after <start
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// we should have either an >
	if(*ch =! '>') {osiltext = &ch[0]; osilerror("improperly formed <start> element");}
	ch++;
	// get rid of white space
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// look for an <el> -- if none present must have b64 data
	for(i = 0; startEl[i]  == *ch; i++, ch++);
	if(i != 3) {
		//reset ch
		ch -= i;
		// call base64 parse here
		int dataSize = 0;
		char* b64string = parseBase64(&dataSize );
		if( b64string == NULL) return false;
		string base64decodeddata = Base64::decodeb64( b64string );
		int base64decodeddatalength = base64decodeddata.length();
		int *intvec = NULL;
		osinstance->instanceData->linearConstraintCoefficients->start->el = new int[(base64decodeddatalength/dataSize) ];
		intvec = (int*)&base64decodeddata[0];
		for(i = 0; i < (base64decodeddatalength/dataSize); i++){
			osinstance->instanceData->linearConstraintCoefficients->start->el[ i] = *(intvec++);
		}
	}
	else{
		foundEl = true;
		osinstance->instanceData->linearConstraintCoefficients->start->el = 
		new int[ max( osinstance->instanceData->constraints->numberOfConstraints,
		osinstance->instanceData->variables->numberOfVariables) + 1];
		while(foundEl){
			// start eating white space until an '>' is found,
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			if( *ch++ != '>') {osiltext = &ch[0]; osilerror("improperly formed <el> tag");}
			// eat white space again,
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// okay we better have a number, we will check later
			number = &*ch;
			// find the end of the number, it better be an </el>
			// find </el
			while( *ch != '<' && *ch  != '\0'){
				ch++;
			}
			// we better have a <, or not valid
			if(*ch != '<') {osiltext = &ch[0]; osilerror("cannot find an </el>");}
			// terminate the number string
			*ch++ = '\0';
			osinstance->instanceData->linearConstraintCoefficients->start->el[ kount++] = 
			atoimod( number);
			//printf("number = %s\n", number);
			// we are pointing to <, make sure there is /el
			for(i = 1; endEl[ i] == *ch; i++, ch++);
			if(i != 4 ) {osiltext = &ch[0]; osilerror("cannot fine an </el>");}
			// start eating white space until an '>' is found for </el>,
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
			if( *ch++ != '>') {osiltext = &ch[0]; osilerror("improperly formed </el> tag");}
			// eat white space again,
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// either have another <el> element or foundEl = false;
			for(i = 0; startEl[i]  == *ch; i++, ch++);
			if(i == 3) foundEl = true;
			else foundEl = false;
		}
		ch -= i;			
	}
	// get the </start> tag
	for(i = 0; endStart[i]  == *ch; i++, ch++);
	if(i != 7) {osiltext = &ch[0]; osilerror( "cannot find </start> tag");}
	for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );	
	// better have >
	if(*ch != '>') {osiltext = &ch[0]; osilerror("improperly formed </start> tag");	}
	ch++;	
	// get the end element
	finish = clock();
	duration = (double) (finish - start) / CLOCKS_PER_SEC; 
	printf("TIME TO PARSE STARTS  = %f\n", duration);
	return true;
}//end parseSart

bool parseRowIdx(){
	start = clock(); 
	char* startRowIdx = "<rowIdx";
	char* endRowIdx = "</rowIdx";
	char* startEl = "<el";
	char* endEl = "</el";
	int kount = 0;
	char* number = NULL;
	int i;
	bool foundEl = false;
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// if, present we should be pointing to <rowIdx element 
	for(i = 0; startRowIdx[i]  == *ch; i++, ch++);
	if(i != 7) {
		//reset ch
		ch -= i;
		return false;
	}
	// get rid of white space after <rowIdx
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// we should have either an >
	if(*ch =! '>') {osiltext = &ch[0]; osilerror("improperly formed <rowIdx> element");}
	ch++;
	// get rid of white space
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// look for an <el> -- if none present must have b64 data
	for(i = 0; startEl[i]  == *ch; i++, ch++);
	if(i != 3) {
		//reset ch
		ch -= i;
		// call base64 parse here
		int dataSize = 0;
		char* b64string = parseBase64(&dataSize );
		if( b64string == NULL) return false;
		string base64decodeddata = Base64::decodeb64( b64string );
		int base64decodeddatalength = base64decodeddata.length();
		int *intvec = NULL;
		osinstance->instanceData->linearConstraintCoefficients->rowIdx->el = new int[(base64decodeddatalength/dataSize) ];
		osinstance->instanceData->linearConstraintCoefficients->colIdx->el = NULL;
		intvec = (int*)&base64decodeddata[0];
		for(i = 0; i < (base64decodeddatalength/dataSize); i++){
			osinstance->instanceData->linearConstraintCoefficients->rowIdx->el[ i] = *(intvec++);
			kount++;
		}
	}
	else{
		foundEl = true;
		osinstance->instanceData->linearConstraintCoefficients->rowIdx->el = new int[ osinstance->instanceData->linearConstraintCoefficients->numberOfValues];
		osinstance->instanceData->linearConstraintCoefficients->colIdx->el = NULL;
		while(foundEl){
			// start munging white space until an '>' is found,
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
			if( *ch++ != '>') {osiltext = &ch[0]; osilerror("improperly formed <el> tag");}
			// mung white space again,
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
			// okay we better have a number, we will check later
			number = &*ch;
			// find the end of the number, it better be an </el>
			// find </el
			while( *ch != '<' && *ch  != '\0'){
				ch++;
			}
			// we better have a <, or not valid
			if(*ch != '<') {osiltext = &ch[0]; osilerror("cannot find an </el>");}
			// terminate the number string
			*ch++ = '\0';
			osinstance->instanceData->linearConstraintCoefficients->rowIdx->el[ kount++] = 
			atoimod( number);
			//printf("number = %s\n", number);
			// we are pointing to <, make sure there is /el
			for(i = 1; endEl[ i] == *ch; i++, ch++);
			if(i != 4 ) {osiltext = &ch[0]; osilerror("cannot fine an </el>");}
			// start munging white space until an '>' is found for </el>,
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			if( *ch++ != '>') {osiltext = &ch[0]; osilerror("improperly formed </el> tag");}
			// eat white space again,
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// either have another <el> element or foundEl = false;
			for(i = 0; startEl[i]  == *ch; i++, ch++);
			if(i == 3) foundEl = true;
			else foundEl = false;
		}
		 
		ch -= i;
	}
	// get the </rowIdx> tag
	for(i = 0; endRowIdx[i]  == *ch; i++, ch++);
	if(i != 8) {osiltext = &ch[0]; osilerror( "cannot find </rowIdx> tag");}
	for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );	
	// better have >
	if(*ch != '>') {osiltext = &ch[0]; osilerror("improperly formed </rowIdx> tag");}	
	ch++;	
	if(kount > osinstance->instanceData->linearConstraintCoefficients->numberOfValues)osilerror("numberOfLinearCoefficients attribute less than number of row indices found");
	if(kount < osinstance->instanceData->linearConstraintCoefficients->numberOfValues)osilerror("numberOfLinearCoefficients attribute greater than number of row indices found");
	finish = clock();
	duration = (double) (finish - start) / CLOCKS_PER_SEC; 
	printf("TIME TO PARSE ROW INDEXES = %f\n", duration);
 return true;
}//end parseRowIdx


bool parseColIdx(){
	start = clock(); 
	char* startColIdx = "<colIdx";
	char* endColIdx = "</colIdx";
	char* startEl = "<el";
	char* endEl = "</el";
	int kount = 0;
	char* number = NULL;
	int i;
	bool foundEl = false;
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// if, present we should be pointing to <colIdx element 
	for(i = 0; startColIdx[i]  == *ch; i++, ch++);
	if(i != 7) {
		//reset ch
		ch -= i;
		return false;
	}
	// get rid of white space after <colIdx
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// we should have either an >
	if(*ch =! '>') {osiltext = &ch[0]; osilerror("improperly formed <colIdx> element");}
	ch++;
	// get rid of white space
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// look for an <el> -- if none present must have b64 data
	for(i = 0; startEl[i]  == *ch; i++, ch++);
	if(i != 3) {
		//reset ch
		ch -= i;
		// call base64 parse here
		int dataSize = 0;
		char* b64string = parseBase64(&dataSize );
		if( b64string == NULL) return false;
		string base64decodeddata = Base64::decodeb64( b64string );
		int base64decodeddatalength = base64decodeddata.length();
		int *intvec = NULL;
		osinstance->instanceData->linearConstraintCoefficients->colIdx->el = new int[(base64decodeddatalength/dataSize) ];
		osinstance->instanceData->linearConstraintCoefficients->rowIdx->el = NULL;
		intvec = (int*)&base64decodeddata[0];
		for(i = 0; i < (base64decodeddatalength/dataSize); i++){
			osinstance->instanceData->linearConstraintCoefficients->colIdx->el[ i] = *(intvec++);
			kount++;
		}
	}
	else{
		foundEl = true;
		osinstance->instanceData->linearConstraintCoefficients->colIdx->el = new int[ osinstance->instanceData->linearConstraintCoefficients->numberOfValues];
		osinstance->instanceData->linearConstraintCoefficients->rowIdx->el = NULL;
		while(foundEl){
			// start eating white space until an '>' is found,
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
			if( *ch++ != '>') {osiltext = &ch[0]; osilerror("improperly formed <el> tag");}
			// eat white space again,
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
			// okay we better have a number, we will check later
			number = &*ch;
			// find the end of the number, it better be an </el>
			// find </el
			while( *ch != '<' && *ch  != '\0'){
				ch++;
			}
			// we better have a <, or not valid
			if(*ch != '<') {osiltext = &ch[0]; osilerror("cannot find an </el>");}
			// terminate the number string
			*ch++ = '\0';
			osinstance->instanceData->linearConstraintCoefficients->colIdx->el[ kount++] = 
			atoimod( number);
			//printf("number = %s\n", number);
			// we are pointing to <, make sure there is /el
			for(i = 1; endEl[ i] == *ch; i++, ch++);
			if( i != 4 ) {osiltext = &ch[0]; osilerror("cannot fine an </el>");}
			// start eating white space until an '>' is found for </el>,
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			if( *ch++ != '>') {osiltext = &ch[0]; osilerror("improperly formed </el> tag");}
			// eat white space again,
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// either have another <el> element or foundEl = false;
			for(i = 0; startEl[i]  == *ch; i++, ch++);
			if(i == 3) foundEl = true;
			else foundEl = false;
		}
		ch -= i;
	}
	// get the </colIdx> tag
	for(i = 0; endColIdx[i]  == *ch; i++, ch++);
	if(i != 8) {osiltext = &ch[0]; osilerror( "cannot find </rowIdx> tag");}
	for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );	
	// better have >
	if(*ch != '>') {osiltext = &ch[0]; osilerror("improperly formed </colIdx> tag");}	
	ch++;	
	if(kount > osinstance->instanceData->linearConstraintCoefficients->numberOfValues) {osiltext = &ch[0]; osilerror("numberOfLinearCoefficients attribute less than number of column indices found");}
	if(kount < osinstance->instanceData->linearConstraintCoefficients->numberOfValues) {osiltext = &ch[0]; osilerror("numberOfLinearCoefficients attribute greater than number of column indices found");}
	finish = clock();
	duration = (double) (finish - start) / CLOCKS_PER_SEC; 
	printf("TIME TO PARSE COLUMN INDEXES = %f\n", duration);
 return true;
}//end parseColIdx


bool parseValue(){
	start = clock(); 
	char* startValue = "<value";
	char* endValue = "</value";
	char* startEl = "<el";
	char* endEl = "</el";
	int kount = 0;
	char* number = NULL;
	int i;
	bool foundEl = false;
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// if, present we should be pointing to <rowIdx element 
	for(i = 0; startValue[i]  == *ch; i++, ch++);
	if(i != 6) {
		//reset ch
		ch -= i;
		return false;
	}
	// get rid of white space after <value
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// we should have either an >
	if(*ch =! '>') {osiltext = &ch[0]; osilerror("improperly formed <value> element");}
	ch++;
	// get rid of white space
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// look for an <el> -- if none present must have b64 data
	for(i = 0; startEl[i]  == *ch; i++, ch++);
	if(i != 3) {
		//reset ch
		ch -= i;
		// call base64 parse here
		int dataSize = 0;
		char* b64string = parseBase64(&dataSize );
		if( b64string == NULL) return false;
		string base64decodeddata = Base64::decodeb64( b64string );
		int base64decodeddatalength = base64decodeddata.length();
		double *doublevec = NULL;
		osinstance->instanceData->linearConstraintCoefficients->value->el = new double[(base64decodeddatalength/dataSize) ];
		doublevec = (double*)&base64decodeddata[0];
		for(i = 0; i < (base64decodeddatalength/dataSize); i++){
			osinstance->instanceData->linearConstraintCoefficients->value->el[ i] = *(doublevec++);
			kount++;
		}
	}
	else{
		foundEl = true;
		osinstance->instanceData->linearConstraintCoefficients->value->el = 
			new double[ osinstance->instanceData->linearConstraintCoefficients->numberOfValues];
		while( foundEl){
			// start eat white space until an '>' is found,
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			if( *ch++ != '>') {osiltext = &ch[0]; osilerror("improperly formed <el> tag");}
			// eat white space again,
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
			number = &*ch;
			// find the end of the number, it better be an </el>
			// find the < which begins the </el
			while( *ch != '<' && *ch != '\0'){
				ch++;
			}
			// we better have a <, or not valid
			if(*ch != '<') {osiltext = &ch[0]; osilerror("cannot find an </el>");}
			// terminate the number string
			*ch++ = '\0';
			osinstance->instanceData->linearConstraintCoefficients->value->el[ kount++] = 
			atofmod( number);
			//printf("number = %s\n", number);
			// we are pointing to <, make sure there is /el
			for(i = 1; endEl[ i] == *ch; i++, ch++);
			if( i != 4 ) {osiltext = &ch[0]; osilerror("cannot fine an </el>");}
			// start eating white space until an '>' is found for </el>,
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			if( *ch++ != '>') {osiltext = &ch[0]; osilerror("improperly formed </el> tag");}
			// eat white space again,
			for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );
			// either have another <el> element or foundEl = false;
			for(i = 0; startEl[i]  == *ch; i++, ch++);
			if(i == 3) foundEl = true;
			else foundEl = false;
		}	
		ch -= i;
	}
	// get the </value> tag
	for(i = 0; endValue[i]  == *ch; i++, ch++);
	if(i != 7) osilerror( "cannot find </value> tag");
	for(; ISWHITESPACE( *ch) || isnewline( *ch); ch++ );	
	// better have >
	if(*ch != '>') {osiltext = &ch[0]; osilerror("improperly formed </value> tag");	}
	ch++;	
	
	if(kount < osinstance->instanceData->linearConstraintCoefficients->numberOfValues){osiltext = &ch[0]; osilerror("numberOfLinearCoefficients greater than number of values found");}
	if(kount > osinstance->instanceData->linearConstraintCoefficients->numberOfValues){osiltext = &ch[0]; osilerror("numberOfLinearCoefficients less than the number of values found");}
	
	finish = clock();
	duration = (double) (finish - start) / CLOCKS_PER_SEC; 
	printf("TIME TO PARSE VALUES = %f\n", duration);
	return true;
}//end parseValue

bool parseObjCoef( int objcount){
	char* startCoef = "<coef";
	char* endCoef = "</coef";
	char* c_idx = "idx";
	int kount = 0;
	char* number = NULL;
	char* attText = NULL;
	int i, k;
	int numberOfObjCoef = 0; 
	bool foundCoef = false;
	
	numberOfObjCoef = osinstance->instanceData->objectives->obj[objcount]->numberOfObjCoef;
	if(numberOfObjCoef == 0) return false;
	
	for(k = 0; k < numberOfObjCoef; k++){
		for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
		// if, present we should be pointing to <coef element 
		for(i = 0; startCoef[i]  == *ch; i++, ch++);
		if(i != 5) {osiltext = &ch[0]; osilerror("improper <coef> element");}
		// get the idx attribute
		
		// find numberOfConstraints attribute
		// eat the white space after <coef
		for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
		for(i = 0; c_idx[i]  == *ch; i++, ch++);
		if(i != 3) {osiltext = &ch[0]; osilerror("incorrect idx attribute in objective function <idx> tag");}	
		// ch should be pointing to the first character after numberOfObjectives
		GETATTRIBUTETEXT;
		ch++;	
		// eat white space
		for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
		// if we don't have a > there is an error
		if(*ch++ != '>') {osiltext = &ch[0]; osilerror("incorrect <coef> element")	;}	
		// we should be pointing to first character after <coef>
		number = &*ch;
		// eat characters until we find <
		for(; *ch != '<' && *ch != '\0'; ch++); 
		osinstance->instanceData->objectives->obj[objcount]->coef[ k]->idx  = atoimod( attText);
		// we should be pointing to a < in the </coef> tag	
		*ch = '\0';
		osinstance->instanceData->objectives->obj[objcount]->coef[ k]->value  = atofmod( number);
		*ch = '<';
		for(i = 0; endCoef[i]  == *ch; i++, ch++);	
		if(i != 6)  {osiltext = &ch[0]; osilerror("improper </coef> element");}
		// get rid of white space after </coef
		for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
		// if we don't have a > there is an error
		if(*ch++ != '>') {osiltext = &ch[0]; osilerror("incorrect </coef> element")	;}
	}
	return true;
}//end parseObjCoef

char *parseBase64(int *dataSize ){
	char *sizeOf = "sizeOf";
	//char *numericType = "numericType";
	char *startBase64BinaryData = "<base64BinaryData";
	char *endBase64BinaryData = "</base64BinaryData";
	char *attText;
	char *b64string = NULL;
	int i;
	int endpoint;

	//
	// start parsing
	// the way flex works is that the ch should be pointing to variables
	for(i = 0; startBase64BinaryData[i]  == *ch; i++, ch++);
	if(i != 17) {
		ch -= i;
		return b64string;
	}
	// find sizeOf attribute
	// eat the white space
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	for(i = 0; sizeOf[i]  == *ch; i++, ch++);
	if(i != 6) {osiltext = &ch[0]; osilerror("incorrect sizeOf attribute in <base64BinaryData> element");}	
	// ch should be pointing to the first character after sizeOf
	GETATTRIBUTETEXT;
	ch++;
	*dataSize = atoimod( attText);
	// since the element must contain b64 data,  this element must end with > 
	// eat the white space
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// better have an > sign or not valid
	if(*ch != '>' ) {osiltext = &ch[0]; osilerror("<base64BinaryData> element does not have a proper closing >");}
	ch++;
	// we are now pointing start of the data
	b64string = &*ch;
	// eat characters until we get to the </base64BinaryData element
	for(; *ch != '<' && *ch != '\0'; ch++);
	// we should be pointing to </base64BinaryData>
	for(i = 0; endBase64BinaryData[i]  == *ch; i++, ch++);
	if(i != 18) {osiltext = &ch[0];osilerror(" problem with <base64BinaryData> element");}
	ch[ -18] = '\0';
	// burn the white space
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	// better have an > sign or not valid
	if(*ch != '>' ) {osiltext = &ch[0]; osilerror("</base64BinaryData> element does not have a proper closing >");}
	ch++;
	for( ; ISWHITESPACE( *ch) || isnewline( *ch); ch++ ) ;
	return b64string;
}


char parseErrorDouble[50]  =  "an invalid value for xsd:double  ";
char parseErrorInteger[50] =  "an invalid value for xsd:int  ";


double atofmod(char *number){
	double val, power;
	int i;
	int sign = 1;
	int expsign, exppower, exptest;
	int endWhiteSpace;
	// modidfied atof from Kernighan and Ritchie
	for(i = 0;  ISWHITESPACE( number[ i]) || isnewline( number[ i]) ; i++);
	sign = (number[ i] == '-') ? -1 : 1;
	if (number[ i] == '+' || number[ i] == '-') i++;
	endWhiteSpace = i;
	for(val = 0.0; ISDIGIT( number[ i]); i++){
		val = 10.0 *val + (number[ i] - '0') ;
	}
	if (number[ i] == '.') {
		i++;
		for (power = 1.0; ISDIGIT(number[ i]); i++){
			val = 10.0*val + (number[ i] - '0');
			power *= 10.0;
		}
		val = val/power;
	}
	if(i == endWhiteSpace) {
	// we better have INF or NaN
		switch (number[ i]){
		case 'I':
			i++;
			if(number[ i++] == 'N' && number[i++] == 'F'){
				val = OSINFINITY;
				break;
			}
			else{
				osiltext = number; 
				osilerror( strcat(parseErrorDouble, number));
			}
		case 'N':
			i++;
			if(number[ i-2] != '+' &&  number[ i-2] != '-' && number[ i++] == 'a' && number[i++] == 'N'){
				val = OSNAN;
				break;
			}
			else{
				osiltext = number; 
				osilerror( strcat(parseErrorDouble, number));
			}

		default:
			osiltext = number; 
			osilerror( strcat(parseErrorDouble, number));
			break;
		}
	}
	else{
		if(number[i] == 'e' || number[i] == 'E' ){
			i++;
			// process exponential part of the term
			// we have ([eE][-+]?[0-9]+)?
			// we are not going to process a NAN or INF
			expsign = (number[ i] == '-') ? -1 : 1;
			if (number[ i] == '+' || number[ i] == '-') i++;
			// get the exponent power 
			//
			exptest = i;
			for(exppower = 0 ; ISDIGIT( number[ i]); i++){
				exppower = 10 *exppower + (number[ i] - '0') ;
			}
			if(i == exptest) {osiltext = &number[0]; osilerror( strcat(parseErrorDouble, number));}
			val = val*pow(10, expsign*exppower);
			//printf("number = %f\n", val);
		}
	}
	// if we are here we should having nothing but white space until the end of the number
	for( ; ISWHITESPACE( number[ i]) || isnewline( number[ i]) ; i++);
	if(number[i] == '\0'){
		return sign*val;
	}
	else {osiltext = &number[0]; osilerror( strcat(parseErrorDouble, number));}
}//end atofmod



int atoimod(char *number){
	// modidfied atoi from Kernighan and Ritchie
	int ival, power;
	int i, sign;
	int endWhiteSpace;
	for(i = 0; ISWHITESPACE( number[ i]) || isnewline( number[ i]) ; i++);
	endWhiteSpace = i;
	sign = (number[ i] == '-') ? -1 : 1;
	if (number[ i] == '+' || number[ i] == '-') i++;
	for(ival = 0; ISDIGIT( number[ i]); i++){
		ival = 10*ival + (number[ i] - '0') ;
	}
	if(i == endWhiteSpace) {osiltext = number; osilerror( strcat(parseErrorInteger, number));}
	// if we are here we should having nothing but white space until the end of the number
	for( ; ISWHITESPACE( number[ i]) || isnewline( number[ i]) ; i++);
	if(number[i] == '\0'){
		return sign*ival;
	}
	else {osiltext = number; osilerror(strcat(parseErrorInteger, number));}
}//end atoimod
